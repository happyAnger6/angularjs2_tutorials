/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(29);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// main.ts
	"use strict";
	__webpack_require__(2);
	__webpack_require__(3);
	var platform_browser_dynamic_1 = __webpack_require__(5);
	var app_module_1 = __webpack_require__(27);
	platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule)
	    .catch(function (err) { return console.log(err); });


/***/ },
/* 2 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	var Reflect;
	(function (Reflect) {
	    "use strict";
	    var hasOwn = Object.prototype.hasOwnProperty;
	    // feature test for Object.create support
	    var supportsCreate = typeof Object.create === "function";
	    // feature test for __proto__ support
	    var supportsProto = (function () {
	        var sentinel = {};
	        function __() { }
	        __.prototype = sentinel;
	        var instance = new __();
	        return instance.__proto__ === sentinel;
	    })();
	    // create an object in dictionary mode (a.k.a. "slow" mode in v8)
	    var createDictionary = supportsCreate ? function () { return MakeDictionary(Object.create(null)); } :
	        supportsProto ? function () { return MakeDictionary({ __proto__: null }); } :
	            function () { return MakeDictionary({}); };
	    var HashMap;
	    (function (HashMap) {
	        var downLevel = !supportsCreate && !supportsProto;
	        HashMap.has = downLevel
	            ? function (map, key) { return hasOwn.call(map, key); }
	            : function (map, key) { return key in map; };
	        HashMap.get = downLevel
	            ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
	            : function (map, key) { return map[key]; };
	    })(HashMap || (HashMap = {}));
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var Metadata = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Example = Reflect.decorate(decoratorsArray, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(Example, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(Example.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsObject(target))
	                throw new TypeError();
	            if (IsUndefined(targetKey))
	                throw new TypeError();
	            if (!IsObject(targetDescriptor))
	                throw new TypeError();
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsObject(target))
	                throw new TypeError();
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators))
	                throw new TypeError();
	            if (!IsConstructor(target))
	                throw new TypeError();
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class Example {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class Example {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target))
	                    throw new TypeError();
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target))
	                    throw new TypeError();
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, Example);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class Example {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", Example);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#deletemetadata-metadatakey-p-
	        if (!IsObject(target))
	            throw new TypeError();
	        if (!IsUndefined(targetKey))
	            targetKey = ToPropertyKey(targetKey);
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);
	        if (IsUndefined(metadataMap))
	            return false;
	        if (!metadataMap.delete(metadataKey))
	            return false;
	        if (metadataMap.size > 0)
	            return true;
	        var targetMetadata = Metadata.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0)
	            return true;
	        Metadata.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated))
	                    throw new TypeError();
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated))
	                    throw new TypeError();
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = Metadata.get(target);
	        if (!targetMetadata) {
	            if (!create)
	                return undefined;
	            targetMetadata = new _Map();
	            Metadata.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create)
	                return undefined;
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return true;
	        var parent = GetPrototypeOf(O);
	        return parent !== null ? OrdinaryHasMetadata(MetadataKey, parent, P) : false;
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
	        return metadataMap !== undefined && Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn)
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        var parent = GetPrototypeOf(O);
	        return parent !== null ? OrdinaryGetMetadata(MetadataKey, parent, P) : undefined;
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);
	        return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null)
	            return ownKeys;
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0)
	            return ownKeys;
	        if (ownKeys.length <= 0)
	            return parentKeys;
	        var keys = new _Set();
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            keys.add(key);
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            keys.add(key);
	        }
	        return getKeys(keys);
	    }
	    // https://github.com/rbuckton/ReflectDecorators/blob/master/spec/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);
	        var keys = [];
	        if (metadataMap)
	            forEach(metadataMap, function (_, key) { return keys.push(key); });
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray ? Array.isArray(x) : x instanceof Array || Object.prototype.toString.call(x) === "[object Array]";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        return IsSymbol(value) ? value : String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype)
	            return proto;
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
	        // Try to determine the superclass Exampleonstructor. Compatible implementations
	        // must either set __proto__ on a subclass Exampleonstructor to the superclass Exampleonstructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype)
	            return proto;
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype)
	            return proto;
	        // If the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function")
	            return proto;
	        // If we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O)
	            return proto;
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    function IteratorStep(iterator) {
	        var result = iterator.next();
	        return result.done ? undefined : result;
	    }
	    function IteratorClose(iterator) {
	        var f = iterator["return"];
	        if (f)
	            f.call(iterator);
	    }
	    function forEach(source, callback, thisArg) {
	        var entries = source.entries;
	        if (typeof entries === "function") {
	            var iterator = entries.call(source);
	            var result;
	            try {
	                while (result = IteratorStep(iterator)) {
	                    var _a = result.value, key = _a[0], value = _a[1];
	                    callback.call(thisArg, value, key, source);
	                }
	            }
	            finally {
	                if (result)
	                    IteratorClose(iterator);
	            }
	        }
	        else {
	            var forEach_1 = source.forEach;
	            if (typeof forEach_1 === "function") {
	                forEach_1.call(source, callback, thisArg);
	            }
	        }
	    }
	    function getKeys(source) {
	        var keys = [];
	        forEach(source, function (_, key) { keys.push(key); });
	        return keys;
	    }
	    // naive MapIterator shim
	    function CreateMapIterator(keys, values, kind) {
	        var index = 0;
	        return {
	            next: function () {
	                if ((keys || values) && index < (keys || values).length) {
	                    var current = index++;
	                    switch (kind) {
	                        case "key": return { value: keys[current], done: false };
	                        case "value": return { value: values[current], done: false };
	                        case "key+value": return { value: [keys[current], values[current]], done: false };
	                    }
	                }
	                keys = undefined;
	                values = undefined;
	                return { value: undefined, done: true };
	            },
	            "throw": function (error) {
	                if (keys || values) {
	                    keys = undefined;
	                    values = undefined;
	                }
	                throw error;
	            },
	            "return": function (value) {
	                if (keys || values) {
	                    keys = undefined;
	                    values = undefined;
	                }
	                return { value: value, done: true };
	            }
	        };
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        return (function () {
	            function Map() {
	                this._keys = [];
	                this._values = [];
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            }
	            Object.defineProperty(Map.prototype, "size", {
	                get: function () { return this._keys.length; },
	                enumerable: true,
	                configurable: true
	            });
	            Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
	            Map.prototype.get = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                return index >= 0 ? this._values[index] : undefined;
	            };
	            Map.prototype.set = function (key, value) {
	                var index = this._find(key, /*insert*/ true);
	                this._values[index] = value;
	                return this;
	            };
	            Map.prototype.delete = function (key) {
	                var index = this._find(key, /*insert*/ false);
	                if (index >= 0) {
	                    var size = this._keys.length;
	                    for (var i = index + 1; i < size; i++) {
	                        this._keys[i - 1] = this._keys[i];
	                        this._values[i - 1] = this._values[i];
	                    }
	                    this._keys.length--;
	                    this._values.length--;
	                    this._cacheKey = cacheSentinel;
	                    this._cacheIndex = -2;
	                    return true;
	                }
	                return false;
	            };
	            Map.prototype.clear = function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cacheKey = cacheSentinel;
	                this._cacheIndex = -2;
	            };
	            Map.prototype.keys = function () { return CreateMapIterator(this._keys, /*values*/ undefined, "key"); };
	            Map.prototype.values = function () { return CreateMapIterator(/*keys*/ undefined, this._values, "value"); };
	            Map.prototype.entries = function () { return CreateMapIterator(this._keys, this._values, "key+value"); };
	            Map.prototype._find = function (key, insert) {
	                if (this._cacheKey === key)
	                    return this._cacheIndex;
	                var index = this._keys.indexOf(key);
	                if (index < 0 && insert) {
	                    index = this._keys.length;
	                    this._keys.push(key);
	                    this._values.push(undefined);
	                }
	                return this._cacheKey = key, this._cacheIndex = index;
	            };
	            return Map;
	        })();
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        return (function () {
	            function Set() {
	                this._map = new _Map();
	            }
	            Object.defineProperty(Set.prototype, "size", {
	                get: function () { return this._map.size; },
	                enumerable: true,
	                configurable: true
	            });
	            Set.prototype.has = function (value) { return this._map.has(value); };
	            Set.prototype.add = function (value) { return this._map.set(value, value), this; };
	            Set.prototype.delete = function (value) { return this._map.delete(value); };
	            Set.prototype.clear = function () { this._map.clear(); };
	            Set.prototype.keys = function () { return this._map.keys(); };
	            Set.prototype.values = function () { return this._map.values(); };
	            Set.prototype.entries = function () { return this._map.entries(); };
	            return Set;
	        })();
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var keys = createDictionary();
	        var rootKey = CreateUniqueKey();
	        return (function () {
	            function WeakMap() {
	                this._key = CreateUniqueKey();
	            }
	            WeakMap.prototype.has = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.has(table, this._key) : false;
	            };
	            WeakMap.prototype.get = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? HashMap.get(table, this._key) : undefined;
	            };
	            WeakMap.prototype.set = function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ true);
	                table[this._key] = value;
	                return this;
	            };
	            WeakMap.prototype.delete = function (target) {
	                var table = GetOrCreateWeakMapTable(target, /*create*/ false);
	                return table !== undefined ? delete table[this._key] : false;
	            };
	            WeakMap.prototype.clear = function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            };
	            return WeakMap;
	        })();
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i)
	                buffer[i] = Math.random() * 0xff | 0;
	            return buffer;
	        }
	        function GenRandomBytes(size) {
	            if (typeof Uint8Array === "function") {
	                if (typeof crypto !== "undefined")
	                    return crypto.getRandomValues(new Uint8Array(size));
	                if (typeof msCrypto !== "undefined")
	                    return msCrypto.getRandomValues(new Uint8Array(size));
	                return FillRandomBytes(new Uint8Array(size), size);
	            }
	            return FillRandomBytes(new Array(size), size);
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8)
	                    result += "-";
	                if (byte < 16)
	                    result += "0";
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do
	                key = "@@WeakMap@@" + CreateUUID();
	            while (HashMap.has(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create)
	                    return undefined;
	                Object.defineProperty(target, rootKey, { value: createDictionary() });
	            }
	            return target[rootKey];
	        }
	    }
	    // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
	    function MakeDictionary(obj) {
	        obj.__DICTIONARY_MODE__ = 1;
	        delete obj.____DICTIONARY_MODE__;
	        return obj;
	    }
	    // patch global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    if (hasOwn.call(Reflect, p)) {
	                        __global.Reflect[p] = Reflect[p];
	                    }
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
	     true ? factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (factory());
	}(this, (function () { 'use strict';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */


	var Zone$1 = (function (global) {
	    if (global.Zone) {
	        throw new Error('Zone already loaded.');
	    }
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate =
	                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Zone.assertZonePatched = function () {
	            if (global.Promise !== ZoneAwarePromise) {
	                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                    'has been overwritten.\n' +
	                    'Most likely cause is that a Promise polyfill has been loaded ' +
	                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                    'If you must load one, do so before loading zone.js.)');
	            }
	        };
	        Object.defineProperty(Zone, "current", {
	            get: function () {
	                return _currentZone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () {
	                return _currentTask;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () {
	                return this._parent;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () {
	                return this._name;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZone = oldZone;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZone = oldZone;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            task.runCount++;
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name +
	                    '; Execution: ' + this.name + ')');
	            var previousTask = _currentTask;
	            _currentTask = task;
	            var oldZone = _currentZone;
	            _currentZone = this;
	            try {
	                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZone = oldZone;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            var value = this._zoneDelegate.cancelTask(this, task);
	            task.runCount = -1;
	            task.cancelFn = null;
	            return value;
	        };
	        Zone.__symbol__ = __symbol__;
	        return Zone;
	    }());
	    
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._interceptZS =
	                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt =
	                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt =
	                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._handleErrorZS =
	                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt =
	                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._scheduleTaskZS =
	                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt =
	                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._invokeTaskZS =
	                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt =
	                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._cancelTaskZS =
	                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt =
	                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
	            this._hasTaskDlgt =
	                zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS ?
	                this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source) :
	                callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS ?
	                this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source) :
	                callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS ?
	                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error) :
	                true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            try {
	                if (this._scheduleTaskZS) {
	                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
	                }
	                else if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == 'microTask') {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	                return task;
	            }
	            finally {
	                if (targetZone == this.zone) {
	                    this._updateTaskCount(task.type, 1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            try {
	                return this._invokeTaskZS ?
	                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) :
	                    task.callback.apply(applyThis, applyArgs);
	            }
	            finally {
	                if (targetZone == this.zone && (task.type != 'eventTask') &&
	                    !(task.data && task.data.isPeriodic)) {
	                    this._updateTaskCount(task.type, -1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
	            }
	            else if (!task.cancelFn) {
	                throw new Error('Task does not support cancellation, or is already canceled.');
	            }
	            else {
	                value = task.cancelFn(task);
	            }
	            if (targetZone == this.zone) {
	                // this should not be in the finally block, because exceptions assume not canceled.
	                this._updateTaskCount(task.type, -1);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            return this._hasTaskZS &&
	                this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                try {
	                    this.hasTask(this.zone, isEmpty);
	                }
	                finally {
	                    if (this._parentDelegate) {
	                        this._parentDelegate._updateTaskCount(type, count);
	                    }
	                }
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
	            this.runCount = 0;
	            this.type = type;
	            this.zone = zone;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    return zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return Object.prototype.toString.call(this);
	            }
	        };
	        return ZoneTask;
	    }());
	    function __symbol__(name) {
	        return '__zone_symbol__' + name;
	    }
	    
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZone = new Zone(null, null);
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames == 0 && _microTaskQueue.length == 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function() {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () {
	                            throw uncaughtPromiseError;
	                        });
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) {
	        return value;
	    }
	    function forwardRejection(rejection) {
	        return ZoneAwarePromise.reject(rejection);
	    }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            resolvePromise(promise, state, v);
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    function resolvePromise(promise, state, value) {
	        if (promise[symbolState] === UNRESOLVED) {
	            if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (isThenable(value)) {
	                value.then(makeResolver(promise, state), makeResolver(promise, false));
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error('Uncaught (in promise): ' + value +
	                            (value && value.stack ? '\n' + value.stack : ''));
	                    }
	                    catch (e) {
	                        var error_1 = e;
	                        error_1.rejection = value;
	                        error_1.promise = promise;
	                        error_1.zone = Zone.current;
	                        error_1.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error_1);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (e) {
	                resolvePromise(promise, false, e);
	            }
	        }
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                _a = [res, rej], resolve = _a[0], reject = _a[1];
	                var _a;
	            });
	            function onResolve(value) {
	                promise && (promise = null || resolve(value));
	            }
	            function onReject(error) {
	                promise && (promise = null || reject(error));
	            }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var count = 0;
	            var resolvedValues = [];
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (!count) {
	                        resolve(resolvedValues);
	                    }
	                }; })(count), reject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    // Protect against aggressive optimizers dropping seemingly unused properties.
	    // E.g. Closure Compiler in advanced mode.
	    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	    var NativePromise = global[__symbol__('Promise')] = global.Promise;
	    global.Promise = ZoneAwarePromise;
	    function patchThen(NativePromise) {
	        var NativePromiseProtototype = NativePromise.prototype;
	        var NativePromiseThen = NativePromiseProtototype[__symbol__('then')] =
	            NativePromiseProtototype.then;
	        NativePromiseProtototype.then = function (onResolve, onReject) {
	            var nativePromise = this;
	            return new ZoneAwarePromise(function (resolve, reject) {
	                NativePromiseThen.call(nativePromise, resolve, reject);
	            })
	                .then(onResolve, onReject);
	        };
	    }
	    if (NativePromise) {
	        patchThen(NativePromise);
	        if (typeof global['fetch'] !== 'undefined') {
	            var fetchPromise = void 0;
	            try {
	                // In MS Edge this throws
	                fetchPromise = global['fetch']();
	            }
	            catch (e) {
	                // In Chrome this throws instead.
	                fetchPromise = global['fetch']('about:blank');
	            }
	            // ignore output to prevent error;
	            fetchPromise.then(function () { return null; }, function () { return null; });
	            if (fetchPromise.constructor != NativePromise &&
	                fetchPromise.constructor != ZoneAwarePromise) {
	                patchThen(fetchPromise.constructor);
	            }
	        }
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    return global.Zone = Zone;
	})(typeof window === 'object' && window || typeof self === 'object' && self || global);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var zoneSymbol = Zone['__symbol__'];
	var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}

	function patchPrototype(prototype, fnNames) {
	    var source = prototype.constructor['name'];
	    var _loop_1 = function(i) {
	        var name_1 = fnNames[i];
	        var delegate = prototype[name_1];
	        if (delegate) {
	            prototype[name_1] = (function (delegate) {
	                return function () {
	                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                };
	            })(delegate);
	        }
	    };
	    for (var i = 0; i < fnNames.length; i++) {
	        _loop_1(i);
	    }
	}

	var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	var isNode = (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]');
	var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = '_' + prop;
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result)
	                    event.preventDefault();
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    // The getter would return undefined for unassigned properties but the default value of an
	    // unassigned property is null
	    desc.get = function () {
	        return this[_prop] || null;
	    };
	    Object.defineProperty(obj, prop, desc);
	}

	function patchOnProperties(obj, properties) {
	    var onProperties = [];
	    for (var prop in obj) {
	        if (prop.substr(0, 2) == 'on') {
	            onProperties.push(prop);
	        }
	    }
	    for (var j = 0; j < onProperties.length; j++) {
	        patchProperty(obj, onProperties[j]);
	    }
	    if (properties) {
	        for (var i = 0; i < properties.length; i++) {
	            patchProperty(obj, 'on' + properties[i]);
	        }
	    }
	}

	var EVENT_TASKS = zoneSymbol('eventTasks');
	// For EventTarget
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            if (data.handler === handler && data.useCapturing === capture && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    eventTasks.push(eventTask);
	}
	function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (allowDuplicates === void 0) { allowDuplicates = false; }
	    var addFnSymbol = zoneSymbol(addFnName);
	    var removeFnSymbol = zoneSymbol(removeFnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    function scheduleEventListener(eventTask) {
	        var meta = eventTask.data;
	        attachRegisteredEvent(meta.target, eventTask);
	        return meta.target[addFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
	    }
	    function cancelEventListener(eventTask) {
	        var meta = eventTask.data;
	        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	        meta.target[removeFnSymbol](meta.eventName, eventTask.invoke, meta.useCapturing);
	    }
	    return function zoneAwareAddListener(self, args) {
	        var eventName = args[0];
	        var handler = args[1];
	        var useCapturing = args[2] || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var target = self || _global$1;
	        var delegate = null;
	        if (typeof handler == 'function') {
	            delegate = handler;
	        }
	        else if (handler && handler.handleEvent) {
	            delegate = function (event) { return handler.handleEvent(event); };
	        }
	        var validZoneHandler = false;
	        try {
	            // In cross site contexts (such as WebDriver frameworks like Selenium),
	            // accessing the handler object here will cause an exception to be thrown which
	            // will fail tests prematurely.
	            validZoneHandler = handler && handler.toString() === '[object FunctionWrapper]';
	        }
	        catch (e) {
	            // Returning nothing here is fine, because objects in a cross-site context are unusable
	            return;
	        }
	        // Ignore special listeners of IE11 & Edge dev tools, see
	        // https://github.com/angular/zone.js/issues/150
	        if (!delegate || validZoneHandler) {
	            return target[addFnSymbol](eventName, handler, useCapturing);
	        }
	        if (!allowDuplicates) {
	            var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
	            if (eventTask) {
	                // we already registered, so this will have noop.
	                return target[addFnSymbol](eventName, eventTask.invoke, useCapturing);
	            }
	        }
	        var zone = Zone.current;
	        var source = target.constructor['name'] + '.' + addFnName + ':' + eventName;
	        var data = {
	            target: target,
	            eventName: eventName,
	            name: eventName,
	            useCapturing: useCapturing,
	            handler: handler
	        };
	        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	    };
	}
	function makeZoneAwareRemoveListener(fnName, useCapturingParam) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    var symbol = zoneSymbol(fnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    return function zoneAwareRemoveListener(self, args) {
	        var eventName = args[0];
	        var handler = args[1];
	        var useCapturing = args[2] || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var target = self || _global$1;
	        var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
	        if (eventTask) {
	            eventTask.zone.cancelTask(eventTask);
	        }
	        else {
	            target[symbol](eventName, handler, useCapturing);
	        }
	    };
	}

	var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
	var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
	function patchEventTargetMethods(obj) {
	    if (obj && obj.addEventListener) {
	        patchMethod(obj, ADD_EVENT_LISTENER, function () { return zoneAwareAddEventListener; });
	        patchMethod(obj, REMOVE_EVENT_LISTENER, function () { return zoneAwareRemoveEventListener; });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	var originalInstanceKey = zoneSymbol('originalInstance');
	// wrap some native API on `window`
	function patchClass(className) {
	    var OriginalClass = _global$1[className];
	    if (!OriginalClass)
	        return;
	    _global$1[className] = function () {
	        var a = bindArguments(arguments, className);
	        switch (a.length) {
	            case 0:
	                this[originalInstanceKey] = new OriginalClass();
	                break;
	            case 1:
	                this[originalInstanceKey] = new OriginalClass(a[0]);
	                break;
	            case 2:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                break;
	            case 3:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                break;
	            case 4:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                break;
	            default:
	                throw new Error('Arg list too long.');
	        }
	    };
	    var instance = new OriginalClass(function () { });
	    var prop;
	    for (prop in instance) {
	        // https://bugs.webkit.org/show_bug.cgi?id=44721
	        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	            continue;
	        (function (prop) {
	            if (typeof instance[prop] === 'function') {
	                _global$1[className].prototype[prop] = function () {
	                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                };
	            }
	            else {
	                Object.defineProperty(_global$1[className].prototype, prop, {
	                    set: function (fn) {
	                        if (typeof fn === 'function') {
	                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
	                        }
	                        else {
	                            this[originalInstanceKey][prop] = fn;
	                        }
	                    },
	                    get: function () {
	                        return this[originalInstanceKey][prop];
	                    }
	                });
	            }
	        }(prop));
	    }
	    for (prop in OriginalClass) {
	        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	            _global$1[className][prop] = OriginalClass[prop];
	        }
	    }
	}

	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (e) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    var tasksByHandleId = {};
	    function scheduleTask(task) {
	        var data = task.data;
	        data.args[0] = function () {
	            task.invoke.apply(this, arguments);
	            delete tasksByHandleId[data.handleId];
	        };
	        data.handleId = setNative.apply(window, data.args);
	        tasksByHandleId[data.handleId] = task;
	        return task;
	    }
	    function clearTask(task) {
	        delete tasksByHandleId[task.data.handleId];
	        return clearNative(task.data.handleId);
	    }
	    setNative =
	        patchMethod(window, setName, function (delegate) { return function (self, args) {
	            if (typeof args[0] === 'function') {
	                var zone = Zone.current;
	                var options = {
	                    handleId: null,
	                    isPeriodic: nameSuffix === 'Interval',
	                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                    args: args
	                };
	                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	                if (!task) {
	                    return task;
	                }
	                // Node.js must additionally support the ref and unref functions.
	                var handle = task.data.handleId;
	                if (handle.ref && handle.unref) {
	                    task.ref = handle.ref.bind(handle);
	                    task.unref = handle.unref.bind(handle);
	                }
	                return task;
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(window, args);
	            }
	        }; });
	    clearNative =
	        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
	            if (task && typeof task.type === 'string') {
	                if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
	                    // Do not cancel already canceled functions
	                    task.zone.cancelTask(task);
	                }
	            }
	            else {
	                // cause an error by calling it directly.
	                delegate.apply(window, args);
	            }
	        }; });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/*
	 * This is necessary for Chrome and Chrome mobile, to enable
	 * things like redefining `createdCallback` on an element.
	 */
	var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =
	    Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = zoneSymbol('unconfigurables');
	function propertyPatch() {
	    Object.defineProperty = function (obj, prop, desc) {
	        if (isUnconfigurable(obj, prop)) {
	            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	        }
	        var originalConfigurableFlag = desc.configurable;
	        if (prop !== 'prototype') {
	            desc = rewriteDescriptor(obj, prop, desc);
	        }
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    };
	    Object.defineProperties = function (obj, props) {
	        Object.keys(props).forEach(function (prop) {
	            Object.defineProperty(obj, prop, props[prop]);
	        });
	        return obj;
	    };
	    Object.create = function (obj, proto) {
	        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	            Object.keys(proto).forEach(function (prop) {
	                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	            });
	        }
	        return _create(obj, proto);
	    };
	    Object.getOwnPropertyDescriptor = function (obj, prop) {
	        var desc = _getOwnPropertyDescriptor(obj, prop);
	        if (isUnconfigurable(obj, prop)) {
	            desc.configurable = false;
	        }
	        return desc;
	    };
	}

	function _redefineProperty(obj, prop, desc) {
	    var originalConfigurableFlag = desc.configurable;
	    desc = rewriteDescriptor(obj, prop, desc);
	    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	}

	function isUnconfigurable(obj, prop) {
	    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	function rewriteDescriptor(obj, prop, desc) {
	    desc.configurable = true;
	    if (!desc.configurable) {
	        if (!obj[unconfigurablesKey]) {
	            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	        }
	        obj[unconfigurablesKey][prop] = true;
	    }
	    return desc;
	}
	function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	    try {
	        return _defineProperty(obj, prop, desc);
	    }
	    catch (e) {
	        if (desc.configurable) {
	            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
	            // retry with the original flag value
	            if (typeof originalConfigurableFlag == 'undefined') {
	                delete desc.configurable;
	            }
	            else {
	                desc.configurable = originalConfigurableFlag;
	            }
	            try {
	                return _defineProperty(obj, prop, desc);
	            }
	            catch (e) {
	                var descJson = null;
	                try {
	                    descJson = JSON.stringify(desc);
	                }
	                catch (e) {
	                    descJson = descJson.toString();
	                }
	                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + e);
	            }
	        }
	        else {
	            throw e;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex'
	    .split(',');
	var EVENT_TARGET = 'EventTarget';
	function eventTargetPatch(_global) {
	    var apis = [];
	    var isWtf = _global['wtf'];
	    if (isWtf) {
	        // Workaround for: https://github.com/google/tracing-framework/issues/555
	        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	    }
	    else if (_global[EVENT_TARGET]) {
	        apis.push(EVENT_TARGET);
	    }
	    else {
	        // Note: EventTarget is not available in all browsers,
	        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	        apis = NO_EVENT_TARGET;
	    }
	    for (var i = 0; i < apis.length; i++) {
	        var type = _global[apis[i]];
	        patchEventTargetMethods(type && type.prototype);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// we have to patch the instance since the proto is non-configurable
	function apply(_global) {
	    var WS = _global.WebSocket;
	    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	    // On older Chrome, no need since EventTarget was already patched
	    if (!_global.EventTarget) {
	        patchEventTargetMethods(WS.prototype);
	    }
	    _global.WebSocket = function (a, b) {
	        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	        var proxySocket;
	        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	        if (onmessageDesc && onmessageDesc.configurable === false) {
	            proxySocket = Object.create(socket);
	            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
	                proxySocket[propName] = function () {
	                    return socket[propName].apply(socket, arguments);
	                };
	            });
	        }
	        else {
	            // we can patch the real socket
	            proxySocket = socket;
	        }
	        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
	        return proxySocket;
	    };
	    for (var prop in WS) {
	        _global.WebSocket[prop] = WS[prop];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'
	    .split(' ');
	function propertyDescriptorPatch(_global) {
	    if (isNode) {
	        return;
	    }
	    var supportsWebSocket = typeof WebSocket !== 'undefined';
	    if (canPatchViaPropertyDescriptor()) {
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (isBrowser) {
	            patchOnProperties(HTMLElement.prototype, eventNames);
	        }
	        patchOnProperties(XMLHttpRequest.prototype, null);
	        if (typeof IDBIndex !== 'undefined') {
	            patchOnProperties(IDBIndex.prototype, null);
	            patchOnProperties(IDBRequest.prototype, null);
	            patchOnProperties(IDBOpenDBRequest.prototype, null);
	            patchOnProperties(IDBDatabase.prototype, null);
	            patchOnProperties(IDBTransaction.prototype, null);
	            patchOnProperties(IDBCursor.prototype, null);
	        }
	        if (supportsWebSocket) {
	            patchOnProperties(WebSocket.prototype, null);
	        }
	    }
	    else {
	        // Safari, Android browsers (Jelly Bean)
	        patchViaCapturingAllTheEvents();
	        patchClass('XMLHttpRequest');
	        if (supportsWebSocket) {
	            apply(_global);
	        }
	    }
	}
	function canPatchViaPropertyDescriptor() {
	    if (isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
	        typeof Element !== 'undefined') {
	        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	        // IDL interface attributes are not configurable
	        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	        if (desc && !desc.configurable)
	            return false;
	    }
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
	        get: function () {
	            return true;
	        }
	    });
	    var req = new XMLHttpRequest();
	    var result = !!req.onreadystatechange;
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {});
	    return result;
	}

	var unboundKey = zoneSymbol('unbound');
	// Whenever any eventListener fires, we check the eventListener target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	    var _loop_1 = function(i) {
	        var property = eventNames[i];
	        var onproperty = 'on' + property;
	        self.addEventListener(property, function (event) {
	            var elt = event.target, bound, source;
	            if (elt) {
	                source = elt.constructor['name'] + '.' + onproperty;
	            }
	            else {
	                source = 'unknown.' + onproperty;
	            }
	            while (elt) {
	                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                    bound = Zone.current.wrap(elt[onproperty], source);
	                    bound[unboundKey] = elt[onproperty];
	                    elt[onproperty] = bound;
	                }
	                elt = elt.parentElement;
	            }
	        }, true);
	    };
	    for (var i = 0; i < eventNames.length; i++) {
	        _loop_1(i);
	    }
	    
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function registerElementPatch(_global) {
	    if (!isBrowser || !('registerElement' in _global.document)) {
	        return;
	    }
	    var _registerElement = document.registerElement;
	    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
	    document.registerElement = function (name, opts) {
	        if (opts && opts.prototype) {
	            callbacks.forEach(function (callback) {
	                var source = 'Document.registerElement::' + callback;
	                if (opts.prototype.hasOwnProperty(callback)) {
	                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	                    if (descriptor && descriptor.value) {
	                        descriptor.value = Zone.current.wrap(descriptor.value, source);
	                        _redefineProperty(opts.prototype, callback, descriptor);
	                    }
	                    else {
	                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                    }
	                }
	                else if (opts.prototype[callback]) {
	                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                }
	            });
	        }
	        return _registerElement.apply(document, [name, opts]);
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var set = 'set';
	var clear = 'clear';
	var blockingMethods = ['alert', 'prompt', 'confirm'];
	var _global = typeof window === 'object' && window || typeof self === 'object' && self || global;
	patchTimer(_global, set, clear, 'Timeout');
	patchTimer(_global, set, clear, 'Interval');
	patchTimer(_global, set, clear, 'Immediate');
	patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
	patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	for (var i = 0; i < blockingMethods.length; i++) {
	    var name = blockingMethods[i];
	    patchMethod(_global, name, function (delegate, symbol, name) {
	        return function (s, args) {
	            return Zone.current.run(delegate, _global, args, name);
	        };
	    });
	}
	eventTargetPatch(_global);
	propertyDescriptorPatch(_global);
	patchClass('MutationObserver');
	patchClass('WebKitMutationObserver');
	patchClass('FileReader');
	propertyPatch();
	registerElementPatch(_global);
	// Treat XMLHTTPRequest as a macrotask.
	patchXHR(_global);
	var XHR_TASK = zoneSymbol('xhrTask');
	var XHR_SYNC = zoneSymbol('xhrSync');
	function patchXHR(window) {
	    function findPendingTask(target) {
	        var pendingTask = target[XHR_TASK];
	        return pendingTask;
	    }
	    function scheduleTask(task) {
	        var data = task.data;
	        data.target.addEventListener('readystatechange', function () {
	            if (data.target.readyState === data.target.DONE) {
	                if (!data.aborted) {
	                    task.invoke();
	                }
	            }
	        });
	        var storedTask = data.target[XHR_TASK];
	        if (!storedTask) {
	            data.target[XHR_TASK] = task;
	        }
	        sendNative.apply(data.target, data.args);
	        return task;
	    }
	    function placeholderCallback() { }
	    function clearTask(task) {
	        var data = task.data;
	        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	        // to prevent it from firing. So instead, we store info for the event listener.
	        data.aborted = true;
	        return abortNative.apply(data.target, data.args);
	    }
	    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {
	        self[XHR_SYNC] = args[2] == false;
	        return openNative.apply(self, args);
	    }; });
	    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
	        var zone = Zone.current;
	        if (self[XHR_SYNC]) {
	            // if the XHR is sync there is no task to schedule, just execute the code.
	            return sendNative.apply(self, args);
	        }
	        else {
	            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };
	            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
	        }
	    }; });
	    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
	        var task = findPendingTask(self);
	        if (task && typeof task.type == 'string') {
	            // If the XHR has already completed, do nothing.
	            if (task.cancelFn == null) {
	                return;
	            }
	            task.zone.cancelTask(task);
	        }
	        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task
	        // to cancel. Do nothing.
	    }; });
	}
	/// GEO_LOCATION
	if (_global['navigator'] && _global['navigator'].geolocation) {
	    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
	}

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.0.0
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(6), __webpack_require__(7), __webpack_require__(25)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/platform-browser'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.platformBrowser));
	}(this, function (exports,_angular_compiler,_angular_core,_angular_platformBrowser) { 'use strict';

	    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var global$1 = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj !== undefined && obj !== null;
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	        NumberWrapper.equal = function (a, b) { return a === b; };
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        NumberWrapper.parseInt = function (text, radix) {
	            if (radix == 10) {
	                if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else if (radix == 16) {
	                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else {
	                var result = parseInt(text, radix);
	                if (!isNaN(result)) {
	                    return result;
	                }
	            }
	            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	        };
	        Object.defineProperty(NumberWrapper, "NaN", {
	            get: function () { return NaN; },
	            enumerable: true,
	            configurable: true
	        });
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        NumberWrapper.isNaN = function (value) { return isNaN(value); };
	        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	        return NumberWrapper;
	    }());

	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ResourceLoaderImpl = (function (_super) {
	        __extends(ResourceLoaderImpl, _super);
	        function ResourceLoaderImpl() {
	            _super.apply(this, arguments);
	        }
	        ResourceLoaderImpl.prototype.get = function (url) {
	            var resolve;
	            var reject;
	            var promise = new Promise(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var xhr = new XMLHttpRequest();
	            xhr.open('GET', url, true);
	            xhr.responseType = 'text';
	            xhr.onload = function () {
	                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	                // by IE10)
	                var response = isPresent(xhr.response) ? xhr.response : xhr.responseText;
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = xhr.status === 1223 ? 204 : xhr.status;
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = response ? 200 : 0;
	                }
	                if (200 <= status && status <= 300) {
	                    resolve(response);
	                }
	                else {
	                    reject("Failed to load " + url);
	                }
	            };
	            xhr.onerror = function () { reject("Failed to load " + url); };
	            xhr.send();
	            return promise;
	        };
	        ResourceLoaderImpl.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        ResourceLoaderImpl.ctorParameters = [];
	        return ResourceLoaderImpl;
	    }(_angular_compiler.ResourceLoader));

	    var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        {
	            provide: _angular_core.COMPILER_OPTIONS,
	            useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
	            multi: true
	        },
	    ];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	     * ResourceLoader.
	     *
	     * The template cache needs to be built and loaded into window.$templateCache
	     * via a separate mechanism.
	     */
	    var CachedResourceLoader = (function (_super) {
	        __extends$1(CachedResourceLoader, _super);
	        function CachedResourceLoader() {
	            _super.call(this);
	            this._cache = global$1.$templateCache;
	            if (this._cache == null) {
	                throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	            }
	        }
	        CachedResourceLoader.prototype.get = function (url) {
	            if (this._cache.hasOwnProperty(url)) {
	                return Promise.resolve(this._cache[url]);
	            }
	            else {
	                return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	            }
	        };
	        return CachedResourceLoader;
	    }(_angular_compiler.ResourceLoader));

	    var __platform_browser_dynamic_private__ = {
	        INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
	        ResourceLoaderImpl: ResourceLoaderImpl
	    };

	    /**
	     * @experimental
	     */
	    var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
	    /**
	     * @experimental API related to bootstrapping are still under review.
	     */
	    var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	    exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
	    exports.platformBrowserDynamic = platformBrowserDynamic;
	    exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;

	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.0.0
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(7)) :
	  typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	  (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var globalScope;
	  if (typeof window === 'undefined') {
	      if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	          // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	          globalScope = self;
	      }
	      else {
	          globalScope = global;
	      }
	  }
	  else {
	      globalScope = window;
	  }
	  // Need to declare a new variable for global here since TypeScript
	  // exports the original value of the symbol.
	  var global$1 = globalScope;
	  // TODO: remove calls to assert in production environment
	  // Note: Can't just export this and import in in other files
	  // as `assert` is a reserved keyword in Dart
	  global$1.assert = function assert(condition) {
	      // TODO: to be fixed properly via #2830, noop for now
	  };
	  function isPresent(obj) {
	      return obj !== undefined && obj !== null;
	  }
	  function isBlank(obj) {
	      return obj === undefined || obj === null;
	  }
	  function isString(obj) {
	      return typeof obj === 'string';
	  }
	  function isStringMap(obj) {
	      return typeof obj === 'object' && obj !== null;
	  }
	  var STRING_MAP_PROTO = Object.getPrototypeOf({});
	  function isStrictStringMap(obj) {
	      return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	  }
	  function isArray(obj) {
	      return Array.isArray(obj);
	  }
	  function stringify(token) {
	      if (typeof token === 'string') {
	          return token;
	      }
	      if (token === undefined || token === null) {
	          return '' + token;
	      }
	      if (token.overriddenName) {
	          return token.overriddenName;
	      }
	      if (token.name) {
	          return token.name;
	      }
	      var res = token.toString();
	      var newLineIndex = res.indexOf('\n');
	      return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	  }
	  var StringWrapper = (function () {
	      function StringWrapper() {
	      }
	      StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	      StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	      StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	      StringWrapper.equals = function (s, s2) { return s === s2; };
	      StringWrapper.stripLeft = function (s, charVal) {
	          if (s && s.length) {
	              var pos = 0;
	              for (var i = 0; i < s.length; i++) {
	                  if (s[i] != charVal)
	                      break;
	                  pos++;
	              }
	              s = s.substring(pos);
	          }
	          return s;
	      };
	      StringWrapper.stripRight = function (s, charVal) {
	          if (s && s.length) {
	              var pos = s.length;
	              for (var i = s.length - 1; i >= 0; i--) {
	                  if (s[i] != charVal)
	                      break;
	                  pos--;
	              }
	              s = s.substring(0, pos);
	          }
	          return s;
	      };
	      StringWrapper.replace = function (s, from, replace) {
	          return s.replace(from, replace);
	      };
	      StringWrapper.replaceAll = function (s, from, replace) {
	          return s.replace(from, replace);
	      };
	      StringWrapper.slice = function (s, from, to) {
	          if (from === void 0) { from = 0; }
	          if (to === void 0) { to = null; }
	          return s.slice(from, to === null ? undefined : to);
	      };
	      StringWrapper.replaceAllMapped = function (s, from, cb) {
	          return s.replace(from, function () {
	              var matches = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  matches[_i - 0] = arguments[_i];
	              }
	              // Remove offset & string from the result array
	              matches.splice(-2, 2);
	              // The callback receives match, p1, ..., pn
	              return cb(matches);
	          });
	      };
	      StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	      StringWrapper.compare = function (a, b) {
	          if (a < b) {
	              return -1;
	          }
	          else if (a > b) {
	              return 1;
	          }
	          else {
	              return 0;
	          }
	      };
	      return StringWrapper;
	  }());
	  var StringJoiner = (function () {
	      function StringJoiner(parts) {
	          if (parts === void 0) { parts = []; }
	          this.parts = parts;
	      }
	      StringJoiner.prototype.add = function (part) { this.parts.push(part); };
	      StringJoiner.prototype.toString = function () { return this.parts.join(''); };
	      return StringJoiner;
	  }());
	  var NumberWrapper = (function () {
	      function NumberWrapper() {
	      }
	      NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	      NumberWrapper.equal = function (a, b) { return a === b; };
	      NumberWrapper.parseIntAutoRadix = function (text) {
	          var result = parseInt(text);
	          if (isNaN(result)) {
	              throw new Error('Invalid integer literal when parsing ' + text);
	          }
	          return result;
	      };
	      NumberWrapper.parseInt = function (text, radix) {
	          if (radix == 10) {
	              if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                  return parseInt(text, radix);
	              }
	          }
	          else if (radix == 16) {
	              if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                  return parseInt(text, radix);
	              }
	          }
	          else {
	              var result = parseInt(text, radix);
	              if (!isNaN(result)) {
	                  return result;
	              }
	          }
	          throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	      };
	      Object.defineProperty(NumberWrapper, "NaN", {
	          get: function () { return NaN; },
	          enumerable: true,
	          configurable: true
	      });
	      NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	      NumberWrapper.isNaN = function (value) { return isNaN(value); };
	      NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	      return NumberWrapper;
	  }());
	  function normalizeBlank(obj) {
	      return isBlank(obj) ? null : obj;
	  }
	  function normalizeBool(obj) {
	      return isBlank(obj) ? false : obj;
	  }
	  function isJsObject(o) {
	      return o !== null && (typeof o === 'function' || typeof o === 'object');
	  }
	  function evalExpression(sourceUrl, expr, declarations, vars) {
	      var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	      var fnArgNames = [];
	      var fnArgValues = [];
	      for (var argName in vars) {
	          fnArgNames.push(argName);
	          fnArgValues.push(vars[argName]);
	      }
	      return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	  }
	  function isPrimitive(obj) {
	      return !isJsObject(obj);
	  }
	  function escapeRegExp(s) {
	      return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	  }

	  /**
	   * A segment of text within the template.
	   */
	  var TextAst = (function () {
	      function TextAst(value, ngContentIndex, sourceSpan) {
	          this.value = value;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return TextAst;
	  }());
	  /**
	   * A bound expression within the text of a template.
	   */
	  var BoundTextAst = (function () {
	      function BoundTextAst(value, ngContentIndex, sourceSpan) {
	          this.value = value;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundTextAst.prototype.visit = function (visitor, context) {
	          return visitor.visitBoundText(this, context);
	      };
	      return BoundTextAst;
	  }());
	  /**
	   * A plain attribute on an element.
	   */
	  var AttrAst = (function () {
	      function AttrAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	      return AttrAst;
	  }());
	  /**
	   * A binding for an element property (e.g. `[property]="expression"`).
	   */
	  var BoundElementPropertyAst = (function () {
	      function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
	          this.name = name;
	          this.type = type;
	          this.securityContext = securityContext;
	          this.value = value;
	          this.unit = unit;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	          return visitor.visitElementProperty(this, context);
	      };
	      return BoundElementPropertyAst;
	  }());
	  /**
	   * A binding for an element event (e.g. `(event)="handler()"`).
	   */
	  var BoundEventAst = (function () {
	      function BoundEventAst(name, target, handler, sourceSpan) {
	          this.name = name;
	          this.target = target;
	          this.handler = handler;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundEventAst.prototype.visit = function (visitor, context) {
	          return visitor.visitEvent(this, context);
	      };
	      Object.defineProperty(BoundEventAst.prototype, "fullName", {
	          get: function () {
	              if (isPresent(this.target)) {
	                  return this.target + ":" + this.name;
	              }
	              else {
	                  return this.name;
	              }
	          },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundEventAst;
	  }());
	  /**
	   * A reference declaration on an element (e.g. `let someName="expression"`).
	   */
	  var ReferenceAst = (function () {
	      function ReferenceAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      ReferenceAst.prototype.visit = function (visitor, context) {
	          return visitor.visitReference(this, context);
	      };
	      return ReferenceAst;
	  }());
	  /**
	   * A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
	   */
	  var VariableAst = (function () {
	      function VariableAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      VariableAst.prototype.visit = function (visitor, context) {
	          return visitor.visitVariable(this, context);
	      };
	      return VariableAst;
	  }());
	  /**
	   * An element declaration in a template.
	   */
	  var ElementAst = (function () {
	      function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	          this.name = name;
	          this.attrs = attrs;
	          this.inputs = inputs;
	          this.outputs = outputs;
	          this.references = references;
	          this.directives = directives;
	          this.providers = providers;
	          this.hasViewContainer = hasViewContainer;
	          this.children = children;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      ElementAst.prototype.visit = function (visitor, context) {
	          return visitor.visitElement(this, context);
	      };
	      return ElementAst;
	  }());
	  /**
	   * A `<template>` element included in an Angular template.
	   */
	  var EmbeddedTemplateAst = (function () {
	      function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	          this.attrs = attrs;
	          this.outputs = outputs;
	          this.references = references;
	          this.variables = variables;
	          this.directives = directives;
	          this.providers = providers;
	          this.hasViewContainer = hasViewContainer;
	          this.children = children;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	          return visitor.visitEmbeddedTemplate(this, context);
	      };
	      return EmbeddedTemplateAst;
	  }());
	  /**
	   * A directive property with a bound value (e.g. `*ngIf="condition").
	   */
	  var BoundDirectivePropertyAst = (function () {
	      function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	          this.directiveName = directiveName;
	          this.templateName = templateName;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	          return visitor.visitDirectiveProperty(this, context);
	      };
	      return BoundDirectivePropertyAst;
	  }());
	  /**
	   * A directive declared on an element.
	   */
	  var DirectiveAst = (function () {
	      function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
	          this.directive = directive;
	          this.inputs = inputs;
	          this.hostProperties = hostProperties;
	          this.hostEvents = hostEvents;
	          this.sourceSpan = sourceSpan;
	      }
	      DirectiveAst.prototype.visit = function (visitor, context) {
	          return visitor.visitDirective(this, context);
	      };
	      return DirectiveAst;
	  }());
	  /**
	   * A provider declared on an element
	   */
	  var ProviderAst = (function () {
	      function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	          this.token = token;
	          this.multiProvider = multiProvider;
	          this.eager = eager;
	          this.providers = providers;
	          this.providerType = providerType;
	          this.lifecycleHooks = lifecycleHooks;
	          this.sourceSpan = sourceSpan;
	      }
	      ProviderAst.prototype.visit = function (visitor, context) {
	          // No visit method in the visitor for now...
	          return null;
	      };
	      return ProviderAst;
	  }());
	  exports.ProviderAstType;
	  (function (ProviderAstType) {
	      ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
	      ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
	      ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
	      ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
	      ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
	  })(exports.ProviderAstType || (exports.ProviderAstType = {}));
	  /**
	   * Position where content is to be projected (instance of `<ng-content>` in a template).
	   */
	  var NgContentAst = (function () {
	      function NgContentAst(index, ngContentIndex, sourceSpan) {
	          this.index = index;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      NgContentAst.prototype.visit = function (visitor, context) {
	          return visitor.visitNgContent(this, context);
	      };
	      return NgContentAst;
	  }());
	  /**
	   * Enumeration of types of property bindings.
	   */
	  exports.PropertyBindingType;
	  (function (PropertyBindingType) {
	      /**
	       * A normal binding to a property (e.g. `[property]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
	      /**
	       * A binding to an element attribute (e.g. `[attr.name]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
	      /**
	       * A binding to a CSS class (e.g. `[class.name]="condition"`).
	       */
	      PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
	      /**
	       * A binding to a style rule (e.g. `[style.rule]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
	      /**
	       * A binding to an animation reference (e.g. `[animate.key]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
	  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
	  /**
	   * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
	   */
	  function templateVisitAll(visitor, asts, context) {
	      if (context === void 0) { context = null; }
	      var result = [];
	      asts.forEach(function (ast) {
	          var astResult = ast.visit(visitor, context);
	          if (isPresent(astResult)) {
	              result.push(astResult);
	          }
	      });
	      return result;
	  }

	  var Map$1 = global$1.Map;
	  var Set$1 = global$1.Set;
	  // Safari and Internet Explorer do not support the iterable parameter to the
	  // Map constructor.  We work around that by manually adding the items.
	  var createMapFromPairs = (function () {
	      try {
	          if (new Map$1([[1, 2]]).size === 1) {
	              return function createMapFromPairs(pairs) { return new Map$1(pairs); };
	          }
	      }
	      catch (e) {
	      }
	      return function createMapAndPopulateFromPairs(pairs) {
	          var map = new Map$1();
	          for (var i = 0; i < pairs.length; i++) {
	              var pair = pairs[i];
	              map.set(pair[0], pair[1]);
	          }
	          return map;
	      };
	  })();
	  var createMapFromMap = (function () {
	      try {
	          if (new Map$1(new Map$1())) {
	              return function createMapFromMap(m) { return new Map$1(m); };
	          }
	      }
	      catch (e) {
	      }
	      return function createMapAndPopulateFromMap(m) {
	          var map = new Map$1();
	          m.forEach(function (v, k) { map.set(k, v); });
	          return map;
	      };
	  })();
	  var _clearValues = (function () {
	      if ((new Map$1()).keys().next) {
	          return function _clearValues(m) {
	              var keyIterator = m.keys();
	              var k;
	              while (!((k = keyIterator.next()).done)) {
	                  m.set(k.value, null);
	              }
	          };
	      }
	      else {
	          return function _clearValuesWithForeEach(m) {
	              m.forEach(function (v, k) { m.set(k, null); });
	          };
	      }
	  })();
	  // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	  // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	  var _arrayFromMap = (function () {
	      try {
	          if ((new Map$1()).values().next) {
	              return function createArrayFromMap(m, getValues) {
	                  return getValues ? Array.from(m.values()) : Array.from(m.keys());
	              };
	          }
	      }
	      catch (e) {
	      }
	      return function createArrayFromMapWithForeach(m, getValues) {
	          var res = ListWrapper.createFixedSize(m.size), i = 0;
	          m.forEach(function (v, k) {
	              res[i] = getValues ? v : k;
	              i++;
	          });
	          return res;
	      };
	  })();
	  var MapWrapper = (function () {
	      function MapWrapper() {
	      }
	      MapWrapper.clone = function (m) { return createMapFromMap(m); };
	      MapWrapper.createFromStringMap = function (stringMap) {
	          var result = new Map$1();
	          for (var prop in stringMap) {
	              result.set(prop, stringMap[prop]);
	          }
	          return result;
	      };
	      MapWrapper.toStringMap = function (m) {
	          var r = {};
	          m.forEach(function (v, k) { return r[k] = v; });
	          return r;
	      };
	      MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	      MapWrapper.clearValues = function (m) { _clearValues(m); };
	      MapWrapper.iterable = function (m) { return m; };
	      MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
	      MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
	      return MapWrapper;
	  }());
	  /**
	   * Wraps Javascript Objects
	   */
	  var StringMapWrapper = (function () {
	      function StringMapWrapper() {
	      }
	      StringMapWrapper.create = function () {
	          // Note: We are not using Object.create(null) here due to
	          // performance!
	          // http://jsperf.com/ng2-object-create-null
	          return {};
	      };
	      StringMapWrapper.contains = function (map, key) {
	          return map.hasOwnProperty(key);
	      };
	      StringMapWrapper.get = function (map, key) {
	          return map.hasOwnProperty(key) ? map[key] : undefined;
	      };
	      StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	      StringMapWrapper.keys = function (map) { return Object.keys(map); };
	      StringMapWrapper.values = function (map) {
	          return Object.keys(map).map(function (k) { return map[k]; });
	      };
	      StringMapWrapper.isEmpty = function (map) {
	          for (var prop in map) {
	              return false;
	          }
	          return true;
	      };
	      StringMapWrapper.delete = function (map, key) { delete map[key]; };
	      StringMapWrapper.forEach = function (map, callback) {
	          for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
	              var k = _a[_i];
	              callback(map[k], k);
	          }
	      };
	      StringMapWrapper.merge = function (m1, m2) {
	          var m = {};
	          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	              var k = _a[_i];
	              m[k] = m1[k];
	          }
	          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	              var k = _c[_b];
	              m[k] = m2[k];
	          }
	          return m;
	      };
	      StringMapWrapper.equals = function (m1, m2) {
	          var k1 = Object.keys(m1);
	          var k2 = Object.keys(m2);
	          if (k1.length != k2.length) {
	              return false;
	          }
	          for (var i = 0; i < k1.length; i++) {
	              var key = k1[i];
	              if (m1[key] !== m2[key]) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      return StringMapWrapper;
	  }());
	  var ListWrapper = (function () {
	      function ListWrapper() {
	      }
	      // JS has no way to express a statically fixed size list, but dart does so we
	      // keep both methods.
	      ListWrapper.createFixedSize = function (size) { return new Array(size); };
	      ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	      ListWrapper.clone = function (array) { return array.slice(0); };
	      ListWrapper.forEachWithIndex = function (array, fn) {
	          for (var i = 0; i < array.length; i++) {
	              fn(array[i], i);
	          }
	      };
	      ListWrapper.first = function (array) {
	          if (!array)
	              return null;
	          return array[0];
	      };
	      ListWrapper.last = function (array) {
	          if (!array || array.length == 0)
	              return null;
	          return array[array.length - 1];
	      };
	      ListWrapper.indexOf = function (array, value, startIndex) {
	          if (startIndex === void 0) { startIndex = 0; }
	          return array.indexOf(value, startIndex);
	      };
	      ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	      ListWrapper.reversed = function (array) {
	          var a = ListWrapper.clone(array);
	          return a.reverse();
	      };
	      ListWrapper.concat = function (a, b) { return a.concat(b); };
	      ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	      ListWrapper.removeAt = function (list, index) {
	          var res = list[index];
	          list.splice(index, 1);
	          return res;
	      };
	      ListWrapper.removeAll = function (list, items) {
	          for (var i = 0; i < items.length; ++i) {
	              var index = list.indexOf(items[i]);
	              list.splice(index, 1);
	          }
	      };
	      ListWrapper.remove = function (list, el) {
	          var index = list.indexOf(el);
	          if (index > -1) {
	              list.splice(index, 1);
	              return true;
	          }
	          return false;
	      };
	      ListWrapper.clear = function (list) { list.length = 0; };
	      ListWrapper.isEmpty = function (list) { return list.length == 0; };
	      ListWrapper.fill = function (list, value, start, end) {
	          if (start === void 0) { start = 0; }
	          if (end === void 0) { end = null; }
	          list.fill(value, start, end === null ? list.length : end);
	      };
	      ListWrapper.equals = function (a, b) {
	          if (a.length != b.length)
	              return false;
	          for (var i = 0; i < a.length; ++i) {
	              if (a[i] !== b[i])
	                  return false;
	          }
	          return true;
	      };
	      ListWrapper.slice = function (l, from, to) {
	          if (from === void 0) { from = 0; }
	          if (to === void 0) { to = null; }
	          return l.slice(from, to === null ? undefined : to);
	      };
	      ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	      ListWrapper.sort = function (l, compareFn) {
	          if (isPresent(compareFn)) {
	              l.sort(compareFn);
	          }
	          else {
	              l.sort();
	          }
	      };
	      ListWrapper.toString = function (l) { return l.toString(); };
	      ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	      ListWrapper.maximum = function (list, predicate) {
	          if (list.length == 0) {
	              return null;
	          }
	          var solution = null;
	          var maxValue = -Infinity;
	          for (var index = 0; index < list.length; index++) {
	              var candidate = list[index];
	              if (isBlank(candidate)) {
	                  continue;
	              }
	              var candidateValue = predicate(candidate);
	              if (candidateValue > maxValue) {
	                  solution = candidate;
	                  maxValue = candidateValue;
	              }
	          }
	          return solution;
	      };
	      ListWrapper.flatten = function (list) {
	          var target = [];
	          _flattenArray(list, target);
	          return target;
	      };
	      ListWrapper.addAll = function (list, source) {
	          for (var i = 0; i < source.length; i++) {
	              list.push(source[i]);
	          }
	      };
	      return ListWrapper;
	  }());
	  function _flattenArray(source, target) {
	      if (isPresent(source)) {
	          for (var i = 0; i < source.length; i++) {
	              var item = source[i];
	              if (isArray(item)) {
	                  _flattenArray(item, target);
	              }
	              else {
	                  target.push(item);
	              }
	          }
	      }
	      return target;
	  }
	  // Safari and Internet Explorer do not support the iterable parameter to the
	  // Set constructor.  We work around that by manually adding the items.
	  var createSetFromList = (function () {
	      var test = new Set$1([1, 2, 3]);
	      if (test.size === 3) {
	          return function createSetFromList(lst) { return new Set$1(lst); };
	      }
	      else {
	          return function createSetAndPopulateFromList(lst) {
	              var res = new Set$1(lst);
	              if (res.size !== lst.length) {
	                  for (var i = 0; i < lst.length; i++) {
	                      res.add(lst[i]);
	                  }
	              }
	              return res;
	          };
	      }
	  })();
	  var SetWrapper = (function () {
	      function SetWrapper() {
	      }
	      SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	      SetWrapper.has = function (s, key) { return s.has(key); };
	      SetWrapper.delete = function (m, k) { m.delete(k); };
	      return SetWrapper;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var TagContentType;
	  (function (TagContentType) {
	      TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
	      TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
	      TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
	  })(TagContentType || (TagContentType = {}));
	  function splitNsName(elementName) {
	      if (elementName[0] != ':') {
	          return [null, elementName];
	      }
	      var colonIndex = elementName.indexOf(':', 1);
	      if (colonIndex == -1) {
	          throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	      }
	      return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	  }
	  function getNsPrefix(fullName) {
	      return fullName === null ? null : splitNsName(fullName)[0];
	  }
	  function mergeNsAndName(prefix, localName) {
	      return prefix ? ":" + prefix + ":" + localName : localName;
	  }
	  // see http://www.w3.org/TR/html51/syntax.html#named-character-references
	  // see https://html.spec.whatwg.org/multipage/entities.json
	  // This list is not exhaustive to keep the compiler footprint low.
	  // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	  var NAMED_ENTITIES = {
	      'Aacute': '\u00C1',
	      'aacute': '\u00E1',
	      'Acirc': '\u00C2',
	      'acirc': '\u00E2',
	      'acute': '\u00B4',
	      'AElig': '\u00C6',
	      'aelig': '\u00E6',
	      'Agrave': '\u00C0',
	      'agrave': '\u00E0',
	      'alefsym': '\u2135',
	      'Alpha': '\u0391',
	      'alpha': '\u03B1',
	      'amp': '&',
	      'and': '\u2227',
	      'ang': '\u2220',
	      'apos': '\u0027',
	      'Aring': '\u00C5',
	      'aring': '\u00E5',
	      'asymp': '\u2248',
	      'Atilde': '\u00C3',
	      'atilde': '\u00E3',
	      'Auml': '\u00C4',
	      'auml': '\u00E4',
	      'bdquo': '\u201E',
	      'Beta': '\u0392',
	      'beta': '\u03B2',
	      'brvbar': '\u00A6',
	      'bull': '\u2022',
	      'cap': '\u2229',
	      'Ccedil': '\u00C7',
	      'ccedil': '\u00E7',
	      'cedil': '\u00B8',
	      'cent': '\u00A2',
	      'Chi': '\u03A7',
	      'chi': '\u03C7',
	      'circ': '\u02C6',
	      'clubs': '\u2663',
	      'cong': '\u2245',
	      'copy': '\u00A9',
	      'crarr': '\u21B5',
	      'cup': '\u222A',
	      'curren': '\u00A4',
	      'dagger': '\u2020',
	      'Dagger': '\u2021',
	      'darr': '\u2193',
	      'dArr': '\u21D3',
	      'deg': '\u00B0',
	      'Delta': '\u0394',
	      'delta': '\u03B4',
	      'diams': '\u2666',
	      'divide': '\u00F7',
	      'Eacute': '\u00C9',
	      'eacute': '\u00E9',
	      'Ecirc': '\u00CA',
	      'ecirc': '\u00EA',
	      'Egrave': '\u00C8',
	      'egrave': '\u00E8',
	      'empty': '\u2205',
	      'emsp': '\u2003',
	      'ensp': '\u2002',
	      'Epsilon': '\u0395',
	      'epsilon': '\u03B5',
	      'equiv': '\u2261',
	      'Eta': '\u0397',
	      'eta': '\u03B7',
	      'ETH': '\u00D0',
	      'eth': '\u00F0',
	      'Euml': '\u00CB',
	      'euml': '\u00EB',
	      'euro': '\u20AC',
	      'exist': '\u2203',
	      'fnof': '\u0192',
	      'forall': '\u2200',
	      'frac12': '\u00BD',
	      'frac14': '\u00BC',
	      'frac34': '\u00BE',
	      'frasl': '\u2044',
	      'Gamma': '\u0393',
	      'gamma': '\u03B3',
	      'ge': '\u2265',
	      'gt': '>',
	      'harr': '\u2194',
	      'hArr': '\u21D4',
	      'hearts': '\u2665',
	      'hellip': '\u2026',
	      'Iacute': '\u00CD',
	      'iacute': '\u00ED',
	      'Icirc': '\u00CE',
	      'icirc': '\u00EE',
	      'iexcl': '\u00A1',
	      'Igrave': '\u00CC',
	      'igrave': '\u00EC',
	      'image': '\u2111',
	      'infin': '\u221E',
	      'int': '\u222B',
	      'Iota': '\u0399',
	      'iota': '\u03B9',
	      'iquest': '\u00BF',
	      'isin': '\u2208',
	      'Iuml': '\u00CF',
	      'iuml': '\u00EF',
	      'Kappa': '\u039A',
	      'kappa': '\u03BA',
	      'Lambda': '\u039B',
	      'lambda': '\u03BB',
	      'lang': '\u27E8',
	      'laquo': '\u00AB',
	      'larr': '\u2190',
	      'lArr': '\u21D0',
	      'lceil': '\u2308',
	      'ldquo': '\u201C',
	      'le': '\u2264',
	      'lfloor': '\u230A',
	      'lowast': '\u2217',
	      'loz': '\u25CA',
	      'lrm': '\u200E',
	      'lsaquo': '\u2039',
	      'lsquo': '\u2018',
	      'lt': '<',
	      'macr': '\u00AF',
	      'mdash': '\u2014',
	      'micro': '\u00B5',
	      'middot': '\u00B7',
	      'minus': '\u2212',
	      'Mu': '\u039C',
	      'mu': '\u03BC',
	      'nabla': '\u2207',
	      'nbsp': '\u00A0',
	      'ndash': '\u2013',
	      'ne': '\u2260',
	      'ni': '\u220B',
	      'not': '\u00AC',
	      'notin': '\u2209',
	      'nsub': '\u2284',
	      'Ntilde': '\u00D1',
	      'ntilde': '\u00F1',
	      'Nu': '\u039D',
	      'nu': '\u03BD',
	      'Oacute': '\u00D3',
	      'oacute': '\u00F3',
	      'Ocirc': '\u00D4',
	      'ocirc': '\u00F4',
	      'OElig': '\u0152',
	      'oelig': '\u0153',
	      'Ograve': '\u00D2',
	      'ograve': '\u00F2',
	      'oline': '\u203E',
	      'Omega': '\u03A9',
	      'omega': '\u03C9',
	      'Omicron': '\u039F',
	      'omicron': '\u03BF',
	      'oplus': '\u2295',
	      'or': '\u2228',
	      'ordf': '\u00AA',
	      'ordm': '\u00BA',
	      'Oslash': '\u00D8',
	      'oslash': '\u00F8',
	      'Otilde': '\u00D5',
	      'otilde': '\u00F5',
	      'otimes': '\u2297',
	      'Ouml': '\u00D6',
	      'ouml': '\u00F6',
	      'para': '\u00B6',
	      'permil': '\u2030',
	      'perp': '\u22A5',
	      'Phi': '\u03A6',
	      'phi': '\u03C6',
	      'Pi': '\u03A0',
	      'pi': '\u03C0',
	      'piv': '\u03D6',
	      'plusmn': '\u00B1',
	      'pound': '\u00A3',
	      'prime': '\u2032',
	      'Prime': '\u2033',
	      'prod': '\u220F',
	      'prop': '\u221D',
	      'Psi': '\u03A8',
	      'psi': '\u03C8',
	      'quot': '\u0022',
	      'radic': '\u221A',
	      'rang': '\u27E9',
	      'raquo': '\u00BB',
	      'rarr': '\u2192',
	      'rArr': '\u21D2',
	      'rceil': '\u2309',
	      'rdquo': '\u201D',
	      'real': '\u211C',
	      'reg': '\u00AE',
	      'rfloor': '\u230B',
	      'Rho': '\u03A1',
	      'rho': '\u03C1',
	      'rlm': '\u200F',
	      'rsaquo': '\u203A',
	      'rsquo': '\u2019',
	      'sbquo': '\u201A',
	      'Scaron': '\u0160',
	      'scaron': '\u0161',
	      'sdot': '\u22C5',
	      'sect': '\u00A7',
	      'shy': '\u00AD',
	      'Sigma': '\u03A3',
	      'sigma': '\u03C3',
	      'sigmaf': '\u03C2',
	      'sim': '\u223C',
	      'spades': '\u2660',
	      'sub': '\u2282',
	      'sube': '\u2286',
	      'sum': '\u2211',
	      'sup': '\u2283',
	      'sup1': '\u00B9',
	      'sup2': '\u00B2',
	      'sup3': '\u00B3',
	      'supe': '\u2287',
	      'szlig': '\u00DF',
	      'Tau': '\u03A4',
	      'tau': '\u03C4',
	      'there4': '\u2234',
	      'Theta': '\u0398',
	      'theta': '\u03B8',
	      'thetasym': '\u03D1',
	      'thinsp': '\u2009',
	      'THORN': '\u00DE',
	      'thorn': '\u00FE',
	      'tilde': '\u02DC',
	      'times': '\u00D7',
	      'trade': '\u2122',
	      'Uacute': '\u00DA',
	      'uacute': '\u00FA',
	      'uarr': '\u2191',
	      'uArr': '\u21D1',
	      'Ucirc': '\u00DB',
	      'ucirc': '\u00FB',
	      'Ugrave': '\u00D9',
	      'ugrave': '\u00F9',
	      'uml': '\u00A8',
	      'upsih': '\u03D2',
	      'Upsilon': '\u03A5',
	      'upsilon': '\u03C5',
	      'Uuml': '\u00DC',
	      'uuml': '\u00FC',
	      'weierp': '\u2118',
	      'Xi': '\u039E',
	      'xi': '\u03BE',
	      'Yacute': '\u00DD',
	      'yacute': '\u00FD',
	      'yen': '\u00A5',
	      'yuml': '\u00FF',
	      'Yuml': '\u0178',
	      'Zeta': '\u0396',
	      'zeta': '\u03B6',
	      'zwj': '\u200D',
	      'zwnj': '\u200C',
	  };

	  var HtmlTagDefinition = (function () {
	      function HtmlTagDefinition(_a) {
	          var _this = this;
	          var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	          this.closedByChildren = {};
	          this.closedByParent = false;
	          this.canSelfClose = false;
	          if (closedByChildren && closedByChildren.length > 0) {
	              closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	          }
	          this.isVoid = isVoid;
	          this.closedByParent = closedByParent || isVoid;
	          if (requiredParents && requiredParents.length > 0) {
	              this.requiredParents = {};
	              // The first parent is the list is automatically when none of the listed parents are present
	              this.parentToAdd = requiredParents[0];
	              requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	          }
	          this.implicitNamespacePrefix = implicitNamespacePrefix;
	          this.contentType = contentType;
	          this.ignoreFirstLf = ignoreFirstLf;
	      }
	      HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	          if (!this.requiredParents) {
	              return false;
	          }
	          if (!currentParent) {
	              return true;
	          }
	          var lcParent = currentParent.toLowerCase();
	          return this.requiredParents[lcParent] != true && lcParent != 'template';
	      };
	      HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	          return this.isVoid || name.toLowerCase() in this.closedByChildren;
	      };
	      return HtmlTagDefinition;
	  }());
	  // see http://www.w3.org/TR/html51/syntax.html#optional-tags
	  // This implementation does not fully conform to the HTML5 spec.
	  var TAG_DEFINITIONS = {
	      'base': new HtmlTagDefinition({ isVoid: true }),
	      'meta': new HtmlTagDefinition({ isVoid: true }),
	      'area': new HtmlTagDefinition({ isVoid: true }),
	      'embed': new HtmlTagDefinition({ isVoid: true }),
	      'link': new HtmlTagDefinition({ isVoid: true }),
	      'img': new HtmlTagDefinition({ isVoid: true }),
	      'input': new HtmlTagDefinition({ isVoid: true }),
	      'param': new HtmlTagDefinition({ isVoid: true }),
	      'hr': new HtmlTagDefinition({ isVoid: true }),
	      'br': new HtmlTagDefinition({ isVoid: true }),
	      'source': new HtmlTagDefinition({ isVoid: true }),
	      'track': new HtmlTagDefinition({ isVoid: true }),
	      'wbr': new HtmlTagDefinition({ isVoid: true }),
	      'p': new HtmlTagDefinition({
	          closedByChildren: [
	              'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	              'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	              'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	          ],
	          closedByParent: true
	      }),
	      'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	      'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	      'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	      'tr': new HtmlTagDefinition({
	          closedByChildren: ['tr'],
	          requiredParents: ['tbody', 'tfoot', 'thead'],
	          closedByParent: true
	      }),
	      'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	      'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	      'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	      'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	      'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	      'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	      'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	      'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	      'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	      'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	      'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	      'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	      'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	      'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	      'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	      'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	      'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	  };
	  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	  function getHtmlTagDefinition(tagName) {
	      return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	  }

	  var _EMPTY_ATTR_VALUE = '';
	  var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	      '([-\\w]+)|' +
	      '(?:\\.([-\\w]+))|' +
	      '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	      '(\\))|' +
	      '(\\s*,\\s*)', // ","
	  'g');
	  /**
	   * A css selector contains an element name,
	   * css classes and attribute/value pairs with the purpose
	   * of selecting subsets out of them.
	   */
	  var CssSelector = (function () {
	      function CssSelector() {
	          this.element = null;
	          this.classNames = [];
	          this.attrs = [];
	          this.notSelectors = [];
	      }
	      CssSelector.parse = function (selector) {
	          var results = [];
	          var _addResult = function (res, cssSel) {
	              if (cssSel.notSelectors.length > 0 && isBlank(cssSel.element) &&
	                  ListWrapper.isEmpty(cssSel.classNames) && ListWrapper.isEmpty(cssSel.attrs)) {
	                  cssSel.element = '*';
	              }
	              res.push(cssSel);
	          };
	          var cssSelector = new CssSelector();
	          var match;
	          var current = cssSelector;
	          var inNot = false;
	          _SELECTOR_REGEXP.lastIndex = 0;
	          while (isPresent(match = _SELECTOR_REGEXP.exec(selector))) {
	              if (isPresent(match[1])) {
	                  if (inNot) {
	                      throw new Error('Nesting :not is not allowed in a selector');
	                  }
	                  inNot = true;
	                  current = new CssSelector();
	                  cssSelector.notSelectors.push(current);
	              }
	              if (isPresent(match[2])) {
	                  current.setElement(match[2]);
	              }
	              if (isPresent(match[3])) {
	                  current.addClassName(match[3]);
	              }
	              if (isPresent(match[4])) {
	                  current.addAttribute(match[4], match[5]);
	              }
	              if (isPresent(match[6])) {
	                  inNot = false;
	                  current = cssSelector;
	              }
	              if (isPresent(match[7])) {
	                  if (inNot) {
	                      throw new Error('Multiple selectors in :not are not supported');
	                  }
	                  _addResult(results, cssSelector);
	                  cssSelector = current = new CssSelector();
	              }
	          }
	          _addResult(results, cssSelector);
	          return results;
	      };
	      CssSelector.prototype.isElementSelector = function () {
	          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	              this.notSelectors.length === 0;
	      };
	      CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	      CssSelector.prototype.setElement = function (element) {
	          if (element === void 0) { element = null; }
	          this.element = element;
	      };
	      /** Gets a template string for an element that matches the selector. */
	      CssSelector.prototype.getMatchingElementTemplate = function () {
	          var tagName = this.element || 'div';
	          var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	          var attrs = '';
	          for (var i = 0; i < this.attrs.length; i += 2) {
	              var attrName = this.attrs[i];
	              var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	              attrs += " " + attrName + attrValue;
	          }
	          return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	              "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	      };
	      CssSelector.prototype.addAttribute = function (name, value) {
	          if (value === void 0) { value = _EMPTY_ATTR_VALUE; }
	          this.attrs.push(name);
	          if (isPresent(value)) {
	              value = value.toLowerCase();
	          }
	          else {
	              value = _EMPTY_ATTR_VALUE;
	          }
	          this.attrs.push(value);
	      };
	      CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	      CssSelector.prototype.toString = function () {
	          var res = '';
	          if (isPresent(this.element)) {
	              res += this.element;
	          }
	          if (isPresent(this.classNames)) {
	              for (var i = 0; i < this.classNames.length; i++) {
	                  res += '.' + this.classNames[i];
	              }
	          }
	          if (isPresent(this.attrs)) {
	              for (var i = 0; i < this.attrs.length;) {
	                  var attrName = this.attrs[i++];
	                  var attrValue = this.attrs[i++];
	                  res += '[' + attrName;
	                  if (attrValue.length > 0) {
	                      res += '=' + attrValue;
	                  }
	                  res += ']';
	              }
	          }
	          this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	          return res;
	      };
	      return CssSelector;
	  }());
	  /**
	   * Reads a list of CssSelectors and allows to calculate which ones
	   * are contained in a given CssSelector.
	   */
	  var SelectorMatcher = (function () {
	      function SelectorMatcher() {
	          this._elementMap = new Map();
	          this._elementPartialMap = new Map();
	          this._classMap = new Map();
	          this._classPartialMap = new Map();
	          this._attrValueMap = new Map();
	          this._attrValuePartialMap = new Map();
	          this._listContexts = [];
	      }
	      SelectorMatcher.createNotMatcher = function (notSelectors) {
	          var notMatcher = new SelectorMatcher();
	          notMatcher.addSelectables(notSelectors, null);
	          return notMatcher;
	      };
	      SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	          var listContext = null;
	          if (cssSelectors.length > 1) {
	              listContext = new SelectorListContext(cssSelectors);
	              this._listContexts.push(listContext);
	          }
	          for (var i = 0; i < cssSelectors.length; i++) {
	              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	          }
	      };
	      /**
	       * Add an object that can be found later on by calling `match`.
	       * @param cssSelector A css selector
	       * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	       */
	      SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	          var matcher = this;
	          var element = cssSelector.element;
	          var classNames = cssSelector.classNames;
	          var attrs = cssSelector.attrs;
	          var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	          if (isPresent(element)) {
	              var isTerminal = attrs.length === 0 && classNames.length === 0;
	              if (isTerminal) {
	                  this._addTerminal(matcher._elementMap, element, selectable);
	              }
	              else {
	                  matcher = this._addPartial(matcher._elementPartialMap, element);
	              }
	          }
	          if (isPresent(classNames)) {
	              for (var index = 0; index < classNames.length; index++) {
	                  var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                  var className = classNames[index];
	                  if (isTerminal) {
	                      this._addTerminal(matcher._classMap, className, selectable);
	                  }
	                  else {
	                      matcher = this._addPartial(matcher._classPartialMap, className);
	                  }
	              }
	          }
	          if (isPresent(attrs)) {
	              for (var index = 0; index < attrs.length;) {
	                  var isTerminal = index === attrs.length - 2;
	                  var attrName = attrs[index++];
	                  var attrValue = attrs[index++];
	                  if (isTerminal) {
	                      var terminalMap = matcher._attrValueMap;
	                      var terminalValuesMap = terminalMap.get(attrName);
	                      if (isBlank(terminalValuesMap)) {
	                          terminalValuesMap = new Map();
	                          terminalMap.set(attrName, terminalValuesMap);
	                      }
	                      this._addTerminal(terminalValuesMap, attrValue, selectable);
	                  }
	                  else {
	                      var parttialMap = matcher._attrValuePartialMap;
	                      var partialValuesMap = parttialMap.get(attrName);
	                      if (isBlank(partialValuesMap)) {
	                          partialValuesMap = new Map();
	                          parttialMap.set(attrName, partialValuesMap);
	                      }
	                      matcher = this._addPartial(partialValuesMap, attrValue);
	                  }
	              }
	          }
	      };
	      SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	          var terminalList = map.get(name);
	          if (isBlank(terminalList)) {
	              terminalList = [];
	              map.set(name, terminalList);
	          }
	          terminalList.push(selectable);
	      };
	      SelectorMatcher.prototype._addPartial = function (map, name) {
	          var matcher = map.get(name);
	          if (isBlank(matcher)) {
	              matcher = new SelectorMatcher();
	              map.set(name, matcher);
	          }
	          return matcher;
	      };
	      /**
	       * Find the objects that have been added via `addSelectable`
	       * whose css selector is contained in the given css selector.
	       * @param cssSelector A css selector
	       * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	       * @return boolean true if a match was found
	      */
	      SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	          var result = false;
	          var element = cssSelector.element;
	          var classNames = cssSelector.classNames;
	          var attrs = cssSelector.attrs;
	          for (var i = 0; i < this._listContexts.length; i++) {
	              this._listContexts[i].alreadyMatched = false;
	          }
	          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	              result;
	          if (isPresent(classNames)) {
	              for (var index = 0; index < classNames.length; index++) {
	                  var className = classNames[index];
	                  result =
	                      this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                  result =
	                      this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                          result;
	              }
	          }
	          if (isPresent(attrs)) {
	              for (var index = 0; index < attrs.length;) {
	                  var attrName = attrs[index++];
	                  var attrValue = attrs[index++];
	                  var terminalValuesMap = this._attrValueMap.get(attrName);
	                  if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                      result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                          result;
	                  }
	                  result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) ||
	                      result;
	                  var partialValuesMap = this._attrValuePartialMap.get(attrName);
	                  if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                      result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) ||
	                          result;
	                  }
	                  result =
	                      this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	              }
	          }
	          return result;
	      };
	      /** @internal */
	      SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	          if (isBlank(map) || isBlank(name)) {
	              return false;
	          }
	          var selectables = map.get(name);
	          var starSelectables = map.get('*');
	          if (isPresent(starSelectables)) {
	              selectables = selectables.concat(starSelectables);
	          }
	          if (isBlank(selectables)) {
	              return false;
	          }
	          var selectable;
	          var result = false;
	          for (var index = 0; index < selectables.length; index++) {
	              selectable = selectables[index];
	              result = selectable.finalize(cssSelector, matchedCallback) || result;
	          }
	          return result;
	      };
	      /** @internal */
	      SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	          if (isBlank(map) || isBlank(name)) {
	              return false;
	          }
	          var nestedSelector = map.get(name);
	          if (isBlank(nestedSelector)) {
	              return false;
	          }
	          // TODO(perf): get rid of recursion and measure again
	          // TODO(perf): don't pass the whole selector into the recursion,
	          // but only the not processed parts
	          return nestedSelector.match(cssSelector, matchedCallback);
	      };
	      return SelectorMatcher;
	  }());
	  var SelectorListContext = (function () {
	      function SelectorListContext(selectors) {
	          this.selectors = selectors;
	          this.alreadyMatched = false;
	      }
	      return SelectorListContext;
	  }());
	  // Store context to pass back selector and context when a selector is matched
	  var SelectorContext = (function () {
	      function SelectorContext(selector, cbContext, listContext) {
	          this.selector = selector;
	          this.cbContext = cbContext;
	          this.listContext = listContext;
	          this.notSelectors = selector.notSelectors;
	      }
	      SelectorContext.prototype.finalize = function (cssSelector, callback) {
	          var result = true;
	          if (this.notSelectors.length > 0 &&
	              (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	              var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	              result = !notMatcher.match(cssSelector, null);
	          }
	          if (result && isPresent(callback) &&
	              (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	              if (isPresent(this.listContext)) {
	                  this.listContext.alreadyMatched = true;
	              }
	              callback(this.selector, this.cbContext);
	          }
	          return result;
	      };
	      return SelectorContext;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$2 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  //// Types
	  var TypeModifier;
	  (function (TypeModifier) {
	      TypeModifier[TypeModifier["Const"] = 0] = "Const";
	  })(TypeModifier || (TypeModifier = {}));
	  var Type$1 = (function () {
	      function Type(modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          this.modifiers = modifiers;
	          if (isBlank(modifiers)) {
	              this.modifiers = [];
	          }
	      }
	      Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return Type;
	  }());
	  var BuiltinTypeName;
	  (function (BuiltinTypeName) {
	      BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
	      BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
	      BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
	      BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
	      BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
	      BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
	  })(BuiltinTypeName || (BuiltinTypeName = {}));
	  var BuiltinType = (function (_super) {
	      __extends$2(BuiltinType, _super);
	      function BuiltinType(name, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	      }
	      BuiltinType.prototype.visitType = function (visitor, context) {
	          return visitor.visitBuiltintType(this, context);
	      };
	      return BuiltinType;
	  }(Type$1));
	  var ExternalType = (function (_super) {
	      __extends$2(ExternalType, _super);
	      function ExternalType(value, typeParams, modifiers) {
	          if (typeParams === void 0) { typeParams = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.value = value;
	          this.typeParams = typeParams;
	      }
	      ExternalType.prototype.visitType = function (visitor, context) {
	          return visitor.visitExternalType(this, context);
	      };
	      return ExternalType;
	  }(Type$1));
	  var ArrayType = (function (_super) {
	      __extends$2(ArrayType, _super);
	      function ArrayType(of, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.of = of;
	      }
	      ArrayType.prototype.visitType = function (visitor, context) {
	          return visitor.visitArrayType(this, context);
	      };
	      return ArrayType;
	  }(Type$1));
	  var MapType = (function (_super) {
	      __extends$2(MapType, _super);
	      function MapType(valueType, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.valueType = valueType;
	      }
	      MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	      return MapType;
	  }(Type$1));
	  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	  ///// Expressions
	  var BinaryOperator;
	  (function (BinaryOperator) {
	      BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
	      BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
	      BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
	      BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
	      BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
	      BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
	      BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
	      BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
	      BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
	      BinaryOperator[BinaryOperator["And"] = 9] = "And";
	      BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
	      BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
	      BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
	      BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
	      BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
	  })(BinaryOperator || (BinaryOperator = {}));
	  var Expression = (function () {
	      function Expression(type) {
	          this.type = type;
	      }
	      Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };
	      Expression.prototype.key = function (index, type) {
	          if (type === void 0) { type = null; }
	          return new ReadKeyExpr(this, index, type);
	      };
	      Expression.prototype.callMethod = function (name, params) {
	          return new InvokeMethodExpr(this, name, params);
	      };
	      Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };
	      Expression.prototype.instantiate = function (params, type) {
	          if (type === void 0) { type = null; }
	          return new InstantiateExpr(this, params, type);
	      };
	      Expression.prototype.conditional = function (trueCase, falseCase) {
	          if (falseCase === void 0) { falseCase = null; }
	          return new ConditionalExpr(this, trueCase, falseCase);
	      };
	      Expression.prototype.equals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
	      };
	      Expression.prototype.notEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
	      };
	      Expression.prototype.identical = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
	      };
	      Expression.prototype.notIdentical = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
	      };
	      Expression.prototype.minus = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
	      };
	      Expression.prototype.plus = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
	      };
	      Expression.prototype.divide = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
	      };
	      Expression.prototype.multiply = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
	      };
	      Expression.prototype.modulo = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
	      };
	      Expression.prototype.and = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
	      };
	      Expression.prototype.or = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
	      };
	      Expression.prototype.lower = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
	      };
	      Expression.prototype.lowerEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
	      };
	      Expression.prototype.bigger = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
	      };
	      Expression.prototype.biggerEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
	      };
	      Expression.prototype.isBlank = function () {
	          // Note: We use equals by purpose here to compare to null and undefined in JS.
	          return this.equals(NULL_EXPR);
	      };
	      Expression.prototype.cast = function (type) { return new CastExpr(this, type); };
	      Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	      return Expression;
	  }());
	  var BuiltinVar;
	  (function (BuiltinVar) {
	      BuiltinVar[BuiltinVar["This"] = 0] = "This";
	      BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
	      BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
	      BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
	  })(BuiltinVar || (BuiltinVar = {}));
	  var ReadVarExpr = (function (_super) {
	      __extends$2(ReadVarExpr, _super);
	      function ReadVarExpr(name, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          if (isString(name)) {
	              this.name = name;
	              this.builtin = null;
	          }
	          else {
	              this.name = null;
	              this.builtin = name;
	          }
	      }
	      ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadVarExpr(this, context);
	      };
	      ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };
	      return ReadVarExpr;
	  }(Expression));
	  var WriteVarExpr = (function (_super) {
	      __extends$2(WriteVarExpr, _super);
	      function WriteVarExpr(name, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, isPresent(type) ? type : value.type);
	          this.name = name;
	          this.value = value;
	      }
	      WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWriteVarExpr(this, context);
	      };
	      WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          return new DeclareVarStmt(this.name, this.value, type, modifiers);
	      };
	      return WriteVarExpr;
	  }(Expression));
	  var WriteKeyExpr = (function (_super) {
	      __extends$2(WriteKeyExpr, _super);
	      function WriteKeyExpr(receiver, index, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, isPresent(type) ? type : value.type);
	          this.receiver = receiver;
	          this.index = index;
	          this.value = value;
	      }
	      WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWriteKeyExpr(this, context);
	      };
	      return WriteKeyExpr;
	  }(Expression));
	  var WritePropExpr = (function (_super) {
	      __extends$2(WritePropExpr, _super);
	      function WritePropExpr(receiver, name, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, isPresent(type) ? type : value.type);
	          this.receiver = receiver;
	          this.name = name;
	          this.value = value;
	      }
	      WritePropExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWritePropExpr(this, context);
	      };
	      return WritePropExpr;
	  }(Expression));
	  var BuiltinMethod;
	  (function (BuiltinMethod) {
	      BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
	      BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
	      BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
	  })(BuiltinMethod || (BuiltinMethod = {}));
	  var InvokeMethodExpr = (function (_super) {
	      __extends$2(InvokeMethodExpr, _super);
	      function InvokeMethodExpr(receiver, method, args, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.args = args;
	          if (isString(method)) {
	              this.name = method;
	              this.builtin = null;
	          }
	          else {
	              this.name = null;
	              this.builtin = method;
	          }
	      }
	      InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInvokeMethodExpr(this, context);
	      };
	      return InvokeMethodExpr;
	  }(Expression));
	  var InvokeFunctionExpr = (function (_super) {
	      __extends$2(InvokeFunctionExpr, _super);
	      function InvokeFunctionExpr(fn, args, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.fn = fn;
	          this.args = args;
	      }
	      InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInvokeFunctionExpr(this, context);
	      };
	      return InvokeFunctionExpr;
	  }(Expression));
	  var InstantiateExpr = (function (_super) {
	      __extends$2(InstantiateExpr, _super);
	      function InstantiateExpr(classExpr, args, type) {
	          _super.call(this, type);
	          this.classExpr = classExpr;
	          this.args = args;
	      }
	      InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInstantiateExpr(this, context);
	      };
	      return InstantiateExpr;
	  }(Expression));
	  var LiteralExpr = (function (_super) {
	      __extends$2(LiteralExpr, _super);
	      function LiteralExpr(value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.value = value;
	      }
	      LiteralExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralExpr(this, context);
	      };
	      return LiteralExpr;
	  }(Expression));
	  var ExternalExpr = (function (_super) {
	      __extends$2(ExternalExpr, _super);
	      function ExternalExpr(value, type, typeParams) {
	          if (type === void 0) { type = null; }
	          if (typeParams === void 0) { typeParams = null; }
	          _super.call(this, type);
	          this.value = value;
	          this.typeParams = typeParams;
	      }
	      ExternalExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitExternalExpr(this, context);
	      };
	      return ExternalExpr;
	  }(Expression));
	  var ConditionalExpr = (function (_super) {
	      __extends$2(ConditionalExpr, _super);
	      function ConditionalExpr(condition, trueCase, falseCase, type) {
	          if (falseCase === void 0) { falseCase = null; }
	          if (type === void 0) { type = null; }
	          _super.call(this, isPresent(type) ? type : trueCase.type);
	          this.condition = condition;
	          this.falseCase = falseCase;
	          this.trueCase = trueCase;
	      }
	      ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitConditionalExpr(this, context);
	      };
	      return ConditionalExpr;
	  }(Expression));
	  var NotExpr = (function (_super) {
	      __extends$2(NotExpr, _super);
	      function NotExpr(condition) {
	          _super.call(this, BOOL_TYPE);
	          this.condition = condition;
	      }
	      NotExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitNotExpr(this, context);
	      };
	      return NotExpr;
	  }(Expression));
	  var CastExpr = (function (_super) {
	      __extends$2(CastExpr, _super);
	      function CastExpr(value, type) {
	          _super.call(this, type);
	          this.value = value;
	      }
	      CastExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitCastExpr(this, context);
	      };
	      return CastExpr;
	  }(Expression));
	  var FnParam = (function () {
	      function FnParam(name, type) {
	          if (type === void 0) { type = null; }
	          this.name = name;
	          this.type = type;
	      }
	      return FnParam;
	  }());
	  var FunctionExpr = (function (_super) {
	      __extends$2(FunctionExpr, _super);
	      function FunctionExpr(params, statements, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.params = params;
	          this.statements = statements;
	      }
	      FunctionExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitFunctionExpr(this, context);
	      };
	      FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
	      };
	      return FunctionExpr;
	  }(Expression));
	  var BinaryOperatorExpr = (function (_super) {
	      __extends$2(BinaryOperatorExpr, _super);
	      function BinaryOperatorExpr(operator, lhs, rhs, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, isPresent(type) ? type : lhs.type);
	          this.operator = operator;
	          this.rhs = rhs;
	          this.lhs = lhs;
	      }
	      BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitBinaryOperatorExpr(this, context);
	      };
	      return BinaryOperatorExpr;
	  }(Expression));
	  var ReadPropExpr = (function (_super) {
	      __extends$2(ReadPropExpr, _super);
	      function ReadPropExpr(receiver, name, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadPropExpr(this, context);
	      };
	      ReadPropExpr.prototype.set = function (value) {
	          return new WritePropExpr(this.receiver, this.name, value);
	      };
	      return ReadPropExpr;
	  }(Expression));
	  var ReadKeyExpr = (function (_super) {
	      __extends$2(ReadKeyExpr, _super);
	      function ReadKeyExpr(receiver, index, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.index = index;
	      }
	      ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadKeyExpr(this, context);
	      };
	      ReadKeyExpr.prototype.set = function (value) {
	          return new WriteKeyExpr(this.receiver, this.index, value);
	      };
	      return ReadKeyExpr;
	  }(Expression));
	  var LiteralArrayExpr = (function (_super) {
	      __extends$2(LiteralArrayExpr, _super);
	      function LiteralArrayExpr(entries, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.entries = entries;
	      }
	      LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralArrayExpr(this, context);
	      };
	      return LiteralArrayExpr;
	  }(Expression));
	  var LiteralMapExpr = (function (_super) {
	      __extends$2(LiteralMapExpr, _super);
	      function LiteralMapExpr(entries, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.entries = entries;
	          this.valueType = null;
	          if (isPresent(type)) {
	              this.valueType = type.valueType;
	          }
	      }
	      LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralMapExpr(this, context);
	      };
	      return LiteralMapExpr;
	  }(Expression));
	  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	  var NULL_EXPR = new LiteralExpr(null, null);
	  //// Statements
	  var StmtModifier;
	  (function (StmtModifier) {
	      StmtModifier[StmtModifier["Final"] = 0] = "Final";
	      StmtModifier[StmtModifier["Private"] = 1] = "Private";
	  })(StmtModifier || (StmtModifier = {}));
	  var Statement = (function () {
	      function Statement(modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          this.modifiers = modifiers;
	          if (isBlank(modifiers)) {
	              this.modifiers = [];
	          }
	      }
	      Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return Statement;
	  }());
	  var DeclareVarStmt = (function (_super) {
	      __extends$2(DeclareVarStmt, _super);
	      function DeclareVarStmt(name, value, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.value = value;
	          this.type = isPresent(type) ? type : value.type;
	      }
	      DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareVarStmt(this, context);
	      };
	      return DeclareVarStmt;
	  }(Statement));
	  var DeclareFunctionStmt = (function (_super) {
	      __extends$2(DeclareFunctionStmt, _super);
	      function DeclareFunctionStmt(name, params, statements, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.params = params;
	          this.statements = statements;
	          this.type = type;
	      }
	      DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareFunctionStmt(this, context);
	      };
	      return DeclareFunctionStmt;
	  }(Statement));
	  var ExpressionStatement = (function (_super) {
	      __extends$2(ExpressionStatement, _super);
	      function ExpressionStatement(expr) {
	          _super.call(this);
	          this.expr = expr;
	      }
	      ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitExpressionStmt(this, context);
	      };
	      return ExpressionStatement;
	  }(Statement));
	  var ReturnStatement = (function (_super) {
	      __extends$2(ReturnStatement, _super);
	      function ReturnStatement(value) {
	          _super.call(this);
	          this.value = value;
	      }
	      ReturnStatement.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitReturnStmt(this, context);
	      };
	      return ReturnStatement;
	  }(Statement));
	  var AbstractClassPart = (function () {
	      function AbstractClassPart(type, modifiers) {
	          if (type === void 0) { type = null; }
	          this.type = type;
	          this.modifiers = modifiers;
	          if (isBlank(modifiers)) {
	              this.modifiers = [];
	          }
	      }
	      AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return AbstractClassPart;
	  }());
	  var ClassField = (function (_super) {
	      __extends$2(ClassField, _super);
	      function ClassField(name, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	      }
	      return ClassField;
	  }(AbstractClassPart));
	  var ClassMethod = (function (_super) {
	      __extends$2(ClassMethod, _super);
	      function ClassMethod(name, params, body, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	          this.params = params;
	          this.body = body;
	      }
	      return ClassMethod;
	  }(AbstractClassPart));
	  var ClassGetter = (function (_super) {
	      __extends$2(ClassGetter, _super);
	      function ClassGetter(name, body, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	          this.body = body;
	      }
	      return ClassGetter;
	  }(AbstractClassPart));
	  var ClassStmt = (function (_super) {
	      __extends$2(ClassStmt, _super);
	      function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.parent = parent;
	          this.fields = fields;
	          this.getters = getters;
	          this.constructorMethod = constructorMethod;
	          this.methods = methods;
	      }
	      ClassStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareClassStmt(this, context);
	      };
	      return ClassStmt;
	  }(Statement));
	  var IfStmt = (function (_super) {
	      __extends$2(IfStmt, _super);
	      function IfStmt(condition, trueCase, falseCase) {
	          if (falseCase === void 0) { falseCase = []; }
	          _super.call(this);
	          this.condition = condition;
	          this.trueCase = trueCase;
	          this.falseCase = falseCase;
	      }
	      IfStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitIfStmt(this, context);
	      };
	      return IfStmt;
	  }(Statement));
	  var CommentStmt = (function (_super) {
	      __extends$2(CommentStmt, _super);
	      function CommentStmt(comment) {
	          _super.call(this);
	          this.comment = comment;
	      }
	      CommentStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitCommentStmt(this, context);
	      };
	      return CommentStmt;
	  }(Statement));
	  var TryCatchStmt = (function (_super) {
	      __extends$2(TryCatchStmt, _super);
	      function TryCatchStmt(bodyStmts, catchStmts) {
	          _super.call(this);
	          this.bodyStmts = bodyStmts;
	          this.catchStmts = catchStmts;
	      }
	      TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitTryCatchStmt(this, context);
	      };
	      return TryCatchStmt;
	  }(Statement));
	  var ThrowStmt = (function (_super) {
	      __extends$2(ThrowStmt, _super);
	      function ThrowStmt(error) {
	          _super.call(this);
	          this.error = error;
	      }
	      ThrowStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitThrowStmt(this, context);
	      };
	      return ThrowStmt;
	  }(Statement));
	  var ExpressionTransformer = (function () {
	      function ExpressionTransformer() {
	      }
	      ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	      ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
	          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	          var method = isPresent(ast.builtin) ? ast.builtin : ast.name;
	          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	      ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };
	      ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
	          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
	          return new NotExpr(ast.condition.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
	          return new CastExpr(ast.value.visitExpression(this, context), context);
	      };
	      ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
	          // Don't descend into nested functions
	          return ast;
	      };
	      ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
	          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
	      };
	      ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
	      };
	      ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	          var _this = this;
	          return new LiteralMapExpr(ast.entries.map(function (entry) { return [entry[0], entry[1].visitExpression(_this, context)]; }));
	      };
	      ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
	          var _this = this;
	          return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	      };
	      ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
	      };
	      ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
	          return new ReturnStatement(stmt.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
	          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
	      };
	      ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
	      };
	      ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
	          return new ThrowStmt(stmt.error.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	      ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
	          var _this = this;
	          return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	      };
	      return ExpressionTransformer;
	  }());
	  var RecursiveExpressionVisitor = (function () {
	      function RecursiveExpressionVisitor() {
	      }
	      RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
	          expr.receiver.visitExpression(this, context);
	          expr.index.visitExpression(this, context);
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
	          expr.receiver.visitExpression(this, context);
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	          ast.fn.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	          ast.classExpr.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
	          ast.condition.visitExpression(this, context);
	          ast.trueCase.visitExpression(this, context);
	          ast.falseCase.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
	          ast.condition.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
	          ast.value.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	          ast.lhs.visitExpression(this, context);
	          ast.rhs.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          ast.index.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	          this.visitAllExpressions(ast.entries, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	          var _this = this;
	          ast.entries.forEach(function (entry) { return entry[1].visitExpression(_this, context); });
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
	          var _this = this;
	          exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	      };
	      RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	          stmt.value.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	          stmt.expr.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
	          stmt.value.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
	          stmt.condition.visitExpression(this, context);
	          this.visitAllStatements(stmt.trueCase, context);
	          this.visitAllStatements(stmt.falseCase, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	          this.visitAllStatements(stmt.bodyStmts, context);
	          this.visitAllStatements(stmt.catchStmts, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
	          stmt.error.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	      RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
	          var _this = this;
	          stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	      };
	      return RecursiveExpressionVisitor;
	  }());
	  function replaceVarInExpression(varName, newValue, expression) {
	      var transformer = new _ReplaceVariableTransformer(varName, newValue);
	      return expression.visitExpression(transformer, null);
	  }
	  var _ReplaceVariableTransformer = (function (_super) {
	      __extends$2(_ReplaceVariableTransformer, _super);
	      function _ReplaceVariableTransformer(_varName, _newValue) {
	          _super.call(this);
	          this._varName = _varName;
	          this._newValue = _newValue;
	      }
	      _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
	          return ast.name == this._varName ? this._newValue : ast;
	      };
	      return _ReplaceVariableTransformer;
	  }(ExpressionTransformer));
	  function findReadVarNames(stmts) {
	      var finder = new _VariableFinder();
	      finder.visitAllStatements(stmts, null);
	      return finder.varNames;
	  }
	  var _VariableFinder = (function (_super) {
	      __extends$2(_VariableFinder, _super);
	      function _VariableFinder() {
	          _super.apply(this, arguments);
	          this.varNames = new Set();
	      }
	      _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
	          this.varNames.add(ast.name);
	          return null;
	      };
	      return _VariableFinder;
	  }(RecursiveExpressionVisitor));
	  function variable(name, type) {
	      if (type === void 0) { type = null; }
	      return new ReadVarExpr(name, type);
	  }
	  function importExpr(id, typeParams) {
	      if (typeParams === void 0) { typeParams = null; }
	      return new ExternalExpr(id, null, typeParams);
	  }
	  function importType(id, typeParams, typeModifiers) {
	      if (typeParams === void 0) { typeParams = null; }
	      if (typeModifiers === void 0) { typeModifiers = null; }
	      return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
	  }
	  function literalArr(values, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralArrayExpr(values, type);
	  }
	  function literalMap(values, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralMapExpr(values, type);
	  }
	  function not(expr) {
	      return new NotExpr(expr);
	  }
	  function fn(params, body, type) {
	      if (type === void 0) { type = null; }
	      return new FunctionExpr(params, body, type);
	  }
	  function literal(value, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralExpr(value, type);
	  }

	  var MODULE_SUFFIX = '';
	  var CAMEL_CASE_REGEXP = /([A-Z])/g;
	  function camelCaseToDashCase(input) {
	      return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) { return '-' + m[1].toLowerCase(); });
	  }
	  function splitAtColon(input, defaultValues) {
	      var colonIndex = input.indexOf(':');
	      if (colonIndex == -1)
	          return defaultValues;
	      return [input.slice(0, colonIndex).trim(), input.slice(colonIndex + 1).trim()];
	  }
	  function sanitizeIdentifier(name) {
	      return StringWrapper.replaceAll(name, /\W/g, '_');
	  }
	  function visitValue(value, visitor, context) {
	      if (isArray(value)) {
	          return visitor.visitArray(value, context);
	      }
	      else if (isStrictStringMap(value)) {
	          return visitor.visitStringMap(value, context);
	      }
	      else if (isBlank(value) || isPrimitive(value)) {
	          return visitor.visitPrimitive(value, context);
	      }
	      else {
	          return visitor.visitOther(value, context);
	      }
	  }
	  var ValueTransformer = (function () {
	      function ValueTransformer() {
	      }
	      ValueTransformer.prototype.visitArray = function (arr, context) {
	          var _this = this;
	          return arr.map(function (value) { return visitValue(value, _this, context); });
	      };
	      ValueTransformer.prototype.visitStringMap = function (map, context) {
	          var _this = this;
	          var result = {};
	          StringMapWrapper.forEach(map, function (value /** TODO #9100 */, key /** TODO #9100 */) {
	              result[key] = visitValue(value, _this, context);
	          });
	          return result;
	      };
	      ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	      ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	      return ValueTransformer;
	  }());
	  function assetUrl(pkg, path, type) {
	      if (path === void 0) { path = null; }
	      if (type === void 0) { type = 'src'; }
	      if (path == null) {
	          return "asset:@angular/lib/" + pkg + "/index";
	      }
	      else {
	          return "asset:@angular/lib/" + pkg + "/src/" + path;
	      }
	  }
	  function createDiTokenExpression(token) {
	      if (isPresent(token.value)) {
	          return literal(token.value);
	      }
	      else if (token.identifierIsInstance) {
	          return importExpr(token.identifier)
	              .instantiate([], importType(token.identifier, [], [TypeModifier.Const]));
	      }
	      else {
	          return importExpr(token.identifier);
	      }
	  }
	  var SyncAsyncResult = (function () {
	      function SyncAsyncResult(syncResult, asyncResult) {
	          if (asyncResult === void 0) { asyncResult = null; }
	          this.syncResult = syncResult;
	          this.asyncResult = asyncResult;
	          if (!asyncResult) {
	              this.asyncResult = Promise.resolve(syncResult);
	          }
	      }
	      return SyncAsyncResult;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$1 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  function unimplemented() {
	      throw new Error('unimplemented');
	  }
	  // group 0: "[prop] or (event) or @trigger"
	  // group 1: "prop" from "[prop]"
	  // group 2: "event" from "(event)"
	  // group 3: "@trigger" from "@trigger"
	  var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	  var CompileMetadataWithIdentifier = (function () {
	      function CompileMetadataWithIdentifier() {
	      }
	      Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
	          get: function () { return unimplemented(); },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileMetadataWithIdentifier;
	  }());
	  var CompileAnimationEntryMetadata = (function () {
	      function CompileAnimationEntryMetadata(name, definitions) {
	          if (name === void 0) { name = null; }
	          if (definitions === void 0) { definitions = null; }
	          this.name = name;
	          this.definitions = definitions;
	      }
	      return CompileAnimationEntryMetadata;
	  }());
	  var CompileAnimationStateMetadata = (function () {
	      function CompileAnimationStateMetadata() {
	      }
	      return CompileAnimationStateMetadata;
	  }());
	  var CompileAnimationStateDeclarationMetadata = (function (_super) {
	      __extends$1(CompileAnimationStateDeclarationMetadata, _super);
	      function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	          _super.call(this);
	          this.stateNameExpr = stateNameExpr;
	          this.styles = styles;
	      }
	      return CompileAnimationStateDeclarationMetadata;
	  }(CompileAnimationStateMetadata));
	  var CompileAnimationStateTransitionMetadata = (function (_super) {
	      __extends$1(CompileAnimationStateTransitionMetadata, _super);
	      function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	          _super.call(this);
	          this.stateChangeExpr = stateChangeExpr;
	          this.steps = steps;
	      }
	      return CompileAnimationStateTransitionMetadata;
	  }(CompileAnimationStateMetadata));
	  var CompileAnimationMetadata = (function () {
	      function CompileAnimationMetadata() {
	      }
	      return CompileAnimationMetadata;
	  }());
	  var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	      __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);
	      function CompileAnimationKeyframesSequenceMetadata(steps) {
	          if (steps === void 0) { steps = []; }
	          _super.call(this);
	          this.steps = steps;
	      }
	      return CompileAnimationKeyframesSequenceMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationStyleMetadata = (function (_super) {
	      __extends$1(CompileAnimationStyleMetadata, _super);
	      function CompileAnimationStyleMetadata(offset, styles) {
	          if (styles === void 0) { styles = null; }
	          _super.call(this);
	          this.offset = offset;
	          this.styles = styles;
	      }
	      return CompileAnimationStyleMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationAnimateMetadata = (function (_super) {
	      __extends$1(CompileAnimationAnimateMetadata, _super);
	      function CompileAnimationAnimateMetadata(timings, styles) {
	          if (timings === void 0) { timings = 0; }
	          if (styles === void 0) { styles = null; }
	          _super.call(this);
	          this.timings = timings;
	          this.styles = styles;
	      }
	      return CompileAnimationAnimateMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationWithStepsMetadata = (function (_super) {
	      __extends$1(CompileAnimationWithStepsMetadata, _super);
	      function CompileAnimationWithStepsMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this);
	          this.steps = steps;
	      }
	      return CompileAnimationWithStepsMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationSequenceMetadata = (function (_super) {
	      __extends$1(CompileAnimationSequenceMetadata, _super);
	      function CompileAnimationSequenceMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this, steps);
	      }
	      return CompileAnimationSequenceMetadata;
	  }(CompileAnimationWithStepsMetadata));
	  var CompileAnimationGroupMetadata = (function (_super) {
	      __extends$1(CompileAnimationGroupMetadata, _super);
	      function CompileAnimationGroupMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this, steps);
	      }
	      return CompileAnimationGroupMetadata;
	  }(CompileAnimationWithStepsMetadata));
	  var CompileIdentifierMetadata = (function () {
	      function CompileIdentifierMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, value = _b.value;
	          this.reference = reference;
	          this.name = name;
	          this.prefix = prefix;
	          this.moduleUrl = moduleUrl;
	          this.value = value;
	      }
	      Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
	          get: function () { return this; },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileIdentifierMetadata;
	  }());
	  var CompileDiDependencyMetadata = (function () {
	      function CompileDiDependencyMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, isValue = _b.isValue, query = _b.query, viewQuery = _b.viewQuery, token = _b.token, value = _b.value;
	          this.isAttribute = normalizeBool(isAttribute);
	          this.isSelf = normalizeBool(isSelf);
	          this.isHost = normalizeBool(isHost);
	          this.isSkipSelf = normalizeBool(isSkipSelf);
	          this.isOptional = normalizeBool(isOptional);
	          this.isValue = normalizeBool(isValue);
	          this.query = query;
	          this.viewQuery = viewQuery;
	          this.token = token;
	          this.value = value;
	      }
	      return CompileDiDependencyMetadata;
	  }());
	  var CompileProviderMetadata = (function () {
	      function CompileProviderMetadata(_a) {
	          var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	          this.token = token;
	          this.useClass = useClass;
	          this.useValue = useValue;
	          this.useExisting = useExisting;
	          this.useFactory = useFactory;
	          this.deps = normalizeBlank(deps);
	          this.multi = normalizeBool(multi);
	      }
	      return CompileProviderMetadata;
	  }());
	  var CompileFactoryMetadata = (function (_super) {
	      __extends$1(CompileFactoryMetadata, _super);
	      function CompileFactoryMetadata(_a) {
	          var reference = _a.reference, name = _a.name, moduleUrl = _a.moduleUrl, prefix = _a.prefix, diDeps = _a.diDeps, value = _a.value;
	          _super.call(this, { reference: reference, name: name, prefix: prefix, moduleUrl: moduleUrl, value: value });
	          this.diDeps = _normalizeArray(diDeps);
	      }
	      return CompileFactoryMetadata;
	  }(CompileIdentifierMetadata));
	  var CompileTokenMetadata = (function () {
	      function CompileTokenMetadata(_a) {
	          var value = _a.value, identifier = _a.identifier, identifierIsInstance = _a.identifierIsInstance;
	          this.value = value;
	          this.identifier = identifier;
	          this.identifierIsInstance = normalizeBool(identifierIsInstance);
	      }
	      Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
	          get: function () {
	              if (isPresent(this.identifier)) {
	                  return this.identifier.reference;
	              }
	              else {
	                  return this.value;
	              }
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(CompileTokenMetadata.prototype, "name", {
	          get: function () {
	              return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileTokenMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a type.
	   */
	  var CompileTypeMetadata = (function (_super) {
	      __extends$1(CompileTypeMetadata, _super);
	      function CompileTypeMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, value = _b.value, diDeps = _b.diDeps, lifecycleHooks = _b.lifecycleHooks;
	          _super.call(this, { reference: reference, name: name, moduleUrl: moduleUrl, prefix: prefix, value: value });
	          this.isHost = normalizeBool(isHost);
	          this.diDeps = _normalizeArray(diDeps);
	          this.lifecycleHooks = _normalizeArray(lifecycleHooks);
	      }
	      return CompileTypeMetadata;
	  }(CompileIdentifierMetadata));
	  var CompileQueryMetadata = (function () {
	      function CompileQueryMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName, read = _b.read;
	          this.selectors = selectors;
	          this.descendants = normalizeBool(descendants);
	          this.first = normalizeBool(first);
	          this.propertyName = propertyName;
	          this.read = read;
	      }
	      return CompileQueryMetadata;
	  }());
	  /**
	   * Metadata about a stylesheet
	   */
	  var CompileStylesheetMetadata = (function () {
	      function CompileStylesheetMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	          this.moduleUrl = moduleUrl;
	          this.styles = _normalizeArray(styles);
	          this.styleUrls = _normalizeArray(styleUrls);
	      }
	      return CompileStylesheetMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a template.
	   */
	  var CompileTemplateMetadata = (function () {
	      function CompileTemplateMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
	          this.encapsulation = encapsulation;
	          this.template = template;
	          this.templateUrl = templateUrl;
	          this.styles = _normalizeArray(styles);
	          this.styleUrls = _normalizeArray(styleUrls);
	          this.externalStylesheets = _normalizeArray(externalStylesheets);
	          this.animations = isPresent(animations) ? ListWrapper.flatten(animations) : [];
	          this.ngContentSelectors = isPresent(ngContentSelectors) ? ngContentSelectors : [];
	          if (isPresent(interpolation) && interpolation.length != 2) {
	              throw new Error("'interpolation' should have a start and an end symbol.");
	          }
	          this.interpolation = interpolation;
	      }
	      return CompileTemplateMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a directive.
	   */
	  var CompileDirectiveMetadata = (function () {
	      function CompileDirectiveMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	          this.type = type;
	          this.isComponent = isComponent;
	          this.selector = selector;
	          this.exportAs = exportAs;
	          this.changeDetection = changeDetection;
	          this.inputs = inputs;
	          this.outputs = outputs;
	          this.hostListeners = hostListeners;
	          this.hostProperties = hostProperties;
	          this.hostAttributes = hostAttributes;
	          this.providers = _normalizeArray(providers);
	          this.viewProviders = _normalizeArray(viewProviders);
	          this.queries = _normalizeArray(queries);
	          this.viewQueries = _normalizeArray(viewQueries);
	          this.entryComponents = _normalizeArray(entryComponents);
	          this.template = template;
	      }
	      CompileDirectiveMetadata.create = function (_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	          var hostListeners = {};
	          var hostProperties = {};
	          var hostAttributes = {};
	          if (isPresent(host)) {
	              StringMapWrapper.forEach(host, function (value, key) {
	                  var matches = key.match(HOST_REG_EXP);
	                  if (matches === null) {
	                      hostAttributes[key] = value;
	                  }
	                  else if (isPresent(matches[1])) {
	                      hostProperties[matches[1]] = value;
	                  }
	                  else if (isPresent(matches[2])) {
	                      hostListeners[matches[2]] = value;
	                  }
	              });
	          }
	          var inputsMap = {};
	          if (isPresent(inputs)) {
	              inputs.forEach(function (bindConfig) {
	                  // canonical syntax: `dirProp: elProp`
	                  // if there is no `:`, use dirProp = elProp
	                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                  inputsMap[parts[0]] = parts[1];
	              });
	          }
	          var outputsMap = {};
	          if (isPresent(outputs)) {
	              outputs.forEach(function (bindConfig) {
	                  // canonical syntax: `dirProp: elProp`
	                  // if there is no `:`, use dirProp = elProp
	                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                  outputsMap[parts[0]] = parts[1];
	              });
	          }
	          return new CompileDirectiveMetadata({
	              type: type,
	              isComponent: normalizeBool(isComponent), selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	              inputs: inputsMap,
	              outputs: outputsMap,
	              hostListeners: hostListeners,
	              hostProperties: hostProperties,
	              hostAttributes: hostAttributes,
	              providers: providers,
	              viewProviders: viewProviders,
	              queries: queries,
	              viewQueries: viewQueries,
	              entryComponents: entryComponents,
	              template: template,
	          });
	      };
	      Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
	          get: function () { return this.type; },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileDirectiveMetadata;
	  }());
	  /**
	   * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
	   */
	  function createHostComponentMeta(compMeta) {
	      var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	      return CompileDirectiveMetadata.create({
	          type: new CompileTypeMetadata({
	              reference: Object,
	              name: compMeta.type.name + "_Host",
	              moduleUrl: compMeta.type.moduleUrl,
	              isHost: true
	          }),
	          template: new CompileTemplateMetadata({
	              encapsulation: _angular_core.ViewEncapsulation.None,
	              template: template,
	              templateUrl: '',
	              styles: [],
	              styleUrls: [],
	              ngContentSelectors: [],
	              animations: []
	          }),
	          changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	          inputs: [],
	          outputs: [],
	          host: {},
	          isComponent: true,
	          selector: '*',
	          providers: [],
	          viewProviders: [],
	          queries: [],
	          viewQueries: []
	      });
	  }
	  var CompilePipeMetadata = (function () {
	      function CompilePipeMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	          this.type = type;
	          this.name = name;
	          this.pure = normalizeBool(pure);
	      }
	      Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
	          get: function () { return this.type; },
	          enumerable: true,
	          configurable: true
	      });
	      return CompilePipeMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a directive.
	   */
	  var CompileNgModuleMetadata = (function () {
	      function CompileNgModuleMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
	          this.type = type;
	          this.declaredDirectives = _normalizeArray(declaredDirectives);
	          this.exportedDirectives = _normalizeArray(exportedDirectives);
	          this.declaredPipes = _normalizeArray(declaredPipes);
	          this.exportedPipes = _normalizeArray(exportedPipes);
	          this.providers = _normalizeArray(providers);
	          this.entryComponents = _normalizeArray(entryComponents);
	          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	          this.importedModules = _normalizeArray(importedModules);
	          this.exportedModules = _normalizeArray(exportedModules);
	          this.schemas = _normalizeArray(schemas);
	          this.id = id;
	          this.transitiveModule = transitiveModule;
	      }
	      Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
	          get: function () { return this.type; },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileNgModuleMetadata;
	  }());
	  var TransitiveCompileNgModuleMetadata = (function () {
	      function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes) {
	          var _this = this;
	          this.modules = modules;
	          this.providers = providers;
	          this.entryComponents = entryComponents;
	          this.directives = directives;
	          this.pipes = pipes;
	          this.directivesSet = new Set();
	          this.pipesSet = new Set();
	          directives.forEach(function (dir) { return _this.directivesSet.add(dir.type.reference); });
	          pipes.forEach(function (pipe) { return _this.pipesSet.add(pipe.type.reference); });
	      }
	      return TransitiveCompileNgModuleMetadata;
	  }());
	  function removeIdentifierDuplicates(items) {
	      var map = new Map();
	      items.forEach(function (item) {
	          if (!map.get(item.identifier.reference)) {
	              map.set(item.identifier.reference, item);
	          }
	      });
	      return MapWrapper.values(map);
	  }
	  function _normalizeArray(obj) {
	      return isPresent(obj) ? obj : [];
	  }
	  function isStaticSymbol(value) {
	      return isStringMap(value) && isPresent(value['name']) && isPresent(value['filePath']);
	  }
	  var ProviderMeta = (function () {
	      function ProviderMeta(token, _a) {
	          var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	          this.token = token;
	          this.useClass = useClass;
	          this.useValue = useValue;
	          this.useExisting = useExisting;
	          this.useFactory = useFactory;
	          this.dependencies = deps;
	          this.multi = !!multi;
	      }
	      return ProviderMeta;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$3 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var ParserError = (function () {
	      function ParserError(message, input, errLocation, ctxLocation) {
	          this.input = input;
	          this.errLocation = errLocation;
	          this.ctxLocation = ctxLocation;
	          this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	      }
	      return ParserError;
	  }());
	  var ParseSpan = (function () {
	      function ParseSpan(start, end) {
	          this.start = start;
	          this.end = end;
	      }
	      return ParseSpan;
	  }());
	  var AST = (function () {
	      function AST(span) {
	          this.span = span;
	      }
	      AST.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return null;
	      };
	      AST.prototype.toString = function () { return 'AST'; };
	      return AST;
	  }());
	  /**
	   * Represents a quoted expression of the form:
	   *
	   * quote = prefix `:` uninterpretedExpression
	   * prefix = identifier
	   * uninterpretedExpression = arbitrary string
	   *
	   * A quoted expression is meant to be pre-processed by an AST transformer that
	   * converts it into another AST that no longer contains quoted expressions.
	   * It is meant to allow third-party developers to extend Angular template
	   * expression language. The `uninterpretedExpression` part of the quote is
	   * therefore not interpreted by the Angular's own expression parser.
	   */
	  var Quote = (function (_super) {
	      __extends$3(Quote, _super);
	      function Quote(span, prefix, uninterpretedExpression, location) {
	          _super.call(this, span);
	          this.prefix = prefix;
	          this.uninterpretedExpression = uninterpretedExpression;
	          this.location = location;
	      }
	      Quote.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitQuote(this, context);
	      };
	      Quote.prototype.toString = function () { return 'Quote'; };
	      return Quote;
	  }(AST));
	  var EmptyExpr = (function (_super) {
	      __extends$3(EmptyExpr, _super);
	      function EmptyExpr() {
	          _super.apply(this, arguments);
	      }
	      EmptyExpr.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          // do nothing
	      };
	      return EmptyExpr;
	  }(AST));
	  var ImplicitReceiver = (function (_super) {
	      __extends$3(ImplicitReceiver, _super);
	      function ImplicitReceiver() {
	          _super.apply(this, arguments);
	      }
	      ImplicitReceiver.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitImplicitReceiver(this, context);
	      };
	      return ImplicitReceiver;
	  }(AST));
	  /**
	   * Multiple expressions separated by a semicolon.
	   */
	  var Chain = (function (_super) {
	      __extends$3(Chain, _super);
	      function Chain(span, expressions) {
	          _super.call(this, span);
	          this.expressions = expressions;
	      }
	      Chain.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitChain(this, context);
	      };
	      return Chain;
	  }(AST));
	  var Conditional = (function (_super) {
	      __extends$3(Conditional, _super);
	      function Conditional(span, condition, trueExp, falseExp) {
	          _super.call(this, span);
	          this.condition = condition;
	          this.trueExp = trueExp;
	          this.falseExp = falseExp;
	      }
	      Conditional.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitConditional(this, context);
	      };
	      return Conditional;
	  }(AST));
	  var PropertyRead = (function (_super) {
	      __extends$3(PropertyRead, _super);
	      function PropertyRead(span, receiver, name) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      PropertyRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPropertyRead(this, context);
	      };
	      return PropertyRead;
	  }(AST));
	  var PropertyWrite = (function (_super) {
	      __extends$3(PropertyWrite, _super);
	      function PropertyWrite(span, receiver, name, value) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.value = value;
	      }
	      PropertyWrite.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPropertyWrite(this, context);
	      };
	      return PropertyWrite;
	  }(AST));
	  var SafePropertyRead = (function (_super) {
	      __extends$3(SafePropertyRead, _super);
	      function SafePropertyRead(span, receiver, name) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      SafePropertyRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitSafePropertyRead(this, context);
	      };
	      return SafePropertyRead;
	  }(AST));
	  var KeyedRead = (function (_super) {
	      __extends$3(KeyedRead, _super);
	      function KeyedRead(span, obj, key) {
	          _super.call(this, span);
	          this.obj = obj;
	          this.key = key;
	      }
	      KeyedRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitKeyedRead(this, context);
	      };
	      return KeyedRead;
	  }(AST));
	  var KeyedWrite = (function (_super) {
	      __extends$3(KeyedWrite, _super);
	      function KeyedWrite(span, obj, key, value) {
	          _super.call(this, span);
	          this.obj = obj;
	          this.key = key;
	          this.value = value;
	      }
	      KeyedWrite.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitKeyedWrite(this, context);
	      };
	      return KeyedWrite;
	  }(AST));
	  var BindingPipe = (function (_super) {
	      __extends$3(BindingPipe, _super);
	      function BindingPipe(span, exp, name, args) {
	          _super.call(this, span);
	          this.exp = exp;
	          this.name = name;
	          this.args = args;
	      }
	      BindingPipe.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPipe(this, context);
	      };
	      return BindingPipe;
	  }(AST));
	  var LiteralPrimitive = (function (_super) {
	      __extends$3(LiteralPrimitive, _super);
	      function LiteralPrimitive(span, value) {
	          _super.call(this, span);
	          this.value = value;
	      }
	      LiteralPrimitive.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralPrimitive(this, context);
	      };
	      return LiteralPrimitive;
	  }(AST));
	  var LiteralArray = (function (_super) {
	      __extends$3(LiteralArray, _super);
	      function LiteralArray(span, expressions) {
	          _super.call(this, span);
	          this.expressions = expressions;
	      }
	      LiteralArray.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralArray(this, context);
	      };
	      return LiteralArray;
	  }(AST));
	  var LiteralMap = (function (_super) {
	      __extends$3(LiteralMap, _super);
	      function LiteralMap(span, keys, values) {
	          _super.call(this, span);
	          this.keys = keys;
	          this.values = values;
	      }
	      LiteralMap.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralMap(this, context);
	      };
	      return LiteralMap;
	  }(AST));
	  var Interpolation = (function (_super) {
	      __extends$3(Interpolation, _super);
	      function Interpolation(span, strings, expressions) {
	          _super.call(this, span);
	          this.strings = strings;
	          this.expressions = expressions;
	      }
	      Interpolation.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitInterpolation(this, context);
	      };
	      return Interpolation;
	  }(AST));
	  var Binary = (function (_super) {
	      __extends$3(Binary, _super);
	      function Binary(span, operation, left, right) {
	          _super.call(this, span);
	          this.operation = operation;
	          this.left = left;
	          this.right = right;
	      }
	      Binary.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitBinary(this, context);
	      };
	      return Binary;
	  }(AST));
	  var PrefixNot = (function (_super) {
	      __extends$3(PrefixNot, _super);
	      function PrefixNot(span, expression) {
	          _super.call(this, span);
	          this.expression = expression;
	      }
	      PrefixNot.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPrefixNot(this, context);
	      };
	      return PrefixNot;
	  }(AST));
	  var MethodCall = (function (_super) {
	      __extends$3(MethodCall, _super);
	      function MethodCall(span, receiver, name, args) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.args = args;
	      }
	      MethodCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitMethodCall(this, context);
	      };
	      return MethodCall;
	  }(AST));
	  var SafeMethodCall = (function (_super) {
	      __extends$3(SafeMethodCall, _super);
	      function SafeMethodCall(span, receiver, name, args) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.args = args;
	      }
	      SafeMethodCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitSafeMethodCall(this, context);
	      };
	      return SafeMethodCall;
	  }(AST));
	  var FunctionCall = (function (_super) {
	      __extends$3(FunctionCall, _super);
	      function FunctionCall(span, target, args) {
	          _super.call(this, span);
	          this.target = target;
	          this.args = args;
	      }
	      FunctionCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitFunctionCall(this, context);
	      };
	      return FunctionCall;
	  }(AST));
	  var ASTWithSource = (function (_super) {
	      __extends$3(ASTWithSource, _super);
	      function ASTWithSource(ast, source, location, errors) {
	          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
	          this.ast = ast;
	          this.source = source;
	          this.location = location;
	          this.errors = errors;
	      }
	      ASTWithSource.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return this.ast.visit(visitor, context);
	      };
	      ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	      return ASTWithSource;
	  }(AST));
	  var TemplateBinding = (function () {
	      function TemplateBinding(key, keyIsVar, name, expression) {
	          this.key = key;
	          this.keyIsVar = keyIsVar;
	          this.name = name;
	          this.expression = expression;
	      }
	      return TemplateBinding;
	  }());
	  var RecursiveAstVisitor = (function () {
	      function RecursiveAstVisitor() {
	      }
	      RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	          ast.left.visit(this);
	          ast.right.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	      RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	          ast.condition.visit(this);
	          ast.trueExp.visit(this);
	          ast.falseExp.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	          ast.exp.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	          ast.target.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	      RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	          return this.visitAll(ast.expressions, context);
	      };
	      RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	          ast.obj.visit(this);
	          ast.key.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	          ast.obj.visit(this);
	          ast.key.visit(this);
	          ast.value.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	          return this.visitAll(ast.expressions, context);
	      };
	      RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	      RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	      RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	          ast.receiver.visit(this);
	          return this.visitAll(ast.args, context);
	      };
	      RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	          ast.expression.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	          ast.receiver.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	          ast.receiver.visit(this);
	          ast.value.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	          ast.receiver.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	          ast.receiver.visit(this);
	          return this.visitAll(ast.args, context);
	      };
	      RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	          var _this = this;
	          asts.forEach(function (ast) { return ast.visit(_this, context); });
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	      return RecursiveAstVisitor;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var $EOF = 0;
	  var $TAB = 9;
	  var $LF = 10;
	  var $VTAB = 11;
	  var $FF = 12;
	  var $CR = 13;
	  var $SPACE = 32;
	  var $BANG = 33;
	  var $DQ = 34;
	  var $HASH = 35;
	  var $$ = 36;
	  var $PERCENT = 37;
	  var $AMPERSAND = 38;
	  var $SQ = 39;
	  var $LPAREN = 40;
	  var $RPAREN = 41;
	  var $STAR = 42;
	  var $PLUS = 43;
	  var $COMMA = 44;
	  var $MINUS = 45;
	  var $PERIOD = 46;
	  var $SLASH = 47;
	  var $COLON = 58;
	  var $SEMICOLON = 59;
	  var $LT = 60;
	  var $EQ = 61;
	  var $GT = 62;
	  var $QUESTION = 63;
	  var $0 = 48;
	  var $9 = 57;
	  var $A = 65;
	  var $E = 69;
	  var $F = 70;
	  var $X = 88;
	  var $Z = 90;
	  var $LBRACKET = 91;
	  var $BACKSLASH = 92;
	  var $RBRACKET = 93;
	  var $CARET = 94;
	  var $_ = 95;
	  var $a = 97;
	  var $e = 101;
	  var $f = 102;
	  var $n = 110;
	  var $r = 114;
	  var $t = 116;
	  var $u = 117;
	  var $v = 118;
	  var $x = 120;
	  var $z = 122;
	  var $LBRACE = 123;
	  var $BAR = 124;
	  var $RBRACE = 125;
	  var $NBSP = 160;
	  var $BT = 96;
	  function isWhitespace(code) {
	      return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	  }
	  function isDigit(code) {
	      return $0 <= code && code <= $9;
	  }
	  function isAsciiLetter(code) {
	      return code >= $a && code <= $z || code >= $A && code <= $Z;
	  }
	  function isAsciiHexDigit(code) {
	      return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	  }

	  function assertArrayOfStrings(identifier, value) {
	      if (!_angular_core.isDevMode() || isBlank(value)) {
	          return;
	      }
	      if (!isArray(value)) {
	          throw new Error("Expected '" + identifier + "' to be an array of strings.");
	      }
	      for (var i = 0; i < value.length; i += 1) {
	          if (!isString(value[i])) {
	              throw new Error("Expected '" + identifier + "' to be an array of strings.");
	          }
	      }
	  }
	  var INTERPOLATION_BLACKLIST_REGEXPS = [
	      /^\s*$/,
	      /[<>]/,
	      /^[{}]$/,
	      /&(#|[a-z])/i,
	      /^\/\//,
	  ];
	  function assertInterpolationSymbols(identifier, value) {
	      if (isPresent(value) && !(isArray(value) && value.length == 2)) {
	          throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	      }
	      else if (_angular_core.isDevMode() && !isBlank(value)) {
	          var start_1 = value[0];
	          var end_1 = value[1];
	          // black list checking
	          INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	              if (regexp.test(start_1) || regexp.test(end_1)) {
	                  throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	              }
	          });
	      }
	  }

	  var InterpolationConfig = (function () {
	      function InterpolationConfig(start, end) {
	          this.start = start;
	          this.end = end;
	      }
	      InterpolationConfig.fromArray = function (markers) {
	          if (!markers) {
	              return DEFAULT_INTERPOLATION_CONFIG;
	          }
	          assertInterpolationSymbols('interpolation', markers);
	          return new InterpolationConfig(markers[0], markers[1]);
	      };
	      ;
	      return InterpolationConfig;
	  }());
	  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

	  var TokenType;
	  (function (TokenType) {
	      TokenType[TokenType["Character"] = 0] = "Character";
	      TokenType[TokenType["Identifier"] = 1] = "Identifier";
	      TokenType[TokenType["Keyword"] = 2] = "Keyword";
	      TokenType[TokenType["String"] = 3] = "String";
	      TokenType[TokenType["Operator"] = 4] = "Operator";
	      TokenType[TokenType["Number"] = 5] = "Number";
	      TokenType[TokenType["Error"] = 6] = "Error";
	  })(TokenType || (TokenType = {}));
	  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	  var Lexer = (function () {
	      function Lexer() {
	      }
	      Lexer.prototype.tokenize = function (text) {
	          var scanner = new _Scanner(text);
	          var tokens = [];
	          var token = scanner.scanToken();
	          while (token != null) {
	              tokens.push(token);
	              token = scanner.scanToken();
	          }
	          return tokens;
	      };
	      Lexer.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      Lexer.ctorParameters = [];
	      return Lexer;
	  }());
	  var Token = (function () {
	      function Token(index, type, numValue, strValue) {
	          this.index = index;
	          this.type = type;
	          this.numValue = numValue;
	          this.strValue = strValue;
	      }
	      Token.prototype.isCharacter = function (code) {
	          return this.type == TokenType.Character && this.numValue == code;
	      };
	      Token.prototype.isNumber = function () { return this.type == TokenType.Number; };
	      Token.prototype.isString = function () { return this.type == TokenType.String; };
	      Token.prototype.isOperator = function (operater) {
	          return this.type == TokenType.Operator && this.strValue == operater;
	      };
	      Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };
	      Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };
	      Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };
	      Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };
	      Token.prototype.isKeywordUndefined = function () {
	          return this.type == TokenType.Keyword && this.strValue == 'undefined';
	      };
	      Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };
	      Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };
	      Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };
	      Token.prototype.isError = function () { return this.type == TokenType.Error; };
	      Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };
	      Token.prototype.toString = function () {
	          switch (this.type) {
	              case TokenType.Character:
	              case TokenType.Identifier:
	              case TokenType.Keyword:
	              case TokenType.Operator:
	              case TokenType.String:
	              case TokenType.Error:
	                  return this.strValue;
	              case TokenType.Number:
	                  return this.numValue.toString();
	              default:
	                  return null;
	          }
	      };
	      return Token;
	  }());
	  function newCharacterToken(index, code) {
	      return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));
	  }
	  function newIdentifierToken(index, text) {
	      return new Token(index, TokenType.Identifier, 0, text);
	  }
	  function newKeywordToken(index, text) {
	      return new Token(index, TokenType.Keyword, 0, text);
	  }
	  function newOperatorToken(index, text) {
	      return new Token(index, TokenType.Operator, 0, text);
	  }
	  function newStringToken(index, text) {
	      return new Token(index, TokenType.String, 0, text);
	  }
	  function newNumberToken(index, n) {
	      return new Token(index, TokenType.Number, n, '');
	  }
	  function newErrorToken(index, message) {
	      return new Token(index, TokenType.Error, 0, message);
	  }
	  var EOF = new Token(-1, TokenType.Character, 0, '');
	  var _Scanner = (function () {
	      function _Scanner(input) {
	          this.input = input;
	          this.peek = 0;
	          this.index = -1;
	          this.length = input.length;
	          this.advance();
	      }
	      _Scanner.prototype.advance = function () {
	          this.peek =
	              ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);
	      };
	      _Scanner.prototype.scanToken = function () {
	          var input = this.input, length = this.length, peek = this.peek, index = this.index;
	          // Skip whitespace.
	          while (peek <= $SPACE) {
	              if (++index >= length) {
	                  peek = $EOF;
	                  break;
	              }
	              else {
	                  peek = StringWrapper.charCodeAt(input, index);
	              }
	          }
	          this.peek = peek;
	          this.index = index;
	          if (index >= length) {
	              return null;
	          }
	          // Handle identifiers and numbers.
	          if (isIdentifierStart(peek))
	              return this.scanIdentifier();
	          if (isDigit(peek))
	              return this.scanNumber(index);
	          var start = index;
	          switch (peek) {
	              case $PERIOD:
	                  this.advance();
	                  return isDigit(this.peek) ? this.scanNumber(start) :
	                      newCharacterToken(start, $PERIOD);
	              case $LPAREN:
	              case $RPAREN:
	              case $LBRACE:
	              case $RBRACE:
	              case $LBRACKET:
	              case $RBRACKET:
	              case $COMMA:
	              case $COLON:
	              case $SEMICOLON:
	                  return this.scanCharacter(start, peek);
	              case $SQ:
	              case $DQ:
	                  return this.scanString();
	              case $HASH:
	              case $PLUS:
	              case $MINUS:
	              case $STAR:
	              case $SLASH:
	              case $PERCENT:
	              case $CARET:
	                  return this.scanOperator(start, StringWrapper.fromCharCode(peek));
	              case $QUESTION:
	                  return this.scanComplexOperator(start, '?', $PERIOD, '.');
	              case $LT:
	              case $GT:
	                  return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=');
	              case $BANG:
	              case $EQ:
	                  return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=', $EQ, '=');
	              case $AMPERSAND:
	                  return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	              case $BAR:
	                  return this.scanComplexOperator(start, '|', $BAR, '|');
	              case $NBSP:
	                  while (isWhitespace(this.peek))
	                      this.advance();
	                  return this.scanToken();
	          }
	          this.advance();
	          return this.error("Unexpected character [" + StringWrapper.fromCharCode(peek) + "]", 0);
	      };
	      _Scanner.prototype.scanCharacter = function (start, code) {
	          this.advance();
	          return newCharacterToken(start, code);
	      };
	      _Scanner.prototype.scanOperator = function (start, str) {
	          this.advance();
	          return newOperatorToken(start, str);
	      };
	      /**
	       * Tokenize a 2/3 char long operator
	       *
	       * @param start start index in the expression
	       * @param one first symbol (always part of the operator)
	       * @param twoCode code point for the second symbol
	       * @param two second symbol (part of the operator when the second code point matches)
	       * @param threeCode code point for the third symbol
	       * @param three third symbol (part of the operator when provided and matches source expression)
	       * @returns {Token}
	       */
	      _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	          this.advance();
	          var str = one;
	          if (this.peek == twoCode) {
	              this.advance();
	              str += two;
	          }
	          if (isPresent(threeCode) && this.peek == threeCode) {
	              this.advance();
	              str += three;
	          }
	          return newOperatorToken(start, str);
	      };
	      _Scanner.prototype.scanIdentifier = function () {
	          var start = this.index;
	          this.advance();
	          while (isIdentifierPart(this.peek))
	              this.advance();
	          var str = this.input.substring(start, this.index);
	          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	              newIdentifierToken(start, str);
	      };
	      _Scanner.prototype.scanNumber = function (start) {
	          var simple = (this.index === start);
	          this.advance(); // Skip initial digit.
	          while (true) {
	              if (isDigit(this.peek)) {
	              }
	              else if (this.peek == $PERIOD) {
	                  simple = false;
	              }
	              else if (isExponentStart(this.peek)) {
	                  this.advance();
	                  if (isExponentSign(this.peek))
	                      this.advance();
	                  if (!isDigit(this.peek))
	                      return this.error('Invalid exponent', -1);
	                  simple = false;
	              }
	              else {
	                  break;
	              }
	              this.advance();
	          }
	          var str = this.input.substring(start, this.index);
	          var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
	          return newNumberToken(start, value);
	      };
	      _Scanner.prototype.scanString = function () {
	          var start = this.index;
	          var quote = this.peek;
	          this.advance(); // Skip initial quote.
	          var buffer;
	          var marker = this.index;
	          var input = this.input;
	          while (this.peek != quote) {
	              if (this.peek == $BACKSLASH) {
	                  if (buffer == null)
	                      buffer = new StringJoiner();
	                  buffer.add(input.substring(marker, this.index));
	                  this.advance();
	                  var unescapedCode;
	                  if (this.peek == $u) {
	                      // 4 character hex code for unicode character.
	                      var hex = input.substring(this.index + 1, this.index + 5);
	                      try {
	                          unescapedCode = NumberWrapper.parseInt(hex, 16);
	                      }
	                      catch (e) {
	                          return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                      }
	                      for (var i = 0; i < 5; i++) {
	                          this.advance();
	                      }
	                  }
	                  else {
	                      unescapedCode = unescape(this.peek);
	                      this.advance();
	                  }
	                  buffer.add(StringWrapper.fromCharCode(unescapedCode));
	                  marker = this.index;
	              }
	              else if (this.peek == $EOF) {
	                  return this.error('Unterminated quote', 0);
	              }
	              else {
	                  this.advance();
	              }
	          }
	          var last = input.substring(marker, this.index);
	          this.advance(); // Skip terminating quote.
	          // Compute the unescaped string value.
	          var unescaped = last;
	          if (buffer != null) {
	              buffer.add(last);
	              unescaped = buffer.toString();
	          }
	          return newStringToken(start, unescaped);
	      };
	      _Scanner.prototype.error = function (message, offset) {
	          var position = this.index + offset;
	          return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	      };
	      return _Scanner;
	  }());
	  function isIdentifierStart(code) {
	      return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	          (code == $_) || (code == $$);
	  }
	  function isIdentifier(input) {
	      if (input.length == 0)
	          return false;
	      var scanner = new _Scanner(input);
	      if (!isIdentifierStart(scanner.peek))
	          return false;
	      scanner.advance();
	      while (scanner.peek !== $EOF) {
	          if (!isIdentifierPart(scanner.peek))
	              return false;
	          scanner.advance();
	      }
	      return true;
	  }
	  function isIdentifierPart(code) {
	      return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	          (code == $$);
	  }
	  function isExponentStart(code) {
	      return code == $e || code == $E;
	  }
	  function isExponentSign(code) {
	      return code == $MINUS || code == $PLUS;
	  }
	  function isQuote(code) {
	      return code === $SQ || code === $DQ || code === $BT;
	  }
	  function unescape(code) {
	      switch (code) {
	          case $n:
	              return $LF;
	          case $f:
	              return $FF;
	          case $r:
	              return $CR;
	          case $t:
	              return $TAB;
	          case $v:
	              return $VTAB;
	          default:
	              return code;
	      }
	  }

	  var SplitInterpolation = (function () {
	      function SplitInterpolation(strings, expressions) {
	          this.strings = strings;
	          this.expressions = expressions;
	      }
	      return SplitInterpolation;
	  }());
	  var TemplateBindingParseResult = (function () {
	      function TemplateBindingParseResult(templateBindings, warnings, errors) {
	          this.templateBindings = templateBindings;
	          this.warnings = warnings;
	          this.errors = errors;
	      }
	      return TemplateBindingParseResult;
	  }());
	  function _createInterpolateRegExp(config) {
	      var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	      return new RegExp(pattern, 'g');
	  }
	  var Parser = (function () {
	      function Parser(_lexer) {
	          this._lexer = _lexer;
	          this.errors = [];
	      }
	      Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          this._checkNoInterpolation(input, location, interpolationConfig);
	          var tokens = this._lexer.tokenize(this._stripComments(input));
	          var ast = new _ParseAST(input, location, tokens, true, this.errors).parseChain();
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var ast = this._parseBindingAst(input, location, interpolationConfig);
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var ast = this._parseBindingAst(input, location, interpolationConfig);
	          if (!SimpleExpressionChecker.check(ast)) {
	              this._reportError('Host binding expression can only contain field access and constants', input, location);
	          }
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	      };
	      Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	          // Quotes expressions use 3rd-party expression language. We don't want to use
	          // our lexer or parser for that, so we check for that ahead of time.
	          var quote = this._parseQuote(input, location);
	          if (isPresent(quote)) {
	              return quote;
	          }
	          this._checkNoInterpolation(input, location, interpolationConfig);
	          var tokens = this._lexer.tokenize(this._stripComments(input));
	          return new _ParseAST(input, location, tokens, false, this.errors).parseChain();
	      };
	      Parser.prototype._parseQuote = function (input, location) {
	          if (isBlank(input))
	              return null;
	          var prefixSeparatorIndex = input.indexOf(':');
	          if (prefixSeparatorIndex == -1)
	              return null;
	          var prefix = input.substring(0, prefixSeparatorIndex).trim();
	          if (!isIdentifier(prefix))
	              return null;
	          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	      };
	      Parser.prototype.parseTemplateBindings = function (input, location) {
	          var tokens = this._lexer.tokenize(input);
	          return new _ParseAST(input, location, tokens, false, this.errors).parseTemplateBindings();
	      };
	      Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var split = this.splitInterpolation(input, location, interpolationConfig);
	          if (split == null)
	              return null;
	          var expressions = [];
	          for (var i = 0; i < split.expressions.length; ++i) {
	              var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	              var ast = new _ParseAST(input, location, tokens, false, this.errors).parseChain();
	              expressions.push(ast);
	          }
	          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	      };
	      Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var regexp = _createInterpolateRegExp(interpolationConfig);
	          var parts = StringWrapper.split(input, regexp);
	          if (parts.length <= 1) {
	              return null;
	          }
	          var strings = [];
	          var expressions = [];
	          for (var i = 0; i < parts.length; i++) {
	              var part = parts[i];
	              if (i % 2 === 0) {
	                  // fixed string
	                  strings.push(part);
	              }
	              else if (part.trim().length > 0) {
	                  expressions.push(part);
	              }
	              else {
	                  this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	              }
	          }
	          return new SplitInterpolation(strings, expressions);
	      };
	      Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
	      };
	      Parser.prototype._stripComments = function (input) {
	          var i = this._commentStart(input);
	          return isPresent(i) ? input.substring(0, i).trim() : input;
	      };
	      Parser.prototype._commentStart = function (input) {
	          var outerQuote = null;
	          for (var i = 0; i < input.length - 1; i++) {
	              var char = StringWrapper.charCodeAt(input, i);
	              var nextChar = StringWrapper.charCodeAt(input, i + 1);
	              if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
	                  return i;
	              if (outerQuote === char) {
	                  outerQuote = null;
	              }
	              else if (isBlank(outerQuote) && isQuote(char)) {
	                  outerQuote = char;
	              }
	          }
	          return null;
	      };
	      Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	          var regexp = _createInterpolateRegExp(interpolationConfig);
	          var parts = StringWrapper.split(input, regexp);
	          if (parts.length > 1) {
	              this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	          }
	      };
	      Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	          var errLocation = '';
	          for (var j = 0; j < partInErrIdx; j++) {
	              errLocation += j % 2 === 0 ?
	                  parts[j] :
	                  "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	          }
	          return errLocation.length;
	      };
	      Parser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      Parser.ctorParameters = [
	          { type: Lexer, },
	      ];
	      return Parser;
	  }());
	  var _ParseAST = (function () {
	      function _ParseAST(input, location, tokens, parseAction, errors) {
	          this.input = input;
	          this.location = location;
	          this.tokens = tokens;
	          this.parseAction = parseAction;
	          this.errors = errors;
	          this.rparensExpected = 0;
	          this.rbracketsExpected = 0;
	          this.rbracesExpected = 0;
	          this.index = 0;
	      }
	      _ParseAST.prototype.peek = function (offset) {
	          var i = this.index + offset;
	          return i < this.tokens.length ? this.tokens[i] : EOF;
	      };
	      Object.defineProperty(_ParseAST.prototype, "next", {
	          get: function () { return this.peek(0); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	          get: function () {
	              return (this.index < this.tokens.length) ? this.next.index : this.input.length;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	      _ParseAST.prototype.advance = function () { this.index++; };
	      _ParseAST.prototype.optionalCharacter = function (code) {
	          if (this.next.isCharacter(code)) {
	              this.advance();
	              return true;
	          }
	          else {
	              return false;
	          }
	      };
	      _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	      _ParseAST.prototype.expectCharacter = function (code) {
	          if (this.optionalCharacter(code))
	              return;
	          this.error("Missing expected " + StringWrapper.fromCharCode(code));
	      };
	      _ParseAST.prototype.optionalOperator = function (op) {
	          if (this.next.isOperator(op)) {
	              this.advance();
	              return true;
	          }
	          else {
	              return false;
	          }
	      };
	      _ParseAST.prototype.expectOperator = function (operator) {
	          if (this.optionalOperator(operator))
	              return;
	          this.error("Missing expected operator " + operator);
	      };
	      _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	          var n = this.next;
	          if (!n.isIdentifier() && !n.isKeyword()) {
	              this.error("Unexpected token " + n + ", expected identifier or keyword");
	              return '';
	          }
	          this.advance();
	          return n.toString();
	      };
	      _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	          var n = this.next;
	          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	              this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	              return '';
	          }
	          this.advance();
	          return n.toString();
	      };
	      _ParseAST.prototype.parseChain = function () {
	          var exprs = [];
	          var start = this.inputIndex;
	          while (this.index < this.tokens.length) {
	              var expr = this.parsePipe();
	              exprs.push(expr);
	              if (this.optionalCharacter($SEMICOLON)) {
	                  if (!this.parseAction) {
	                      this.error('Binding expression cannot contain chained expression');
	                  }
	                  while (this.optionalCharacter($SEMICOLON)) {
	                  } // read all semicolons
	              }
	              else if (this.index < this.tokens.length) {
	                  this.error("Unexpected token '" + this.next + "'");
	              }
	          }
	          if (exprs.length == 0)
	              return new EmptyExpr(this.span(start));
	          if (exprs.length == 1)
	              return exprs[0];
	          return new Chain(this.span(start), exprs);
	      };
	      _ParseAST.prototype.parsePipe = function () {
	          var result = this.parseExpression();
	          if (this.optionalOperator('|')) {
	              if (this.parseAction) {
	                  this.error('Cannot have a pipe in an action expression');
	              }
	              do {
	                  var name = this.expectIdentifierOrKeyword();
	                  var args = [];
	                  while (this.optionalCharacter($COLON)) {
	                      args.push(this.parseExpression());
	                  }
	                  result = new BindingPipe(this.span(result.span.start), result, name, args);
	              } while (this.optionalOperator('|'));
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	      _ParseAST.prototype.parseConditional = function () {
	          var start = this.inputIndex;
	          var result = this.parseLogicalOr();
	          if (this.optionalOperator('?')) {
	              var yes = this.parsePipe();
	              var no = void 0;
	              if (!this.optionalCharacter($COLON)) {
	                  var end = this.inputIndex;
	                  var expression = this.input.substring(start, end);
	                  this.error("Conditional expression " + expression + " requires all 3 expressions");
	                  no = new EmptyExpr(this.span(start));
	              }
	              else {
	                  no = this.parsePipe();
	              }
	              return new Conditional(this.span(start), result, yes, no);
	          }
	          else {
	              return result;
	          }
	      };
	      _ParseAST.prototype.parseLogicalOr = function () {
	          // '||'
	          var result = this.parseLogicalAnd();
	          while (this.optionalOperator('||')) {
	              var right = this.parseLogicalAnd();
	              result = new Binary(this.span(result.span.start), '||', result, right);
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseLogicalAnd = function () {
	          // '&&'
	          var result = this.parseEquality();
	          while (this.optionalOperator('&&')) {
	              var right = this.parseEquality();
	              result = new Binary(this.span(result.span.start), '&&', result, right);
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseEquality = function () {
	          // '==','!=','===','!=='
	          var result = this.parseRelational();
	          while (this.next.type == TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '==':
	                  case '===':
	                  case '!=':
	                  case '!==':
	                      this.advance();
	                      var right = this.parseRelational();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseRelational = function () {
	          // '<', '>', '<=', '>='
	          var result = this.parseAdditive();
	          while (this.next.type == TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '<':
	                  case '>':
	                  case '<=':
	                  case '>=':
	                      this.advance();
	                      var right = this.parseAdditive();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseAdditive = function () {
	          // '+', '-'
	          var result = this.parseMultiplicative();
	          while (this.next.type == TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '+':
	                  case '-':
	                      this.advance();
	                      var right = this.parseMultiplicative();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseMultiplicative = function () {
	          // '*', '%', '/'
	          var result = this.parsePrefix();
	          while (this.next.type == TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '*':
	                  case '%':
	                  case '/':
	                      this.advance();
	                      var right = this.parsePrefix();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parsePrefix = function () {
	          if (this.next.type == TokenType.Operator) {
	              var start = this.inputIndex;
	              var operator = this.next.strValue;
	              var result = void 0;
	              switch (operator) {
	                  case '+':
	                      this.advance();
	                      return this.parsePrefix();
	                  case '-':
	                      this.advance();
	                      result = this.parsePrefix();
	                      return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                  case '!':
	                      this.advance();
	                      result = this.parsePrefix();
	                      return new PrefixNot(this.span(start), result);
	              }
	          }
	          return this.parseCallChain();
	      };
	      _ParseAST.prototype.parseCallChain = function () {
	          var result = this.parsePrimary();
	          while (true) {
	              if (this.optionalCharacter($PERIOD)) {
	                  result = this.parseAccessMemberOrMethodCall(result, false);
	              }
	              else if (this.optionalOperator('?.')) {
	                  result = this.parseAccessMemberOrMethodCall(result, true);
	              }
	              else if (this.optionalCharacter($LBRACKET)) {
	                  this.rbracketsExpected++;
	                  var key = this.parsePipe();
	                  this.rbracketsExpected--;
	                  this.expectCharacter($RBRACKET);
	                  if (this.optionalOperator('=')) {
	                      var value = this.parseConditional();
	                      result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                  }
	                  else {
	                      result = new KeyedRead(this.span(result.span.start), result, key);
	                  }
	              }
	              else if (this.optionalCharacter($LPAREN)) {
	                  this.rparensExpected++;
	                  var args = this.parseCallArguments();
	                  this.rparensExpected--;
	                  this.expectCharacter($RPAREN);
	                  result = new FunctionCall(this.span(result.span.start), result, args);
	              }
	              else {
	                  return result;
	              }
	          }
	      };
	      _ParseAST.prototype.parsePrimary = function () {
	          var start = this.inputIndex;
	          if (this.optionalCharacter($LPAREN)) {
	              this.rparensExpected++;
	              var result = this.parsePipe();
	              this.rparensExpected--;
	              this.expectCharacter($RPAREN);
	              return result;
	          }
	          else if (this.next.isKeywordNull()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), null);
	          }
	          else if (this.next.isKeywordUndefined()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), void 0);
	          }
	          else if (this.next.isKeywordTrue()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), true);
	          }
	          else if (this.next.isKeywordFalse()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), false);
	          }
	          else if (this.next.isKeywordThis()) {
	              this.advance();
	              return new ImplicitReceiver(this.span(start));
	          }
	          else if (this.optionalCharacter($LBRACKET)) {
	              this.rbracketsExpected++;
	              var elements = this.parseExpressionList($RBRACKET);
	              this.rbracketsExpected--;
	              this.expectCharacter($RBRACKET);
	              return new LiteralArray(this.span(start), elements);
	          }
	          else if (this.next.isCharacter($LBRACE)) {
	              return this.parseLiteralMap();
	          }
	          else if (this.next.isIdentifier()) {
	              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	          }
	          else if (this.next.isNumber()) {
	              var value = this.next.toNumber();
	              this.advance();
	              return new LiteralPrimitive(this.span(start), value);
	          }
	          else if (this.next.isString()) {
	              var literalValue = this.next.toString();
	              this.advance();
	              return new LiteralPrimitive(this.span(start), literalValue);
	          }
	          else if (this.index >= this.tokens.length) {
	              this.error("Unexpected end of expression: " + this.input);
	              return new EmptyExpr(this.span(start));
	          }
	          else {
	              this.error("Unexpected token " + this.next);
	              return new EmptyExpr(this.span(start));
	          }
	      };
	      _ParseAST.prototype.parseExpressionList = function (terminator) {
	          var result = [];
	          if (!this.next.isCharacter(terminator)) {
	              do {
	                  result.push(this.parsePipe());
	              } while (this.optionalCharacter($COMMA));
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseLiteralMap = function () {
	          var keys = [];
	          var values = [];
	          var start = this.inputIndex;
	          this.expectCharacter($LBRACE);
	          if (!this.optionalCharacter($RBRACE)) {
	              this.rbracesExpected++;
	              do {
	                  var key = this.expectIdentifierOrKeywordOrString();
	                  keys.push(key);
	                  this.expectCharacter($COLON);
	                  values.push(this.parsePipe());
	              } while (this.optionalCharacter($COMMA));
	              this.rbracesExpected--;
	              this.expectCharacter($RBRACE);
	          }
	          return new LiteralMap(this.span(start), keys, values);
	      };
	      _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	          if (isSafe === void 0) { isSafe = false; }
	          var start = receiver.span.start;
	          var id = this.expectIdentifierOrKeyword();
	          if (this.optionalCharacter($LPAREN)) {
	              this.rparensExpected++;
	              var args = this.parseCallArguments();
	              this.expectCharacter($RPAREN);
	              this.rparensExpected--;
	              var span = this.span(start);
	              return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                  new MethodCall(span, receiver, id, args);
	          }
	          else {
	              if (isSafe) {
	                  if (this.optionalOperator('=')) {
	                      this.error('The \'?.\' operator cannot be used in the assignment');
	                      return new EmptyExpr(this.span(start));
	                  }
	                  else {
	                      return new SafePropertyRead(this.span(start), receiver, id);
	                  }
	              }
	              else {
	                  if (this.optionalOperator('=')) {
	                      if (!this.parseAction) {
	                          this.error('Bindings cannot contain assignments');
	                          return new EmptyExpr(this.span(start));
	                      }
	                      var value = this.parseConditional();
	                      return new PropertyWrite(this.span(start), receiver, id, value);
	                  }
	                  else {
	                      return new PropertyRead(this.span(start), receiver, id);
	                  }
	              }
	          }
	      };
	      _ParseAST.prototype.parseCallArguments = function () {
	          if (this.next.isCharacter($RPAREN))
	              return [];
	          var positionals = [];
	          do {
	              positionals.push(this.parsePipe());
	          } while (this.optionalCharacter($COMMA));
	          return positionals;
	      };
	      /**
	       * An identifier, a keyword, a string with an optional `-` inbetween.
	       */
	      _ParseAST.prototype.expectTemplateBindingKey = function () {
	          var result = '';
	          var operatorFound = false;
	          do {
	              result += this.expectIdentifierOrKeywordOrString();
	              operatorFound = this.optionalOperator('-');
	              if (operatorFound) {
	                  result += '-';
	              }
	          } while (operatorFound);
	          return result.toString();
	      };
	      _ParseAST.prototype.parseTemplateBindings = function () {
	          var bindings = [];
	          var prefix = null;
	          var warnings = [];
	          while (this.index < this.tokens.length) {
	              var keyIsVar = this.peekKeywordLet();
	              if (keyIsVar) {
	                  this.advance();
	              }
	              var key = this.expectTemplateBindingKey();
	              if (!keyIsVar) {
	                  if (prefix == null) {
	                      prefix = key;
	                  }
	                  else {
	                      key = prefix + key[0].toUpperCase() + key.substring(1);
	                  }
	              }
	              this.optionalCharacter($COLON);
	              var name = null;
	              var expression = null;
	              if (keyIsVar) {
	                  if (this.optionalOperator('=')) {
	                      name = this.expectTemplateBindingKey();
	                  }
	                  else {
	                      name = '\$implicit';
	                  }
	              }
	              else if (this.next !== EOF && !this.peekKeywordLet()) {
	                  var start = this.inputIndex;
	                  var ast = this.parsePipe();
	                  var source = this.input.substring(start, this.inputIndex);
	                  expression = new ASTWithSource(ast, source, this.location, this.errors);
	              }
	              bindings.push(new TemplateBinding(key, keyIsVar, name, expression));
	              if (!this.optionalCharacter($SEMICOLON)) {
	                  this.optionalCharacter($COMMA);
	              }
	          }
	          return new TemplateBindingParseResult(bindings, warnings, this.errors);
	      };
	      _ParseAST.prototype.error = function (message, index) {
	          if (index === void 0) { index = null; }
	          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	          this.skip();
	      };
	      _ParseAST.prototype.locationText = function (index) {
	          if (index === void 0) { index = null; }
	          if (isBlank(index))
	              index = this.index;
	          return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	              "at the end of the expression";
	      };
	      // Error recovery should skip tokens until it encounters a recovery point. skip() treats
	      // the end of input and a ';' as unconditionally a recovery point. It also treats ')',
	      // '}' and ']' as conditional recovery points if one of calling productions is expecting
	      // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing
	      // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because
	      // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols
	      // must be conditional as they must be skipped if none of the calling productions are not
	      // expecting the closing token else we will never make progress in the case of an
	      // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because
	      // parseChain() is always the root production and it expects a ';'.
	      // If a production expects one of these token it increments the corresponding nesting count,
	      // and then decrements it just prior to checking if the token is in the input.
	      _ParseAST.prototype.skip = function () {
	          var n = this.next;
	          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	              (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	              (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	              (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	              if (this.next.isError()) {
	                  this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	              }
	              this.advance();
	              n = this.next;
	          }
	      };
	      return _ParseAST;
	  }());
	  var SimpleExpressionChecker = (function () {
	      function SimpleExpressionChecker() {
	          this.simple = true;
	      }
	      SimpleExpressionChecker.check = function (ast) {
	          var s = new SimpleExpressionChecker();
	          ast.visit(s);
	          return s.simple;
	      };
	      SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	      SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	      SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitAll = function (asts) {
	          var _this = this;
	          return asts.map(function (node) { return node.visit(_this); });
	      };
	      SimpleExpressionChecker.prototype.visitChain = function (ast, context) { this.simple = false; };
	      SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { this.simple = false; };
	      return SimpleExpressionChecker;
	  }());

	  var ParseLocation = (function () {
	      function ParseLocation(file, offset, line, col) {
	          this.file = file;
	          this.offset = offset;
	          this.line = line;
	          this.col = col;
	      }
	      ParseLocation.prototype.toString = function () {
	          return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	      };
	      return ParseLocation;
	  }());
	  var ParseSourceFile = (function () {
	      function ParseSourceFile(content, url) {
	          this.content = content;
	          this.url = url;
	      }
	      return ParseSourceFile;
	  }());
	  var ParseSourceSpan = (function () {
	      function ParseSourceSpan(start, end, details) {
	          if (details === void 0) { details = null; }
	          this.start = start;
	          this.end = end;
	          this.details = details;
	      }
	      ParseSourceSpan.prototype.toString = function () {
	          return this.start.file.content.substring(this.start.offset, this.end.offset);
	      };
	      return ParseSourceSpan;
	  }());
	  var ParseErrorLevel;
	  (function (ParseErrorLevel) {
	      ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
	      ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
	  })(ParseErrorLevel || (ParseErrorLevel = {}));
	  var ParseError = (function () {
	      function ParseError(span, msg, level) {
	          if (level === void 0) { level = ParseErrorLevel.FATAL; }
	          this.span = span;
	          this.msg = msg;
	          this.level = level;
	      }
	      ParseError.prototype.toString = function () {
	          var source = this.span.start.file.content;
	          var ctxStart = this.span.start.offset;
	          var contextStr = '';
	          var details = '';
	          if (isPresent(ctxStart)) {
	              if (ctxStart > source.length - 1) {
	                  ctxStart = source.length - 1;
	              }
	              var ctxEnd = ctxStart;
	              var ctxLen = 0;
	              var ctxLines = 0;
	              while (ctxLen < 100 && ctxStart > 0) {
	                  ctxStart--;
	                  ctxLen++;
	                  if (source[ctxStart] == '\n') {
	                      if (++ctxLines == 3) {
	                          break;
	                      }
	                  }
	              }
	              ctxLen = 0;
	              ctxLines = 0;
	              while (ctxLen < 100 && ctxEnd < source.length - 1) {
	                  ctxEnd++;
	                  ctxLen++;
	                  if (source[ctxEnd] == '\n') {
	                      if (++ctxLines == 3) {
	                          break;
	                      }
	                  }
	              }
	              var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +
	                  source.substring(this.span.start.offset, ctxEnd + 1);
	              contextStr = " (\"" + context + "\")";
	          }
	          if (this.span.details) {
	              details = ", " + this.span.details;
	          }
	          return "" + this.msg + contextStr + ": " + this.span.start + details;
	      };
	      return ParseError;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var Text = (function () {
	      function Text(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return Text;
	  }());
	  var Expansion = (function () {
	      function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	          this.switchValue = switchValue;
	          this.type = type;
	          this.cases = cases;
	          this.sourceSpan = sourceSpan;
	          this.switchValueSourceSpan = switchValueSourceSpan;
	      }
	      Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	      return Expansion;
	  }());
	  var ExpansionCase = (function () {
	      function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	          this.value = value;
	          this.expression = expression;
	          this.sourceSpan = sourceSpan;
	          this.valueSourceSpan = valueSourceSpan;
	          this.expSourceSpan = expSourceSpan;
	      }
	      ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	      return ExpansionCase;
	  }());
	  var Attribute$1 = (function () {
	      function Attribute(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	      return Attribute;
	  }());
	  var Element = (function () {
	      function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	          this.name = name;
	          this.attrs = attrs;
	          this.children = children;
	          this.sourceSpan = sourceSpan;
	          this.startSourceSpan = startSourceSpan;
	          this.endSourceSpan = endSourceSpan;
	      }
	      Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	      return Element;
	  }());
	  var Comment = (function () {
	      function Comment(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	      return Comment;
	  }());
	  function visitAll(visitor, nodes, context) {
	      if (context === void 0) { context = null; }
	      var result = [];
	      nodes.forEach(function (ast) {
	          var astResult = ast.visit(visitor, context);
	          if (astResult) {
	              result.push(astResult);
	          }
	      });
	      return result;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$5 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TokenType$1;
	  (function (TokenType) {
	      TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
	      TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
	      TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
	      TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
	      TokenType[TokenType["TEXT"] = 4] = "TEXT";
	      TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
	      TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
	      TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
	      TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
	      TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
	      TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
	      TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
	      TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
	      TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
	      TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
	      TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
	      TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
	      TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
	      TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
	      TokenType[TokenType["EOF"] = 19] = "EOF";
	  })(TokenType$1 || (TokenType$1 = {}));
	  var Token$1 = (function () {
	      function Token(type, parts, sourceSpan) {
	          this.type = type;
	          this.parts = parts;
	          this.sourceSpan = sourceSpan;
	      }
	      return Token;
	  }());
	  var TokenError = (function (_super) {
	      __extends$5(TokenError, _super);
	      function TokenError(errorMsg, tokenType, span) {
	          _super.call(this, span, errorMsg);
	          this.tokenType = tokenType;
	      }
	      return TokenError;
	  }(ParseError));
	  var TokenizeResult = (function () {
	      function TokenizeResult(tokens, errors) {
	          this.tokens = tokens;
	          this.errors = errors;
	      }
	      return TokenizeResult;
	  }());
	  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	      if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	      if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	      return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	          .tokenize();
	  }
	  var _CR_OR_CRLF_REGEXP = /\r\n?/g;
	  function _unexpectedCharacterErrorMsg(charCode) {
	      var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	      return "Unexpected character \"" + char + "\"";
	  }
	  function _unknownEntityErrorMsg(entitySrc) {
	      return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	  }
	  var _ControlFlowError = (function () {
	      function _ControlFlowError(error) {
	          this.error = error;
	      }
	      return _ControlFlowError;
	  }());
	  // See http://www.w3.org/TR/html51/syntax.html#writing
	  var _Tokenizer = (function () {
	      /**
	       * @param _file The html source
	       * @param _getTagDefinition
	       * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	       * @param _interpolationConfig
	       */
	      function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	          if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          this._file = _file;
	          this._getTagDefinition = _getTagDefinition;
	          this._tokenizeIcu = _tokenizeIcu;
	          this._interpolationConfig = _interpolationConfig;
	          // Note: this is always lowercase!
	          this._peek = -1;
	          this._nextPeek = -1;
	          this._index = -1;
	          this._line = 0;
	          this._column = -1;
	          this._expansionCaseStack = [];
	          this._inInterpolation = false;
	          this.tokens = [];
	          this.errors = [];
	          this._input = _file.content;
	          this._length = _file.content.length;
	          this._advance();
	      }
	      _Tokenizer.prototype._processCarriageReturns = function (content) {
	          // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	          // In order to keep the original position in the source, we can not
	          // pre-process it.
	          // Instead CRs are processed right before instantiating the tokens.
	          return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	      };
	      _Tokenizer.prototype.tokenize = function () {
	          while (this._peek !== $EOF) {
	              var start = this._getLocation();
	              try {
	                  if (this._attemptCharCode($LT)) {
	                      if (this._attemptCharCode($BANG)) {
	                          if (this._attemptCharCode($LBRACKET)) {
	                              this._consumeCdata(start);
	                          }
	                          else if (this._attemptCharCode($MINUS)) {
	                              this._consumeComment(start);
	                          }
	                          else {
	                              this._consumeDocType(start);
	                          }
	                      }
	                      else if (this._attemptCharCode($SLASH)) {
	                          this._consumeTagClose(start);
	                      }
	                      else {
	                          this._consumeTagOpen(start);
	                      }
	                  }
	                  else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
	                      this._consumeText();
	                  }
	              }
	              catch (e) {
	                  if (e instanceof _ControlFlowError) {
	                      this.errors.push(e.error);
	                  }
	                  else {
	                      throw e;
	                  }
	              }
	          }
	          this._beginToken(TokenType$1.EOF);
	          this._endToken([]);
	          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	      };
	      /**
	       * @returns {boolean} whether an ICU token has been created
	       * @internal
	       */
	      _Tokenizer.prototype._tokenizeExpansionForm = function () {
	          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	              this._consumeExpansionFormStart();
	              return true;
	          }
	          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	              this._consumeExpansionCaseStart();
	              return true;
	          }
	          if (this._peek === $RBRACE) {
	              if (this._isInExpansionCase()) {
	                  this._consumeExpansionCaseEnd();
	                  return true;
	              }
	              if (this._isInExpansionForm()) {
	                  this._consumeExpansionFormEnd();
	                  return true;
	              }
	          }
	          return false;
	      };
	      _Tokenizer.prototype._getLocation = function () {
	          return new ParseLocation(this._file, this._index, this._line, this._column);
	      };
	      _Tokenizer.prototype._getSpan = function (start, end) {
	          if (start === void 0) { start = this._getLocation(); }
	          if (end === void 0) { end = this._getLocation(); }
	          return new ParseSourceSpan(start, end);
	      };
	      _Tokenizer.prototype._beginToken = function (type, start) {
	          if (start === void 0) { start = this._getLocation(); }
	          this._currentTokenStart = start;
	          this._currentTokenType = type;
	      };
	      _Tokenizer.prototype._endToken = function (parts, end) {
	          if (end === void 0) { end = this._getLocation(); }
	          var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	          this.tokens.push(token);
	          this._currentTokenStart = null;
	          this._currentTokenType = null;
	          return token;
	      };
	      _Tokenizer.prototype._createError = function (msg, span) {
	          if (this._isInExpansionForm()) {
	              msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	          }
	          var error = new TokenError(msg, this._currentTokenType, span);
	          this._currentTokenStart = null;
	          this._currentTokenType = null;
	          return new _ControlFlowError(error);
	      };
	      _Tokenizer.prototype._advance = function () {
	          if (this._index >= this._length) {
	              throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	          }
	          if (this._peek === $LF) {
	              this._line++;
	              this._column = 0;
	          }
	          else if (this._peek !== $LF && this._peek !== $CR) {
	              this._column++;
	          }
	          this._index++;
	          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	          this._nextPeek =
	              this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	      };
	      _Tokenizer.prototype._attemptCharCode = function (charCode) {
	          if (this._peek === charCode) {
	              this._advance();
	              return true;
	          }
	          return false;
	      };
	      _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	              this._advance();
	              return true;
	          }
	          return false;
	      };
	      _Tokenizer.prototype._requireCharCode = function (charCode) {
	          var location = this._getLocation();
	          if (!this._attemptCharCode(charCode)) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	          }
	      };
	      _Tokenizer.prototype._attemptStr = function (chars) {
	          var len = chars.length;
	          if (this._index + len > this._length) {
	              return false;
	          }
	          var initialPosition = this._savePosition();
	          for (var i = 0; i < len; i++) {
	              if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                  // If attempting to parse the string fails, we want to reset the parser
	                  // to where it was before the attempt
	                  this._restorePosition(initialPosition);
	                  return false;
	              }
	          }
	          return true;
	      };
	      _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	          for (var i = 0; i < chars.length; i++) {
	              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      _Tokenizer.prototype._requireStr = function (chars) {
	          var location = this._getLocation();
	          if (!this._attemptStr(chars)) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	          }
	      };
	      _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	          while (!predicate(this._peek)) {
	              this._advance();
	          }
	      };
	      _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	          var start = this._getLocation();
	          this._attemptCharCodeUntilFn(predicate);
	          if (this._index - start.offset < len) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	          }
	      };
	      _Tokenizer.prototype._attemptUntilChar = function (char) {
	          while (this._peek !== char) {
	              this._advance();
	          }
	      };
	      _Tokenizer.prototype._readChar = function (decodeEntities) {
	          if (decodeEntities && this._peek === $AMPERSAND) {
	              return this._decodeEntity();
	          }
	          else {
	              var index = this._index;
	              this._advance();
	              return this._input[index];
	          }
	      };
	      _Tokenizer.prototype._decodeEntity = function () {
	          var start = this._getLocation();
	          this._advance();
	          if (this._attemptCharCode($HASH)) {
	              var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	              var numberStart = this._getLocation().offset;
	              this._attemptCharCodeUntilFn(isDigitEntityEnd);
	              if (this._peek != $SEMICOLON) {
	                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	              }
	              this._advance();
	              var strNum = this._input.substring(numberStart, this._index - 1);
	              try {
	                  var charCode = parseInt(strNum, isHex ? 16 : 10);
	                  return String.fromCharCode(charCode);
	              }
	              catch (e) {
	                  var entity = this._input.substring(start.offset + 1, this._index - 1);
	                  throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	              }
	          }
	          else {
	              var startPosition = this._savePosition();
	              this._attemptCharCodeUntilFn(isNamedEntityEnd);
	              if (this._peek != $SEMICOLON) {
	                  this._restorePosition(startPosition);
	                  return '&';
	              }
	              this._advance();
	              var name_1 = this._input.substring(start.offset + 1, this._index - 1);
	              var char = NAMED_ENTITIES[name_1];
	              if (!char) {
	                  throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
	              }
	              return char;
	          }
	      };
	      _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	          var tagCloseStart;
	          var textStart = this._getLocation();
	          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	          var parts = [];
	          while (true) {
	              tagCloseStart = this._getLocation();
	              if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                  break;
	              }
	              if (this._index > tagCloseStart.offset) {
	                  // add the characters consumed by the previous if statement to the output
	                  parts.push(this._input.substring(tagCloseStart.offset, this._index));
	              }
	              while (this._peek !== firstCharOfEnd) {
	                  parts.push(this._readChar(decodeEntities));
	              }
	          }
	          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	      };
	      _Tokenizer.prototype._consumeComment = function (start) {
	          var _this = this;
	          this._beginToken(TokenType$1.COMMENT_START, start);
	          this._requireCharCode($MINUS);
	          this._endToken([]);
	          var textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	          this._endToken([]);
	      };
	      _Tokenizer.prototype._consumeCdata = function (start) {
	          var _this = this;
	          this._beginToken(TokenType$1.CDATA_START, start);
	          this._requireStr('CDATA[');
	          this._endToken([]);
	          var textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	          this._endToken([]);
	      };
	      _Tokenizer.prototype._consumeDocType = function (start) {
	          this._beginToken(TokenType$1.DOC_TYPE, start);
	          this._attemptUntilChar($GT);
	          this._advance();
	          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	      };
	      _Tokenizer.prototype._consumePrefixAndName = function () {
	          var nameOrPrefixStart = this._index;
	          var prefix = null;
	          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	              this._advance();
	          }
	          var nameStart;
	          if (this._peek === $COLON) {
	              this._advance();
	              prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	              nameStart = this._index;
	          }
	          else {
	              nameStart = nameOrPrefixStart;
	          }
	          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	          var name = this._input.substring(nameStart, this._index);
	          return [prefix, name];
	      };
	      _Tokenizer.prototype._consumeTagOpen = function (start) {
	          var savedPos = this._savePosition();
	          var tagName;
	          var lowercaseTagName;
	          try {
	              if (!isAsciiLetter(this._peek)) {
	                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	              }
	              var nameStart = this._index;
	              this._consumeTagOpenStart(start);
	              tagName = this._input.substring(nameStart, this._index);
	              lowercaseTagName = tagName.toLowerCase();
	              this._attemptCharCodeUntilFn(isNotWhitespace);
	              while (this._peek !== $SLASH && this._peek !== $GT) {
	                  this._consumeAttributeName();
	                  this._attemptCharCodeUntilFn(isNotWhitespace);
	                  if (this._attemptCharCode($EQ)) {
	                      this._attemptCharCodeUntilFn(isNotWhitespace);
	                      this._consumeAttributeValue();
	                  }
	                  this._attemptCharCodeUntilFn(isNotWhitespace);
	              }
	              this._consumeTagOpenEnd();
	          }
	          catch (e) {
	              if (e instanceof _ControlFlowError) {
	                  // When the start tag is invalid, assume we want a "<"
	                  this._restorePosition(savedPos);
	                  // Back to back text tokens are merged at the end
	                  this._beginToken(TokenType$1.TEXT, start);
	                  this._endToken(['<']);
	                  return;
	              }
	              throw e;
	          }
	          var contentTokenType = this._getTagDefinition(tagName).contentType;
	          if (contentTokenType === TagContentType.RAW_TEXT) {
	              this._consumeRawTextWithTagClose(lowercaseTagName, false);
	          }
	          else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	              this._consumeRawTextWithTagClose(lowercaseTagName, true);
	          }
	      };
	      _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	          var _this = this;
	          var textToken = this._consumeRawText(decodeEntities, $LT, function () {
	              if (!_this._attemptCharCode($SLASH))
	                  return false;
	              _this._attemptCharCodeUntilFn(isNotWhitespace);
	              if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                  return false;
	              _this._attemptCharCodeUntilFn(isNotWhitespace);
	              return _this._attemptCharCode($GT);
	          });
	          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	          this._endToken([null, lowercaseTagName]);
	      };
	      _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	          this._beginToken(TokenType$1.TAG_OPEN_START, start);
	          var parts = this._consumePrefixAndName();
	          this._endToken(parts);
	      };
	      _Tokenizer.prototype._consumeAttributeName = function () {
	          this._beginToken(TokenType$1.ATTR_NAME);
	          var prefixAndName = this._consumePrefixAndName();
	          this._endToken(prefixAndName);
	      };
	      _Tokenizer.prototype._consumeAttributeValue = function () {
	          this._beginToken(TokenType$1.ATTR_VALUE);
	          var value;
	          if (this._peek === $SQ || this._peek === $DQ) {
	              var quoteChar = this._peek;
	              this._advance();
	              var parts = [];
	              while (this._peek !== quoteChar) {
	                  parts.push(this._readChar(true));
	              }
	              value = parts.join('');
	              this._advance();
	          }
	          else {
	              var valueStart = this._index;
	              this._requireCharCodeUntilFn(isNameEnd, 1);
	              value = this._input.substring(valueStart, this._index);
	          }
	          this._endToken([this._processCarriageReturns(value)]);
	      };
	      _Tokenizer.prototype._consumeTagOpenEnd = function () {
	          var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	          this._beginToken(tokenType);
	          this._requireCharCode($GT);
	          this._endToken([]);
	      };
	      _Tokenizer.prototype._consumeTagClose = function (start) {
	          this._beginToken(TokenType$1.TAG_CLOSE, start);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          var prefixAndName = this._consumePrefixAndName();
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._requireCharCode($GT);
	          this._endToken(prefixAndName);
	      };
	      _Tokenizer.prototype._consumeExpansionFormStart = function () {
	          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	          this._requireCharCode($LBRACE);
	          this._endToken([]);
	          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	          var condition = this._readUntil($COMMA);
	          this._endToken([condition], this._getLocation());
	          this._requireCharCode($COMMA);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	          var type = this._readUntil($COMMA);
	          this._endToken([type], this._getLocation());
	          this._requireCharCode($COMMA);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	      };
	      _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	          var value = this._readUntil($LBRACE).trim();
	          this._endToken([value], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	          this._requireCharCode($LBRACE);
	          this._endToken([], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	      };
	      _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	          this._requireCharCode($RBRACE);
	          this._endToken([], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._expansionCaseStack.pop();
	      };
	      _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	          this._requireCharCode($RBRACE);
	          this._endToken([]);
	          this._expansionCaseStack.pop();
	      };
	      _Tokenizer.prototype._consumeText = function () {
	          var start = this._getLocation();
	          this._beginToken(TokenType$1.TEXT, start);
	          var parts = [];
	          do {
	              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                  parts.push(this._interpolationConfig.start);
	                  this._inInterpolation = true;
	              }
	              else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) &&
	                  this._inInterpolation) {
	                  parts.push(this._interpolationConfig.end);
	                  this._inInterpolation = false;
	              }
	              else {
	                  parts.push(this._readChar(true));
	              }
	          } while (!this._isTextEnd());
	          this._endToken([this._processCarriageReturns(parts.join(''))]);
	      };
	      _Tokenizer.prototype._isTextEnd = function () {
	          if (this._peek === $LT || this._peek === $EOF) {
	              return true;
	          }
	          if (this._tokenizeIcu && !this._inInterpolation) {
	              if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                  // start of an expansion form
	                  return true;
	              }
	              if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                  // end of and expansion case
	                  return true;
	              }
	          }
	          return false;
	      };
	      _Tokenizer.prototype._savePosition = function () {
	          return [this._peek, this._index, this._column, this._line, this.tokens.length];
	      };
	      _Tokenizer.prototype._readUntil = function (char) {
	          var start = this._index;
	          this._attemptUntilChar(char);
	          return this._input.substring(start, this._index);
	      };
	      _Tokenizer.prototype._restorePosition = function (position) {
	          this._peek = position[0];
	          this._index = position[1];
	          this._column = position[2];
	          this._line = position[3];
	          var nbTokens = position[4];
	          if (nbTokens < this.tokens.length) {
	              // remove any extra tokens
	              this.tokens = this.tokens.slice(0, nbTokens);
	          }
	      };
	      _Tokenizer.prototype._isInExpansionCase = function () {
	          return this._expansionCaseStack.length > 0 &&
	              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                  TokenType$1.EXPANSION_CASE_EXP_START;
	      };
	      _Tokenizer.prototype._isInExpansionForm = function () {
	          return this._expansionCaseStack.length > 0 &&
	              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                  TokenType$1.EXPANSION_FORM_START;
	      };
	      return _Tokenizer;
	  }());
	  function isNotWhitespace(code) {
	      return !isWhitespace(code) || code === $EOF;
	  }
	  function isNameEnd(code) {
	      return isWhitespace(code) || code === $GT || code === $SLASH ||
	          code === $SQ || code === $DQ || code === $EQ;
	  }
	  function isPrefixEnd(code) {
	      return (code < $a || $z < code) && (code < $A || $Z < code) &&
	          (code < $0 || code > $9);
	  }
	  function isDigitEntityEnd(code) {
	      return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	  }
	  function isNamedEntityEnd(code) {
	      return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	  }
	  function isExpansionFormStart(input, offset, interpolationConfig) {
	      var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	      return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	  }
	  function isExpansionCaseStart(peek) {
	      return peek === $EQ || isAsciiLetter(peek);
	  }
	  function compareCharCodeCaseInsensitive(code1, code2) {
	      return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	  }
	  function toUpperCaseCharCode(code) {
	      return code >= $a && code <= $z ? code - $a + $A : code;
	  }
	  function mergeTextTokens(srcTokens) {
	      var dstTokens = [];
	      var lastDstToken;
	      for (var i = 0; i < srcTokens.length; i++) {
	          var token = srcTokens[i];
	          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	              lastDstToken.parts[0] += token.parts[0];
	              lastDstToken.sourceSpan.end = token.sourceSpan.end;
	          }
	          else {
	              lastDstToken = token;
	              dstTokens.push(lastDstToken);
	          }
	      }
	      return dstTokens;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$4 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TreeError = (function (_super) {
	      __extends$4(TreeError, _super);
	      function TreeError(elementName, span, msg) {
	          _super.call(this, span, msg);
	          this.elementName = elementName;
	      }
	      TreeError.create = function (elementName, span, msg) {
	          return new TreeError(elementName, span, msg);
	      };
	      return TreeError;
	  }(ParseError));
	  var ParseTreeResult = (function () {
	      function ParseTreeResult(rootNodes, errors) {
	          this.rootNodes = rootNodes;
	          this.errors = errors;
	      }
	      return ParseTreeResult;
	  }());
	  var Parser$1 = (function () {
	      function Parser(getTagDefinition) {
	          this.getTagDefinition = getTagDefinition;
	      }
	      Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	          var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
	      };
	      return Parser;
	  }());
	  var _TreeBuilder = (function () {
	      function _TreeBuilder(tokens, getTagDefinition) {
	          this.tokens = tokens;
	          this.getTagDefinition = getTagDefinition;
	          this._index = -1;
	          this._rootNodes = [];
	          this._errors = [];
	          this._elementStack = [];
	          this._advance();
	      }
	      _TreeBuilder.prototype.build = function () {
	          while (this._peek.type !== TokenType$1.EOF) {
	              if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                  this._consumeStartTag(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                  this._consumeEndTag(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.CDATA_START) {
	                  this._closeVoidElement();
	                  this._consumeCdata(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.COMMENT_START) {
	                  this._closeVoidElement();
	                  this._consumeComment(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                  this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                  this._closeVoidElement();
	                  this._consumeText(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                  this._consumeExpansion(this._advance());
	              }
	              else {
	                  // Skip all other tokens...
	                  this._advance();
	              }
	          }
	          return new ParseTreeResult(this._rootNodes, this._errors);
	      };
	      _TreeBuilder.prototype._advance = function () {
	          var prev = this._peek;
	          if (this._index < this.tokens.length - 1) {
	              // Note: there is always an EOF token at the end
	              this._index++;
	          }
	          this._peek = this.tokens[this._index];
	          return prev;
	      };
	      _TreeBuilder.prototype._advanceIf = function (type) {
	          if (this._peek.type === type) {
	              return this._advance();
	          }
	          return null;
	      };
	      _TreeBuilder.prototype._consumeCdata = function (startToken) {
	          this._consumeText(this._advance());
	          this._advanceIf(TokenType$1.CDATA_END);
	      };
	      _TreeBuilder.prototype._consumeComment = function (token) {
	          var text = this._advanceIf(TokenType$1.RAW_TEXT);
	          this._advanceIf(TokenType$1.COMMENT_END);
	          var value = isPresent(text) ? text.parts[0].trim() : null;
	          this._addToParent(new Comment(value, token.sourceSpan));
	      };
	      _TreeBuilder.prototype._consumeExpansion = function (token) {
	          var switchValue = this._advance();
	          var type = this._advance();
	          var cases = [];
	          // read =
	          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	              var expCase = this._parseExpansionCase();
	              if (isBlank(expCase))
	                  return; // error
	              cases.push(expCase);
	          }
	          // read the final }
	          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	              this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	              return;
	          }
	          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	          this._advance();
	      };
	      _TreeBuilder.prototype._parseExpansionCase = function () {
	          var value = this._advance();
	          // read {
	          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	              this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	              return null;
	          }
	          // read until }
	          var start = this._advance();
	          var exp = this._collectExpansionExpTokens(start);
	          if (isBlank(exp))
	              return null;
	          var end = this._advance();
	          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	          // parse everything in between { and }
	          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	          if (parsedExp.errors.length > 0) {
	              this._errors = this._errors.concat(parsedExp.errors);
	              return null;
	          }
	          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	          var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	      };
	      _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	          var exp = [];
	          var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	          while (true) {
	              if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                  this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                  expansionFormStack.push(this._peek.type);
	              }
	              if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                      expansionFormStack.pop();
	                      if (expansionFormStack.length == 0)
	                          return exp;
	                  }
	                  else {
	                      this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                      return null;
	                  }
	              }
	              if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                      expansionFormStack.pop();
	                  }
	                  else {
	                      this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                      return null;
	                  }
	              }
	              if (this._peek.type === TokenType$1.EOF) {
	                  this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                  return null;
	              }
	              exp.push(this._advance());
	          }
	      };
	      _TreeBuilder.prototype._consumeText = function (token) {
	          var text = token.parts[0];
	          if (text.length > 0 && text[0] == '\n') {
	              var parent_1 = this._getParentElement();
	              if (isPresent(parent_1) && parent_1.children.length == 0 &&
	                  this.getTagDefinition(parent_1.name).ignoreFirstLf) {
	                  text = text.substring(1);
	              }
	          }
	          if (text.length > 0) {
	              this._addToParent(new Text(text, token.sourceSpan));
	          }
	      };
	      _TreeBuilder.prototype._closeVoidElement = function () {
	          if (this._elementStack.length > 0) {
	              var el = ListWrapper.last(this._elementStack);
	              if (this.getTagDefinition(el.name).isVoid) {
	                  this._elementStack.pop();
	              }
	          }
	      };
	      _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	          var prefix = startTagToken.parts[0];
	          var name = startTagToken.parts[1];
	          var attrs = [];
	          while (this._peek.type === TokenType$1.ATTR_NAME) {
	              attrs.push(this._consumeAttr(this._advance()));
	          }
	          var fullName = this._getElementFullName(prefix, name, this._getParentElement());
	          var selfClosing = false;
	          // Note: There could have been a tokenizer error
	          // so that we don't get a token for the end tag...
	          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	              this._advance();
	              selfClosing = true;
	              var tagDef = this.getTagDefinition(fullName);
	              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                  this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	              }
	          }
	          else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	              this._advance();
	              selfClosing = false;
	          }
	          var end = this._peek.sourceSpan.start;
	          var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	          var el = new Element(fullName, attrs, [], span, span, null);
	          this._pushElement(el);
	          if (selfClosing) {
	              this._popElement(fullName);
	              el.endSourceSpan = span;
	          }
	      };
	      _TreeBuilder.prototype._pushElement = function (el) {
	          if (this._elementStack.length > 0) {
	              var parentEl = ListWrapper.last(this._elementStack);
	              if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                  this._elementStack.pop();
	              }
	          }
	          var tagDef = this.getTagDefinition(el.name);
	          var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
	              var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	              this._insertBeforeContainer(parent, container, newParent);
	          }
	          this._addToParent(el);
	          this._elementStack.push(el);
	      };
	      _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	          if (this._getParentElement()) {
	              this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	          }
	          if (this.getTagDefinition(fullName).isVoid) {
	              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	          }
	          else if (!this._popElement(fullName)) {
	              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	          }
	      };
	      _TreeBuilder.prototype._popElement = function (fullName) {
	          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	              var el = this._elementStack[stackIndex];
	              if (el.name == fullName) {
	                  ListWrapper.splice(this._elementStack, stackIndex, this._elementStack.length - stackIndex);
	                  return true;
	              }
	              if (!this.getTagDefinition(el.name).closedByParent) {
	                  return false;
	              }
	          }
	          return false;
	      };
	      _TreeBuilder.prototype._consumeAttr = function (attrName) {
	          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	          var end = attrName.sourceSpan.end;
	          var value = '';
	          if (this._peek.type === TokenType$1.ATTR_VALUE) {
	              var valueToken = this._advance();
	              value = valueToken.parts[0];
	              end = valueToken.sourceSpan.end;
	          }
	          return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end));
	      };
	      _TreeBuilder.prototype._getParentElement = function () {
	          return this._elementStack.length > 0 ? ListWrapper.last(this._elementStack) : null;
	      };
	      /**
	       * Returns the parent in the DOM and the container.
	       *
	       * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	       */
	      _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	          var container = null;
	          for (var i = this._elementStack.length - 1; i >= 0; i--) {
	              if (this._elementStack[i].name !== 'ng-container') {
	                  return { parent: this._elementStack[i], container: container };
	              }
	              container = this._elementStack[i];
	          }
	          return { parent: ListWrapper.last(this._elementStack), container: container };
	      };
	      _TreeBuilder.prototype._addToParent = function (node) {
	          var parent = this._getParentElement();
	          if (isPresent(parent)) {
	              parent.children.push(node);
	          }
	          else {
	              this._rootNodes.push(node);
	          }
	      };
	      /**
	       * Insert a node between the parent and the container.
	       * When no container is given, the node is appended as a child of the parent.
	       * Also updates the element stack accordingly.
	       *
	       * @internal
	       */
	      _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	          if (!container) {
	              this._addToParent(node);
	              this._elementStack.push(node);
	          }
	          else {
	              if (parent) {
	                  // replace the container with the new node in the children
	                  var index = parent.children.indexOf(container);
	                  parent.children[index] = node;
	              }
	              else {
	                  this._rootNodes.push(node);
	              }
	              node.children.push(container);
	              this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	          }
	      };
	      _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	          if (isBlank(prefix)) {
	              prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
	              if (isBlank(prefix) && isPresent(parentElement)) {
	                  prefix = getNsPrefix(parentElement.name);
	              }
	          }
	          return mergeNsAndName(prefix, localName);
	      };
	      return _TreeBuilder;
	  }());
	  function lastOnStack(stack, element) {
	      return stack.length > 0 && stack[stack.length - 1] === element;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  function digestMessage(message) {
	      return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	  }
	  /**
	   * Serialize the i18n ast to something xml-like in order to generate an UID.
	   *
	   * The visitor is also used in the i18n parser tests
	   *
	   * @internal
	   */
	  var _SerializerVisitor = (function () {
	      function _SerializerVisitor() {
	      }
	      _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	      _SerializerVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	      };
	      _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	          return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	      };
	      _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var _this = this;
	          return ph.isVoid ?
	              "<ph tag name=\"" + ph.startName + "\"/>" :
	              "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	      };
	      _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	          return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
	      };
	      _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	      };
	      return _SerializerVisitor;
	  }());
	  var serializerVisitor = new _SerializerVisitor();
	  function serializeNodes(nodes) {
	      return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	  }
	  /**
	   * Compute the SHA1 of the given string
	   *
	   * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	   *
	   * WARNING: this function has not been designed not tested with security in mind.
	   *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	   */
	  function sha1(str) {
	      var utf8 = utf8Encode(str);
	      var words32 = stringToWords32(utf8);
	      var len = utf8.length * 8;
	      var w = new Array(80);
	      var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	      words32[len >> 5] |= 0x80 << (24 - len % 32);
	      words32[((len + 64 >> 9) << 4) + 15] = len;
	      for (var i = 0; i < words32.length; i += 16) {
	          var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	          for (var j = 0; j < 80; j++) {
	              if (j < 16) {
	                  w[j] = words32[i + j];
	              }
	              else {
	                  w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	              }
	              var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	              var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	              _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	          }
	          _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	      }
	      var sha1 = words32ToString([a, b, c, d, e]);
	      var hex = '';
	      for (var i = 0; i < sha1.length; i++) {
	          var b_1 = sha1.charCodeAt(i);
	          hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);
	      }
	      return hex.toLowerCase();
	      var _d, _e;
	  }
	  function utf8Encode(str) {
	      var encoded = '';
	      for (var index = 0; index < str.length; index++) {
	          var codePoint = decodeSurrogatePairs(str, index);
	          if (codePoint <= 0x7f) {
	              encoded += String.fromCharCode(codePoint);
	          }
	          else if (codePoint <= 0x7ff) {
	              encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
	          }
	          else if (codePoint <= 0xffff) {
	              encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	          }
	          else if (codePoint <= 0x1fffff) {
	              encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	          }
	      }
	      return encoded;
	  }
	  // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	  function decodeSurrogatePairs(str, index) {
	      if (index < 0 || index >= str.length) {
	          throw new Error("index=" + index + " is out of range in \"" + str + "\"");
	      }
	      var high = str.charCodeAt(index);
	      var low;
	      if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
	          low = str.charCodeAt(index + 1);
	          if (low >= 0xdc00 && low <= 0xdfff) {
	              return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
	          }
	      }
	      return high;
	  }
	  function stringToWords32(str) {
	      var words32 = Array(str.length >>> 2);
	      for (var i = 0; i < words32.length; i++) {
	          words32[i] = 0;
	      }
	      for (var i = 0; i < str.length; i++) {
	          words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);
	      }
	      return words32;
	  }
	  function words32ToString(words32) {
	      var str = '';
	      for (var i = 0; i < words32.length * 4; i++) {
	          str += String.fromCharCode((words32[i >>> 2] >>> 8 * (3 - i & 0x3)) & 0xff);
	      }
	      return str;
	  }
	  function fk(index, b, c, d) {
	      if (index < 20) {
	          return [(b & c) | (~b & d), 0x5a827999];
	      }
	      if (index < 40) {
	          return [b ^ c ^ d, 0x6ed9eba1];
	      }
	      if (index < 60) {
	          return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	      }
	      return [b ^ c ^ d, 0xca62c1d6];
	  }
	  function add32(a, b) {
	      var low = (a & 0xffff) + (b & 0xffff);
	      var high = (a >> 16) + (b >> 16) + (low >> 16);
	      return (high << 16) | (low & 0xffff);
	  }
	  function rol32(a, count) {
	      return (a << count) | (a >>> (32 - count));
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var Message = (function () {
	      /**
	       * @param nodes message AST
	       * @param placeholders maps placeholder names to static content
	       * @param placeholderToMsgIds maps placeholder names to translatable message IDs (used for ICU
	       *                            messages)
	       * @param meaning
	       * @param description
	       */
	      function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
	          this.nodes = nodes;
	          this.placeholders = placeholders;
	          this.placeholderToMsgIds = placeholderToMsgIds;
	          this.meaning = meaning;
	          this.description = description;
	      }
	      return Message;
	  }());
	  var Text$1 = (function () {
	      function Text(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return Text;
	  }());
	  var Container = (function () {
	      function Container(children, sourceSpan) {
	          this.children = children;
	          this.sourceSpan = sourceSpan;
	      }
	      Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	      return Container;
	  }());
	  var Icu = (function () {
	      function Icu(expression, type, cases, sourceSpan) {
	          this.expression = expression;
	          this.type = type;
	          this.cases = cases;
	          this.sourceSpan = sourceSpan;
	      }
	      Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	      return Icu;
	  }());
	  var TagPlaceholder = (function () {
	      function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	          this.tag = tag;
	          this.attrs = attrs;
	          this.startName = startName;
	          this.closeName = closeName;
	          this.children = children;
	          this.isVoid = isVoid;
	          this.sourceSpan = sourceSpan;
	      }
	      TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	      return TagPlaceholder;
	  }());
	  var Placeholder = (function () {
	      function Placeholder(value, name, sourceSpan) {
	          if (name === void 0) { name = ''; }
	          this.value = value;
	          this.name = name;
	          this.sourceSpan = sourceSpan;
	      }
	      Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	      return Placeholder;
	  }());
	  var IcuPlaceholder = (function () {
	      function IcuPlaceholder(value, name, sourceSpan) {
	          if (name === void 0) { name = ''; }
	          this.value = value;
	          this.name = name;
	          this.sourceSpan = sourceSpan;
	      }
	      IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	      return IcuPlaceholder;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var TAG_TO_PLACEHOLDER_NAMES = {
	      'A': 'LINK',
	      'B': 'BOLD_TEXT',
	      'BR': 'LINE_BREAK',
	      'EM': 'EMPHASISED_TEXT',
	      'H1': 'HEADING_LEVEL1',
	      'H2': 'HEADING_LEVEL2',
	      'H3': 'HEADING_LEVEL3',
	      'H4': 'HEADING_LEVEL4',
	      'H5': 'HEADING_LEVEL5',
	      'H6': 'HEADING_LEVEL6',
	      'HR': 'HORIZONTAL_RULE',
	      'I': 'ITALIC_TEXT',
	      'LI': 'LIST_ITEM',
	      'LINK': 'MEDIA_LINK',
	      'OL': 'ORDERED_LIST',
	      'P': 'PARAGRAPH',
	      'Q': 'QUOTATION',
	      'S': 'STRIKETHROUGH_TEXT',
	      'SMALL': 'SMALL_TEXT',
	      'SUB': 'SUBSTRIPT',
	      'SUP': 'SUPERSCRIPT',
	      'TBODY': 'TABLE_BODY',
	      'TD': 'TABLE_CELL',
	      'TFOOT': 'TABLE_FOOTER',
	      'TH': 'TABLE_HEADER_CELL',
	      'THEAD': 'TABLE_HEADER',
	      'TR': 'TABLE_ROW',
	      'TT': 'MONOSPACED_TEXT',
	      'U': 'UNDERLINED_TEXT',
	      'UL': 'UNORDERED_LIST',
	  };
	  /**
	   * Creates unique names for placeholder with different content
	   *
	   * @internal
	   */
	  var PlaceholderRegistry = (function () {
	      function PlaceholderRegistry() {
	          // Count the occurrence of the base name top generate a unique name
	          this._placeHolderNameCounts = {};
	          // Maps signature to placeholder names
	          this._signatureToName = {};
	      }
	      PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	          var signature = this._hashTag(tag, attrs, isVoid);
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var upperTag = tag.toUpperCase();
	          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	          var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	          this._signatureToName[signature] = name;
	          return name;
	      };
	      PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	          var signature = this._hashClosingTag(tag);
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var upperTag = tag.toUpperCase();
	          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	          var name = this._generateUniqueName("CLOSE_" + baseName);
	          this._signatureToName[signature] = name;
	          return name;
	      };
	      PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	          var upperName = name.toUpperCase();
	          var signature = "PH: " + upperName + "=" + content;
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var uniqueName = this._generateUniqueName(upperName);
	          this._signatureToName[signature] = uniqueName;
	          return uniqueName;
	      };
	      // Generate a hash for a tag - does not take attribute order into account
	      PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	          var start = "<" + tag;
	          var strAttrs = Object.keys(attrs).sort().map(function (name) { return (" " + name + "=" + attrs[name]); }).join('');
	          var end = isVoid ? '/>' : "></" + tag + ">";
	          return start + strAttrs + end;
	      };
	      PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	      PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	          var name = base;
	          var next = this._placeHolderNameCounts[name];
	          if (!next) {
	              next = 1;
	          }
	          else {
	              name += "_" + next;
	              next++;
	          }
	          this._placeHolderNameCounts[base] = next;
	          return name;
	      };
	      return PlaceholderRegistry;
	  }());

	  var _expParser = new Parser(new Lexer());
	  /**
	   * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	   */
	  function createI18nMessageFactory(interpolationConfig) {
	      var visitor = new _I18nVisitor(_expParser, interpolationConfig);
	      return function (nodes, meaning, description) {
	          return visitor.toI18nMessage(nodes, meaning, description);
	      };
	  }
	  var _I18nVisitor = (function () {
	      function _I18nVisitor(_expressionParser, _interpolationConfig) {
	          this._expressionParser = _expressionParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
	          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	          this._icuDepth = 0;
	          this._placeholderRegistry = new PlaceholderRegistry();
	          this._placeholderToContent = {};
	          this._placeholderToIds = {};
	          var i18nodes = visitAll(this, nodes, {});
	          return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
	      };
	      _I18nVisitor.prototype.visitElement = function (el, context) {
	          var children = visitAll(this, el.children);
	          var attrs = {};
	          el.attrs.forEach(function (attr) {
	              // Do not visit the attributes, translatable ones are top-level ASTs
	              attrs[attr.name] = attr.value;
	          });
	          var isVoid = getHtmlTagDefinition(el.name).isVoid;
	          var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
	          var closePhName = '';
	          if (!isVoid) {
	              closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	              this._placeholderToContent[closePhName] = "</" + el.name + ">";
	          }
	          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitText = function (text, context) {
	          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	      _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	          var _this = this;
	          this._icuDepth++;
	          var i18nIcuCases = {};
	          var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	          icu.cases.forEach(function (caze) {
	              i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	          });
	          this._icuDepth--;
	          if (this._isIcu || this._icuDepth > 0) {
	              // If the message (vs a part of the message) is an ICU message returns it
	              return i18nIcu;
	          }
	          // Else returns a placeholder
	          // ICU placeholders should not be replaced with their original content but with the their
	          // translations. We need to create a new visitor (they are not re-entrant) to compute the
	          // message id.
	          // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	          var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	          var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	          this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));
	          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	          throw new Error('Unreachable code');
	      };
	      _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	          if (!splitInterpolation) {
	              // No expression, return a single text
	              return new Text$1(text, sourceSpan);
	          }
	          // Return a group of text + expressions
	          var nodes = [];
	          var container = new Container(nodes, sourceSpan);
	          var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	          for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
	              var expression = splitInterpolation.expressions[i];
	              var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	              var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	              if (splitInterpolation.strings[i].length) {
	                  // No need to add empty strings
	                  nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	              }
	              nodes.push(new Placeholder(expression, phName, sourceSpan));
	              this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	          }
	          // The last index contains no expression
	          var lastStringIdx = splitInterpolation.strings.length - 1;
	          if (splitInterpolation.strings[lastStringIdx].length) {
	              nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	          }
	          return container;
	      };
	      return _I18nVisitor;
	  }());
	  var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	  function _extractPlaceholderName(input) {
	      return input.split(_CUSTOM_PH_EXP)[1];
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$6 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * An i18n error.
	   */
	  var I18nError = (function (_super) {
	      __extends$6(I18nError, _super);
	      function I18nError(span, msg) {
	          _super.call(this, span, msg);
	      }
	      return I18nError;
	  }(ParseError));

	  var _I18N_ATTR = 'i18n';
	  var _I18N_ATTR_PREFIX = 'i18n-';
	  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	  /**
	   * Extract translatable messages from an html AST
	   */
	  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	      var visitor = new _Visitor(implicitTags, implicitAttrs);
	      return visitor.extract(nodes, interpolationConfig);
	  }
	  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	      var visitor = new _Visitor(implicitTags, implicitAttrs);
	      return visitor.merge(nodes, translations, interpolationConfig);
	  }
	  var ExtractionResult = (function () {
	      function ExtractionResult(messages, errors) {
	          this.messages = messages;
	          this.errors = errors;
	      }
	      return ExtractionResult;
	  }());
	  var _VisitorMode;
	  (function (_VisitorMode) {
	      _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
	      _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
	  })(_VisitorMode || (_VisitorMode = {}));
	  /**
	   * This Visitor is used:
	   * 1. to extract all the translatable strings from an html AST (see `extract()`),
	   * 2. to replace the translatable strings with the actual translations (see `merge()`)
	   *
	   * @internal
	   */
	  var _Visitor = (function () {
	      function _Visitor(_implicitTags, _implicitAttrs) {
	          this._implicitTags = _implicitTags;
	          this._implicitAttrs = _implicitAttrs;
	      }
	      /**
	       * Extracts the messages from the tree
	       */
	      _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	          var _this = this;
	          this._init(_VisitorMode.Extract, interpolationConfig);
	          nodes.forEach(function (node) { return node.visit(_this, null); });
	          if (this._inI18nBlock) {
	              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	          }
	          return new ExtractionResult(this._messages, this._errors);
	      };
	      /**
	       * Returns a tree where all translatable nodes are translated
	       */
	      _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	          this._init(_VisitorMode.Merge, interpolationConfig);
	          this._translations = translations;
	          // Construct a single fake root element
	          var wrapper = new Element('wrapper', [], nodes, null, null, null);
	          var translatedNode = wrapper.visit(this, null);
	          if (this._inI18nBlock) {
	              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	          }
	          return new ParseTreeResult(translatedNode.children, this._errors);
	      };
	      _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	          // Parse cases for translatable html attributes
	          var expression = visitAll(this, icuCase.expression, context);
	          if (this._mode === _VisitorMode.Merge) {
	              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	          }
	      };
	      _Visitor.prototype.visitExpansion = function (icu, context) {
	          this._mayBeAddBlockChildren(icu);
	          var wasInIcu = this._inIcu;
	          if (!this._inIcu) {
	              // nested ICU messages should not be extracted but top-level translated as a whole
	              if (this._isInTranslatableSection) {
	                  this._addMessage([icu]);
	              }
	              this._inIcu = true;
	          }
	          var cases = visitAll(this, icu.cases, context);
	          if (this._mode === _VisitorMode.Merge) {
	              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	          }
	          this._inIcu = wasInIcu;
	          return icu;
	      };
	      _Visitor.prototype.visitComment = function (comment, context) {
	          var isOpening = _isOpeningComment(comment);
	          if (isOpening && this._isInTranslatableSection) {
	              this._reportError(comment, 'Could not start a block inside a translatable section');
	              return;
	          }
	          var isClosing = _isClosingComment(comment);
	          if (isClosing && !this._inI18nBlock) {
	              this._reportError(comment, 'Trying to close an unopened block');
	              return;
	          }
	          if (!this._inI18nNode && !this._inIcu) {
	              if (!this._inI18nBlock) {
	                  if (isOpening) {
	                      this._inI18nBlock = true;
	                      this._blockStartDepth = this._depth;
	                      this._blockChildren = [];
	                      this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                      this._openTranslatableSection(comment);
	                  }
	              }
	              else {
	                  if (isClosing) {
	                      if (this._depth == this._blockStartDepth) {
	                          this._closeTranslatableSection(comment, this._blockChildren);
	                          this._inI18nBlock = false;
	                          var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                          // merge attributes in sections
	                          var nodes = this._translateMessage(comment, message);
	                          return visitAll(this, nodes);
	                      }
	                      else {
	                          this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                          return;
	                      }
	                  }
	              }
	          }
	      };
	      _Visitor.prototype.visitText = function (text, context) {
	          if (this._isInTranslatableSection) {
	              this._mayBeAddBlockChildren(text);
	          }
	          return text;
	      };
	      _Visitor.prototype.visitElement = function (el, context) {
	          var _this = this;
	          this._mayBeAddBlockChildren(el);
	          this._depth++;
	          var wasInI18nNode = this._inI18nNode;
	          var wasInImplicitNode = this._inImplicitNode;
	          var childNodes;
	          // Extract only top level nodes with the (implicit) "i18n" attribute if not in a block or an ICU
	          // message
	          var i18nAttr = _getI18nAttr(el);
	          var isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) &&
	              !this._inIcu && !this._isInTranslatableSection;
	          var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	          this._inImplicitNode = this._inImplicitNode || isImplicit;
	          if (!this._isInTranslatableSection && !this._inIcu) {
	              if (i18nAttr) {
	                  // explicit translation
	                  this._inI18nNode = true;
	                  var message = this._addMessage(el.children, i18nAttr.value);
	                  childNodes = this._translateMessage(el, message);
	              }
	              else if (isTopLevelImplicit) {
	                  // implicit translation
	                  this._inI18nNode = true;
	                  var message = this._addMessage(el.children);
	                  childNodes = this._translateMessage(el, message);
	              }
	              if (this._mode == _VisitorMode.Extract) {
	                  var isTranslatable = i18nAttr || isTopLevelImplicit;
	                  if (isTranslatable) {
	                      this._openTranslatableSection(el);
	                  }
	                  visitAll(this, el.children);
	                  if (isTranslatable) {
	                      this._closeTranslatableSection(el, el.children);
	                  }
	              }
	              if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
	                  childNodes = [];
	                  el.children.forEach(function (child) {
	                      var visited = child.visit(_this, context);
	                      if (visited && !_this._isInTranslatableSection) {
	                          // Do not add the children from translatable sections (= i18n blocks here)
	                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
	                          childNodes = childNodes.concat(visited);
	                      }
	                  });
	              }
	          }
	          else {
	              if (i18nAttr || isTopLevelImplicit) {
	                  this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	              }
	              if (this._mode == _VisitorMode.Extract) {
	                  // Descend into child nodes for extraction
	                  visitAll(this, el.children);
	              }
	              if (this._mode == _VisitorMode.Merge) {
	                  // Translate attributes in ICU messages
	                  childNodes = [];
	                  el.children.forEach(function (child) {
	                      var visited = child.visit(_this, context);
	                      if (visited && !_this._isInTranslatableSection) {
	                          // Do not add the children from translatable sections (= i18n blocks here)
	                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
	                          childNodes = childNodes.concat(visited);
	                      }
	                  });
	              }
	          }
	          this._visitAttributesOf(el);
	          this._depth--;
	          this._inI18nNode = wasInI18nNode;
	          this._inImplicitNode = wasInImplicitNode;
	          if (this._mode === _VisitorMode.Merge) {
	              // There are no childNodes in translatable sections - those nodes will be replace anyway
	              var translatedAttrs = this._translateAttributes(el);
	              return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	          }
	      };
	      _Visitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      _Visitor.prototype._init = function (mode, interpolationConfig) {
	          this._mode = mode;
	          this._inI18nBlock = false;
	          this._inI18nNode = false;
	          this._depth = 0;
	          this._inIcu = false;
	          this._msgCountAtSectionStart = void 0;
	          this._errors = [];
	          this._messages = [];
	          this._inImplicitNode = false;
	          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	      };
	      // looks for translatable attributes
	      _Visitor.prototype._visitAttributesOf = function (el) {
	          var _this = this;
	          var explicitAttrNameToValue = {};
	          var implicitAttrNames = this._implicitAttrs[el.name] || [];
	          el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	              .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	              attr.value; });
	          el.attrs.forEach(function (attr) {
	              if (attr.name in explicitAttrNameToValue) {
	                  _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	              }
	              else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                  _this._addMessage([attr]);
	              }
	          });
	      };
	      // add a translatable message
	      _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
	          if (ast.length == 0 ||
	              ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
	              // Do not create empty messages
	              return;
	          }
	          var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];
	          var message = this._createI18nMessage(ast, meaning, description);
	          this._messages.push(message);
	          return message;
	      };
	      // Translates the given message given the `TranslationBundle`
	      // no-op when called in extraction mode (returns [])
	      _Visitor.prototype._translateMessage = function (el, message) {
	          if (message && this._mode === _VisitorMode.Merge) {
	              var id = digestMessage(message);
	              var nodes = this._translations.get(id);
	              if (nodes) {
	                  return nodes;
	              }
	              this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
	          }
	          return [];
	      };
	      // translate the attributes of an element and remove i18n specific attributes
	      _Visitor.prototype._translateAttributes = function (el) {
	          var _this = this;
	          var attributes = el.attrs;
	          var i18nAttributeMeanings = {};
	          attributes.forEach(function (attr) {
	              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                  i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                      _splitMeaningAndDesc(attr.value)[0];
	              }
	          });
	          var translatedAttributes = [];
	          attributes.forEach(function (attr) {
	              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                  // strip i18n specific attributes
	                  return;
	              }
	              if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
	                  var meaning = i18nAttributeMeanings[attr.name];
	                  var message = _this._createI18nMessage([attr], meaning, '');
	                  var id = digestMessage(message);
	                  var nodes = _this._translations.get(id);
	                  if (nodes) {
	                      if (nodes[0] instanceof Text) {
	                          var value = nodes[0].value;
	                          translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                      }
	                      else {
	                          _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
	                      }
	                  }
	                  else {
	                      _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
	                  }
	              }
	              else {
	                  translatedAttributes.push(attr);
	              }
	          });
	          return translatedAttributes;
	      };
	      /**
	       * Add the node as a child of the block when:
	       * - we are in a block,
	       * - we are not inside a ICU message (those are handled separately),
	       * - the node is a "direct child" of the block
	       */
	      _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	              this._blockChildren.push(node);
	          }
	      };
	      /**
	       * Marks the start of a section, see `_endSection`
	       */
	      _Visitor.prototype._openTranslatableSection = function (node) {
	          if (this._isInTranslatableSection) {
	              this._reportError(node, 'Unexpected section start');
	          }
	          else {
	              this._msgCountAtSectionStart = this._messages.length;
	          }
	      };
	      Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	          /**
	           * A translatable section could be:
	           * - a translatable element,
	           * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	           */
	          get: function () {
	              return this._msgCountAtSectionStart !== void 0;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * Terminates a section.
	       *
	       * If a section has only one significant children (comments not significant) then we should not
	       * keep the message from this children:
	       *
	       * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	       * - one for the <p> content with meaning and description,
	       * - another one for the ICU message.
	       *
	       * In this case the last message is discarded as it contains less information (the AST is
	       * otherwise identical).
	       *
	       * Note that we should still keep messages extracted from attributes inside the section (ie in the
	       * ICU message here)
	       */
	      _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	          if (!this._isInTranslatableSection) {
	              this._reportError(node, 'Unexpected section end');
	              return;
	          }
	          var startIndex = this._msgCountAtSectionStart;
	          var significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	          if (significantChildren == 1) {
	              for (var i = this._messages.length - 1; i >= startIndex; i--) {
	                  var ast = this._messages[i].nodes;
	                  if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                      this._messages.splice(i, 1);
	                      break;
	                  }
	              }
	          }
	          this._msgCountAtSectionStart = void 0;
	      };
	      _Visitor.prototype._reportError = function (node, msg) {
	          this._errors.push(new I18nError(node.sourceSpan, msg));
	      };
	      return _Visitor;
	  }());
	  function _isOpeningComment(n) {
	      return n instanceof Comment && n.value && n.value.startsWith('i18n');
	  }
	  function _isClosingComment(n) {
	      return n instanceof Comment && n.value && n.value === '/i18n';
	  }
	  function _getI18nAttr(p) {
	      return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	  }
	  function _splitMeaningAndDesc(i18n) {
	      if (!i18n)
	          return ['', ''];
	      var pipeIndex = i18n.indexOf('|');
	      return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
	  }

	  /**
	   * A container for message extracted from the templates.
	   */
	  var MessageBundle = (function () {
	      function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
	          this._htmlParser = _htmlParser;
	          this._implicitTags = _implicitTags;
	          this._implicitAttrs = _implicitAttrs;
	          this._messageMap = {};
	      }
	      MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	          var _this = this;
	          var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	          if (htmlParserResult.errors.length) {
	              return htmlParserResult.errors;
	          }
	          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	          if (i18nParserResult.errors.length) {
	              return i18nParserResult.errors;
	          }
	          i18nParserResult.messages.forEach(function (message) { _this._messageMap[digestMessage(message)] = message; });
	      };
	      MessageBundle.prototype.getMessageMap = function () { return this._messageMap; };
	      MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messageMap); };
	      return MessageBundle;
	  }());

	  var XmlTagDefinition = (function () {
	      function XmlTagDefinition() {
	          this.closedByParent = false;
	          this.contentType = TagContentType.PARSABLE_DATA;
	          this.isVoid = false;
	          this.ignoreFirstLf = false;
	          this.canSelfClose = true;
	      }
	      XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	      XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	      return XmlTagDefinition;
	  }());
	  var _TAG_DEFINITION = new XmlTagDefinition();
	  function getXmlTagDefinition(tagName) {
	      return _TAG_DEFINITION;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$7 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var XmlParser = (function (_super) {
	      __extends$7(XmlParser, _super);
	      function XmlParser() {
	          _super.call(this, getXmlTagDefinition);
	      }
	      XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
	      };
	      return XmlParser;
	  }(Parser$1));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  // Generate a map of placeholder to content indexed by message ids
	  function extractPlaceholders(messageBundle) {
	      var messageMap = messageBundle.getMessageMap();
	      var placeholders = {};
	      Object.keys(messageMap).forEach(function (msgId) {
	          placeholders[msgId] = messageMap[msgId].placeholders;
	      });
	      return placeholders;
	  }
	  // Generate a map of placeholder to message ids indexed by message ids
	  function extractPlaceholderToIds(messageBundle) {
	      var messageMap = messageBundle.getMessageMap();
	      var placeholderToIds = {};
	      Object.keys(messageMap).forEach(function (msgId) {
	          placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
	      });
	      return placeholderToIds;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var _Visitor$1 = (function () {
	      function _Visitor() {
	      }
	      _Visitor.prototype.visitTag = function (tag) {
	          var _this = this;
	          var strAttrs = this._serializeAttributes(tag.attrs);
	          if (tag.children.length == 0) {
	              return "<" + tag.name + strAttrs + "/>";
	          }
	          var strChildren = tag.children.map(function (node) { return node.visit(_this); });
	          return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	      };
	      _Visitor.prototype.visitText = function (text) { return text.value; };
	      _Visitor.prototype.visitDeclaration = function (decl) {
	          return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	      };
	      _Visitor.prototype._serializeAttributes = function (attrs) {
	          var strAttrs = Object.keys(attrs).map(function (name) { return (name + "=\"" + attrs[name] + "\""); }).join(' ');
	          return strAttrs.length > 0 ? ' ' + strAttrs : '';
	      };
	      _Visitor.prototype.visitDoctype = function (doctype) {
	          return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	      };
	      return _Visitor;
	  }());
	  var _visitor = new _Visitor$1();
	  function serialize(nodes) {
	      return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	  }
	  var Declaration = (function () {
	      function Declaration(unescapedAttrs) {
	          var _this = this;
	          this.attrs = {};
	          Object.keys(unescapedAttrs).forEach(function (k) {
	              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	          });
	      }
	      Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	      return Declaration;
	  }());
	  var Doctype = (function () {
	      function Doctype(rootTag, dtd) {
	          this.rootTag = rootTag;
	          this.dtd = dtd;
	      }
	      ;
	      Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	      return Doctype;
	  }());
	  var Tag = (function () {
	      function Tag(name, unescapedAttrs, children) {
	          var _this = this;
	          if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	          if (children === void 0) { children = []; }
	          this.name = name;
	          this.children = children;
	          this.attrs = {};
	          Object.keys(unescapedAttrs).forEach(function (k) {
	              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	          });
	      }
	      Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	      return Tag;
	  }());
	  var Text$2 = (function () {
	      function Text(unescapedValue) {
	          this.value = _escapeXml(unescapedValue);
	      }
	      ;
	      Text.prototype.visit = function (visitor) { return visitor.visitText(this); };
	      return Text;
	  }());
	  var _ESCAPED_CHARS = [
	      [/&/g, '&amp;'],
	      [/"/g, '&quot;'],
	      [/'/g, '&apos;'],
	      [/</g, '&lt;'],
	      [/>/g, '&gt;'],
	  ];
	  function _escapeXml(text) {
	      return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	  }

	  var _VERSION = '1.2';
	  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	  // TODO(vicb): make this a param (s/_/-/)
	  var _SOURCE_LANG = 'en';
	  var _PLACEHOLDER_TAG = 'x';
	  var _SOURCE_TAG = 'source';
	  var _TARGET_TAG = 'target';
	  var _UNIT_TAG = 'trans-unit';
	  var _CR = function (ws) {
	      if (ws === void 0) { ws = 0; }
	      return new Text$2("\n" + new Array(ws).join(' '));
	  };
	  // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
	  // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html
	  var Xliff = (function () {
	      function Xliff(_htmlParser, _interpolationConfig) {
	          this._htmlParser = _htmlParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      Xliff.prototype.write = function (messageMap) {
	          var visitor = new _WriteVisitor();
	          var transUnits = [];
	          Object.keys(messageMap).forEach(function (id) {
	              var message = messageMap[id];
	              var transUnit = new Tag(_UNIT_TAG, { id: id, datatype: 'html' });
	              transUnit.children.push(_CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), _CR(8), new Tag(_TARGET_TAG));
	              if (message.description) {
	                  transUnit.children.push(_CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	              }
	              if (message.meaning) {
	                  transUnit.children.push(_CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	              }
	              transUnit.children.push(_CR(6));
	              transUnits.push(_CR(6), transUnit);
	          });
	          var body = new Tag('body', {}, transUnits.concat([_CR(4)]));
	          var file = new Tag('file', { 'source-language': _SOURCE_LANG, datatype: 'plaintext', original: 'ng2.template' }, [_CR(4), body, _CR(2)]);
	          var xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [_CR(2), file, _CR()]);
	          return serialize([new Declaration({ version: '1.0', encoding: 'UTF-8' }), _CR(), xliff]);
	      };
	      Xliff.prototype.load = function (content, url, messageBundle) {
	          var _this = this;
	          // Parse the xtb file into xml nodes
	          var result = new XmlParser().parse(content, url);
	          if (result.errors.length) {
	              throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
	          }
	          // Replace the placeholders, messages are now string
	          var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;
	          if (errors.length) {
	              throw new Error("xtb parse errors:\n" + errors.join('\n'));
	          }
	          // Convert the string messages to html ast
	          // TODO(vicb): map error message back to the original message in xtb
	          var messageMap = {};
	          var parseErrors = [];
	          Object.keys(messages).forEach(function (id) {
	              var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
	              parseErrors.push.apply(parseErrors, res.errors);
	              messageMap[id] = res.rootNodes;
	          });
	          if (parseErrors.length) {
	              throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
	          }
	          return messageMap;
	      };
	      return Xliff;
	  }());
	  var _WriteVisitor = (function () {
	      function _WriteVisitor() {
	      }
	      _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	      _WriteVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          var nodes = [];
	          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	          return nodes;
	      };
	      _WriteVisitor.prototype.visitIcu = function (icu, context) {
	          if (this._isInIcu) {
	              // nested ICU is not supported
	              throw new Error('xliff does not support nested ICU messages');
	          }
	          this._isInIcu = true;
	          // TODO(vicb): support ICU messages
	          // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
	          // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
	          var nodes = [];
	          this._isInIcu = false;
	          return nodes;
	      };
	      _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ph.tag });
	          if (ph.isVoid) {
	              // void tags have no children nor closing tags
	              return [startTagPh];
	          }
	          var closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ph.tag });
	          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	      };
	      _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	      };
	      _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	      };
	      _WriteVisitor.prototype.serialize = function (nodes) {
	          var _this = this;
	          this._isInIcu = false;
	          return ListWrapper.flatten(nodes.map(function (node) { return node.visit(_this); }));
	      };
	      return _WriteVisitor;
	  }());
	  // TODO(vicb): add error management (structure)
	  // TODO(vicb): factorize (xtb) ?
	  var _LoadVisitor = (function () {
	      function _LoadVisitor() {
	      }
	      _LoadVisitor.prototype.parse = function (nodes, messageBundle) {
	          var _this = this;
	          this._messageNodes = [];
	          this._translatedMessages = {};
	          this._msgId = '';
	          this._target = [];
	          this._errors = [];
	          // Find all messages
	          visitAll(this, nodes, null);
	          var messageMap = messageBundle.getMessageMap();
	          var placeholders = extractPlaceholders(messageBundle);
	          var placeholderToIds = extractPlaceholderToIds(messageBundle);
	          this._messageNodes
	              .filter(function (message) {
	              // Remove any messages that is not present in the source message bundle.
	              return messageMap.hasOwnProperty(message[0]);
	          })
	              .sort(function (a, b) {
	              // Because there could be no ICU placeholders inside an ICU message,
	              // we do not need to take into account the `placeholderToMsgIds` of the referenced
	              // messages, those would always be empty
	              // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()
	              if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
	                  return -1;
	              }
	              if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
	                  return 1;
	              }
	              return 0;
	          })
	              .forEach(function (message) {
	              var id = message[0];
	              _this._placeholders = placeholders[id] || {};
	              _this._placeholderToIds = placeholderToIds[id] || {};
	              // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`
	              _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
	          });
	          return { messages: this._translatedMessages, errors: this._errors };
	      };
	      _LoadVisitor.prototype.visitElement = function (element, context) {
	          switch (element.name) {
	              case _UNIT_TAG:
	                  this._target = null;
	                  var msgId = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!msgId) {
	                      this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      this._msgId = msgId.value;
	                  }
	                  visitAll(this, element.children, null);
	                  if (this._msgId !== null) {
	                      this._messageNodes.push([this._msgId, this._target]);
	                  }
	                  break;
	              case _SOURCE_TAG:
	                  // ignore source message
	                  break;
	              case _TARGET_TAG:
	                  this._target = element.children;
	                  break;
	              case _PLACEHOLDER_TAG:
	                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!idAttr) {
	                      this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      var id = idAttr.value;
	                      if (this._placeholders.hasOwnProperty(id)) {
	                          return this._placeholders[id];
	                      }
	                      if (this._placeholderToIds.hasOwnProperty(id) &&
	                          this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
	                          return this._translatedMessages[this._placeholderToIds[id]];
	                      }
	                      // TODO(vicb): better error message for when
	                      // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])
	                      this._addError(element, "The placeholder \"" + id + "\" does not exists in the source message");
	                  }
	                  break;
	              default:
	                  visitAll(this, element.children, null);
	          }
	      };
	      _LoadVisitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      _LoadVisitor.prototype.visitText = function (text, context) { return text.value; };
	      _LoadVisitor.prototype.visitComment = function (comment, context) { return ''; };
	      _LoadVisitor.prototype.visitExpansion = function (expansion, context) {
	          throw new Error('unreachable code');
	      };
	      _LoadVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
	          throw new Error('unreachable code');
	      };
	      _LoadVisitor.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return _LoadVisitor;
	  }());

	  var _MESSAGES_TAG = 'messagebundle';
	  var _MESSAGE_TAG = 'msg';
	  var _PLACEHOLDER_TAG$1 = 'ph';
	  var _EXEMPLE_TAG = 'ex';
	  var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	  var Xmb = (function () {
	      function Xmb() {
	      }
	      Xmb.prototype.write = function (messageMap) {
	          var visitor = new _Visitor$2();
	          var rootNode = new Tag(_MESSAGES_TAG);
	          rootNode.children.push(new Text$2('\n'));
	          Object.keys(messageMap).forEach(function (id) {
	              var message = messageMap[id];
	              var attrs = { id: id };
	              if (message.description) {
	                  attrs['desc'] = message.description;
	              }
	              if (message.meaning) {
	                  attrs['meaning'] = message.meaning;
	              }
	              rootNode.children.push(new Text$2('  '), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)), new Text$2('\n'));
	          });
	          return serialize([
	              new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	              new Text$2('\n'),
	              new Doctype(_MESSAGES_TAG, _DOCTYPE),
	              new Text$2('\n'),
	              rootNode,
	          ]);
	      };
	      Xmb.prototype.load = function (content, url, messageBundle) {
	          throw new Error('Unsupported');
	      };
	      return Xmb;
	  }());
	  var _Visitor$2 = (function () {
	      function _Visitor() {
	      }
	      _Visitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	      _Visitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          var nodes = [];
	          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	          return nodes;
	      };
	      _Visitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var nodes = [new Text$2("{" + icu.expression + ", " + icu.type + ", ")];
	          Object.keys(icu.cases).forEach(function (c) {
	              nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	          });
	          nodes.push(new Text$2("}"));
	          return nodes;
	      };
	      _Visitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	          var startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
	          if (ph.isVoid) {
	              // void tags have no children nor closing tags
	              return [startTagPh];
	          }
	          var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	          var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
	          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	      };
	      _Visitor.prototype.visitPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	      };
	      _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	      };
	      _Visitor.prototype.serialize = function (nodes) {
	          var _this = this;
	          return ListWrapper.flatten(nodes.map(function (node) { return node.visit(_this); }));
	      };
	      return _Visitor;
	  }());

	  var _TRANSLATIONS_TAG = 'translationbundle';
	  var _TRANSLATION_TAG = 'translation';
	  var _PLACEHOLDER_TAG$2 = 'ph';
	  var Xtb = (function () {
	      function Xtb(_htmlParser, _interpolationConfig) {
	          this._htmlParser = _htmlParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      Xtb.prototype.write = function (messageMap) { throw new Error('Unsupported'); };
	      Xtb.prototype.load = function (content, url, messageBundle) {
	          var _this = this;
	          // Parse the xtb file into xml nodes
	          var result = new XmlParser().parse(content, url);
	          if (result.errors.length) {
	              throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
	          }
	          // Replace the placeholders, messages are now string
	          var _a = new _Visitor$3().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;
	          if (errors.length) {
	              throw new Error("xtb parse errors:\n" + errors.join('\n'));
	          }
	          // Convert the string messages to html ast
	          // TODO(vicb): map error message back to the original message in xtb
	          var messageMap = {};
	          var parseErrors = [];
	          Object.keys(messages).forEach(function (id) {
	              var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
	              parseErrors.push.apply(parseErrors, res.errors);
	              messageMap[id] = res.rootNodes;
	          });
	          if (parseErrors.length) {
	              throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
	          }
	          return messageMap;
	      };
	      return Xtb;
	  }());
	  var _Visitor$3 = (function () {
	      function _Visitor() {
	      }
	      _Visitor.prototype.parse = function (nodes, messageBundle) {
	          var _this = this;
	          this._messageNodes = [];
	          this._translatedMessages = {};
	          this._bundleDepth = 0;
	          this._translationDepth = 0;
	          this._errors = [];
	          // Find all messages
	          visitAll(this, nodes, null);
	          var messageMap = messageBundle.getMessageMap();
	          var placeholders = extractPlaceholders(messageBundle);
	          var placeholderToIds = extractPlaceholderToIds(messageBundle);
	          this._messageNodes
	              .filter(function (message) {
	              // Remove any messages that is not present in the source message bundle.
	              return messageMap.hasOwnProperty(message[0]);
	          })
	              .sort(function (a, b) {
	              // Because there could be no ICU placeholders inside an ICU message,
	              // we do not need to take into account the `placeholderToMsgIds` of the referenced
	              // messages, those would always be empty
	              // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()
	              if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
	                  return -1;
	              }
	              if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
	                  return 1;
	              }
	              return 0;
	          })
	              .forEach(function (message) {
	              var id = message[0];
	              _this._placeholders = placeholders[id] || {};
	              _this._placeholderToIds = placeholderToIds[id] || {};
	              // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`
	              _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
	          });
	          return { messages: this._translatedMessages, errors: this._errors };
	      };
	      _Visitor.prototype.visitElement = function (element, context) {
	          switch (element.name) {
	              case _TRANSLATIONS_TAG:
	                  this._bundleDepth++;
	                  if (this._bundleDepth > 1) {
	                      this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                  }
	                  visitAll(this, element.children, null);
	                  this._bundleDepth--;
	                  break;
	              case _TRANSLATION_TAG:
	                  this._translationDepth++;
	                  if (this._translationDepth > 1) {
	                      this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
	                  }
	                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!idAttr) {
	                      this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      // ICU placeholders are reference to other messages.
	                      // The referenced message might not have been decoded yet.
	                      // We need to have all messages available to make sure deps are decoded first.
	                      // TODO(vicb): report an error on duplicate id
	                      this._messageNodes.push([idAttr.value, element.children]);
	                  }
	                  this._translationDepth--;
	                  break;
	              case _PLACEHOLDER_TAG$2:
	                  var nameAttr = element.attrs.find(function (attr) { return attr.name === 'name'; });
	                  if (!nameAttr) {
	                      this._addError(element, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
	                  }
	                  else {
	                      var name_1 = nameAttr.value;
	                      if (this._placeholders.hasOwnProperty(name_1)) {
	                          return this._placeholders[name_1];
	                      }
	                      if (this._placeholderToIds.hasOwnProperty(name_1) &&
	                          this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
	                          return this._translatedMessages[this._placeholderToIds[name_1]];
	                      }
	                      // TODO(vicb): better error message for when
	                      // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[name])
	                      this._addError(element, "The placeholder \"" + name_1 + "\" does not exists in the source message");
	                  }
	                  break;
	              default:
	                  this._addError(element, 'Unexpected tag');
	          }
	      };
	      _Visitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      _Visitor.prototype.visitText = function (text, context) { return text.value; };
	      _Visitor.prototype.visitComment = function (comment, context) { return ''; };
	      _Visitor.prototype.visitExpansion = function (expansion, context) {
	          var _this = this;
	          var strCases = expansion.cases.map(function (c) { return c.visit(_this, null); });
	          return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
	      };
	      _Visitor.prototype.visitExpansionCase = function (expansionCase, context) {
	          return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
	      };
	      _Visitor.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return _Visitor;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * A container for translated messages
	   */
	  var TranslationBundle = (function () {
	      function TranslationBundle(_messageMap) {
	          if (_messageMap === void 0) { _messageMap = {}; }
	          this._messageMap = _messageMap;
	      }
	      TranslationBundle.load = function (content, url, messageBundle, serializer) {
	          return new TranslationBundle(serializer.load(content, url, messageBundle));
	      };
	      TranslationBundle.prototype.get = function (id) { return this._messageMap[id]; };
	      TranslationBundle.prototype.has = function (id) { return id in this._messageMap; };
	      return TranslationBundle;
	  }());

	  var I18NHtmlParser = (function () {
	      // TODO(vicb): transB.load() should not need a msgB & add transB.resolve(msgB,
	      // interpolationConfig)
	      // TODO(vicb): remove the interpolationConfig from the Xtb serializer
	      function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
	          this._htmlParser = _htmlParser;
	          this._translations = _translations;
	          this._translationsFormat = _translationsFormat;
	      }
	      I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	          if (!this._translations || this._translations === '') {
	              // Do not enable i18n when no translation bundle is provided
	              return parseResult;
	          }
	          // TODO(vicb): add support for implicit tags / attributes
	          var messageBundle = new MessageBundle(this._htmlParser, [], {});
	          var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
	          if (errors && errors.length) {
	              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
	          }
	          var serializer = this._createSerializer(interpolationConfig);
	          var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
	          return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
	      };
	      I18NHtmlParser.prototype._createSerializer = function (interpolationConfig) {
	          var format = (this._translationsFormat || 'xlf').toLowerCase();
	          switch (format) {
	              case 'xmb':
	                  return new Xmb();
	              case 'xtb':
	                  return new Xtb(this._htmlParser, interpolationConfig);
	              case 'xliff':
	              case 'xlf':
	              default:
	                  return new Xliff(this._htmlParser, interpolationConfig);
	          }
	      };
	      return I18NHtmlParser;
	  }());

	  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
	  var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
	  var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
	  var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
	  var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
	  var AppElement = _angular_core.__core_private__.AppElement;
	  var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
	  var AppView = _angular_core.__core_private__.AppView;
	  var DebugAppView = _angular_core.__core_private__.DebugAppView;
	  var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
	  var registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
	  var ViewType = _angular_core.__core_private__.ViewType;
	  var MAX_INTERPOLATION_VALUES = _angular_core.__core_private__.MAX_INTERPOLATION_VALUES;
	  var checkBinding = _angular_core.__core_private__.checkBinding;
	  var flattenNestedViewRenderNodes = _angular_core.__core_private__.flattenNestedViewRenderNodes;
	  var interpolate = _angular_core.__core_private__.interpolate;
	  var ViewUtils = _angular_core.__core_private__.ViewUtils;
	  var DebugContext = _angular_core.__core_private__.DebugContext;
	  var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
	  var devModeEqual = _angular_core.__core_private__.devModeEqual;
	  var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
	  var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
	  var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
	  var EMPTY_ARRAY = _angular_core.__core_private__.EMPTY_ARRAY;
	  var EMPTY_MAP = _angular_core.__core_private__.EMPTY_MAP;
	  var pureProxy1 = _angular_core.__core_private__.pureProxy1;
	  var pureProxy2 = _angular_core.__core_private__.pureProxy2;
	  var pureProxy3 = _angular_core.__core_private__.pureProxy3;
	  var pureProxy4 = _angular_core.__core_private__.pureProxy4;
	  var pureProxy5 = _angular_core.__core_private__.pureProxy5;
	  var pureProxy6 = _angular_core.__core_private__.pureProxy6;
	  var pureProxy7 = _angular_core.__core_private__.pureProxy7;
	  var pureProxy8 = _angular_core.__core_private__.pureProxy8;
	  var pureProxy9 = _angular_core.__core_private__.pureProxy9;
	  var pureProxy10 = _angular_core.__core_private__.pureProxy10;
	  var castByValue = _angular_core.__core_private__.castByValue;
	  var Console = _angular_core.__core_private__.Console;
	  var reflector = _angular_core.__core_private__.reflector;
	  var Reflector = _angular_core.__core_private__.Reflector;
	  var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
	  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
	  var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
	  var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
	  var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
	  var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
	  var AnimationOutput = _angular_core.__core_private__.AnimationOutput;
	  var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
	  var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
	  var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;
	  var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
	  var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
	  var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
	  var clearStyles = _angular_core.__core_private__.clearStyles;
	  var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
	  var renderStyles = _angular_core.__core_private__.renderStyles;
	  var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;

	  var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
	  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
	  var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
	  var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
	  var Identifiers = (function () {
	      function Identifiers() {
	      }
	      Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	          name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	          moduleUrl: assetUrl('core', 'metadata/di'),
	          runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	      };
	      Identifiers.ViewUtils = {
	          name: 'ViewUtils',
	          moduleUrl: assetUrl('core', 'linker/view_utils'),
	          runtime: ViewUtils
	      };
	      Identifiers.AppView = { name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView };
	      Identifiers.DebugAppView = {
	          name: 'DebugAppView',
	          moduleUrl: APP_VIEW_MODULE_URL,
	          runtime: DebugAppView
	      };
	      Identifiers.AppElement = {
	          name: 'AppElement',
	          moduleUrl: assetUrl('core', 'linker/element'),
	          runtime: AppElement
	      };
	      Identifiers.ElementRef = {
	          name: 'ElementRef',
	          moduleUrl: assetUrl('core', 'linker/element_ref'),
	          runtime: _angular_core.ElementRef
	      };
	      Identifiers.ViewContainerRef = {
	          name: 'ViewContainerRef',
	          moduleUrl: assetUrl('core', 'linker/view_container_ref'),
	          runtime: _angular_core.ViewContainerRef
	      };
	      Identifiers.ChangeDetectorRef = {
	          name: 'ChangeDetectorRef',
	          moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
	          runtime: _angular_core.ChangeDetectorRef
	      };
	      Identifiers.RenderComponentType = {
	          name: 'RenderComponentType',
	          moduleUrl: assetUrl('core', 'render/api'),
	          runtime: _angular_core.RenderComponentType
	      };
	      Identifiers.QueryList = {
	          name: 'QueryList',
	          moduleUrl: assetUrl('core', 'linker/query_list'),
	          runtime: _angular_core.QueryList
	      };
	      Identifiers.TemplateRef = {
	          name: 'TemplateRef',
	          moduleUrl: assetUrl('core', 'linker/template_ref'),
	          runtime: _angular_core.TemplateRef
	      };
	      Identifiers.TemplateRef_ = {
	          name: 'TemplateRef_',
	          moduleUrl: assetUrl('core', 'linker/template_ref'),
	          runtime: TemplateRef_
	      };
	      Identifiers.CodegenComponentFactoryResolver = {
	          name: 'CodegenComponentFactoryResolver',
	          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	          runtime: CodegenComponentFactoryResolver
	      };
	      Identifiers.ComponentFactoryResolver = {
	          name: 'ComponentFactoryResolver',
	          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	          runtime: _angular_core.ComponentFactoryResolver
	      };
	      Identifiers.ComponentFactory = {
	          name: 'ComponentFactory',
	          runtime: _angular_core.ComponentFactory,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.NgModuleFactory = {
	          name: 'NgModuleFactory',
	          runtime: _angular_core.NgModuleFactory,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	      };
	      Identifiers.NgModuleInjector = {
	          name: 'NgModuleInjector',
	          runtime: NgModuleInjector,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	      };
	      Identifiers.RegisterModuleFactoryFn = {
	          name: 'registerModuleFactory',
	          runtime: registerModuleFactory,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
	      };
	      Identifiers.ValueUnwrapper = { name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper };
	      Identifiers.Injector = {
	          name: 'Injector',
	          moduleUrl: assetUrl('core', 'di/injector'),
	          runtime: _angular_core.Injector
	      };
	      Identifiers.ViewEncapsulation = {
	          name: 'ViewEncapsulation',
	          moduleUrl: assetUrl('core', 'metadata/view'),
	          runtime: _angular_core.ViewEncapsulation
	      };
	      Identifiers.ViewType = {
	          name: 'ViewType',
	          moduleUrl: assetUrl('core', 'linker/view_type'),
	          runtime: ViewType
	      };
	      Identifiers.ChangeDetectionStrategy = {
	          name: 'ChangeDetectionStrategy',
	          moduleUrl: CD_MODULE_URL,
	          runtime: _angular_core.ChangeDetectionStrategy
	      };
	      Identifiers.StaticNodeDebugInfo = {
	          name: 'StaticNodeDebugInfo',
	          moduleUrl: assetUrl('core', 'linker/debug_context'),
	          runtime: StaticNodeDebugInfo
	      };
	      Identifiers.DebugContext = {
	          name: 'DebugContext',
	          moduleUrl: assetUrl('core', 'linker/debug_context'),
	          runtime: DebugContext
	      };
	      Identifiers.Renderer = {
	          name: 'Renderer',
	          moduleUrl: assetUrl('core', 'render/api'),
	          runtime: _angular_core.Renderer
	      };
	      Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange };
	      Identifiers.UNINITIALIZED = { name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED };
	      Identifiers.ChangeDetectorStatus = {
	          name: 'ChangeDetectorStatus',
	          moduleUrl: CD_MODULE_URL,
	          runtime: ChangeDetectorStatus
	      };
	      Identifiers.checkBinding = {
	          name: 'checkBinding',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: checkBinding
	      };
	      Identifiers.flattenNestedViewRenderNodes = {
	          name: 'flattenNestedViewRenderNodes',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: flattenNestedViewRenderNodes
	      };
	      Identifiers.devModeEqual = { name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: devModeEqual };
	      Identifiers.interpolate = {
	          name: 'interpolate',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: interpolate
	      };
	      Identifiers.castByValue = {
	          name: 'castByValue',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: castByValue
	      };
	      Identifiers.EMPTY_ARRAY = {
	          name: 'EMPTY_ARRAY',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: EMPTY_ARRAY
	      };
	      Identifiers.EMPTY_MAP = { name: 'EMPTY_MAP', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: EMPTY_MAP };
	      Identifiers.pureProxies = [
	          null,
	          { name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy1 },
	          { name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy2 },
	          { name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy3 },
	          { name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy4 },
	          { name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy5 },
	          { name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy6 },
	          { name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy7 },
	          { name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy8 },
	          { name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy9 },
	          { name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: pureProxy10 },
	      ];
	      Identifiers.SecurityContext = {
	          name: 'SecurityContext',
	          moduleUrl: assetUrl('core', 'security'),
	          runtime: _angular_core.SecurityContext,
	      };
	      Identifiers.AnimationKeyframe = {
	          name: 'AnimationKeyframe',
	          moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
	          runtime: AnimationKeyframe
	      };
	      Identifiers.AnimationStyles = {
	          name: 'AnimationStyles',
	          moduleUrl: assetUrl('core', 'animation/animation_styles'),
	          runtime: AnimationStyles
	      };
	      Identifiers.NoOpAnimationPlayer = {
	          name: 'NoOpAnimationPlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_player'),
	          runtime: NoOpAnimationPlayer
	      };
	      Identifiers.AnimationGroupPlayer = {
	          name: 'AnimationGroupPlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_group_player'),
	          runtime: AnimationGroupPlayer
	      };
	      Identifiers.AnimationSequencePlayer = {
	          name: 'AnimationSequencePlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
	          runtime: AnimationSequencePlayer
	      };
	      Identifiers.prepareFinalAnimationStyles = {
	          name: 'prepareFinalAnimationStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: prepareFinalAnimationStyles
	      };
	      Identifiers.balanceAnimationKeyframes = {
	          name: 'balanceAnimationKeyframes',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: balanceAnimationKeyframes
	      };
	      Identifiers.clearStyles = {
	          name: 'clearStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: clearStyles
	      };
	      Identifiers.renderStyles = {
	          name: 'renderStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: renderStyles
	      };
	      Identifiers.collectAndResolveStyles = {
	          name: 'collectAndResolveStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: collectAndResolveStyles
	      };
	      Identifiers.LOCALE_ID = {
	          name: 'LOCALE_ID',
	          moduleUrl: assetUrl('core', 'i18n/tokens'),
	          runtime: _angular_core.LOCALE_ID
	      };
	      Identifiers.TRANSLATIONS_FORMAT = {
	          name: 'TRANSLATIONS_FORMAT',
	          moduleUrl: assetUrl('core', 'i18n/tokens'),
	          runtime: _angular_core.TRANSLATIONS_FORMAT
	      };
	      Identifiers.AnimationOutput = {
	          name: 'AnimationOutput',
	          moduleUrl: assetUrl('core', 'animation/animation_output'),
	          runtime: AnimationOutput
	      };
	      return Identifiers;
	  }());
	  function resolveIdentifier(identifier) {
	      return new CompileIdentifierMetadata({
	          name: identifier.name,
	          moduleUrl: identifier.moduleUrl,
	          reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
	      });
	  }
	  function identifierToken(identifier) {
	      return new CompileTokenMetadata({ identifier: identifier });
	  }
	  function resolveIdentifierToken(identifier) {
	      return identifierToken(resolveIdentifier(identifier));
	  }
	  function resolveEnumIdentifier(enumType, name) {
	      var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
	      return new CompileIdentifierMetadata({ name: enumType.name + "." + name, moduleUrl: enumType.moduleUrl, reference: resolvedEnum });
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$8 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var HtmlParser = (function (_super) {
	      __extends$8(HtmlParser, _super);
	      function HtmlParser() {
	          _super.call(this, getHtmlTagDefinition);
	      }
	      HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	      };
	      HtmlParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      HtmlParser.ctorParameters = [];
	      return HtmlParser;
	  }(Parser$1));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$9 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // http://cldr.unicode.org/index/cldr-spec/plural-rules
	  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	  /**
	   * Expands special forms into elements.
	   *
	   * For example,
	   *
	   * ```
	   * { messages.length, plural,
	   *   =0 {zero}
	   *   =1 {one}
	   *   other {more than one}
	   * }
	   * ```
	   *
	   * will be expanded into
	   *
	   * ```
	   * <ng-container [ngPlural]="messages.length">
	   *   <template ngPluralCase="=0">zero</ng-container>
	   *   <template ngPluralCase="=1">one</ng-container>
	   *   <template ngPluralCase="other">more than one</ng-container>
	   * </ng-container>
	   * ```
	   */
	  function expandNodes(nodes) {
	      var expander = new _Expander();
	      return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	  }
	  var ExpansionResult = (function () {
	      function ExpansionResult(nodes, expanded, errors) {
	          this.nodes = nodes;
	          this.expanded = expanded;
	          this.errors = errors;
	      }
	      return ExpansionResult;
	  }());
	  var ExpansionError = (function (_super) {
	      __extends$9(ExpansionError, _super);
	      function ExpansionError(span, errorMsg) {
	          _super.call(this, span, errorMsg);
	      }
	      return ExpansionError;
	  }(ParseError));
	  /**
	   * Expand expansion forms (plural, select) to directives
	   *
	   * @internal
	   */
	  var _Expander = (function () {
	      function _Expander() {
	          this.isExpanded = false;
	          this.errors = [];
	      }
	      _Expander.prototype.visitElement = function (element, context) {
	          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	      };
	      _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	      _Expander.prototype.visitText = function (text, context) { return text; };
	      _Expander.prototype.visitComment = function (comment, context) { return comment; };
	      _Expander.prototype.visitExpansion = function (icu, context) {
	          this.isExpanded = true;
	          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	              _expandDefaultForm(icu, this.errors);
	      };
	      _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	          throw new Error('Should not be reached');
	      };
	      return _Expander;
	  }());
	  function _expandPluralForm(ast, errors) {
	      var children = ast.cases.map(function (c) {
	          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	              errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	          }
	          var expansionResult = expandNodes(c.expression);
	          errors.push.apply(errors, expansionResult.errors);
	          return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	      });
	      var switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	  }
	  function _expandDefaultForm(ast, errors) {
	      var children = ast.cases.map(function (c) {
	          var expansionResult = expandNodes(c.expression);
	          errors.push.apply(errors, expansionResult.errors);
	          return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	      });
	      var switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$10 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var ProviderError = (function (_super) {
	      __extends$10(ProviderError, _super);
	      function ProviderError(message, span) {
	          _super.call(this, span, message);
	      }
	      return ProviderError;
	  }(ParseError));
	  var ProviderViewContext = (function () {
	      function ProviderViewContext(component, sourceSpan) {
	          var _this = this;
	          this.component = component;
	          this.sourceSpan = sourceSpan;
	          this.errors = [];
	          this.viewQueries = _getViewQueries(component);
	          this.viewProviders = new Map();
	          _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function (provider) {
	              if (isBlank(_this.viewProviders.get(provider.token.reference))) {
	                  _this.viewProviders.set(provider.token.reference, true);
	              }
	          });
	      }
	      return ProviderViewContext;
	  }());
	  var ProviderElementContext = (function () {
	      function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
	          var _this = this;
	          this._viewContext = _viewContext;
	          this._parent = _parent;
	          this._isViewRoot = _isViewRoot;
	          this._directiveAsts = _directiveAsts;
	          this._sourceSpan = _sourceSpan;
	          this._transformedProviders = new Map();
	          this._seenProviders = new Map();
	          this._hasViewContainer = false;
	          this._attrs = {};
	          attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	          var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	          this._allProviders =
	              _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);
	          this._contentQueries = _getContentQueries(directivesMeta);
	          var queriedTokens = new Map();
	          MapWrapper.values(this._allProviders).forEach(function (provider) {
	              _this._addQueryReadsTo(provider.token, queriedTokens);
	          });
	          refs.forEach(function (refAst) {
	              _this._addQueryReadsTo(new CompileTokenMetadata({ value: refAst.name }), queriedTokens);
	          });
	          if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
	              this._hasViewContainer = true;
	          }
	          // create the providers that we know are eager first
	          MapWrapper.values(this._allProviders).forEach(function (provider) {
	              var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
	              if (eager) {
	                  _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	              }
	          });
	      }
	      ProviderElementContext.prototype.afterElement = function () {
	          var _this = this;
	          // collect lazy providers
	          MapWrapper.values(this._allProviders).forEach(function (provider) {
	              _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	          });
	      };
	      Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	          get: function () { return MapWrapper.values(this._transformedProviders); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	          get: function () {
	              var sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	              var sortedDirectives = ListWrapper.clone(this._directiveAsts);
	              ListWrapper.sort(sortedDirectives, function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                  sortedProviderTypes.indexOf(dir2.directive.type); });
	              return sortedDirectives;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	          get: function () { return this._hasViewContainer; },
	          enumerable: true,
	          configurable: true
	      });
	      ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
	          this._getQueriesFor(token).forEach(function (query) {
	              var queryReadToken = isPresent(query.read) ? query.read : token;
	              if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
	                  queryReadTokens.set(queryReadToken.reference, true);
	              }
	          });
	      };
	      ProviderElementContext.prototype._getQueriesFor = function (token) {
	          var result = [];
	          var currentEl = this;
	          var distance = 0;
	          var queries;
	          while (currentEl !== null) {
	              queries = currentEl._contentQueries.get(token.reference);
	              if (isPresent(queries)) {
	                  ListWrapper.addAll(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));
	              }
	              if (currentEl._directiveAsts.length > 0) {
	                  distance++;
	              }
	              currentEl = currentEl._parent;
	          }
	          queries = this._viewContext.viewQueries.get(token.reference);
	          if (isPresent(queries)) {
	              ListWrapper.addAll(result, queries);
	          }
	          return result;
	      };
	      ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	          var _this = this;
	          var resolvedProvider = this._allProviders.get(token.reference);
	          if (isBlank(resolvedProvider) ||
	              ((requestingProviderType === exports.ProviderAstType.Directive ||
	                  requestingProviderType === exports.ProviderAstType.PublicService) &&
	                  resolvedProvider.providerType === exports.ProviderAstType.PrivateService) ||
	              ((requestingProviderType === exports.ProviderAstType.PrivateService ||
	                  requestingProviderType === exports.ProviderAstType.PublicService) &&
	                  resolvedProvider.providerType === exports.ProviderAstType.Builtin)) {
	              return null;
	          }
	          var transformedProviderAst = this._transformedProviders.get(token.reference);
	          if (isPresent(transformedProviderAst)) {
	              return transformedProviderAst;
	          }
	          if (isPresent(this._seenProviders.get(token.reference))) {
	              this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
	              return null;
	          }
	          this._seenProviders.set(token.reference, true);
	          var transformedProviders = resolvedProvider.providers.map(function (provider) {
	              var transformedUseValue = provider.useValue;
	              var transformedUseExisting = provider.useExisting;
	              var transformedDeps;
	              if (isPresent(provider.useExisting)) {
	                  var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }), eager);
	                  if (isPresent(existingDiDep.token)) {
	                      transformedUseExisting = existingDiDep.token;
	                  }
	                  else {
	                      transformedUseExisting = null;
	                      transformedUseValue = existingDiDep.value;
	                  }
	              }
	              else if (isPresent(provider.useFactory)) {
	                  var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	              }
	              else if (isPresent(provider.useClass)) {
	                  var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	              }
	              return _transformProvider(provider, {
	                  useExisting: transformedUseExisting,
	                  useValue: transformedUseValue,
	                  deps: transformedDeps
	              });
	          });
	          transformedProviderAst =
	              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	          this._transformedProviders.set(token.reference, transformedProviderAst);
	          return transformedProviderAst;
	      };
	      ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	          if (eager === void 0) { eager = null; }
	          if (dep.isAttribute) {
	              var attrValue = this._attrs[dep.token.value];
	              return new CompileDiDependencyMetadata({ isValue: true, value: normalizeBlank(attrValue) });
	          }
	          if (isPresent(dep.query) || isPresent(dep.viewQuery)) {
	              return dep;
	          }
	          if (isPresent(dep.token)) {
	              // access builtints
	              if ((requestingProviderType === exports.ProviderAstType.Directive ||
	                  requestingProviderType === exports.ProviderAstType.Component)) {
	                  if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference ||
	                      dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference ||
	                      dep.token.reference ===
	                          resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference ||
	                      dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
	                      return dep;
	                  }
	                  if (dep.token.reference ===
	                      resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
	                      this._hasViewContainer = true;
	                  }
	              }
	              // access the injector
	              if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
	                  return dep;
	              }
	              // access providers
	              if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
	                  return dep;
	              }
	          }
	          return null;
	      };
	      ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	          if (eager === void 0) { eager = null; }
	          var currElement = this;
	          var currEager = eager;
	          var result = null;
	          if (!dep.isSkipSelf) {
	              result = this._getLocalDependency(requestingProviderType, dep, eager);
	          }
	          if (dep.isSelf) {
	              if (isBlank(result) && dep.isOptional) {
	                  result = new CompileDiDependencyMetadata({ isValue: true, value: null });
	              }
	          }
	          else {
	              // check parent elements
	              while (isBlank(result) && isPresent(currElement._parent)) {
	                  var prevElement = currElement;
	                  currElement = currElement._parent;
	                  if (prevElement._isViewRoot) {
	                      currEager = false;
	                  }
	                  result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
	              }
	              // check @Host restriction
	              if (isBlank(result)) {
	                  if (!dep.isHost || this._viewContext.component.type.isHost ||
	                      this._viewContext.component.type.reference === dep.token.reference ||
	                      isPresent(this._viewContext.viewProviders.get(dep.token.reference))) {
	                      result = dep;
	                  }
	                  else {
	                      result = dep.isOptional ?
	                          result = new CompileDiDependencyMetadata({ isValue: true, value: null }) :
	                          null;
	                  }
	              }
	          }
	          if (isBlank(result)) {
	              this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
	          }
	          return result;
	      };
	      return ProviderElementContext;
	  }());
	  var NgModuleProviderAnalyzer = (function () {
	      function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	          var _this = this;
	          this._transformedProviders = new Map();
	          this._seenProviders = new Map();
	          this._errors = [];
	          this._allProviders = new Map();
	          var ngModuleTypes = ngModule.transitiveModule.modules.map(function (moduleMeta) { return moduleMeta.type; });
	          ngModuleTypes.forEach(function (ngModuleType) {
	              var ngModuleProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: ngModuleType }), useClass: ngModuleType });
	              _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	          });
	          _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	      }
	      NgModuleProviderAnalyzer.prototype.parse = function () {
	          var _this = this;
	          MapWrapper.values(this._allProviders).forEach(function (provider) {
	              _this._getOrCreateLocalProvider(provider.token, provider.eager);
	          });
	          if (this._errors.length > 0) {
	              var errorString = this._errors.join('\n');
	              throw new Error("Provider parse errors:\n" + errorString);
	          }
	          return MapWrapper.values(this._transformedProviders);
	      };
	      NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	          var _this = this;
	          var resolvedProvider = this._allProviders.get(token.reference);
	          if (isBlank(resolvedProvider)) {
	              return null;
	          }
	          var transformedProviderAst = this._transformedProviders.get(token.reference);
	          if (isPresent(transformedProviderAst)) {
	              return transformedProviderAst;
	          }
	          if (isPresent(this._seenProviders.get(token.reference))) {
	              this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
	              return null;
	          }
	          this._seenProviders.set(token.reference, true);
	          var transformedProviders = resolvedProvider.providers.map(function (provider) {
	              var transformedUseValue = provider.useValue;
	              var transformedUseExisting = provider.useExisting;
	              var transformedDeps;
	              if (isPresent(provider.useExisting)) {
	                  var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }), eager, resolvedProvider.sourceSpan);
	                  if (isPresent(existingDiDep.token)) {
	                      transformedUseExisting = existingDiDep.token;
	                  }
	                  else {
	                      transformedUseExisting = null;
	                      transformedUseValue = existingDiDep.value;
	                  }
	              }
	              else if (isPresent(provider.useFactory)) {
	                  var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	              }
	              else if (isPresent(provider.useClass)) {
	                  var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	              }
	              return _transformProvider(provider, {
	                  useExisting: transformedUseExisting,
	                  useValue: transformedUseValue,
	                  deps: transformedDeps
	              });
	          });
	          transformedProviderAst =
	              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	          this._transformedProviders.set(token.reference, transformedProviderAst);
	          return transformedProviderAst;
	      };
	      NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	          if (eager === void 0) { eager = null; }
	          var foundLocal = false;
	          if (!dep.isSkipSelf && isPresent(dep.token)) {
	              // access the injector
	              if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||
	                  dep.token.reference ===
	                      resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
	                  foundLocal = true;
	              }
	              else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
	                  foundLocal = true;
	              }
	          }
	          var result = dep;
	          if (dep.isSelf && !foundLocal) {
	              if (dep.isOptional) {
	                  result = new CompileDiDependencyMetadata({ isValue: true, value: null });
	              }
	              else {
	                  this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
	              }
	          }
	          return result;
	      };
	      return NgModuleProviderAnalyzer;
	  }());
	  function _transformProvider(provider, _a) {
	      var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	      return new CompileProviderMetadata({
	          token: provider.token,
	          useClass: provider.useClass,
	          useExisting: useExisting,
	          useFactory: provider.useFactory,
	          useValue: useValue,
	          deps: deps,
	          multi: provider.multi
	      });
	  }
	  function _transformProviderAst(provider, _a) {
	      var eager = _a.eager, providers = _a.providers;
	      return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	  }
	  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
	      if (targetProviders === void 0) { targetProviders = null; }
	      if (isBlank(targetProviders)) {
	          targetProviders = [];
	      }
	      if (isPresent(providers)) {
	          providers.forEach(function (provider) {
	              if (isArray(provider)) {
	                  _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
	              }
	              else {
	                  var normalizeProvider = void 0;
	                  if (provider instanceof CompileProviderMetadata) {
	                      normalizeProvider = provider;
	                  }
	                  else if (provider instanceof CompileTypeMetadata) {
	                      normalizeProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: provider }), useClass: provider });
	                  }
	                  else {
	                      targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
	                  }
	                  if (isPresent(normalizeProvider)) {
	                      targetProviders.push(normalizeProvider);
	                  }
	              }
	          });
	      }
	      return targetProviders;
	  }
	  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	      var providersByToken = new Map();
	      directives.forEach(function (directive) {
	          var dirProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: directive.type }), useClass: directive.type });
	          _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	      });
	      // Note: directives need to be able to overwrite providers of a component!
	      var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	      directivesWithComponentFirst.forEach(function (directive) {
	          _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	          _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	      });
	      return providersByToken;
	  }
	  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	      providers.forEach(function (provider) {
	          var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
	          if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
	              targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
	          }
	          if (isBlank(resolvedProvider)) {
	              var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ?
	                  provider.token.identifier.lifecycleHooks :
	                  [];
	              resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
	              targetProvidersByToken.set(provider.token.reference, resolvedProvider);
	          }
	          else {
	              if (!provider.multi) {
	                  ListWrapper.clear(resolvedProvider.providers);
	              }
	              resolvedProvider.providers.push(provider);
	          }
	      });
	  }
	  function _getViewQueries(component) {
	      var viewQueries = new Map();
	      if (isPresent(component.viewQueries)) {
	          component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });
	      }
	      component.type.diDeps.forEach(function (dep) {
	          if (isPresent(dep.viewQuery)) {
	              _addQueryToTokenMap(viewQueries, dep.viewQuery);
	          }
	      });
	      return viewQueries;
	  }
	  function _getContentQueries(directives) {
	      var contentQueries = new Map();
	      directives.forEach(function (directive) {
	          if (isPresent(directive.queries)) {
	              directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });
	          }
	          directive.type.diDeps.forEach(function (dep) {
	              if (isPresent(dep.query)) {
	                  _addQueryToTokenMap(contentQueries, dep.query);
	              }
	          });
	      });
	      return contentQueries;
	  }
	  function _addQueryToTokenMap(map, query) {
	      query.selectors.forEach(function (token) {
	          var entry = map.get(token.reference);
	          if (isBlank(entry)) {
	              entry = [];
	              map.set(token.reference, entry);
	          }
	          entry.push(query);
	      });
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var ElementSchemaRegistry = (function () {
	      function ElementSchemaRegistry() {
	      }
	      return ElementSchemaRegistry;
	  }());

	  var StyleWithImports = (function () {
	      function StyleWithImports(style, styleUrls) {
	          this.style = style;
	          this.styleUrls = styleUrls;
	      }
	      return StyleWithImports;
	  }());
	  function isStyleUrlResolvable(url) {
	      if (isBlank(url) || url.length === 0 || url[0] == '/')
	          return false;
	      var schemeMatch = url.match(_urlWithSchemaRe);
	      return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	  }
	  /**
	   * Rewrites stylesheets by resolving and removing the @import urls that
	   * are either relative or don't have a `package:` scheme
	   */
	  function extractStyleUrls(resolver, baseUrl, cssText) {
	      var foundUrls = [];
	      var modifiedCssText = StringWrapper.replaceAllMapped(cssText, _cssImportRe, function (m) {
	          var url = isPresent(m[1]) ? m[1] : m[2];
	          if (!isStyleUrlResolvable(url)) {
	              // Do not attempt to resolve non-package absolute URLs with URI scheme
	              return m[0];
	          }
	          foundUrls.push(resolver.resolve(baseUrl, url));
	          return '';
	      });
	      return new StyleWithImports(modifiedCssText, foundUrls);
	  }
	  var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	  var _urlWithSchemaRe = /^([^:/?#]+):/;

	  var NG_CONTENT_SELECT_ATTR = 'select';
	  var NG_CONTENT_ELEMENT = 'ng-content';
	  var LINK_ELEMENT = 'link';
	  var LINK_STYLE_REL_ATTR = 'rel';
	  var LINK_STYLE_HREF_ATTR = 'href';
	  var LINK_STYLE_REL_VALUE = 'stylesheet';
	  var STYLE_ELEMENT = 'style';
	  var SCRIPT_ELEMENT = 'script';
	  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	  var NG_PROJECT_AS = 'ngProjectAs';
	  function preparseElement(ast) {
	      var selectAttr = null;
	      var hrefAttr = null;
	      var relAttr = null;
	      var nonBindable = false;
	      var projectAs = null;
	      ast.attrs.forEach(function (attr) {
	          var lcAttrName = attr.name.toLowerCase();
	          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	              selectAttr = attr.value;
	          }
	          else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	              hrefAttr = attr.value;
	          }
	          else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	              relAttr = attr.value;
	          }
	          else if (attr.name == NG_NON_BINDABLE_ATTR) {
	              nonBindable = true;
	          }
	          else if (attr.name == NG_PROJECT_AS) {
	              if (attr.value.length > 0) {
	                  projectAs = attr.value;
	              }
	          }
	      });
	      selectAttr = normalizeNgContentSelect(selectAttr);
	      var nodeName = ast.name.toLowerCase();
	      var type = PreparsedElementType.OTHER;
	      if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	          type = PreparsedElementType.NG_CONTENT;
	      }
	      else if (nodeName == STYLE_ELEMENT) {
	          type = PreparsedElementType.STYLE;
	      }
	      else if (nodeName == SCRIPT_ELEMENT) {
	          type = PreparsedElementType.SCRIPT;
	      }
	      else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	          type = PreparsedElementType.STYLESHEET;
	      }
	      return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	  }
	  var PreparsedElementType;
	  (function (PreparsedElementType) {
	      PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
	      PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
	      PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
	      PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
	      PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
	  })(PreparsedElementType || (PreparsedElementType = {}));
	  var PreparsedElement = (function () {
	      function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	          this.type = type;
	          this.selectAttr = selectAttr;
	          this.hrefAttr = hrefAttr;
	          this.nonBindable = nonBindable;
	          this.projectAs = projectAs;
	      }
	      return PreparsedElement;
	  }());
	  function normalizeNgContentSelect(selectAttr) {
	      if (selectAttr === null || selectAttr.length === 0) {
	          return '*';
	      }
	      return selectAttr;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // Group 1 = "bind-"
	  // Group 2 = "let-"
	  // Group 3 = "ref-/#"
	  // Group 4 = "on-"
	  // Group 5 = "bindon-"
	  // Group 6 = "@"
	  // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	  // Group 8 = identifier inside [()]
	  // Group 9 = identifier inside []
	  // Group 10 = identifier inside ()
	  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	  var KW_BIND_IDX = 1;
	  var KW_LET_IDX = 2;
	  var KW_REF_IDX = 3;
	  var KW_ON_IDX = 4;
	  var KW_BINDON_IDX = 5;
	  var KW_AT_IDX = 6;
	  var IDENT_KW_IDX = 7;
	  var IDENT_BANANA_BOX_IDX = 8;
	  var IDENT_PROPERTY_IDX = 9;
	  var IDENT_EVENT_IDX = 10;
	  var ANIMATE_PROP_PREFIX = 'animate-';
	  var TEMPLATE_ELEMENT = 'template';
	  var TEMPLATE_ATTR = 'template';
	  var TEMPLATE_ATTR_PREFIX = '*';
	  var CLASS_ATTR = 'class';
	  var PROPERTY_PARTS_SEPARATOR = '.';
	  var ATTRIBUTE_PREFIX = 'attr';
	  var CLASS_PREFIX = 'class';
	  var STYLE_PREFIX = 'style';
	  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	  /**
	   * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	   * parsed templates before compilation is invoked, allowing custom expression syntax
	   * and other advanced transformations.
	   *
	   * This is currently an internal-only feature and not meant for general use.
	   */
	  var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
	  var TemplateParseError = (function (_super) {
	      __extends(TemplateParseError, _super);
	      function TemplateParseError(message, span, level) {
	          _super.call(this, span, message, level);
	      }
	      return TemplateParseError;
	  }(ParseError));
	  var TemplateParseResult = (function () {
	      function TemplateParseResult(templateAst, errors) {
	          this.templateAst = templateAst;
	          this.errors = errors;
	      }
	      return TemplateParseResult;
	  }());
	  var TemplateParser = (function () {
	      function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	          this._exprParser = _exprParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._htmlParser = _htmlParser;
	          this._console = _console;
	          this.transforms = transforms;
	      }
	      TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	          var warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	          var errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	          if (warnings.length > 0) {
	              this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	          }
	          if (errors.length > 0) {
	              var errorString = errors.join('\n');
	              throw new Error("Template parse errors:\n" + errorString);
	          }
	          return result.templateAst;
	      };
	      TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	          var interpolationConfig;
	          if (component.template) {
	              interpolationConfig = InterpolationConfig.fromArray(component.template.interpolation);
	          }
	          var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl, true, interpolationConfig);
	          var errors = htmlAstWithErrors.errors;
	          var result;
	          if (errors.length == 0) {
	              // Transform ICU messages to angular directives
	              var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	              errors.push.apply(errors, expandedHtmlAst.errors);
	              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	          }
	          if (htmlAstWithErrors.rootNodes.length > 0) {
	              var uniqDirectives = removeIdentifierDuplicates(directives);
	              var uniqPipes = removeIdentifierDuplicates(pipes);
	              var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
	              var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, schemas, this._exprParser, this._schemaRegistry);
	              result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	              errors.push.apply(errors, parseVisitor.errors.concat(providerViewContext.errors));
	          }
	          else {
	              result = [];
	          }
	          this._assertNoReferenceDuplicationOnTemplate(result, errors);
	          if (errors.length > 0) {
	              return new TemplateParseResult(result, errors);
	          }
	          if (isPresent(this.transforms)) {
	              this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	          }
	          return new TemplateParseResult(result, errors);
	      };
	      /** @internal */
	      TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	          var existingReferences = [];
	          result.filter(function (element) { return !!element.references; })
	              .forEach(function (element) { return element.references.forEach(function (reference) {
	              var name = reference.name;
	              if (existingReferences.indexOf(name) < 0) {
	                  existingReferences.push(name);
	              }
	              else {
	                  var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
	                  errors.push(error);
	              }
	          }); });
	      };
	      TemplateParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      TemplateParser.ctorParameters = [
	          { type: Parser, },
	          { type: ElementSchemaRegistry, },
	          { type: I18NHtmlParser, },
	          { type: Console, },
	          { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	      ];
	      return TemplateParser;
	  }());
	  var TemplateParseVisitor = (function () {
	      function TemplateParseVisitor(providerViewContext, directives, pipes, _schemas, _exprParser, _schemaRegistry) {
	          var _this = this;
	          this.providerViewContext = providerViewContext;
	          this._schemas = _schemas;
	          this._exprParser = _exprParser;
	          this._schemaRegistry = _schemaRegistry;
	          this.selectorMatcher = new SelectorMatcher();
	          this.errors = [];
	          this.directivesIndex = new Map();
	          this.ngContentCount = 0;
	          this.pipesByName = new Map();
	          var tempMeta = providerViewContext.component.template;
	          if (tempMeta && tempMeta.interpolation) {
	              this._interpolationConfig = {
	                  start: tempMeta.interpolation[0],
	                  end: tempMeta.interpolation[1]
	              };
	          }
	          directives.forEach(function (directive, index) {
	              var selector = CssSelector.parse(directive.selector);
	              _this.selectorMatcher.addSelectables(selector, directive);
	              _this.directivesIndex.set(directive, index);
	          });
	          pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	      }
	      TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	          if (level === void 0) { level = ParseErrorLevel.FATAL; }
	          this.errors.push(new TemplateParseError(message, sourceSpan, level));
	      };
	      TemplateParseVisitor.prototype._reportParserErrors = function (errors, sourceSpan) {
	          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	              var error = errors_1[_i];
	              this._reportError(error.message, sourceSpan);
	          }
	      };
	      TemplateParseVisitor.prototype._parseInterpolation = function (value, sourceSpan) {
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	              if (ast)
	                  this._reportParserErrors(ast.errors, sourceSpan);
	              this._checkPipes(ast, sourceSpan);
	              if (isPresent(ast) &&
	                  ast.ast.expressions.length > MAX_INTERPOLATION_VALUES) {
	                  throw new Error("Only support at most " + MAX_INTERPOLATION_VALUES + " interpolation values!");
	              }
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      TemplateParseVisitor.prototype._parseAction = function (value, sourceSpan) {
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	              if (ast) {
	                  this._reportParserErrors(ast.errors, sourceSpan);
	              }
	              if (!ast || ast.ast instanceof EmptyExpr) {
	                  this._reportError("Empty expressions are not allowed", sourceSpan);
	                  return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	              }
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      TemplateParseVisitor.prototype._parseBinding = function (value, sourceSpan) {
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	              if (ast)
	                  this._reportParserErrors(ast.errors, sourceSpan);
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      TemplateParseVisitor.prototype._parseTemplateBindings = function (value, sourceSpan) {
	          var _this = this;
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
	              this._reportParserErrors(bindingsResult.errors, sourceSpan);
	              bindingsResult.templateBindings.forEach(function (binding) {
	                  if (isPresent(binding.expression)) {
	                      _this._checkPipes(binding.expression, sourceSpan);
	                  }
	              });
	              bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
	              return bindingsResult.templateBindings;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return [];
	          }
	      };
	      TemplateParseVisitor.prototype._checkPipes = function (ast, sourceSpan) {
	          var _this = this;
	          if (isPresent(ast)) {
	              var collector = new PipeCollector();
	              ast.visit(collector);
	              collector.pipes.forEach(function (pipeName) {
	                  if (!_this.pipesByName.has(pipeName)) {
	                      _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
	                  }
	              });
	          }
	      };
	      TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	      TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	      TemplateParseVisitor.prototype.visitText = function (text, parent) {
	          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	          var expr = this._parseInterpolation(text.value, text.sourceSpan);
	          if (isPresent(expr)) {
	              return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
	          }
	          else {
	              return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	          }
	      };
	      TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	      };
	      TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	      TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	          var _this = this;
	          var nodeName = element.name;
	          var preparsedElement = preparseElement(element);
	          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	              preparsedElement.type === PreparsedElementType.STYLE) {
	              // Skipping <script> for security reasons
	              // Skipping <style> as we already processed them
	              // in the StyleCompiler
	              return null;
	          }
	          if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	              isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	              // Skipping stylesheets with either relative urls or package scheme as we already processed
	              // them in the StyleCompiler
	              return null;
	          }
	          var matchableAttrs = [];
	          var elementOrDirectiveProps = [];
	          var elementOrDirectiveRefs = [];
	          var elementVars = [];
	          var animationProps = [];
	          var events = [];
	          var templateElementOrDirectiveProps = [];
	          var templateMatchableAttrs = [];
	          var templateElementVars = [];
	          var hasInlineTemplates = false;
	          var attrs = [];
	          var lcElName = splitNsName(nodeName.toLowerCase())[1];
	          var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	          element.attrs.forEach(function (attr) {
	              var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars);
	              var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	              if (hasTemplateBinding && hasInlineTemplates) {
	                  _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	              }
	              if (!hasBinding && !hasTemplateBinding) {
	                  // don't include the bindings as attributes as well in the AST
	                  attrs.push(_this.visitAttribute(attr, null));
	                  matchableAttrs.push([attr.name, attr.value]);
	              }
	              if (hasTemplateBinding) {
	                  hasInlineTemplates = true;
	              }
	          });
	          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	          var references = [];
	          var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
	          var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts)
	              .concat(animationProps);
	          var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	          var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
	          var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	          providerContext.afterElement();
	          // Override the actual selector when the `ngProjectAs` attribute is provided
	          var projectionSelector = isPresent(preparsedElement.projectAs) ?
	              CssSelector.parse(preparsedElement.projectAs)[0] :
	              elementCssSelector;
	          var ngContentIndex = parent.findNgContentIndex(projectionSelector);
	          var parsedElement;
	          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	              if (isPresent(element.children) && element.children.length > 0) {
	                  this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
	              }
	              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	          }
	          else if (isTemplateElement) {
	              this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	          }
	          else {
	              this._assertElementExists(matchElement, element);
	              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	              var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	              parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
	          }
	          if (hasInlineTemplates) {
	              var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	              var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
	              var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
	              var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
	              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	              var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
	              templateProviderContext.afterElement();
	              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
	          }
	          return parsedElement;
	      };
	      TemplateParseVisitor.prototype._parseInlineTemplateBinding = function (attr, targetMatchableAttrs, targetProps, targetVars) {
	          var templateBindingsSource = null;
	          if (this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
	              templateBindingsSource = attr.value;
	          }
	          else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
	              var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
	              templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
	          }
	          if (isPresent(templateBindingsSource)) {
	              var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
	              for (var i = 0; i < bindings.length; i++) {
	                  var binding = bindings[i];
	                  if (binding.keyIsVar) {
	                      targetVars.push(new VariableAst(binding.key, binding.name, attr.sourceSpan));
	                  }
	                  else if (isPresent(binding.expression)) {
	                      this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
	                  }
	                  else {
	                      targetMatchableAttrs.push([binding.key, '']);
	                      this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
	                  }
	              }
	              return true;
	          }
	          return false;
	      };
	      TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {
	          var name = this._normalizeAttributeName(attr.name);
	          var value = attr.value;
	          var srcSpan = attr.sourceSpan;
	          var bindParts = name.match(BIND_NAME_REGEXP);
	          var hasBinding = false;
	          if (bindParts !== null) {
	              hasBinding = true;
	              if (isPresent(bindParts[KW_BIND_IDX])) {
	                  this._parsePropertyOrAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
	              }
	              else if (bindParts[KW_LET_IDX]) {
	                  if (isTemplateElement) {
	                      var identifier = bindParts[IDENT_KW_IDX];
	                      this._parseVariable(identifier, value, srcSpan, targetVars);
	                  }
	                  else {
	                      this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                  }
	              }
	              else if (bindParts[KW_REF_IDX]) {
	                  var identifier = bindParts[IDENT_KW_IDX];
	                  this._parseReference(identifier, value, srcSpan, targetRefs);
	              }
	              else if (bindParts[KW_ON_IDX]) {
	                  this._parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[KW_BINDON_IDX]) {
	                  this._parsePropertyOrAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
	                  this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[KW_AT_IDX]) {
	                  if (name[0] == '@' && isPresent(value) && value.length > 0) {
	                      this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                          " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", srcSpan, ParseErrorLevel.FATAL);
	                  }
	                  this._parseAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetAnimationProps);
	              }
	              else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                  this._parsePropertyOrAnimation(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
	                  this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[IDENT_PROPERTY_IDX]) {
	                  this._parsePropertyOrAnimation(bindParts[IDENT_PROPERTY_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
	              }
	              else if (bindParts[IDENT_EVENT_IDX]) {
	                  this._parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	          }
	          else {
	              hasBinding =
	                  this._parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	          }
	          if (!hasBinding) {
	              this._parseLiteralAttr(name, value, srcSpan, targetProps);
	          }
	          return hasBinding;
	      };
	      TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	      };
	      TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	          if (identifier.indexOf('-') > -1) {
	              this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	          }
	          targetVars.push(new VariableAst(identifier, value, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	          if (identifier.indexOf('-') > -1) {
	              this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	          }
	          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parsePropertyOrAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps) {
	          var animatePropLength = ANIMATE_PROP_PREFIX.length;
	          var isAnimationProp = name[0] == '@';
	          var animationPrefixLength = 1;
	          if (name.substring(0, animatePropLength) == ANIMATE_PROP_PREFIX) {
	              isAnimationProp = true;
	              animationPrefixLength = animatePropLength;
	          }
	          if (isAnimationProp) {
	              this._parseAnimation(name.substr(animationPrefixLength), expression, sourceSpan, targetMatchableAttrs, targetAnimationProps);
	          }
	          else {
	              this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	          }
	      };
	      TemplateParseVisitor.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {
	          // This will occur when a @trigger is not paired with an expression.
	          // For animations it is valid to not have an expression since */void
	          // states will be applied by angular when the element is attached/detached
	          if (!isPresent(expression) || expression.length == 0) {
	              expression = 'null';
	          }
	          var ast = this._parseBinding(expression, sourceSpan);
	          targetMatchableAttrs.push([name, ast.source]);
	          targetAnimationProps.push(new BoundElementPropertyAst(name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, ast, null, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	          var expr = this._parseInterpolation(value, sourceSpan);
	          if (isPresent(expr)) {
	              this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	              return true;
	          }
	          return false;
	      };
	      TemplateParseVisitor.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	          targetMatchableAttrs.push([name, ast.source]);
	          targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	      };
	      TemplateParseVisitor.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          // long format: 'target: eventName'
	          var parts = splitAtColon(name, [null, name]);
	          var target = parts[0];
	          var eventName = parts[1];
	          var ast = this._parseAction(expression, sourceSpan);
	          targetMatchableAttrs.push([name, ast.source]);
	          targetEvents.push(new BoundEventAst(eventName, target, ast, sourceSpan));
	          // Don't detect directives for event names for now,
	          // so don't add the event name to the matchableAttrs
	      };
	      TemplateParseVisitor.prototype._parseLiteralAttr = function (name, value, sourceSpan, targetProps) {
	          targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	          var _this = this;
	          // Need to sort the directives so that we get consistent results throughout,
	          // as selectorMatcher uses Maps inside.
	          // Also deduplicate directives as they might match more than one time!
	          var directives = new Array(this.directivesIndex.size);
	          // Whether any directive selector matches on the element name
	          var matchElement = false;
	          selectorMatcher.match(elementCssSelector, function (selector, directive) {
	              directives[_this.directivesIndex.get(directive)] = directive;
	              matchElement = matchElement || selector.hasElementSelector();
	          });
	          return {
	              directives: directives.filter(function (dir) { return !!dir; }),
	              matchElement: matchElement,
	          };
	      };
	      TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
	          var _this = this;
	          var matchedReferences = new Set();
	          var component = null;
	          var directiveAsts = directives.map(function (directive) {
	              var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
	              if (directive.isComponent) {
	                  component = directive;
	              }
	              var hostProperties = [];
	              var hostEvents = [];
	              var directiveProperties = [];
	              _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
	              _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
	              _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	              elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                  if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                      (directive.exportAs == elOrDirRef.value)) {
	                      targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                      matchedReferences.add(elOrDirRef.name);
	                  }
	              });
	              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
	          });
	          elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	              if (elOrDirRef.value.length > 0) {
	                  if (!matchedReferences.has(elOrDirRef.name)) {
	                      _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                  }
	              }
	              else if (!component) {
	                  var refToken = null;
	                  if (isTemplateElement) {
	                      refToken = resolveIdentifierToken(Identifiers.TemplateRef);
	                  }
	                  targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	              }
	          }); // fix syntax highlighting issue: `
	          return directiveAsts;
	      };
	      TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function (elementName, hostProps, sourceSpan, targetPropertyAsts) {
	          var _this = this;
	          if (hostProps) {
	              StringMapWrapper.forEach(hostProps, function (expression, propName) {
	                  if (isString(expression)) {
	                      var exprAst = _this._parseBinding(expression, sourceSpan);
	                      targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
	                  }
	                  else {
	                      _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                  }
	              });
	          }
	      };
	      TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function (hostListeners, sourceSpan, targetEventAsts) {
	          var _this = this;
	          if (hostListeners) {
	              StringMapWrapper.forEach(hostListeners, function (expression, propName) {
	                  if (isString(expression)) {
	                      _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
	                  }
	                  else {
	                      _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                  }
	              });
	          }
	      };
	      TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	          if (directiveProperties) {
	              var boundPropsByName_1 = new Map();
	              boundProps.forEach(function (boundProp) {
	                  var prevValue = boundPropsByName_1.get(boundProp.name);
	                  if (isBlank(prevValue) || prevValue.isLiteral) {
	                      // give [a]="b" a higher precedence than a="b" on the same element
	                      boundPropsByName_1.set(boundProp.name, boundProp);
	                  }
	              });
	              StringMapWrapper.forEach(directiveProperties, function (elProp, dirProp) {
	                  var boundProp = boundPropsByName_1.get(elProp);
	                  // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                  if (boundProp) {
	                      targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                  }
	              });
	          }
	      };
	      TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	          var _this = this;
	          var boundElementProps = [];
	          var boundDirectivePropsIndex = new Map();
	          directives.forEach(function (directive) {
	              directive.inputs.forEach(function (prop) {
	                  boundDirectivePropsIndex.set(prop.templateName, prop);
	              });
	          });
	          props.forEach(function (prop) {
	              if (!prop.isLiteral && isBlank(boundDirectivePropsIndex.get(prop.name))) {
	                  boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
	              }
	          });
	          return boundElementProps;
	      };
	      TemplateParseVisitor.prototype._createElementPropertyAst = function (elementName, name, ast, sourceSpan) {
	          var unit = null;
	          var bindingType;
	          var boundPropertyName;
	          var parts = name.split(PROPERTY_PARTS_SEPARATOR);
	          var securityContext;
	          if (parts.length === 1) {
	              var partValue = parts[0];
	              if (partValue[0] == '@') {
	                  boundPropertyName = partValue.substr(1);
	                  bindingType = exports.PropertyBindingType.Animation;
	                  securityContext = _angular_core.SecurityContext.NONE;
	              }
	              else {
	                  boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
	                  securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName);
	                  bindingType = exports.PropertyBindingType.Property;
	                  this._assertNoEventBinding(boundPropertyName, sourceSpan);
	                  if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName, this._schemas)) {
	                      var errorMsg = "Can't bind to '" + boundPropertyName + "' since it isn't a known property of '" + elementName + "'.";
	                      if (elementName.indexOf('-') > -1) {
	                          errorMsg +=
	                              ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundPropertyName + "' input, then verify that it is part of this module.") +
	                                  ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schema' of this component to suppress this message.\n");
	                      }
	                      this._reportError(errorMsg, sourceSpan);
	                  }
	              }
	          }
	          else {
	              if (parts[0] == ATTRIBUTE_PREFIX) {
	                  boundPropertyName = parts[1];
	                  this._assertNoEventBinding(boundPropertyName, sourceSpan);
	                  // NB: For security purposes, use the mapped property name, not the attribute name.
	                  var mapPropName = this._schemaRegistry.getMappedPropName(boundPropertyName);
	                  securityContext = this._schemaRegistry.securityContext(elementName, mapPropName);
	                  var nsSeparatorIdx = boundPropertyName.indexOf(':');
	                  if (nsSeparatorIdx > -1) {
	                      var ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                      var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                      boundPropertyName = mergeNsAndName(ns, name_1);
	                  }
	                  bindingType = exports.PropertyBindingType.Attribute;
	              }
	              else if (parts[0] == CLASS_PREFIX) {
	                  boundPropertyName = parts[1];
	                  bindingType = exports.PropertyBindingType.Class;
	                  securityContext = _angular_core.SecurityContext.NONE;
	              }
	              else if (parts[0] == STYLE_PREFIX) {
	                  unit = parts.length > 2 ? parts[2] : null;
	                  boundPropertyName = parts[1];
	                  bindingType = exports.PropertyBindingType.Style;
	                  securityContext = _angular_core.SecurityContext.STYLE;
	              }
	              else {
	                  this._reportError("Invalid property name '" + name + "'", sourceSpan);
	                  bindingType = null;
	                  securityContext = null;
	              }
	          }
	          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
	      };
	      TemplateParseVisitor.prototype._assertNoEventBinding = function (propName, sourceSpan) {
	          if (propName.toLowerCase().startsWith('on')) {
	              this._reportError(("Binding to event attribute '" + propName + "' is disallowed ") +
	                  ("for security reasons, please use (" + propName.slice(2) + ")=..."), sourceSpan, ParseErrorLevel.FATAL);
	          }
	      };
	      TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	          var componentTypeNames = [];
	          directives.forEach(function (directive) {
	              var typeName = directive.directive.type.name;
	              if (directive.directive.isComponent) {
	                  componentTypeNames.push(typeName);
	              }
	          });
	          return componentTypeNames;
	      };
	      TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	          var componentTypeNames = this._findComponentDirectiveNames(directives);
	          if (componentTypeNames.length > 1) {
	              this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
	          }
	      };
	      /**
	       * Make sure that non-angular tags conform to the schemas.
	       *
	       * Note: An element is considered an angular tag when at least one directive selector matches the
	       * tag name.
	       *
	       * @param matchElement Whether any directive has matched on the tag name
	       * @param element the html element
	       */
	      TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	          var elName = element.name.replace(/^:xhtml:/, '');
	          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	              var errorMsg = ("'" + elName + "' is not a known element:\n") +
	                  ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") +
	                  ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schema' of this component to suppress this message.");
	              this._reportError(errorMsg, element.sourceSpan);
	          }
	      };
	      TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	          var _this = this;
	          var componentTypeNames = this._findComponentDirectiveNames(directives);
	          if (componentTypeNames.length > 0) {
	              this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	          }
	          elementProps.forEach(function (prop) {
	              _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
	          });
	      };
	      TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	          var _this = this;
	          var allDirectiveEvents = new Set();
	          directives.forEach(function (directive) {
	              StringMapWrapper.forEach(directive.directive.outputs, function (eventName) {
	                  allDirectiveEvents.add(eventName);
	              });
	          });
	          events.forEach(function (event) {
	              if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
	                  _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
	              }
	          });
	      };
	      return TemplateParseVisitor;
	  }());
	  var NonBindableVisitor = (function () {
	      function NonBindableVisitor() {
	      }
	      NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	          var preparsedElement = preparseElement(ast);
	          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	              preparsedElement.type === PreparsedElementType.STYLE ||
	              preparsedElement.type === PreparsedElementType.STYLESHEET) {
	              // Skipping <script> for security reasons
	              // Skipping <style> and stylesheets as we already processed them
	              // in the StyleCompiler
	              return null;
	          }
	          var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
	          var selector = createElementCssSelector(ast.name, attrNameAndValues);
	          var ngContentIndex = parent.findNgContentIndex(selector);
	          var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan);
	      };
	      NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	      NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	      };
	      NonBindableVisitor.prototype.visitText = function (text, parent) {
	          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	      };
	      NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	      NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	      return NonBindableVisitor;
	  }());
	  var BoundElementOrDirectiveProperty = (function () {
	      function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
	          this.name = name;
	          this.expression = expression;
	          this.isLiteral = isLiteral;
	          this.sourceSpan = sourceSpan;
	      }
	      return BoundElementOrDirectiveProperty;
	  }());
	  var ElementOrDirectiveRef = (function () {
	      function ElementOrDirectiveRef(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      return ElementOrDirectiveRef;
	  }());
	  function splitClasses(classAttrValue) {
	      return classAttrValue.trim().split(/\s+/g);
	  }
	  var ElementContext = (function () {
	      function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	          this.isTemplateElement = isTemplateElement;
	          this._ngContentIndexMatcher = _ngContentIndexMatcher;
	          this._wildcardNgContentIndex = _wildcardNgContentIndex;
	          this.providerContext = providerContext;
	      }
	      ElementContext.create = function (isTemplateElement, directives, providerContext) {
	          var matcher = new SelectorMatcher();
	          var wildcardNgContentIndex = null;
	          var component = directives.find(function (directive) { return directive.directive.isComponent; });
	          if (component) {
	              var ngContentSelectors = component.directive.template.ngContentSelectors;
	              for (var i = 0; i < ngContentSelectors.length; i++) {
	                  var selector = ngContentSelectors[i];
	                  if (selector === '*') {
	                      wildcardNgContentIndex = i;
	                  }
	                  else {
	                      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                  }
	              }
	          }
	          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	      };
	      ElementContext.prototype.findNgContentIndex = function (selector) {
	          var ngContentIndices = [];
	          this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	          ngContentIndices.sort();
	          if (isPresent(this._wildcardNgContentIndex)) {
	              ngContentIndices.push(this._wildcardNgContentIndex);
	          }
	          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	      };
	      return ElementContext;
	  }());
	  function createElementCssSelector(elementName, matchableAttrs) {
	      var cssSelector = new CssSelector();
	      var elNameNoNs = splitNsName(elementName)[1];
	      cssSelector.setElement(elNameNoNs);
	      for (var i = 0; i < matchableAttrs.length; i++) {
	          var attrName = matchableAttrs[i][0];
	          var attrNameNoNs = splitNsName(attrName)[1];
	          var attrValue = matchableAttrs[i][1];
	          cssSelector.addAttribute(attrNameNoNs, attrValue);
	          if (attrName.toLowerCase() == CLASS_ATTR) {
	              var classes = splitClasses(attrValue);
	              classes.forEach(function (className) { return cssSelector.addClassName(className); });
	          }
	      }
	      return cssSelector;
	  }
	  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	  var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	  var PipeCollector = (function (_super) {
	      __extends(PipeCollector, _super);
	      function PipeCollector() {
	          _super.apply(this, arguments);
	          this.pipes = new Set();
	      }
	      PipeCollector.prototype.visitPipe = function (ast, context) {
	          this.pipes.add(ast.name);
	          ast.exp.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      return PipeCollector;
	  }(RecursiveAstVisitor));

	  function unimplemented$1() {
	      throw new Error('unimplemented');
	  }
	  var CompilerConfig = (function () {
	      function CompilerConfig(_a) {
	          var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;
	          this.renderTypes = renderTypes;
	          this.defaultEncapsulation = defaultEncapsulation;
	          this._genDebugInfo = genDebugInfo;
	          this._logBindingUpdate = logBindingUpdate;
	          this.useJit = useJit;
	      }
	      Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
	          get: function () {
	              return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
	          get: function () {
	              return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      return CompilerConfig;
	  }());
	  /**
	   * Types used for the renderer.
	   * Can be replaced to specialize the generated output to a specific renderer
	   * to help tree shaking.
	   */
	  var RenderTypes = (function () {
	      function RenderTypes() {
	      }
	      Object.defineProperty(RenderTypes.prototype, "renderer", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderText", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderElement", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderComment", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderNode", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderEvent", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      return RenderTypes;
	  }());
	  var DefaultRenderTypes = (function () {
	      function DefaultRenderTypes() {
	          this.renderText = null;
	          this.renderElement = null;
	          this.renderComment = null;
	          this.renderNode = null;
	          this.renderEvent = null;
	      }
	      Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
	          get: function () { return resolveIdentifier(Identifiers.Renderer); },
	          enumerable: true,
	          configurable: true
	      });
	      ;
	      return DefaultRenderTypes;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$11 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var AnimationAst = (function () {
	      function AnimationAst() {
	          this.startTime = 0;
	          this.playTime = 0;
	      }
	      return AnimationAst;
	  }());
	  var AnimationStateAst = (function (_super) {
	      __extends$11(AnimationStateAst, _super);
	      function AnimationStateAst() {
	          _super.apply(this, arguments);
	      }
	      return AnimationStateAst;
	  }(AnimationAst));
	  var AnimationEntryAst = (function (_super) {
	      __extends$11(AnimationEntryAst, _super);
	      function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
	          _super.call(this);
	          this.name = name;
	          this.stateDeclarations = stateDeclarations;
	          this.stateTransitions = stateTransitions;
	      }
	      AnimationEntryAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationEntry(this, context);
	      };
	      return AnimationEntryAst;
	  }(AnimationAst));
	  var AnimationStateDeclarationAst = (function (_super) {
	      __extends$11(AnimationStateDeclarationAst, _super);
	      function AnimationStateDeclarationAst(stateName, styles) {
	          _super.call(this);
	          this.stateName = stateName;
	          this.styles = styles;
	      }
	      AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStateDeclaration(this, context);
	      };
	      return AnimationStateDeclarationAst;
	  }(AnimationStateAst));
	  var AnimationStateTransitionExpression = (function () {
	      function AnimationStateTransitionExpression(fromState, toState) {
	          this.fromState = fromState;
	          this.toState = toState;
	      }
	      return AnimationStateTransitionExpression;
	  }());
	  var AnimationStateTransitionAst = (function (_super) {
	      __extends$11(AnimationStateTransitionAst, _super);
	      function AnimationStateTransitionAst(stateChanges, animation) {
	          _super.call(this);
	          this.stateChanges = stateChanges;
	          this.animation = animation;
	      }
	      AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStateTransition(this, context);
	      };
	      return AnimationStateTransitionAst;
	  }(AnimationStateAst));
	  var AnimationStepAst = (function (_super) {
	      __extends$11(AnimationStepAst, _super);
	      function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
	          _super.call(this);
	          this.startingStyles = startingStyles;
	          this.keyframes = keyframes;
	          this.duration = duration;
	          this.delay = delay;
	          this.easing = easing;
	      }
	      AnimationStepAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStep(this, context);
	      };
	      return AnimationStepAst;
	  }(AnimationAst));
	  var AnimationStylesAst = (function (_super) {
	      __extends$11(AnimationStylesAst, _super);
	      function AnimationStylesAst(styles) {
	          _super.call(this);
	          this.styles = styles;
	      }
	      AnimationStylesAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStyles(this, context);
	      };
	      return AnimationStylesAst;
	  }(AnimationAst));
	  var AnimationKeyframeAst = (function (_super) {
	      __extends$11(AnimationKeyframeAst, _super);
	      function AnimationKeyframeAst(offset, styles) {
	          _super.call(this);
	          this.offset = offset;
	          this.styles = styles;
	      }
	      AnimationKeyframeAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationKeyframe(this, context);
	      };
	      return AnimationKeyframeAst;
	  }(AnimationAst));
	  var AnimationWithStepsAst = (function (_super) {
	      __extends$11(AnimationWithStepsAst, _super);
	      function AnimationWithStepsAst(steps) {
	          _super.call(this);
	          this.steps = steps;
	      }
	      return AnimationWithStepsAst;
	  }(AnimationAst));
	  var AnimationGroupAst = (function (_super) {
	      __extends$11(AnimationGroupAst, _super);
	      function AnimationGroupAst(steps) {
	          _super.call(this, steps);
	      }
	      AnimationGroupAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationGroup(this, context);
	      };
	      return AnimationGroupAst;
	  }(AnimationWithStepsAst));
	  var AnimationSequenceAst = (function (_super) {
	      __extends$11(AnimationSequenceAst, _super);
	      function AnimationSequenceAst(steps) {
	          _super.call(this, steps);
	      }
	      AnimationSequenceAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationSequence(this, context);
	      };
	      return AnimationSequenceAst;
	  }(AnimationWithStepsAst));

	  var Math$2 = global$1.Math;

	  var StylesCollectionEntry = (function () {
	      function StylesCollectionEntry(time, value) {
	          this.time = time;
	          this.value = value;
	      }
	      StylesCollectionEntry.prototype.matches = function (time, value) {
	          return time == this.time && value == this.value;
	      };
	      return StylesCollectionEntry;
	  }());
	  var StylesCollection = (function () {
	      function StylesCollection() {
	          this.styles = {};
	      }
	      StylesCollection.prototype.insertAtTime = function (property, time, value) {
	          var tuple = new StylesCollectionEntry(time, value);
	          var entries = this.styles[property];
	          if (!isPresent(entries)) {
	              entries = this.styles[property] = [];
	          }
	          // insert this at the right stop in the array
	          // this way we can keep it sorted
	          var insertionIndex = 0;
	          for (var i = entries.length - 1; i >= 0; i--) {
	              if (entries[i].time <= time) {
	                  insertionIndex = i + 1;
	                  break;
	              }
	          }
	          ListWrapper.insert(entries, insertionIndex, tuple);
	      };
	      StylesCollection.prototype.getByIndex = function (property, index) {
	          var items = this.styles[property];
	          if (isPresent(items)) {
	              return index >= items.length ? null : items[index];
	          }
	          return null;
	      };
	      StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
	          var entries = this.styles[property];
	          if (isPresent(entries)) {
	              for (var i = entries.length - 1; i >= 0; i--) {
	                  if (entries[i].time <= time)
	                      return i;
	              }
	          }
	          return null;
	      };
	      return StylesCollection;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$12 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var _INITIAL_KEYFRAME = 0;
	  var _TERMINAL_KEYFRAME = 1;
	  var _ONE_SECOND = 1000;
	  var AnimationParseError = (function (_super) {
	      __extends$12(AnimationParseError, _super);
	      function AnimationParseError(message /** TODO #9100 */) {
	          _super.call(this, null, message);
	      }
	      AnimationParseError.prototype.toString = function () { return "" + this.msg; };
	      return AnimationParseError;
	  }(ParseError));
	  var ParsedAnimationResult = (function () {
	      function ParsedAnimationResult(ast, errors) {
	          this.ast = ast;
	          this.errors = errors;
	      }
	      return ParsedAnimationResult;
	  }());
	  function parseAnimationEntry(entry) {
	      var errors = [];
	      var stateStyles = {};
	      var transitions = [];
	      var stateDeclarationAsts = [];
	      entry.definitions.forEach(function (def) {
	          if (def instanceof CompileAnimationStateDeclarationMetadata) {
	              _parseAnimationDeclarationStates(def, errors).forEach(function (ast) {
	                  stateDeclarationAsts.push(ast);
	                  stateStyles[ast.stateName] = ast.styles;
	              });
	          }
	          else {
	              transitions.push(def);
	          }
	      });
	      var stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, errors); });
	      var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
	      return new ParsedAnimationResult(ast, errors);
	  }
	  function parseAnimationOutputName(outputName, errors) {
	      var values = outputName.split('.');
	      var name;
	      var phase = '';
	      if (values.length > 1) {
	          name = values[0];
	          var parsedPhase = values[1];
	          switch (parsedPhase) {
	              case 'start':
	              case 'done':
	                  phase = parsedPhase;
	                  break;
	              default:
	                  errors.push(new AnimationParseError("The provided animation output phase value \"" + parsedPhase + "\" for \"@" + name + "\" is not supported (use start or done)"));
	          }
	      }
	      else {
	          name = outputName;
	          errors.push(new AnimationParseError("The animation trigger output event (@" + name + ") is missing its phase value name (start or done are currently supported)"));
	      }
	      return new AnimationOutput(name, phase, outputName);
	  }
	  function _parseAnimationDeclarationStates(stateMetadata, errors) {
	      var styleValues = [];
	      stateMetadata.styles.styles.forEach(function (stylesEntry) {
	          // TODO (matsko): change this when we get CSS class integration support
	          if (isStringMap(stylesEntry)) {
	              styleValues.push(stylesEntry);
	          }
	          else {
	              errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
	          }
	      });
	      var defStyles = new AnimationStylesAst(styleValues);
	      var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
	      return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });
	  }
	  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
	      var styles = new StylesCollection();
	      var transitionExprs = [];
	      var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
	      transitionStates.forEach(function (expr) {
	          _parseAnimationTransitionExpr(expr, errors).forEach(function (transExpr) {
	              transitionExprs.push(transExpr);
	          });
	      });
	      var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
	      var animation = _normalizeStyleSteps(entry, stateStyles, errors);
	      var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
	      if (errors.length == 0) {
	          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
	      }
	      var stepsAst = (animationAst instanceof AnimationWithStepsAst) ?
	          animationAst :
	          new AnimationSequenceAst([animationAst]);
	      return new AnimationStateTransitionAst(transitionExprs, stepsAst);
	  }
	  function _parseAnimationTransitionExpr(eventStr, errors) {
	      var expressions = [];
	      var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	      if (!isPresent(match) || match.length < 4) {
	          errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
	          return expressions;
	      }
	      var fromState = match[1];
	      var separator = match[2];
	      var toState = match[3];
	      expressions.push(new AnimationStateTransitionExpression(fromState, toState));
	      var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
	      if (separator[0] == '<' && !isFullAnyStateExpr) {
	          expressions.push(new AnimationStateTransitionExpression(toState, fromState));
	      }
	      return expressions;
	  }
	  function _normalizeAnimationEntry(entry) {
	      return isArray(entry) ? new CompileAnimationSequenceMetadata(entry) :
	          entry;
	  }
	  function _normalizeStyleMetadata(entry, stateStyles, errors) {
	      var normalizedStyles = [];
	      entry.styles.forEach(function (styleEntry) {
	          if (isString(styleEntry)) {
	              ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
	          }
	          else {
	              normalizedStyles.push(styleEntry);
	          }
	      });
	      return normalizedStyles;
	  }
	  function _normalizeStyleSteps(entry, stateStyles, errors) {
	      var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
	      return (entry instanceof CompileAnimationGroupMetadata) ?
	          new CompileAnimationGroupMetadata(steps) :
	          new CompileAnimationSequenceMetadata(steps);
	  }
	  function _mergeAnimationStyles(stylesList, newItem) {
	      if (isStringMap(newItem) && stylesList.length > 0) {
	          var lastIndex = stylesList.length - 1;
	          var lastItem = stylesList[lastIndex];
	          if (isStringMap(lastItem)) {
	              stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
	              return;
	          }
	      }
	      stylesList.push(newItem);
	  }
	  function _normalizeStyleStepEntry(entry, stateStyles, errors) {
	      var steps;
	      if (entry instanceof CompileAnimationWithStepsMetadata) {
	          steps = entry.steps;
	      }
	      else {
	          return [entry];
	      }
	      var newSteps = [];
	      var combinedStyles;
	      steps.forEach(function (step) {
	          if (step instanceof CompileAnimationStyleMetadata) {
	              // this occurs when a style step is followed by a previous style step
	              // or when the first style step is run. We want to concatenate all subsequent
	              // style steps together into a single style step such that we have the correct
	              // starting keyframe data to pass into the animation player.
	              if (!isPresent(combinedStyles)) {
	                  combinedStyles = [];
	              }
	              _normalizeStyleMetadata(step, stateStyles, errors)
	                  .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });
	          }
	          else {
	              // it is important that we create a metadata entry of the combined styles
	              // before we go on an process the animate, sequence or group metadata steps.
	              // This will ensure that the AST will have the previous styles painted on
	              // screen before any further animations that use the styles take place.
	              if (isPresent(combinedStyles)) {
	                  newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	                  combinedStyles = null;
	              }
	              if (step instanceof CompileAnimationAnimateMetadata) {
	                  // we do not recurse into CompileAnimationAnimateMetadata since
	                  // those style steps are not going to be squashed
	                  var animateStyleValue = step.styles;
	                  if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
	                      animateStyleValue.styles =
	                          _normalizeStyleMetadata(animateStyleValue, stateStyles, errors);
	                  }
	                  else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
	                      animateStyleValue.steps.forEach(function (step) { step.styles = _normalizeStyleMetadata(step, stateStyles, errors); });
	                  }
	              }
	              else if (step instanceof CompileAnimationWithStepsMetadata) {
	                  var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
	                  step = step instanceof CompileAnimationGroupMetadata ?
	                      new CompileAnimationGroupMetadata(innerSteps) :
	                      new CompileAnimationSequenceMetadata(innerSteps);
	              }
	              newSteps.push(step);
	          }
	      });
	      // this happens when only styles were animated within the sequence
	      if (isPresent(combinedStyles)) {
	          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	      }
	      return newSteps;
	  }
	  function _resolveStylesFromState(stateName, stateStyles, errors) {
	      var styles = [];
	      if (stateName[0] != ':') {
	          errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
	      }
	      else {
	          var normalizedStateName = stateName.substring(1);
	          var value = stateStyles[normalizedStateName];
	          if (!isPresent(value)) {
	              errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
	          }
	          else {
	              value.styles.forEach(function (stylesEntry) {
	                  if (isStringMap(stylesEntry)) {
	                      styles.push(stylesEntry);
	                  }
	              });
	          }
	      }
	      return styles;
	  }
	  var _AnimationTimings = (function () {
	      function _AnimationTimings(duration, delay, easing) {
	          this.duration = duration;
	          this.delay = delay;
	          this.easing = easing;
	      }
	      return _AnimationTimings;
	  }());
	  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
	      var totalEntries = keyframeSequence.steps.length;
	      var totalOffsets = 0;
	      keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });
	      if (totalOffsets > 0 && totalOffsets < totalEntries) {
	          errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
	          totalOffsets = totalEntries;
	      }
	      var limit = totalEntries - 1;
	      var margin = totalOffsets == 0 ? (1 / limit) : 0;
	      var rawKeyframes = [];
	      var index = 0;
	      var doSortKeyframes = false;
	      var lastOffset = 0;
	      keyframeSequence.steps.forEach(function (styleMetadata) {
	          var offset = styleMetadata.offset;
	          var keyframeStyles = {};
	          styleMetadata.styles.forEach(function (entry) {
	              StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	                  if (prop != 'offset') {
	                      keyframeStyles[prop] = value;
	                  }
	              });
	          });
	          if (isPresent(offset)) {
	              doSortKeyframes = doSortKeyframes || (offset < lastOffset);
	          }
	          else {
	              offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
	          }
	          rawKeyframes.push([offset, keyframeStyles]);
	          lastOffset = offset;
	          index++;
	      });
	      if (doSortKeyframes) {
	          ListWrapper.sort(rawKeyframes, function (a, b) { return a[0] <= b[0] ? -1 : 1; });
	      }
	      var i;
	      var firstKeyframe = rawKeyframes[0];
	      if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
	          ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
	      }
	      var firstKeyframeStyles = firstKeyframe[1];
	      limit = rawKeyframes.length - 1;
	      var lastKeyframe = rawKeyframes[limit];
	      if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
	          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
	          limit++;
	      }
	      var lastKeyframeStyles = lastKeyframe[1];
	      for (i = 1; i <= limit; i++) {
	          var entry = rawKeyframes[i];
	          var styles = entry[1];
	          StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	              if (!isPresent(firstKeyframeStyles[prop])) {
	                  firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
	              }
	          });
	      }
	      for (i = limit - 1; i >= 0; i--) {
	          var entry = rawKeyframes[i];
	          var styles = entry[1];
	          StringMapWrapper.forEach(styles, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	              if (!isPresent(lastKeyframeStyles[prop])) {
	                  lastKeyframeStyles[prop] = value;
	              }
	          });
	      }
	      return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });
	  }
	  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
	      var ast;
	      var playTime = 0;
	      var startingTime = currentTime;
	      if (entry instanceof CompileAnimationWithStepsMetadata) {
	          var maxDuration = 0;
	          var steps = [];
	          var isGroup = entry instanceof CompileAnimationGroupMetadata;
	          var previousStyles;
	          entry.steps.forEach(function (entry) {
	              // these will get picked up by the next step...
	              var time = isGroup ? startingTime : currentTime;
	              if (entry instanceof CompileAnimationStyleMetadata) {
	                  entry.styles.forEach(function (stylesEntry) {
	                      // by this point we know that we only have stringmap values
	                      var map = stylesEntry;
	                      StringMapWrapper.forEach(map, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	                          collectedStyles.insertAtTime(prop, time, value);
	                      });
	                  });
	                  previousStyles = entry.styles;
	                  return;
	              }
	              var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
	              if (isPresent(previousStyles)) {
	                  if (entry instanceof CompileAnimationWithStepsMetadata) {
	                      var startingStyles = new AnimationStylesAst(previousStyles);
	                      steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	                  }
	                  else {
	                      var innerStep = innerAst;
	                      ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);
	                  }
	                  previousStyles = null;
	              }
	              var astDuration = innerAst.playTime;
	              currentTime += astDuration;
	              playTime += astDuration;
	              maxDuration = Math$2.max(astDuration, maxDuration);
	              steps.push(innerAst);
	          });
	          if (isPresent(previousStyles)) {
	              var startingStyles = new AnimationStylesAst(previousStyles);
	              steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	          }
	          if (isGroup) {
	              ast = new AnimationGroupAst(steps);
	              playTime = maxDuration;
	              currentTime = startingTime + playTime;
	          }
	          else {
	              ast = new AnimationSequenceAst(steps);
	          }
	      }
	      else if (entry instanceof CompileAnimationAnimateMetadata) {
	          var timings = _parseTimeExpression(entry.timings, errors);
	          var styles = entry.styles;
	          var keyframes;
	          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
	              keyframes =
	                  _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
	          }
	          else {
	              var styleData = styles;
	              var offset = _TERMINAL_KEYFRAME;
	              var styleAst = new AnimationStylesAst(styleData.styles);
	              var keyframe = new AnimationKeyframeAst(offset, styleAst);
	              keyframes = [keyframe];
	          }
	          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
	          playTime = timings.duration + timings.delay;
	          currentTime += playTime;
	          keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return StringMapWrapper.forEach(entry, function (value /** TODO #9100 */, prop /** TODO #9100 */) {
	              return collectedStyles.insertAtTime(prop, currentTime, value);
	          }); }); });
	      }
	      else {
	          // if the code reaches this stage then an error
	          // has already been populated within the _normalizeStyleSteps()
	          // operation...
	          ast = new AnimationStepAst(null, [], 0, 0, '');
	      }
	      ast.playTime = playTime;
	      ast.startTime = startingTime;
	      return ast;
	  }
	  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
	      // steps that only contain style will not be filled
	      if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
	          var keyframes = ast.keyframes;
	          if (keyframes.length == 1) {
	              var endKeyframe = keyframes[0];
	              var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
	              ast.keyframes = [startKeyframe, endKeyframe];
	          }
	      }
	      else if (ast instanceof AnimationWithStepsAst) {
	          ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });
	      }
	  }
	  function _parseTimeExpression(exp, errors) {
	      var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
	      var duration;
	      var delay = 0;
	      var easing = null;
	      if (isString(exp)) {
	          var matches = exp.match(regex);
	          if (matches === null) {
	              errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
	              return new _AnimationTimings(0, 0, null);
	          }
	          var durationMatch = parseFloat(matches[1]);
	          var durationUnit = matches[2];
	          if (durationUnit == 's') {
	              durationMatch *= _ONE_SECOND;
	          }
	          duration = Math$2.floor(durationMatch);
	          var delayMatch = matches[3];
	          var delayUnit = matches[4];
	          if (isPresent(delayMatch)) {
	              var delayVal = parseFloat(delayMatch);
	              if (isPresent(delayUnit) && delayUnit == 's') {
	                  delayVal *= _ONE_SECOND;
	              }
	              delay = Math$2.floor(delayVal);
	          }
	          var easingVal = matches[5];
	          if (!isBlank(easingVal)) {
	              easing = easingVal;
	          }
	      }
	      else {
	          duration = exp;
	      }
	      return new _AnimationTimings(duration, delay, easing);
	  }
	  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
	      var values = {};
	      var endTime = startTime + duration;
	      endKeyframe.styles.styles.forEach(function (styleData) {
	          StringMapWrapper.forEach(styleData, function (val /** TODO #9100 */, prop /** TODO #9100 */) {
	              if (prop == 'offset')
	                  return;
	              var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
	              var resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value;
	              if (isPresent(resultIndex)) {
	                  resultEntry = collectedStyles.getByIndex(prop, resultIndex);
	                  value = resultEntry.value;
	                  nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
	              }
	              else {
	                  // this is a flag that the runtime code uses to pass
	                  // in a value either from the state declaration styles
	                  // or using the AUTO_STYLE value (e.g. getComputedStyle)
	                  value = FILL_STYLE_FLAG;
	              }
	              if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
	                  errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
	              }
	              values[prop] = value;
	          });
	      });
	      return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
	  }

	  var animationCompilationCache = new Map();
	  var CompiledAnimationTriggerResult = (function () {
	      function CompiledAnimationTriggerResult(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {
	          this.name = name;
	          this.statesMapStatement = statesMapStatement;
	          this.statesVariableName = statesVariableName;
	          this.fnStatement = fnStatement;
	          this.fnVariable = fnVariable;
	      }
	      return CompiledAnimationTriggerResult;
	  }());
	  var CompiledComponentAnimationResult = (function () {
	      function CompiledComponentAnimationResult(outputs, triggers) {
	          this.outputs = outputs;
	          this.triggers = triggers;
	      }
	      return CompiledComponentAnimationResult;
	  }());
	  var AnimationCompiler = (function () {
	      function AnimationCompiler() {
	      }
	      AnimationCompiler.prototype.compileComponent = function (component, template) {
	          var compiledAnimations = [];
	          var groupedErrors = [];
	          var triggerLookup = {};
	          var componentName = component.type.name;
	          component.template.animations.forEach(function (entry) {
	              var result = parseAnimationEntry(entry);
	              var triggerName = entry.name;
	              if (result.errors.length > 0) {
	                  var errorMessage = "Unable to parse the animation sequence for \"" + triggerName + "\" due to the following errors:";
	                  result.errors.forEach(function (error) { errorMessage += '\n-- ' + error.msg; });
	                  groupedErrors.push(errorMessage);
	              }
	              if (triggerLookup[triggerName]) {
	                  groupedErrors.push("The animation trigger \"" + triggerName + "\" has already been registered on \"" + componentName + "\"");
	              }
	              else {
	                  var factoryName = componentName + "_" + entry.name;
	                  var visitor = new _AnimationBuilder(triggerName, factoryName);
	                  var compileResult = visitor.build(result.ast);
	                  compiledAnimations.push(compileResult);
	                  triggerLookup[entry.name] = compileResult;
	              }
	          });
	          var validatedProperties = _validateAnimationProperties(compiledAnimations, template);
	          validatedProperties.errors.forEach(function (error) { groupedErrors.push(error.msg); });
	          if (groupedErrors.length > 0) {
	              var errorMessageStr = "Animation parsing for " + component.type.name + " has failed due to the following errors:";
	              groupedErrors.forEach(function (error) { return errorMessageStr += "\n- " + error; });
	              throw new Error(errorMessageStr);
	          }
	          animationCompilationCache.set(component, compiledAnimations);
	          return new CompiledComponentAnimationResult(validatedProperties.outputs, compiledAnimations);
	      };
	      return AnimationCompiler;
	  }());
	  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
	  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
	  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');
	  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
	  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
	  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');
	  var _ANIMATION_PLAYER_VAR = variable('player');
	  var _ANIMATION_TIME_VAR = variable('totalTime');
	  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
	  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
	  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
	  var EMPTY_MAP$1 = literalMap([]);
	  var _AnimationBuilder = (function () {
	      function _AnimationBuilder(animationName, factoryName) {
	          this.animationName = animationName;
	          this._fnVarName = factoryName + '_factory';
	          this._statesMapVarName = factoryName + '_states';
	          this._statesMapVar = variable(this._statesMapVarName);
	      }
	      _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
	          var stylesArr = [];
	          if (context.isExpectingFirstStyleStep) {
	              stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
	              context.isExpectingFirstStyleStep = false;
	          }
	          ast.styles.forEach(function (entry) {
	              stylesArr.push(literalMap(StringMapWrapper.keys(entry).map(function (key) { return [key, literal(entry[key])]; })));
	          });
	          return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([
	              importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([
	                  _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)
	              ])
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
	          return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([
	              literal(ast.offset), ast.styles.visit(this, context)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
	          var _this = this;
	          if (context.endStateAnimateStep === ast) {
	              return this._visitEndStateAnimation(ast, context);
	          }
	          var startingStylesExpr = ast.startingStyles.visit(this, context);
	          var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });
	          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
	      };
	      /** @internal */
	      _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
	          var _this = this;
	          var startingStylesExpr = ast.startingStyles.visit(this, context);
	          var keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });
	          var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([
	              _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
	              literalArr(keyframeExpressions)
	          ]);
	          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
	      };
	      /** @internal */
	      _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {
	          context.totalTransitionTime += ast.duration + ast.delay;
	          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),
	              literal(ast.delay), literal(ast.easing)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
	          var _this = this;
	          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	          return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([
	              literalArr(playerExprs)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
	          var _this = this;
	          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	          return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([
	              literalArr(playerExprs)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
	          var flatStyles = {};
	          _getStylesArray(ast).forEach(function (entry) {
	              StringMapWrapper.forEach(entry, function (value, key) { flatStyles[key] = value; });
	          });
	          context.stateMap.registerState(ast.stateName, flatStyles);
	      };
	      _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
	          var steps = ast.animation.steps;
	          var lastStep = steps[steps.length - 1];
	          if (_isEndStateAnimateStep(lastStep)) {
	              context.endStateAnimateStep = lastStep;
	          }
	          context.totalTransitionTime = 0;
	          context.isExpectingFirstStyleStep = true;
	          var stateChangePreconditions = [];
	          ast.stateChanges.forEach(function (stateChange) {
	              stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
	                  .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
	              if (stateChange.fromState != ANY_STATE) {
	                  context.stateMap.registerState(stateChange.fromState);
	              }
	              if (stateChange.toState != ANY_STATE) {
	                  context.stateMap.registerState(stateChange.toState);
	              }
	          });
	          var animationPlayerExpr = ast.animation.visit(this, context);
	          var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });
	          var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
	          var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
	          var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
	          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
	      };
	      _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
	          var _this = this;
	          // visit each of the declarations first to build the context state map
	          ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });
	          // this should always be defined even if the user overrides it
	          context.stateMap.registerState(DEFAULT_STATE, {});
	          var statements = [];
	          statements.push(_ANIMATION_FACTORY_VIEW_VAR
	              .callMethod('cancelActiveAnimation', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	              _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))
	          ])
	              .toStmt());
	          statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP$1).toDeclStmt());
	          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
	          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
	          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE)))
	              .toDeclStmt());
	          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
	              .toDeclStmt());
	          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
	              .toDeclStmt());
	          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	          var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));
	          // before we start any animation we want to clear out the starting
	          // styles from the element's style property (since they were placed
	          // there at the end of the last animation
	          statements.push(RENDER_STYLES_FN
	              .callFn([
	              _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	              importExpr(resolveIdentifier(Identifiers.clearStyles))
	                  .callFn([_ANIMATION_START_STATE_STYLES_VAR])
	          ])
	              .toStmt());
	          ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });
	          // this check ensures that the animation factory always returns a player
	          // so that the onDone callback can be used for tracking
	          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR
	                  .set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))
	                  .toStmt()]));
	          // once complete we want to apply the styles on the element
	          // since the destination state's values should persist once
	          // the animation sequence has completed.
	          statements.push(_ANIMATION_PLAYER_VAR
	              .callMethod('onDone', [fn([], [RENDER_STYLES_FN
	                      .callFn([
	                      _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                      importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles))
	                          .callFn([
	                          _ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR
	                      ])
	                  ])
	                      .toStmt()])])
	              .toStmt());
	          statements.push(_ANIMATION_FACTORY_VIEW_VAR
	              .callMethod('queueAnimation', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	              _ANIMATION_PLAYER_VAR, _ANIMATION_TIME_VAR,
	              _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR
	          ])
	              .toStmt());
	          return fn([
	              new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	              new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),
	              new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),
	              new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)
	          ], statements);
	      };
	      _AnimationBuilder.prototype.build = function (ast) {
	          var context = new _AnimationBuilderContext();
	          var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
	          var fnVariable = variable(this._fnVarName);
	          var lookupMap = [];
	          StringMapWrapper.forEach(context.stateMap.states, function (value, stateName) {
	              var variableValue = EMPTY_MAP$1;
	              if (isPresent(value)) {
	                  var styleMap_1 = [];
	                  StringMapWrapper.forEach(value, function (value, key) {
	                      styleMap_1.push([key, literal(value)]);
	                  });
	                  variableValue = literalMap(styleMap_1);
	              }
	              lookupMap.push([stateName, variableValue]);
	          });
	          var compiledStatesMapExpr = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
	          return new CompiledAnimationTriggerResult(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);
	      };
	      return _AnimationBuilder;
	  }());
	  var _AnimationBuilderContext = (function () {
	      function _AnimationBuilderContext() {
	          this.stateMap = new _AnimationBuilderStateMap();
	          this.endStateAnimateStep = null;
	          this.isExpectingFirstStyleStep = false;
	          this.totalTransitionTime = 0;
	      }
	      return _AnimationBuilderContext;
	  }());
	  var _AnimationBuilderStateMap = (function () {
	      function _AnimationBuilderStateMap() {
	          this._states = {};
	      }
	      Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
	          get: function () { return this._states; },
	          enumerable: true,
	          configurable: true
	      });
	      _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
	          if (value === void 0) { value = null; }
	          var existingEntry = this._states[name];
	          if (isBlank(existingEntry)) {
	              this._states[name] = value;
	          }
	      };
	      return _AnimationBuilderStateMap;
	  }());
	  function _compareToAnimationStateExpr(value, animationState) {
	      var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
	      switch (animationState) {
	          case EMPTY_ANIMATION_STATE:
	              return value.equals(emptyStateLiteral);
	          case ANY_STATE:
	              return literal(true);
	          default:
	              return value.equals(literal(animationState));
	      }
	  }
	  function _isEndStateAnimateStep(step) {
	      // the final animation step is characterized by having only TWO
	      // keyframe values and it must have zero styles for both keyframes
	      if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
	          var styles1 = _getStylesArray(step.keyframes[0])[0];
	          var styles2 = _getStylesArray(step.keyframes[1])[0];
	          return StringMapWrapper.isEmpty(styles1) && StringMapWrapper.isEmpty(styles2);
	      }
	      return false;
	  }
	  function _getStylesArray(obj) {
	      return obj.styles.styles;
	  }
	  function _validateAnimationProperties(compiledAnimations, template) {
	      var visitor = new _AnimationTemplatePropertyVisitor(compiledAnimations);
	      templateVisitAll(visitor, template);
	      return new AnimationPropertyValidationOutput(visitor.outputs, visitor.errors);
	  }
	  var AnimationPropertyValidationOutput = (function () {
	      function AnimationPropertyValidationOutput(outputs, errors) {
	          this.outputs = outputs;
	          this.errors = errors;
	      }
	      return AnimationPropertyValidationOutput;
	  }());
	  var _AnimationTemplatePropertyVisitor = (function () {
	      function _AnimationTemplatePropertyVisitor(animations) {
	          this.errors = [];
	          this.outputs = [];
	          this._animationRegistry = this._buildCompileAnimationLookup(animations);
	      }
	      _AnimationTemplatePropertyVisitor.prototype._buildCompileAnimationLookup = function (animations) {
	          var map = {};
	          animations.forEach(function (entry) { map[entry.name] = true; });
	          return map;
	      };
	      _AnimationTemplatePropertyVisitor.prototype._validateAnimationInputOutputPairs = function (inputAsts, outputAsts, animationRegistry, isHostLevel) {
	          var _this = this;
	          var detectedAnimationInputs = {};
	          inputAsts.forEach(function (input) {
	              if (input.type == exports.PropertyBindingType.Animation) {
	                  var triggerName = input.name;
	                  if (isPresent(animationRegistry[triggerName])) {
	                      detectedAnimationInputs[triggerName] = true;
	                  }
	                  else {
	                      _this.errors.push(new AnimationParseError("Couldn't find an animation entry for " + triggerName));
	                  }
	              }
	          });
	          outputAsts.forEach(function (output) {
	              if (output.name[0] == '@') {
	                  var normalizedOutputData = parseAnimationOutputName(output.name.substr(1), _this.errors);
	                  var triggerName = normalizedOutputData.name;
	                  var triggerEventPhase = normalizedOutputData.phase;
	                  if (!animationRegistry[triggerName]) {
	                      _this.errors.push(new AnimationParseError("Couldn't find the corresponding " + (isHostLevel ? 'host-level ' : '') + "animation trigger definition for (@" + triggerName + ")"));
	                  }
	                  else if (!detectedAnimationInputs[triggerName]) {
	                      _this.errors.push(new AnimationParseError("Unable to listen on (@" + triggerName + "." + triggerEventPhase + ") because the animation trigger [@" + triggerName + "] isn't being used on the same element"));
	                  }
	                  else {
	                      _this.outputs.push(normalizedOutputData);
	                  }
	              }
	          });
	      };
	      _AnimationTemplatePropertyVisitor.prototype.visitElement = function (ast, ctx) {
	          this._validateAnimationInputOutputPairs(ast.inputs, ast.outputs, this._animationRegistry, false);
	          var componentOnElement = ast.directives.find(function (directive) { return directive.directive.isComponent; });
	          if (componentOnElement) {
	              var cachedComponentAnimations = animationCompilationCache.get(componentOnElement.directive);
	              if (cachedComponentAnimations) {
	                  this._validateAnimationInputOutputPairs(componentOnElement.hostProperties, componentOnElement.hostEvents, this._buildCompileAnimationLookup(cachedComponentAnimations), true);
	              }
	          }
	          templateVisitAll(this, ast.children);
	      };
	      _AnimationTemplatePropertyVisitor.prototype.visitEmbeddedTemplate = function (ast, ctx) {
	          templateVisitAll(this, ast.children);
	      };
	      _AnimationTemplatePropertyVisitor.prototype.visitEvent = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitBoundText = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitText = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitNgContent = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitAttr = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitDirective = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitReference = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitVariable = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitDirectiveProperty = function (ast, ctx) { };
	      _AnimationTemplatePropertyVisitor.prototype.visitElementProperty = function (ast, ctx) { };
	      return _AnimationTemplatePropertyVisitor;
	  }());

	  function convertValueToOutputAst(value, type) {
	      if (type === void 0) { type = null; }
	      return visitValue(value, new _ValueOutputAstTransformer(), type);
	  }
	  var _ValueOutputAstTransformer = (function () {
	      function _ValueOutputAstTransformer() {
	      }
	      _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	          var _this = this;
	          return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	      };
	      _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	          var _this = this;
	          var entries = [];
	          StringMapWrapper.forEach(map, function (value, key) {
	              entries.push([key, visitValue(value, _this, null)]);
	          });
	          return literalMap(entries, type);
	      };
	      _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	      _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	          if (value instanceof CompileIdentifierMetadata) {
	              return importExpr(value);
	          }
	          else if (value instanceof Expression) {
	              return value;
	          }
	          else {
	              throw new Error("Illegal state: Don't now how to compile value " + value);
	          }
	      };
	      return _ValueOutputAstTransformer;
	  }());

	  var _DebugState = (function () {
	      function _DebugState(nodeIndex, sourceAst) {
	          this.nodeIndex = nodeIndex;
	          this.sourceAst = sourceAst;
	      }
	      return _DebugState;
	  }());
	  var NULL_DEBUG_STATE = new _DebugState(null, null);
	  var CompileMethod = (function () {
	      function CompileMethod(_view) {
	          this._view = _view;
	          this._newState = NULL_DEBUG_STATE;
	          this._currState = NULL_DEBUG_STATE;
	          this._bodyStatements = [];
	          this._debugEnabled = this._view.genConfig.genDebugInfo;
	      }
	      CompileMethod.prototype._updateDebugContextIfNeeded = function () {
	          if (this._newState.nodeIndex !== this._currState.nodeIndex ||
	              this._newState.sourceAst !== this._currState.sourceAst) {
	              var expr = this._updateDebugContext(this._newState);
	              if (isPresent(expr)) {
	                  this._bodyStatements.push(expr.toStmt());
	              }
	          }
	      };
	      CompileMethod.prototype._updateDebugContext = function (newState) {
	          this._currState = this._newState = newState;
	          if (this._debugEnabled) {
	              var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
	              return THIS_EXPR.callMethod('debug', [
	                  literal(newState.nodeIndex),
	                  isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR,
	                  isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR
	              ]);
	          }
	          else {
	              return null;
	          }
	      };
	      CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
	          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
	          return isPresent(res) ? res : NULL_EXPR;
	      };
	      CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
	          this._newState = new _DebugState(nodeIndex, templateAst);
	      };
	      CompileMethod.prototype.addStmt = function (stmt) {
	          this._updateDebugContextIfNeeded();
	          this._bodyStatements.push(stmt);
	      };
	      CompileMethod.prototype.addStmts = function (stmts) {
	          this._updateDebugContextIfNeeded();
	          ListWrapper.addAll(this._bodyStatements, stmts);
	      };
	      CompileMethod.prototype.finish = function () { return this._bodyStatements; };
	      CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };
	      return CompileMethod;
	  }());

	  function getPropertyInView(property, callingView, definedView) {
	      if (callingView === definedView) {
	          return property;
	      }
	      else {
	          var viewProp = THIS_EXPR;
	          var currView = callingView;
	          while (currView !== definedView && isPresent(currView.declarationElement.view)) {
	              currView = currView.declarationElement.view;
	              viewProp = viewProp.prop('parent');
	          }
	          if (currView !== definedView) {
	              throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
	          }
	          if (property instanceof ReadPropExpr) {
	              var readPropExpr_1 = property;
	              // Note: Don't cast for members of the AppView base class...
	              if (definedView.fields.some(function (field) { return field.name == readPropExpr_1.name; }) ||
	                  definedView.getters.some(function (field) { return field.name == readPropExpr_1.name; })) {
	                  viewProp = viewProp.cast(definedView.classType);
	              }
	          }
	          return replaceVarInExpression(THIS_EXPR.name, viewProp, property);
	      }
	  }
	  function injectFromViewParentInjector(token, optional) {
	      var args = [createDiTokenExpression(token)];
	      if (optional) {
	          args.push(NULL_EXPR);
	      }
	      return THIS_EXPR.prop('parentInjector').callMethod('get', args);
	  }
	  function getViewFactoryName(component, embeddedTemplateIndex) {
	      return "viewFactory_" + component.type.name + embeddedTemplateIndex;
	  }
	  function createFlatArray(expressions) {
	      var lastNonArrayExpressions = [];
	      var result = literalArr([]);
	      for (var i = 0; i < expressions.length; i++) {
	          var expr = expressions[i];
	          if (expr.type instanceof ArrayType) {
	              if (lastNonArrayExpressions.length > 0) {
	                  result =
	                      result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]);
	                  lastNonArrayExpressions = [];
	              }
	              result = result.callMethod(BuiltinMethod.ConcatArray, [expr]);
	          }
	          else {
	              lastNonArrayExpressions.push(expr);
	          }
	      }
	      if (lastNonArrayExpressions.length > 0) {
	          result =
	              result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]);
	      }
	      return result;
	  }
	  function createPureProxy(fn, argCount, pureProxyProp, view) {
	      view.fields.push(new ClassField(pureProxyProp.name, null));
	      var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
	      if (isBlank(pureProxyId)) {
	          throw new Error("Unsupported number of argument for pure functions: " + argCount);
	      }
	      view.createMethod.addStmt(THIS_EXPR.prop(pureProxyProp.name)
	          .set(importExpr(resolveIdentifier(pureProxyId)).callFn([fn]))
	          .toStmt());
	  }

	  var ViewQueryValues = (function () {
	      function ViewQueryValues(view, values) {
	          this.view = view;
	          this.values = values;
	      }
	      return ViewQueryValues;
	  }());
	  var CompileQuery = (function () {
	      function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
	          this.meta = meta;
	          this.queryList = queryList;
	          this.ownerDirectiveExpression = ownerDirectiveExpression;
	          this.view = view;
	          this._values = new ViewQueryValues(view, []);
	      }
	      CompileQuery.prototype.addValue = function (value, view) {
	          var currentView = view;
	          var elPath = [];
	          while (isPresent(currentView) && currentView !== this.view) {
	              var parentEl = currentView.declarationElement;
	              elPath.unshift(parentEl);
	              currentView = parentEl.view;
	          }
	          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
	          var viewValues = this._values;
	          elPath.forEach(function (el) {
	              var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
	              if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
	                  viewValues = last;
	              }
	              else {
	                  var newViewValues = new ViewQueryValues(el.embeddedView, []);
	                  viewValues.values.push(newViewValues);
	                  viewValues = newViewValues;
	              }
	          });
	          viewValues.values.push(value);
	          if (elPath.length > 0) {
	              view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
	          }
	      };
	      CompileQuery.prototype._isStatic = function () {
	          return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });
	      };
	      CompileQuery.prototype.afterChildren = function (targetStaticMethod /** TODO #9100 */, targetDynamicMethod) {
	          var values = createQueryValues(this._values);
	          var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
	          if (isPresent(this.ownerDirectiveExpression)) {
	              var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
	              updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
	          }
	          if (!this.meta.first) {
	              updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
	          }
	          if (this.meta.first && this._isStatic()) {
	              // for queries that don't change and the user asked for a single element,
	              // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
	              // we don't do this for QueryLists for now as this would break the timing when
	              // we call QueryList listeners...
	              targetStaticMethod.addStmts(updateStmts);
	          }
	          else {
	              targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
	          }
	      };
	      return CompileQuery;
	  }());
	  function createQueryValues(viewValues) {
	      return ListWrapper.flatten(viewValues.values.map(function (entry) {
	          if (entry instanceof ViewQueryValues) {
	              return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));
	          }
	          else {
	              return entry;
	          }
	      }));
	  }
	  function mapNestedViews(declarationAppElement, view, expressions) {
	      var adjustedExpressions = expressions.map(function (expr) {
	          return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr);
	      });
	      return declarationAppElement.callMethod('mapNestedViews', [
	          variable(view.className),
	          fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)
	      ]);
	  }
	  function createQueryList(query, directiveInstance, propertyName, compileView) {
	      compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
	      var expr = THIS_EXPR.prop(propertyName);
	      compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)
	          .set(importExpr(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])
	          .instantiate([]))
	          .toStmt());
	      return expr;
	  }
	  function addQueryToTokenMap(map, query) {
	      query.meta.selectors.forEach(function (selector) {
	          var entry = map.get(selector.reference);
	          if (isBlank(entry)) {
	              entry = [];
	              map.set(selector.reference, entry);
	          }
	          entry.push(query);
	      });
	  }

	  function _enumExpression(classIdentifier, name) {
	      return importExpr(resolveEnumIdentifier(classIdentifier, name));
	  }
	  var ViewTypeEnum = (function () {
	      function ViewTypeEnum() {
	      }
	      ViewTypeEnum.fromValue = function (value) {
	          var viewType = resolveIdentifier(Identifiers.ViewType);
	          switch (value) {
	              case ViewType.HOST:
	                  return _enumExpression(viewType, 'HOST');
	              case ViewType.COMPONENT:
	                  return _enumExpression(viewType, 'COMPONENT');
	              case ViewType.EMBEDDED:
	                  return _enumExpression(viewType, 'EMBEDDED');
	              default:
	                  throw Error("Inavlid ViewType value: " + value);
	          }
	      };
	      return ViewTypeEnum;
	  }());
	  var ViewEncapsulationEnum = (function () {
	      function ViewEncapsulationEnum() {
	      }
	      ViewEncapsulationEnum.fromValue = function (value) {
	          var viewEncapsulation = resolveIdentifier(Identifiers.ViewEncapsulation);
	          switch (value) {
	              case _angular_core.ViewEncapsulation.Emulated:
	                  return _enumExpression(viewEncapsulation, 'Emulated');
	              case _angular_core.ViewEncapsulation.Native:
	                  return _enumExpression(viewEncapsulation, 'Native');
	              case _angular_core.ViewEncapsulation.None:
	                  return _enumExpression(viewEncapsulation, 'None');
	              default:
	                  throw Error("Inavlid ViewEncapsulation value: " + value);
	          }
	      };
	      return ViewEncapsulationEnum;
	  }());
	  var ChangeDetectorStatusEnum = (function () {
	      function ChangeDetectorStatusEnum() {
	      }
	      ChangeDetectorStatusEnum.fromValue = function (value) {
	          var changeDetectorStatus = resolveIdentifier(Identifiers.ChangeDetectorStatus);
	          switch (value) {
	              case ChangeDetectorStatus.CheckOnce:
	                  return _enumExpression(changeDetectorStatus, 'CheckOnce');
	              case ChangeDetectorStatus.Checked:
	                  return _enumExpression(changeDetectorStatus, 'Checked');
	              case ChangeDetectorStatus.CheckAlways:
	                  return _enumExpression(changeDetectorStatus, 'CheckAlways');
	              case ChangeDetectorStatus.Detached:
	                  return _enumExpression(changeDetectorStatus, 'Detached');
	              case ChangeDetectorStatus.Errored:
	                  return _enumExpression(changeDetectorStatus, 'Errored');
	              case ChangeDetectorStatus.Destroyed:
	                  return _enumExpression(changeDetectorStatus, 'Destroyed');
	              default:
	                  throw Error("Inavlid ChangeDetectorStatus value: " + value);
	          }
	      };
	      return ChangeDetectorStatusEnum;
	  }());
	  var ViewConstructorVars = (function () {
	      function ViewConstructorVars() {
	      }
	      ViewConstructorVars.viewUtils = variable('viewUtils');
	      ViewConstructorVars.parentInjector = variable('parentInjector');
	      ViewConstructorVars.declarationEl = variable('declarationEl');
	      return ViewConstructorVars;
	  }());
	  var ViewProperties = (function () {
	      function ViewProperties() {
	      }
	      ViewProperties.renderer = THIS_EXPR.prop('renderer');
	      ViewProperties.projectableNodes = THIS_EXPR.prop('projectableNodes');
	      ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
	      return ViewProperties;
	  }());
	  var EventHandlerVars = (function () {
	      function EventHandlerVars() {
	      }
	      EventHandlerVars.event = variable('$event');
	      return EventHandlerVars;
	  }());
	  var InjectMethodVars = (function () {
	      function InjectMethodVars() {
	      }
	      InjectMethodVars.token = variable('token');
	      InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
	      InjectMethodVars.notFoundResult = variable('notFoundResult');
	      return InjectMethodVars;
	  }());
	  var DetectChangesVars = (function () {
	      function DetectChangesVars() {
	      }
	      DetectChangesVars.throwOnChange = variable("throwOnChange");
	      DetectChangesVars.changes = variable("changes");
	      DetectChangesVars.changed = variable("changed");
	      DetectChangesVars.valUnwrapper = variable("valUnwrapper");
	      return DetectChangesVars;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$13 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var CompileNode = (function () {
	      function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
	          this.parent = parent;
	          this.view = view;
	          this.nodeIndex = nodeIndex;
	          this.renderNode = renderNode;
	          this.sourceAst = sourceAst;
	      }
	      CompileNode.prototype.isNull = function () { return isBlank(this.renderNode); };
	      CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };
	      return CompileNode;
	  }());
	  var CompileElement = (function (_super) {
	      __extends$13(CompileElement, _super);
	      function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
	          var _this = this;
	          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
	          this.component = component;
	          this._directives = _directives;
	          this._resolvedProvidersArray = _resolvedProvidersArray;
	          this.hasViewContainer = hasViewContainer;
	          this.hasEmbeddedView = hasEmbeddedView;
	          this._compViewExpr = null;
	          this.instances = new Map();
	          this._queryCount = 0;
	          this._queries = new Map();
	          this._componentConstructorViewQueryLists = [];
	          this.contentNodesByNgContentIndex = null;
	          this.referenceTokens = {};
	          references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });
	          this.elementRef =
	              importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
	          this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
	          this.injector = THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]);
	          this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, this.injector);
	          this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop('renderer'));
	          if (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) {
	              this._createAppElement();
	          }
	      }
	      CompileElement.createNull = function () {
	          return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
	      };
	      CompileElement.prototype._createAppElement = function () {
	          var fieldName = "_appEl_" + this.nodeIndex;
	          var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
	          // private is fine here as no child view will reference an AppElement
	          this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.AppElement)), [StmtModifier.Private]));
	          var statement = THIS_EXPR.prop(fieldName)
	              .set(importExpr(resolveIdentifier(Identifiers.AppElement)).instantiate([
	              literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode
	          ]))
	              .toStmt();
	          this.view.createMethod.addStmt(statement);
	          this.appElement = THIS_EXPR.prop(fieldName);
	          this.instances.set(resolveIdentifierToken(Identifiers.AppElement).reference, this.appElement);
	      };
	      CompileElement.prototype.createComponentFactoryResolver = function (entryComponents) {
	          if (!entryComponents || entryComponents.length === 0) {
	              return;
	          }
	          var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([
	              literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),
	              injectFromViewParentInjector(resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)
	          ]);
	          var provider = new CompileProviderMetadata({
	              token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
	              useValue: createComponentFactoryResolverExpr
	          });
	          // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
	          // ProviderAstType.PrivateService as only the component and its view can see it,
	          // but nobody else
	          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
	      };
	      CompileElement.prototype.setComponentView = function (compViewExpr) {
	          this._compViewExpr = compViewExpr;
	          this.contentNodesByNgContentIndex =
	              ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
	          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	              this.contentNodesByNgContentIndex[i] = [];
	          }
	      };
	      CompileElement.prototype.setEmbeddedView = function (embeddedView) {
	          this.embeddedView = embeddedView;
	          if (isPresent(embeddedView)) {
	              var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([
	                  this.appElement, this.embeddedView.viewFactory
	              ]);
	              var provider = new CompileProviderMetadata({
	                  token: resolveIdentifierToken(Identifiers.TemplateRef),
	                  useValue: createTemplateRefExpr
	              });
	              // Add TemplateRef as first provider as it does not have deps on other providers
	              this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
	          }
	      };
	      CompileElement.prototype.beforeChildren = function () {
	          var _this = this;
	          if (this.hasViewContainer) {
	              this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.appElement.prop('vcRef'));
	          }
	          this._resolvedProviders = new Map();
	          this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(provider.token.reference, provider); });
	          // create all the provider instances, some in the view constructor,
	          // some as getters. We rely on the fact that they are already sorted topologically.
	          MapWrapper.values(this._resolvedProviders).forEach(function (resolvedProvider) {
	              var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
	                  if (isPresent(provider.useExisting)) {
	                      return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }));
	                  }
	                  else if (isPresent(provider.useFactory)) {
	                      var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
	                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                      return importExpr(provider.useFactory).callFn(depsExpr);
	                  }
	                  else if (isPresent(provider.useClass)) {
	                      var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
	                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                      return importExpr(provider.useClass)
	                          .instantiate(depsExpr, importType(provider.useClass));
	                  }
	                  else {
	                      return convertValueToOutputAst(provider.useValue);
	                  }
	              });
	              var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
	              var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
	              _this.instances.set(resolvedProvider.token.reference, instance);
	          });
	          for (var i = 0; i < this._directives.length; i++) {
	              var directive = this._directives[i];
	              var directiveInstance = this.instances.get(identifierToken(directive.type).reference);
	              directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });
	          }
	          var queriesWithReads = [];
	          MapWrapper.values(this._resolvedProviders).forEach(function (resolvedProvider) {
	              var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
	              ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, resolvedProvider.token); }));
	          });
	          StringMapWrapper.forEach(this.referenceTokens, function (_, varName) {
	              var token = _this.referenceTokens[varName];
	              var varValue;
	              if (isPresent(token)) {
	                  varValue = _this.instances.get(token.reference);
	              }
	              else {
	                  varValue = _this.renderNode;
	              }
	              _this.view.locals.set(varName, varValue);
	              var varToken = new CompileTokenMetadata({ value: varName });
	              ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));
	          });
	          queriesWithReads.forEach(function (queryWithRead) {
	              var value;
	              if (isPresent(queryWithRead.read.identifier)) {
	                  // query for an identifier
	                  value = _this.instances.get(queryWithRead.read.reference);
	              }
	              else {
	                  // query for a reference
	                  var token = _this.referenceTokens[queryWithRead.read.value];
	                  if (isPresent(token)) {
	                      value = _this.instances.get(token.reference);
	                  }
	                  else {
	                      value = _this.elementRef;
	                  }
	              }
	              if (isPresent(value)) {
	                  queryWithRead.query.addValue(value, _this.view);
	              }
	          });
	          if (isPresent(this.component)) {
	              var componentConstructorViewQueryList = isPresent(this.component) ?
	                  literalArr(this._componentConstructorViewQueryLists) :
	                  NULL_EXPR;
	              var compExpr = isPresent(this.getComponent()) ? this.getComponent() : NULL_EXPR;
	              this.view.createMethod.addStmt(this.appElement
	                  .callMethod('initComponent', [compExpr, componentConstructorViewQueryList, this._compViewExpr])
	                  .toStmt());
	          }
	      };
	      CompileElement.prototype.afterChildren = function (childNodeCount) {
	          var _this = this;
	          MapWrapper.values(this._resolvedProviders).forEach(function (resolvedProvider) {
	              // Note: afterChildren is called after recursing into children.
	              // This is good so that an injector match in an element that is closer to a requesting element
	              // matches first.
	              var providerExpr = _this.instances.get(resolvedProvider.token.reference);
	              // Note: view providers are only visible on the injector of that element.
	              // This is not fully correct as the rules during codegen don't allow a directive
	              // to get hold of a view provdier on the same element. We still do this semantic
	              // as it simplifies our model to having only one runtime injector per element.
	              var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
	              _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
	          });
	          MapWrapper.values(this._queries)
	              .forEach(function (queries) { return queries.forEach(function (query) { return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod); }); });
	      };
	      CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	      };
	      CompileElement.prototype.getComponent = function () {
	          return isPresent(this.component) ?
	              this.instances.get(identifierToken(this.component.type).reference) :
	              null;
	      };
	      CompileElement.prototype.getProviderTokens = function () {
	          return MapWrapper.values(this._resolvedProviders)
	              .map(function (resolvedProvider) { return createDiTokenExpression(resolvedProvider.token); });
	      };
	      CompileElement.prototype._getQueriesFor = function (token) {
	          var result = [];
	          var currentEl = this;
	          var distance = 0;
	          var queries;
	          while (!currentEl.isNull()) {
	              queries = currentEl._queries.get(token.reference);
	              if (isPresent(queries)) {
	                  ListWrapper.addAll(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	              }
	              if (currentEl._directives.length > 0) {
	                  distance++;
	              }
	              currentEl = currentEl.parent;
	          }
	          queries = this.view.componentView.viewQueries.get(token.reference);
	          if (isPresent(queries)) {
	              ListWrapper.addAll(result, queries);
	          }
	          return result;
	      };
	      CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
	          var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
	          var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
	          var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
	          addQueryToTokenMap(this._queries, query);
	          return query;
	      };
	      CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
	          var result = null;
	          // constructor content query
	          if (isBlank(result) && isPresent(dep.query)) {
	              result = this._addQuery(dep.query, null).queryList;
	          }
	          // constructor view query
	          if (isBlank(result) && isPresent(dep.viewQuery)) {
	              result = createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view);
	              this._componentConstructorViewQueryLists.push(result);
	          }
	          if (isPresent(dep.token)) {
	              // access builtins with special visibility
	              if (isBlank(result)) {
	                  if (dep.token.reference ===
	                      resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
	                      if (requestingProviderType === exports.ProviderAstType.Component) {
	                          return this._compViewExpr.prop('ref');
	                      }
	                      else {
	                          return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
	                      }
	                  }
	              }
	              // access regular providers on the element
	              if (isBlank(result)) {
	                  var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
	                  // don't allow directives / public services to access private services.
	                  // only components and private services can access private services.
	                  if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive ||
	                      requestingProviderType === exports.ProviderAstType.PublicService) &&
	                      resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {
	                      return null;
	                  }
	                  result = this.instances.get(dep.token.reference);
	              }
	          }
	          return result;
	      };
	      CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
	          var currElement = this;
	          var result = null;
	          if (dep.isValue) {
	              result = literal(dep.value);
	          }
	          if (isBlank(result) && !dep.isSkipSelf) {
	              result = this._getLocalDependency(requestingProviderType, dep);
	          }
	          // check parent elements
	          while (isBlank(result) && !currElement.parent.isNull()) {
	              currElement = currElement.parent;
	              result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({ token: dep.token }));
	          }
	          if (isBlank(result)) {
	              result = injectFromViewParentInjector(dep.token, dep.isOptional);
	          }
	          if (isBlank(result)) {
	              result = NULL_EXPR;
	          }
	          return getPropertyInView(result, this.view, currElement.view);
	      };
	      return CompileElement;
	  }(CompileNode));
	  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
	      var indexCondition;
	      if (childNodeCount > 0) {
	          indexCondition = literal(nodeIndex)
	              .lowerEquals(InjectMethodVars.requestNodeIndex)
	              .and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
	      }
	      else {
	          indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
	      }
	      return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
	  }
	  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
	      var view = compileElement.view;
	      var resolvedProviderValueExpr;
	      var type;
	      if (isMulti) {
	          resolvedProviderValueExpr = literalArr(providerValueExpressions);
	          type = new ArrayType(DYNAMIC_TYPE);
	      }
	      else {
	          resolvedProviderValueExpr = providerValueExpressions[0];
	          type = providerValueExpressions[0].type;
	      }
	      if (isBlank(type)) {
	          type = DYNAMIC_TYPE;
	      }
	      if (isEager) {
	          view.fields.push(new ClassField(propName, type));
	          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	      }
	      else {
	          var internalField = "_" + propName;
	          view.fields.push(new ClassField(internalField, type));
	          var getter = new CompileMethod(view);
	          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	          // Note: Equals is important for JS so that it also checks the undefined case!
	          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
	          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
	          view.getters.push(new ClassGetter(propName, getter.finish(), type));
	      }
	      return THIS_EXPR.prop(propName);
	  }
	  var _QueryWithRead = (function () {
	      function _QueryWithRead(query, match) {
	          this.query = query;
	          this.read = isPresent(query.meta.read) ? query.meta.read : match;
	      }
	      return _QueryWithRead;
	  }());

	  var CompilePipe = (function () {
	      function CompilePipe(view, meta) {
	          var _this = this;
	          this.view = view;
	          this.meta = meta;
	          this._purePipeProxyCount = 0;
	          this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
	          var deps = this.meta.type.diDeps.map(function (diDep) {
	              if (diDep.token.reference ===
	                  resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
	                  return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
	              }
	              return injectFromViewParentInjector(diDep.token, false);
	          });
	          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
	          this.view.createMethod.resetDebugInfo(null, null);
	          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)
	              .set(importExpr(this.meta.type).instantiate(deps))
	              .toStmt());
	      }
	      CompilePipe.call = function (view, name, args) {
	          var compView = view.componentView;
	          var meta = _findPipeMeta(compView, name);
	          var pipe;
	          if (meta.pure) {
	              // pure pipes live on the component view
	              pipe = compView.purePipes.get(name);
	              if (isBlank(pipe)) {
	                  pipe = new CompilePipe(compView, meta);
	                  compView.purePipes.set(name, pipe);
	                  compView.pipes.push(pipe);
	              }
	          }
	          else {
	              // Non pure pipes live on the view that called it
	              pipe = new CompilePipe(view, meta);
	              view.pipes.push(pipe);
	          }
	          return pipe._call(view, args);
	      };
	      Object.defineProperty(CompilePipe.prototype, "pure", {
	          get: function () { return this.meta.pure; },
	          enumerable: true,
	          configurable: true
	      });
	      CompilePipe.prototype._call = function (callingView, args) {
	          if (this.meta.pure) {
	              // PurePipeProxies live on the view that called them.
	              var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
	              var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
	              createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
	                  .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, callingView);
	              return importExpr(resolveIdentifier(Identifiers.castByValue))
	                  .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])
	                  .callFn(args);
	          }
	          else {
	              return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
	          }
	      };
	      return CompilePipe;
	  }());
	  function _findPipeMeta(view, name) {
	      var pipeMeta = null;
	      for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
	          var localPipeMeta = view.pipeMetas[i];
	          if (localPipeMeta.name == name) {
	              pipeMeta = localPipeMeta;
	              break;
	          }
	      }
	      if (isBlank(pipeMeta)) {
	          throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
	      }
	      return pipeMeta;
	  }

	  var CompileView = (function () {
	      function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
	          var _this = this;
	          this.component = component;
	          this.genConfig = genConfig;
	          this.pipeMetas = pipeMetas;
	          this.styles = styles;
	          this.animations = animations;
	          this.viewIndex = viewIndex;
	          this.declarationElement = declarationElement;
	          this.templateVariableBindings = templateVariableBindings;
	          this.nodes = [];
	          // root nodes or AppElements for ViewContainers
	          this.rootNodesOrAppElements = [];
	          this.bindings = [];
	          this.classStatements = [];
	          this.eventHandlerMethods = [];
	          this.fields = [];
	          this.getters = [];
	          this.disposables = [];
	          this.subscriptions = [];
	          this.purePipes = new Map();
	          this.pipes = [];
	          this.locals = new Map();
	          this.literalArrayCount = 0;
	          this.literalMapCount = 0;
	          this.pipeCount = 0;
	          this.createMethod = new CompileMethod(this);
	          this.animationBindingsMethod = new CompileMethod(this);
	          this.injectorGetMethod = new CompileMethod(this);
	          this.updateContentQueriesMethod = new CompileMethod(this);
	          this.dirtyParentQueriesMethod = new CompileMethod(this);
	          this.updateViewQueriesMethod = new CompileMethod(this);
	          this.detectChangesInInputsMethod = new CompileMethod(this);
	          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
	          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
	          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
	          this.destroyMethod = new CompileMethod(this);
	          this.detachMethod = new CompileMethod(this);
	          this.viewType = getViewType(component, viewIndex);
	          this.className = "_View_" + component.type.name + viewIndex;
	          this.classType = importType(new CompileIdentifierMetadata({ name: this.className }));
	          this.viewFactory = variable(getViewFactoryName(component, viewIndex));
	          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
	              this.componentView = this;
	          }
	          else {
	              this.componentView = this.declarationElement.view.componentView;
	          }
	          this.componentContext =
	              getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
	          var viewQueries = new Map();
	          if (this.viewType === ViewType.COMPONENT) {
	              var directiveInstance = THIS_EXPR.prop('context');
	              ListWrapper.forEachWithIndex(this.component.viewQueries, function (queryMeta, queryIndex) {
	                  var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
	                  var queryList = createQueryList(queryMeta, directiveInstance, propName, _this);
	                  var query = new CompileQuery(queryMeta, queryList, directiveInstance, _this);
	                  addQueryToTokenMap(viewQueries, query);
	              });
	              var constructorViewQueryCount = 0;
	              this.component.type.diDeps.forEach(function (dep) {
	                  if (isPresent(dep.viewQuery)) {
	                      var queryList = THIS_EXPR.prop('declarationAppElement')
	                          .prop('componentConstructorViewQueries')
	                          .key(literal(constructorViewQueryCount++));
	                      var query = new CompileQuery(dep.viewQuery, queryList, null, _this);
	                      addQueryToTokenMap(viewQueries, query);
	                  }
	              });
	          }
	          this.viewQueries = viewQueries;
	          templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });
	          if (!this.declarationElement.isNull()) {
	              this.declarationElement.setEmbeddedView(this);
	          }
	      }
	      CompileView.prototype.callPipe = function (name, input, args) {
	          return CompilePipe.call(this, name, [input].concat(args));
	      };
	      CompileView.prototype.getLocal = function (name) {
	          if (name == EventHandlerVars.event.name) {
	              return EventHandlerVars.event;
	          }
	          var currView = this;
	          var result = currView.locals.get(name);
	          while (isBlank(result) && isPresent(currView.declarationElement.view)) {
	              currView = currView.declarationElement.view;
	              result = currView.locals.get(name);
	          }
	          if (isPresent(result)) {
	              return getPropertyInView(result, this, currView);
	          }
	          else {
	              return null;
	          }
	      };
	      CompileView.prototype.createLiteralArray = function (values) {
	          if (values.length === 0) {
	              return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
	          }
	          var proxyExpr = THIS_EXPR.prop("_arr_" + this.literalArrayCount++);
	          var proxyParams = [];
	          var proxyReturnEntries = [];
	          for (var i = 0; i < values.length; i++) {
	              var paramName = "p" + i;
	              proxyParams.push(new FnParam(paramName));
	              proxyReturnEntries.push(variable(paramName));
	          }
	          createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, this);
	          return proxyExpr.callFn(values);
	      };
	      CompileView.prototype.createLiteralMap = function (entries) {
	          if (entries.length === 0) {
	              return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
	          }
	          var proxyExpr = THIS_EXPR.prop("_map_" + this.literalMapCount++);
	          var proxyParams = [];
	          var proxyReturnEntries = [];
	          var values = [];
	          for (var i = 0; i < entries.length; i++) {
	              var paramName = "p" + i;
	              proxyParams.push(new FnParam(paramName));
	              proxyReturnEntries.push([entries[i][0], variable(paramName)]);
	              values.push(entries[i][1]);
	          }
	          createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, this);
	          return proxyExpr.callFn(values);
	      };
	      CompileView.prototype.afterNodes = function () {
	          var _this = this;
	          MapWrapper.values(this.viewQueries)
	              .forEach(function (queries) { return queries.forEach(function (query) { return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod); }); });
	      };
	      return CompileView;
	  }());
	  function getViewType(component, embeddedTemplateIndex) {
	      if (embeddedTemplateIndex > 0) {
	          return ViewType.EMBEDDED;
	      }
	      else if (component.type.isHost) {
	          return ViewType.HOST;
	      }
	      else {
	          return ViewType.COMPONENT;
	      }
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var CompileBinding = (function () {
	      function CompileBinding(node, sourceAst) {
	          this.node = node;
	          this.sourceAst = sourceAst;
	      }
	      return CompileBinding;
	  }());

	  var ExpressionWithWrappedValueInfo = (function () {
	      function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper, temporaryCount) {
	          this.expression = expression;
	          this.needsValueUnwrapper = needsValueUnwrapper;
	          this.temporaryCount = temporaryCount;
	      }
	      return ExpressionWithWrappedValueInfo;
	  }());
	  function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper, bindingIndex) {
	      var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper, bindingIndex);
	      var irAst = expression.visit(visitor, _Mode.Expression);
	      return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper, visitor.temporaryCount);
	  }
	  function convertCdStatementToIr(nameResolver, implicitReceiver, stmt, bindingIndex) {
	      var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null, bindingIndex);
	      var statements = [];
	      flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);
	      prependTemporaryDecls(visitor.temporaryCount, bindingIndex, statements);
	      return statements;
	  }
	  function temporaryName(bindingIndex, temporaryNumber) {
	      return "tmp_" + bindingIndex + "_" + temporaryNumber;
	  }
	  function temporaryDeclaration(bindingIndex, temporaryNumber) {
	      return new DeclareVarStmt(temporaryName(bindingIndex, temporaryNumber), NULL_EXPR);
	  }
	  function prependTemporaryDecls(temporaryCount, bindingIndex, statements) {
	      for (var i = temporaryCount - 1; i >= 0; i--) {
	          statements.unshift(temporaryDeclaration(bindingIndex, i));
	      }
	  }
	  var _Mode;
	  (function (_Mode) {
	      _Mode[_Mode["Statement"] = 0] = "Statement";
	      _Mode[_Mode["Expression"] = 1] = "Expression";
	  })(_Mode || (_Mode = {}));
	  function ensureStatementMode(mode, ast) {
	      if (mode !== _Mode.Statement) {
	          throw new Error("Expected a statement, but saw " + ast);
	      }
	  }
	  function ensureExpressionMode(mode, ast) {
	      if (mode !== _Mode.Expression) {
	          throw new Error("Expected an expression, but saw " + ast);
	      }
	  }
	  function convertToStatementIfNeeded(mode, expr) {
	      if (mode === _Mode.Statement) {
	          return expr.toStmt();
	      }
	      else {
	          return expr;
	      }
	  }
	  var _AstToIrVisitor = (function () {
	      function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper, bindingIndex) {
	          this._nameResolver = _nameResolver;
	          this._implicitReceiver = _implicitReceiver;
	          this._valueUnwrapper = _valueUnwrapper;
	          this.bindingIndex = bindingIndex;
	          this._nodeMap = new Map();
	          this._resultMap = new Map();
	          this._currentTemporary = 0;
	          this.needsValueUnwrapper = false;
	          this.temporaryCount = 0;
	      }
	      _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	          var op;
	          switch (ast.operation) {
	              case '+':
	                  op = BinaryOperator.Plus;
	                  break;
	              case '-':
	                  op = BinaryOperator.Minus;
	                  break;
	              case '*':
	                  op = BinaryOperator.Multiply;
	                  break;
	              case '/':
	                  op = BinaryOperator.Divide;
	                  break;
	              case '%':
	                  op = BinaryOperator.Modulo;
	                  break;
	              case '&&':
	                  op = BinaryOperator.And;
	                  break;
	              case '||':
	                  op = BinaryOperator.Or;
	                  break;
	              case '==':
	                  op = BinaryOperator.Equals;
	                  break;
	              case '!=':
	                  op = BinaryOperator.NotEquals;
	                  break;
	              case '===':
	                  op = BinaryOperator.Identical;
	                  break;
	              case '!==':
	                  op = BinaryOperator.NotIdentical;
	                  break;
	              case '<':
	                  op = BinaryOperator.Lower;
	                  break;
	              case '>':
	                  op = BinaryOperator.Bigger;
	                  break;
	              case '<=':
	                  op = BinaryOperator.LowerEquals;
	                  break;
	              case '>=':
	                  op = BinaryOperator.BiggerEquals;
	                  break;
	              default:
	                  throw new Error("Unsupported operation " + ast.operation);
	          }
	          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	          ensureStatementMode(mode, ast);
	          return this.visitAll(ast.expressions, mode);
	      };
	      _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	          var value = this.visit(ast.condition, _Mode.Expression);
	          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	          var input = this.visit(ast.exp, _Mode.Expression);
	          var args = this.visitAll(ast.args, _Mode.Expression);
	          var value = this._nameResolver.callPipe(ast.name, input, args);
	          this.needsValueUnwrapper = true;
	          return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
	      };
	      _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	          ensureExpressionMode(mode, ast);
	          return this._implicitReceiver;
	      };
	      _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	          ensureExpressionMode(mode, ast);
	          var args = [literal(ast.expressions.length)];
	          for (var i = 0; i < ast.strings.length - 1; i++) {
	              args.push(literal(ast.strings[i]));
	              args.push(this.visit(ast.expressions[i], _Mode.Expression));
	          }
	          args.push(literal(ast.strings[ast.strings.length - 1]));
	          return importExpr(resolveIdentifier(Identifiers.interpolate)).callFn(args);
	      };
	      _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	          var obj = this.visit(ast.obj, _Mode.Expression);
	          var key = this.visit(ast.key, _Mode.Expression);
	          var value = this.visit(ast.value, _Mode.Expression);
	          return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	      };
	      _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
	      };
	      _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	          var parts = [];
	          for (var i = 0; i < ast.keys.length; i++) {
	              parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
	          }
	          return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
	      };
	      _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, literal(ast.value));
	      };
	      _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	          var leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              var args = this.visitAll(ast.args, _Mode.Expression);
	              var result = null;
	              var receiver = this.visit(ast.receiver, _Mode.Expression);
	              if (receiver === this._implicitReceiver) {
	                  var varExpr = this._nameResolver.getLocal(ast.name);
	                  if (isPresent(varExpr)) {
	                      result = varExpr.callFn(args);
	                  }
	              }
	              if (isBlank(result)) {
	                  result = receiver.callMethod(ast.name, args);
	              }
	              return convertToStatementIfNeeded(mode, result);
	          }
	      };
	      _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	          var leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              var result = null;
	              var receiver = this.visit(ast.receiver, _Mode.Expression);
	              if (receiver === this._implicitReceiver) {
	                  result = this._nameResolver.getLocal(ast.name);
	              }
	              if (isBlank(result)) {
	                  result = receiver.prop(ast.name);
	              }
	              return convertToStatementIfNeeded(mode, result);
	          }
	      };
	      _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	          var receiver = this.visit(ast.receiver, _Mode.Expression);
	          if (receiver === this._implicitReceiver) {
	              var varExpr = this._nameResolver.getLocal(ast.name);
	              if (isPresent(varExpr)) {
	                  throw new Error('Cannot assign to a reference or variable!');
	              }
	          }
	          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	      };
	      _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	      };
	      _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	          var _this = this;
	          return asts.map(function (ast) { return _this.visit(ast, mode); });
	      };
	      _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	          throw new Error('Quotes are not supported for evaluation!');
	      };
	      _AstToIrVisitor.prototype.visit = function (ast, mode) {
	          var result = this._resultMap.get(ast);
	          if (result)
	              return result;
	          return (this._nodeMap.get(ast) || ast).visit(this, mode);
	      };
	      _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	          // If the expression contains a safe access node on the left it needs to be converted to
	          // an expression that guards the access to the member by checking the receiver for blank. As
	          // execution proceeds from left to right, the left most part of the expression must be guarded
	          // first but, because member access is left associative, the right side of the expression is at
	          // the top of the AST. The desired result requires lifting a copy of the the left part of the
	          // expression up to test it for blank before generating the unguarded version.
	          // Consider, for example the following expression: a?.b.c?.d.e
	          // This results in the ast:
	          //         .
	          //        / \
	          //       ?.   e
	          //      /  \
	          //     .    d
	          //    / \
	          //   ?.  c
	          //  /  \
	          // a    b
	          // The following tree should be generated:
	          //
	          //        /---- ? ----\
	          //       /      |      \
	          //     a   /--- ? ---\  null
	          //        /     |     \
	          //       .      .     null
	          //      / \    / \
	          //     .  c   .   e
	          //    / \    / \
	          //   a   b  ,   d
	          //         / \
	          //        .   c
	          //       / \
	          //      a   b
	          //
	          // Notice that the first guard condition is the left hand of the left most safe access node
	          // which comes in as leftMostSafe to this routine.
	          var guardedExpression = this.visit(leftMostSafe.receiver, mode);
	          var temporary;
	          if (this.needsTemporary(leftMostSafe.receiver)) {
	              // If the expression has method calls or pipes then we need to save the result into a
	              // temporary variable to avoid calling stateful or impure code more than once.
	              temporary = this.allocateTemporary();
	              // Preserve the result in the temporary variable
	              guardedExpression = temporary.set(guardedExpression);
	              // Ensure all further references to the guarded expression refer to the temporary instead.
	              this._resultMap.set(leftMostSafe.receiver, temporary);
	          }
	          var condition = guardedExpression.isBlank();
	          // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	          // leftMostNode with its unguarded version in the call to `this.visit()`.
	          if (leftMostSafe instanceof SafeMethodCall) {
	              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	          }
	          else {
	              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	          }
	          // Recursively convert the node now without the guarded member access.
	          var access = this.visit(ast, mode);
	          // Remove the mapping. This is not strictly required as the converter only traverses each node
	          // once but is safer if the conversion is changed to traverse the nodes more than once.
	          this._nodeMap.delete(leftMostSafe);
	          // If we allcoated a temporary, release it.
	          if (temporary) {
	              this.releaseTemporary(temporary);
	          }
	          // Produce the conditional
	          return condition.conditional(literal(null), access);
	      };
	      // Given a expression of the form a?.b.c?.d.e the the left most safe node is
	      // the (a?.b). The . and ?. are left associative thus can be rewritten as:
	      // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
	      // safe method call as this needs be transform initially to:
	      //   a == null ? null : a.c.b.c?.d.e
	      // then to:
	      //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
	      _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	          var _this = this;
	          var visit = function (visitor, ast) {
	              return (_this._nodeMap.get(ast) || ast).visit(visitor);
	          };
	          return ast.visit({
	              visitBinary: function (ast) { return null; },
	              visitChain: function (ast) { return null; },
	              visitConditional: function (ast) { return null; },
	              visitFunctionCall: function (ast) { return null; },
	              visitImplicitReceiver: function (ast) { return null; },
	              visitInterpolation: function (ast) { return null; },
	              visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	              visitKeyedWrite: function (ast) { return null; },
	              visitLiteralArray: function (ast) { return null; },
	              visitLiteralMap: function (ast) { return null; },
	              visitLiteralPrimitive: function (ast) { return null; },
	              visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	              visitPipe: function (ast) { return null; },
	              visitPrefixNot: function (ast) { return null; },
	              visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	              visitPropertyWrite: function (ast) { return null; },
	              visitQuote: function (ast) { return null; },
	              visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	              visitSafePropertyRead: function (ast) {
	                  return visit(this, ast.receiver) || ast;
	              }
	          });
	      };
	      // Returns true of the AST includes a method or a pipe indicating that, if the
	      // expression is used as the target of a safe property or method access then
	      // the expression should be stored into a temporary variable.
	      _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	          var _this = this;
	          var visit = function (visitor, ast) {
	              return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	          };
	          var visitSome = function (visitor, ast) {
	              return ast.some(function (ast) { return visit(visitor, ast); });
	          };
	          return ast.visit({
	              visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	              visitChain: function (ast) { return false; },
	              visitConditional: function (ast) {
	                  return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                      visit(this, ast.falseExp);
	              },
	              visitFunctionCall: function (ast) { return true; },
	              visitImplicitReceiver: function (ast) { return false; },
	              visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	              visitKeyedRead: function (ast) { return false; },
	              visitKeyedWrite: function (ast) { return false; },
	              visitLiteralArray: function (ast) { return true; },
	              visitLiteralMap: function (ast) { return true; },
	              visitLiteralPrimitive: function (ast) { return false; },
	              visitMethodCall: function (ast) { return true; },
	              visitPipe: function (ast) { return true; },
	              visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	              visitPropertyRead: function (ast) { return false; },
	              visitPropertyWrite: function (ast) { return false; },
	              visitQuote: function (ast) { return false; },
	              visitSafeMethodCall: function (ast) { return true; },
	              visitSafePropertyRead: function (ast) { return false; }
	          });
	      };
	      _AstToIrVisitor.prototype.allocateTemporary = function () {
	          var tempNumber = this._currentTemporary++;
	          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	          return new ReadVarExpr(temporaryName(this.bindingIndex, tempNumber));
	      };
	      _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	          this._currentTemporary--;
	          if (temporary.name != temporaryName(this.bindingIndex, this._currentTemporary)) {
	              throw new Error("Temporary " + temporary.name + " released out of order");
	          }
	      };
	      return _AstToIrVisitor;
	  }());
	  function flattenStatements(arg, output) {
	      if (isArray(arg)) {
	          arg.forEach(function (entry) { return flattenStatements(entry, output); });
	      }
	      else {
	          output.push(arg);
	      }
	  }

	  var CompileElementAnimationOutput = (function () {
	      function CompileElementAnimationOutput(listener, output) {
	          this.listener = listener;
	          this.output = output;
	      }
	      return CompileElementAnimationOutput;
	  }());
	  var CompileEventListener = (function () {
	      function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
	          this.compileElement = compileElement;
	          this.eventTarget = eventTarget;
	          this.eventName = eventName;
	          this._hasComponentHostListener = false;
	          this._actionResultExprs = [];
	          this._method = new CompileMethod(compileElement.view);
	          this._methodName =
	              "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex;
	          this._eventParam = new FnParam(EventHandlerVars.event.name, importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
	      }
	      CompileEventListener.getOrCreate = function (compileElement, eventTarget, eventName, targetEventListeners) {
	          var listener = targetEventListeners.find(function (listener) { return listener.eventTarget == eventTarget && listener.eventName == eventName; });
	          if (isBlank(listener)) {
	              listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length);
	              targetEventListeners.push(listener);
	          }
	          return listener;
	      };
	      Object.defineProperty(CompileEventListener.prototype, "methodName", {
	          get: function () { return this._methodName; },
	          enumerable: true,
	          configurable: true
	      });
	      CompileEventListener.prototype.addAction = function (hostEvent, directive, directiveInstance) {
	          if (isPresent(directive) && directive.isComponent) {
	              this._hasComponentHostListener = true;
	          }
	          this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
	          var context = isPresent(directiveInstance) ? directiveInstance :
	              this.compileElement.view.componentContext;
	          var actionStmts = convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler, this.compileElement.nodeIndex);
	          var lastIndex = actionStmts.length - 1;
	          if (lastIndex >= 0) {
	              var lastStatement = actionStmts[lastIndex];
	              var returnExpr = convertStmtIntoExpression(lastStatement);
	              var preventDefaultVar = variable("pd_" + this._actionResultExprs.length);
	              this._actionResultExprs.push(preventDefaultVar);
	              if (isPresent(returnExpr)) {
	                  // Note: We need to cast the result of the method call to dynamic,
	                  // as it might be a void method!
	                  actionStmts[lastIndex] =
	                      preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                          .toDeclStmt(null, [StmtModifier.Final]);
	              }
	          }
	          this._method.addStmts(actionStmts);
	      };
	      CompileEventListener.prototype.finishMethod = function () {
	          var markPathToRootStart = this._hasComponentHostListener ?
	              this.compileElement.appElement.prop('componentView') :
	              THIS_EXPR;
	          var resultExpr = literal(true);
	          this._actionResultExprs.forEach(function (expr) { resultExpr = resultExpr.and(expr); });
	          var stmts = [markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt()]
	              .concat(this._method.finish())
	              .concat([new ReturnStatement(resultExpr)]);
	          // private is fine here as no child view will reference the event handler...
	          this.compileElement.view.eventHandlerMethods.push(new ClassMethod(this._methodName, [this._eventParam], stmts, BOOL_TYPE, [StmtModifier.Private]));
	      };
	      CompileEventListener.prototype.listenToRenderer = function () {
	          var listenExpr;
	          var eventListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);
	          if (isPresent(this.eventTarget)) {
	              listenExpr = ViewProperties.renderer.callMethod('listenGlobal', [literal(this.eventTarget), literal(this.eventName), eventListener]);
	          }
	          else {
	              listenExpr = ViewProperties.renderer.callMethod('listen', [this.compileElement.renderNode, literal(this.eventName), eventListener]);
	          }
	          var disposable = variable("disposable_" + this.compileElement.view.disposables.length);
	          this.compileElement.view.disposables.push(disposable);
	          // private is fine here as no child view will reference the event handler...
	          this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
	      };
	      CompileEventListener.prototype.listenToAnimation = function (output) {
	          var outputListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);
	          // tie the property callback method to the view animations map
	          var stmt = THIS_EXPR
	              .callMethod('registerAnimationOutput', [
	              this.compileElement.renderNode,
	              importExpr(resolveIdentifier(Identifiers.AnimationOutput)).instantiate([
	                  literal(output.name), literal(output.phase)
	              ]),
	              outputListener
	          ])
	              .toStmt();
	          this.compileElement.view.createMethod.addStmt(stmt);
	      };
	      CompileEventListener.prototype.listenToDirective = function (directiveInstance, observablePropName) {
	          var subscription = variable("subscription_" + this.compileElement.view.subscriptions.length);
	          this.compileElement.view.subscriptions.push(subscription);
	          var eventListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);
	          this.compileElement.view.createMethod.addStmt(subscription
	              .set(directiveInstance.prop(observablePropName)
	              .callMethod(BuiltinMethod.SubscribeObservable, [eventListener]))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      };
	      return CompileEventListener;
	  }());
	  function collectEventListeners(hostEvents, dirs, compileElement) {
	      var eventListeners = [];
	      hostEvents.forEach(function (hostEvent) {
	          compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
	          var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
	          listener.addAction(hostEvent, null, null);
	      });
	      dirs.forEach(function (directiveAst) {
	          var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type).reference);
	          directiveAst.hostEvents.forEach(function (hostEvent) {
	              compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
	              var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
	              listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
	          });
	      });
	      eventListeners.forEach(function (listener) { return listener.finishMethod(); });
	      return eventListeners;
	  }
	  function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
	      StringMapWrapper.forEach(directiveAst.directive.outputs, function (eventName /** TODO #9100 */, observablePropName /** TODO #9100 */) {
	          eventListeners.filter(function (listener) { return listener.eventName == eventName; }).forEach(function (listener) {
	              listener.listenToDirective(directiveInstance, observablePropName);
	          });
	      });
	  }
	  function bindRenderOutputs(eventListeners) {
	      eventListeners.forEach(function (listener) { return listener.listenToRenderer(); });
	  }
	  function bindAnimationOutputs(eventListeners) {
	      eventListeners.forEach(function (entry) { entry.listener.listenToAnimation(entry.output); });
	  }
	  function convertStmtIntoExpression(stmt) {
	      if (stmt instanceof ExpressionStatement) {
	          return stmt.expr;
	      }
	      else if (stmt instanceof ReturnStatement) {
	          return stmt.value;
	      }
	      return null;
	  }
	  function santitizeEventName(name) {
	      return StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, '_');
	  }

	  var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
	  var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
	  function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
	      var view = compileElement.view;
	      var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	      var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
	      if (lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0) {
	          detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changes.notIdentical(NULL_EXPR), [directiveInstance.callMethod('ngOnChanges', [DetectChangesVars.changes]).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1) {
	          detectChangesInInputsMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod('ngOnInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1) {
	          detectChangesInInputsMethod.addStmt(new IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod('ngDoCheck', []).toStmt()]));
	      }
	  }
	  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	      var view = compileElement.view;
	      var lifecycleHooks = directiveMeta.type.lifecycleHooks;
	      var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
	      afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
	          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
	          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
	      }
	  }
	  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	      var view = compileElement.view;
	      var lifecycleHooks = directiveMeta.type.lifecycleHooks;
	      var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
	      afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
	          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
	          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
	      }
	  }
	  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
	      var onDestroyMethod = compileElement.view.destroyMethod;
	      onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
	      }
	  }
	  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
	      var onDestroyMethod = view.destroyMethod;
	      if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
	      }
	  }

	  function createBindFieldExpr(exprIndex) {
	      return THIS_EXPR.prop("_expr_" + exprIndex);
	  }
	  function createCurrValueExpr(exprIndex) {
	      return variable("currVal_" + exprIndex); // fix syntax highlighting: `
	  }
	  function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method, bindingIndex) {
	      var checkExpression = convertCdExpressionToIr(view, context, parsedExpression, DetectChangesVars.valUnwrapper, bindingIndex);
	      if (isBlank(checkExpression.expression)) {
	          // e.g. an empty expression was given
	          return;
	      }
	      if (checkExpression.temporaryCount) {
	          for (var i = 0; i < checkExpression.temporaryCount; i++) {
	              method.addStmt(temporaryDeclaration(bindingIndex, i));
	          }
	      }
	      // private is fine here as no child view will reference the cached value...
	      view.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
	      view.createMethod.addStmt(THIS_EXPR.prop(fieldExpr.name)
	          .set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED)))
	          .toStmt());
	      if (checkExpression.needsValueUnwrapper) {
	          var initValueUnwrapperStmt = DetectChangesVars.valUnwrapper.callMethod('reset', []).toStmt();
	          method.addStmt(initValueUnwrapperStmt);
	      }
	      method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [StmtModifier.Final]));
	      var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([
	          DetectChangesVars.throwOnChange, fieldExpr, currValExpr
	      ]);
	      if (checkExpression.needsValueUnwrapper) {
	          condition = DetectChangesVars.valUnwrapper.prop('hasWrappedValue').or(condition);
	      }
	      method.addStmt(new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));
	  }
	  function bindRenderText(boundText, compileNode, view) {
	      var bindingIndex = view.bindings.length;
	      view.bindings.push(new CompileBinding(compileNode, boundText));
	      var currValExpr = createCurrValueExpr(bindingIndex);
	      var valueField = createBindFieldExpr(bindingIndex);
	      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
	      bind(view, currValExpr, valueField, boundText.value, view.componentContext, [THIS_EXPR.prop('renderer')
	              .callMethod('setText', [compileNode.renderNode, currValExpr])
	              .toStmt()], view.detectChangesRenderPropertiesMethod, bindingIndex);
	  }
	  function bindAndWriteToRenderer(boundProps, context, compileElement, isHostProp) {
	      var view = compileElement.view;
	      var renderNode = compileElement.renderNode;
	      boundProps.forEach(function (boundProp) {
	          var bindingIndex = view.bindings.length;
	          view.bindings.push(new CompileBinding(compileElement, boundProp));
	          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
	          var fieldExpr = createBindFieldExpr(bindingIndex);
	          var currValExpr = createCurrValueExpr(bindingIndex);
	          var renderMethod;
	          var oldRenderValue = sanitizedValue(boundProp, fieldExpr);
	          var renderValue = sanitizedValue(boundProp, currValExpr);
	          var updateStmts = [];
	          var compileMethod = view.detectChangesRenderPropertiesMethod;
	          switch (boundProp.type) {
	              case exports.PropertyBindingType.Property:
	                  if (view.genConfig.logBindingUpdate) {
	                      updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue));
	                  }
	                  updateStmts.push(THIS_EXPR.prop('renderer')
	                      .callMethod('setElementProperty', [renderNode, literal(boundProp.name), renderValue])
	                      .toStmt());
	                  break;
	              case exports.PropertyBindingType.Attribute:
	                  renderValue =
	                      renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
	                  updateStmts.push(THIS_EXPR.prop('renderer')
	                      .callMethod('setElementAttribute', [renderNode, literal(boundProp.name), renderValue])
	                      .toStmt());
	                  break;
	              case exports.PropertyBindingType.Class:
	                  updateStmts.push(THIS_EXPR.prop('renderer')
	                      .callMethod('setElementClass', [renderNode, literal(boundProp.name), renderValue])
	                      .toStmt());
	                  break;
	              case exports.PropertyBindingType.Style:
	                  var strValue = renderValue.callMethod('toString', []);
	                  if (isPresent(boundProp.unit)) {
	                      strValue = strValue.plus(literal(boundProp.unit));
	                  }
	                  renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
	                  updateStmts.push(THIS_EXPR.prop('renderer')
	                      .callMethod('setElementStyle', [renderNode, literal(boundProp.name), renderValue])
	                      .toStmt());
	                  break;
	              case exports.PropertyBindingType.Animation:
	                  var animationName = boundProp.name;
	                  var targetViewExpr = THIS_EXPR;
	                  if (isHostProp) {
	                      targetViewExpr = compileElement.appElement.prop('componentView');
	                  }
	                  compileMethod = view.animationBindingsMethod;
	                  var animationFnExpr = targetViewExpr.prop('componentType').prop('animations').key(literal(animationName));
	                  // it's important to normalize the void value as `void` explicitly
	                  // so that the styles data can be obtained from the stringmap
	                  var emptyStateValue = literal(EMPTY_ANIMATION_STATE);
	                  // void => ...
	                  var oldRenderVar = variable('oldRenderVar');
	                  updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt());
	                  updateStmts.push(new IfStmt(oldRenderVar.equals(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))), [oldRenderVar.set(emptyStateValue).toStmt()]));
	                  // ... => void
	                  var newRenderVar = variable('newRenderVar');
	                  updateStmts.push(newRenderVar.set(renderValue).toDeclStmt());
	                  updateStmts.push(new IfStmt(newRenderVar.equals(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))), [newRenderVar.set(emptyStateValue).toStmt()]));
	                  updateStmts.push(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderVar, newRenderVar]).toStmt());
	                  view.detachMethod.addStmt(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderValue, emptyStateValue])
	                      .toStmt());
	                  break;
	          }
	          bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, compileMethod, view.bindings.length);
	      });
	  }
	  function sanitizedValue(boundProp, renderValue) {
	      var enumValue;
	      switch (boundProp.securityContext) {
	          case _angular_core.SecurityContext.NONE:
	              return renderValue; // No sanitization needed.
	          case _angular_core.SecurityContext.HTML:
	              enumValue = 'HTML';
	              break;
	          case _angular_core.SecurityContext.STYLE:
	              enumValue = 'STYLE';
	              break;
	          case _angular_core.SecurityContext.SCRIPT:
	              enumValue = 'SCRIPT';
	              break;
	          case _angular_core.SecurityContext.URL:
	              enumValue = 'URL';
	              break;
	          case _angular_core.SecurityContext.RESOURCE_URL:
	              enumValue = 'RESOURCE_URL';
	              break;
	          default:
	              throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
	      }
	      var ctx = ViewProperties.viewUtils.prop('sanitizer');
	      var args = [importExpr(resolveIdentifier(Identifiers.SecurityContext)).prop(enumValue), renderValue];
	      return ctx.callMethod('sanitize', args);
	  }
	  function bindRenderInputs(boundProps, compileElement) {
	      bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement, false);
	  }
	  function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
	      bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement, true);
	  }
	  function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
	      if (directiveAst.inputs.length === 0) {
	          return;
	      }
	      var view = compileElement.view;
	      var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
	      var calcChangesMap = lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
	      var isOnPushComp = directiveAst.directive.isComponent &&
	          !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
	      if (calcChangesMap) {
	          detectChangesInInputsMethod.addStmt(DetectChangesVars.changes.set(NULL_EXPR).toStmt());
	      }
	      if (isOnPushComp) {
	          detectChangesInInputsMethod.addStmt(DetectChangesVars.changed.set(literal(false)).toStmt());
	      }
	      directiveAst.inputs.forEach(function (input) {
	          var bindingIndex = view.bindings.length;
	          view.bindings.push(new CompileBinding(compileElement, input));
	          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
	          var fieldExpr = createBindFieldExpr(bindingIndex);
	          var currValExpr = createCurrValueExpr(bindingIndex);
	          var statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];
	          if (calcChangesMap) {
	              statements.push(new IfStmt(DetectChangesVars.changes.identical(NULL_EXPR), [DetectChangesVars.changes
	                      .set(literalMap([], new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))))
	                      .toStmt()]));
	              statements.push(DetectChangesVars.changes.key(literal(input.directiveName))
	                  .set(importExpr(resolveIdentifier(Identifiers.SimpleChange))
	                  .instantiate([fieldExpr, currValExpr]))
	                  .toStmt());
	          }
	          if (isOnPushComp) {
	              statements.push(DetectChangesVars.changed.set(literal(true)).toStmt());
	          }
	          if (view.genConfig.logBindingUpdate) {
	              statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr));
	          }
	          bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod, bindingIndex);
	      });
	      if (isOnPushComp) {
	          detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changed, [
	              compileElement.appElement.prop('componentView').callMethod('markAsCheckOnce', []).toStmt()
	          ]));
	      }
	  }
	  function logBindingUpdateStmt(renderNode, propName, value) {
	      var tryStmt = THIS_EXPR.prop('renderer')
	          .callMethod('setBindingDebugInfo', [
	          renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)),
	          value.isBlank().conditional(NULL_EXPR, value.callMethod('toString', []))
	      ])
	          .toStmt();
	      var catchStmt = THIS_EXPR.prop('renderer')
	          .callMethod('setBindingDebugInfo', [
	          renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)),
	          literal('[ERROR] Exception while trying to serialize the value')
	      ])
	          .toStmt();
	      return new TryCatchStmt([tryStmt], [catchStmt]);
	  }

	  function bindView(view, parsedTemplate, animationOutputs) {
	      var visitor = new ViewBinderVisitor(view, animationOutputs);
	      templateVisitAll(visitor, parsedTemplate);
	      view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
	  }
	  var ViewBinderVisitor = (function () {
	      function ViewBinderVisitor(view, animationOutputs) {
	          var _this = this;
	          this.view = view;
	          this.animationOutputs = animationOutputs;
	          this._nodeIndex = 0;
	          this._animationOutputsMap = {};
	          animationOutputs.forEach(function (entry) { _this._animationOutputsMap[entry.fullPropertyName] = entry; });
	      }
	      ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
	          var node = this.view.nodes[this._nodeIndex++];
	          bindRenderText(ast, node, this.view);
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitText = function (ast, parent) {
	          this._nodeIndex++;
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };
	      ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
	          var _this = this;
	          var compileElement = this.view.nodes[this._nodeIndex++];
	          var eventListeners = [];
	          var animationEventListeners = [];
	          collectEventListeners(ast.outputs, ast.directives, compileElement).forEach(function (entry) {
	              // TODO: figure out how to abstract this `if` statement elsewhere
	              if (entry.eventName[0] == '@') {
	                  var animationOutputName = entry.eventName.substr(1);
	                  var output = _this._animationOutputsMap[animationOutputName];
	                  // no need to report an error here since the parser will
	                  // have caught the missing animation trigger definition
	                  if (output) {
	                      animationEventListeners.push(new CompileElementAnimationOutput(entry, output));
	                  }
	              }
	              else {
	                  eventListeners.push(entry);
	              }
	          });
	          bindAnimationOutputs(animationEventListeners);
	          bindRenderInputs(ast.inputs, compileElement);
	          bindRenderOutputs(eventListeners);
	          ast.directives.forEach(function (directiveAst) {
	              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
	              bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
	              bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);
	              bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
	          });
	          templateVisitAll(this, ast.children, compileElement);
	          // afterContent and afterView lifecycles need to be called bottom up
	          // so that children are notified before parents
	          ast.directives.forEach(function (directiveAst) {
	              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	          });
	          ast.providers.forEach(function (providerAst) {
	              var providerInstance = compileElement.instances.get(providerAst.token.reference);
	              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	          });
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	          var compileElement = this.view.nodes[this._nodeIndex++];
	          var eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
	          ast.directives.forEach(function (directiveAst) {
	              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
	              bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
	              bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
	              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	          });
	          ast.providers.forEach(function (providerAst) {
	              var providerInstance = compileElement.instances.get(providerAst.token.reference);
	              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	          });
	          bindView(compileElement.embeddedView, ast.children, this.animationOutputs);
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	      ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	      return ViewBinderVisitor;
	  }());

	  var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	  var CLASS_ATTR$1 = 'class';
	  var STYLE_ATTR = 'style';
	  var NG_CONTAINER_TAG = 'ng-container';
	  var parentRenderNodeVar = variable('parentRenderNode');
	  var rootSelectorVar = variable('rootSelector');
	  var ViewFactoryDependency = (function () {
	      function ViewFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ViewFactoryDependency;
	  }());
	  var ComponentFactoryDependency = (function () {
	      function ComponentFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ComponentFactoryDependency;
	  }());
	  function buildView(view, template, targetDependencies) {
	      var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
	      templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);
	      return builderVisitor.nestedViewCount;
	  }
	  function finishView(view, targetStatements) {
	      view.afterNodes();
	      createViewTopLevelStmts(view, targetStatements);
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement && node.hasEmbeddedView) {
	              finishView(node.embeddedView, targetStatements);
	          }
	      });
	  }
	  var ViewBuilderVisitor = (function () {
	      function ViewBuilderVisitor(view, targetDependencies) {
	          this.view = view;
	          this.targetDependencies = targetDependencies;
	          this.nestedViewCount = 0;
	          this._animationCompiler = new AnimationCompiler();
	      }
	      ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };
	      ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
	          var projectedNode = _getOuterContainerOrSelf(node);
	          var parent = projectedNode.parent;
	          var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
	          var vcAppEl = (node instanceof CompileElement && node.hasViewContainer) ? node.appElement : null;
	          if (this._isRootNode(parent)) {
	              // store appElement as root node only for ViewContainers
	              if (this.view.viewType !== ViewType.COMPONENT) {
	                  this.view.rootNodesOrAppElements.push(isPresent(vcAppEl) ? vcAppEl : node.renderNode);
	              }
	          }
	          else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
	              parent.addContentNode(ngContentIndex, isPresent(vcAppEl) ? vcAppEl : node.renderNode);
	          }
	      };
	      ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
	          parent = _getOuterContainerParentOrSelf(parent);
	          if (this._isRootNode(parent)) {
	              if (this.view.viewType === ViewType.COMPONENT) {
	                  return parentRenderNodeVar;
	              }
	              else {
	                  // root node of an embedded/host view
	                  return NULL_EXPR;
	              }
	          }
	          else {
	              return isPresent(parent.component) &&
	                  parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?
	                  NULL_EXPR :
	                  parent.renderNode;
	          }
	      };
	      ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	          return this._visitText(ast, '', parent);
	      };
	      ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	          return this._visitText(ast, ast.value, parent);
	      };
	      ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
	          var fieldName = "_text_" + this.view.nodes.length;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
	          var renderNode = THIS_EXPR.prop(fieldName);
	          var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
	          var createRenderNode = THIS_EXPR.prop(fieldName)
	              .set(ViewProperties.renderer.callMethod('createText', [
	              this._getParentRenderNode(parent), literal(value),
	              this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
	          ]))
	              .toStmt();
	          this.view.nodes.push(compileNode);
	          this.view.createMethod.addStmt(createRenderNode);
	          this._addRootNodeAndProject(compileNode);
	          return renderNode;
	      };
	      ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	          // the projected nodes originate from a different view, so we don't
	          // have debug information for them...
	          this.view.createMethod.resetDebugInfo(null, ast);
	          var parentRenderNode = this._getParentRenderNode(parent);
	          var nodesExpression = ViewProperties.projectableNodes.key(literal(ast.index), new ArrayType(importType(this.view.genConfig.renderTypes.renderNode)));
	          if (parentRenderNode !== NULL_EXPR) {
	              this.view.createMethod.addStmt(ViewProperties.renderer
	                  .callMethod('projectNodes', [
	                  parentRenderNode,
	                  importExpr(resolveIdentifier(Identifiers.flattenNestedViewRenderNodes))
	                      .callFn([nodesExpression])
	              ])
	                  .toStmt());
	          }
	          else if (this._isRootNode(parent)) {
	              if (this.view.viewType !== ViewType.COMPONENT) {
	                  // store root nodes only for embedded/host views
	                  this.view.rootNodesOrAppElements.push(nodesExpression);
	              }
	          }
	          else {
	              if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
	                  parent.addContentNode(ast.ngContentIndex, nodesExpression);
	              }
	          }
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	          var _this = this;
	          var nodeIndex = this.view.nodes.length;
	          var createRenderNodeExpr;
	          var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
	          if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
	              createRenderNodeExpr = THIS_EXPR.callMethod('selectOrCreateHostElement', [literal(ast.name), rootSelectorVar, debugContextExpr]);
	          }
	          else {
	              if (ast.name === NG_CONTAINER_TAG) {
	                  createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
	              }
	              else {
	                  createRenderNodeExpr = ViewProperties.renderer.callMethod('createElement', [this._getParentRenderNode(parent), literal(ast.name), debugContextExpr]);
	              }
	          }
	          var fieldName = "_el_" + nodeIndex;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
	          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
	          var renderNode = THIS_EXPR.prop(fieldName);
	          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	          var component = directives.find(function (directive) { return directive.isComponent; });
	          var htmlAttrs = _readHtmlAttrs(ast.attrs);
	          var attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives);
	          for (var i = 0; i < attrNameAndValues.length; i++) {
	              var attrName = attrNameAndValues[i][0];
	              if (ast.name !== NG_CONTAINER_TAG) {
	                  // <ng-container> are not rendered in the DOM
	                  var attrValue = attrNameAndValues[i][1];
	                  this.view.createMethod.addStmt(ViewProperties.renderer
	                      .callMethod('setElementAttribute', [renderNode, literal(attrName), literal(attrValue)])
	                      .toStmt());
	              }
	          }
	          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
	          this.view.nodes.push(compileElement);
	          var compViewExpr = null;
	          if (isPresent(component)) {
	              var nestedComponentIdentifier = new CompileIdentifierMetadata({ name: getViewFactoryName(component, 0) });
	              this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));
	              var entryComponentIdentifiers = component.entryComponents.map(function (entryComponent) {
	                  var id = new CompileIdentifierMetadata({ name: entryComponent.name });
	                  _this.targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
	                  return id;
	              });
	              compileElement.createComponentFactoryResolver(entryComponentIdentifiers);
	              compViewExpr = variable("compView_" + nodeIndex); // fix highlighting: `
	              compileElement.setComponentView(compViewExpr);
	              this.view.createMethod.addStmt(compViewExpr
	                  .set(importExpr(nestedComponentIdentifier).callFn([
	                  ViewProperties.viewUtils, compileElement.injector, compileElement.appElement
	              ]))
	                  .toDeclStmt());
	          }
	          compileElement.beforeChildren();
	          this._addRootNodeAndProject(compileElement);
	          templateVisitAll(this, ast.children, compileElement);
	          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
	          if (isPresent(compViewExpr)) {
	              var codeGenContentNodes;
	              if (this.view.component.type.isHost) {
	                  codeGenContentNodes = ViewProperties.projectableNodes;
	              }
	              else {
	                  codeGenContentNodes = literalArr(compileElement.contentNodesByNgContentIndex.map(function (nodes) { return createFlatArray(nodes); }));
	              }
	              this.view.createMethod.addStmt(compViewExpr
	                  .callMethod('create', [compileElement.getComponent(), codeGenContentNodes, NULL_EXPR])
	                  .toStmt());
	          }
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	          var nodeIndex = this.view.nodes.length;
	          var fieldName = "_anchor_" + nodeIndex;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
	          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	              .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [
	              this._getParentRenderNode(parent),
	              this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
	          ]))
	              .toStmt());
	          var renderNode = THIS_EXPR.prop(fieldName);
	          var templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
	          this.view.nodes.push(compileElement);
	          var compiledAnimations = this._animationCompiler.compileComponent(this.view.component, [ast]);
	          this.nestedViewCount++;
	          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, compiledAnimations.triggers, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
	          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
	          compileElement.beforeChildren();
	          this._addRootNodeAndProject(compileElement);
	          compileElement.afterChildren(0);
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	      ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	      return ViewBuilderVisitor;
	  }());
	  /**
	   * Walks up the nodes while the direct parent is a container.
	   *
	   * Returns the outer container or the node itself when it is not a direct child of a container.
	   *
	   * @internal
	   */
	  function _getOuterContainerOrSelf(node) {
	      var view = node.view;
	      while (_isNgContainer(node.parent, view)) {
	          node = node.parent;
	      }
	      return node;
	  }
	  /**
	   * Walks up the nodes while they are container and returns the first parent which is not.
	   *
	   * Returns the parent of the outer container or the node itself when it is not a container.
	   *
	   * @internal
	   */
	  function _getOuterContainerParentOrSelf(el) {
	      var view = el.view;
	      while (_isNgContainer(el, view)) {
	          el = el.parent;
	      }
	      return el;
	  }
	  function _isNgContainer(node, view) {
	      return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG &&
	          node.view === view;
	  }
	  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
	      var result = {};
	      StringMapWrapper.forEach(declaredHtmlAttrs, function (value, key) { result[key] = value; });
	      directives.forEach(function (directiveMeta) {
	          StringMapWrapper.forEach(directiveMeta.hostAttributes, function (value, name) {
	              var prevValue = result[name];
	              result[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	          });
	      });
	      return mapToKeyValueArray(result);
	  }
	  function _readHtmlAttrs(attrs) {
	      var htmlAttrs = {};
	      attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });
	      return htmlAttrs;
	  }
	  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	      if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	          return attrValue1 + " " + attrValue2;
	      }
	      else {
	          return attrValue2;
	      }
	  }
	  function mapToKeyValueArray(data) {
	      var entryArray = [];
	      StringMapWrapper.forEach(data, function (value, name) {
	          entryArray.push([name, value]);
	      });
	      // We need to sort to get a defined output order
	      // for tests and for caching generated artifacts...
	      ListWrapper.sort(entryArray, function (entry1, entry2) { return StringWrapper.compare(entry1[0], entry2[0]); });
	      return entryArray;
	  }
	  function createViewTopLevelStmts(view, targetStatements) {
	      var nodeDebugInfosVar = NULL_EXPR;
	      if (view.genConfig.genDebugInfo) {
	          nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex); // fix highlighting: `
	          targetStatements.push(nodeDebugInfosVar
	              .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      }
	      var renderCompTypeVar = variable("renderType_" + view.component.type.name); // fix highlighting: `
	      if (view.viewIndex === 0) {
	          targetStatements.push(renderCompTypeVar.set(NULL_EXPR)
	              .toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));
	      }
	      var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
	      targetStatements.push(viewClass);
	      targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
	  }
	  function createStaticNodeDebugInfo(node) {
	      var compileElement = node instanceof CompileElement ? node : null;
	      var providerTokens = [];
	      var componentToken = NULL_EXPR;
	      var varTokenEntries = [];
	      if (isPresent(compileElement)) {
	          providerTokens = compileElement.getProviderTokens();
	          if (isPresent(compileElement.component)) {
	              componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
	          }
	          StringMapWrapper.forEach(compileElement.referenceTokens, function (token, varName) {
	              varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
	          });
	      }
	      return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo))
	          .instantiate([
	          literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),
	          componentToken,
	          literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))
	      ], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
	  }
	  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
	      var viewConstructorArgs = [
	          new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))),
	          new FnParam(ViewConstructorVars.parentInjector.name, importType(resolveIdentifier(Identifiers.Injector))),
	          new FnParam(ViewConstructorVars.declarationEl.name, importType(resolveIdentifier(Identifiers.AppElement)))
	      ];
	      var superConstructorArgs = [
	          variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),
	          ViewConstructorVars.viewUtils, ViewConstructorVars.parentInjector,
	          ViewConstructorVars.declarationEl,
	          ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))
	      ];
	      if (view.genConfig.genDebugInfo) {
	          superConstructorArgs.push(nodeDebugInfosVar);
	      }
	      var viewConstructor = new ClassMethod(null, viewConstructorArgs, [SUPER_EXPR.callFn(superConstructorArgs).toStmt()]);
	      var viewMethods = [
	          new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.AppElement))),
	          new ClassMethod('injectorGetInternal', [
	              new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
	              // Note: Can't use o.INT_TYPE here as the method in AppView uses number
	              new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE),
	              new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
	          ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE),
	          new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)),
	          new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
	          new ClassMethod('destroyInternal', [], view.destroyMethod.finish()),
	          new ClassMethod('detachInternal', [], view.detachMethod.finish())
	      ].concat(view.eventHandlerMethods);
	      var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
	      var viewClass = new ClassStmt(view.className, importExpr(resolveIdentifier(superClass), [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function (method) { return method.body.length > 0; }));
	      return viewClass;
	  }
	  function createViewFactory(view, viewClass, renderCompTypeVar) {
	      var viewFactoryArgs = [
	          new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))),
	          new FnParam(ViewConstructorVars.parentInjector.name, importType(resolveIdentifier(Identifiers.Injector))),
	          new FnParam(ViewConstructorVars.declarationEl.name, importType(resolveIdentifier(Identifiers.AppElement)))
	      ];
	      var initRenderCompTypeStmts = [];
	      var templateUrlInfo;
	      if (view.component.template.templateUrl == view.component.type.moduleUrl) {
	          templateUrlInfo =
	              view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
	      }
	      else {
	          templateUrlInfo = view.component.template.templateUrl;
	      }
	      if (view.viewIndex === 0) {
	          var animationsExpr = literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnVariable]; }));
	          initRenderCompTypeStmts = [new IfStmt(renderCompTypeVar.identical(NULL_EXPR), [
	                  renderCompTypeVar
	                      .set(ViewConstructorVars.viewUtils.callMethod('createRenderComponentType', [
	                      literal(templateUrlInfo),
	                      literal(view.component.template.ngContentSelectors.length),
	                      ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles,
	                      animationsExpr
	                  ]))
	                      .toStmt()
	              ])];
	      }
	      return fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new ReturnStatement(variable(viewClass.name)
	              .instantiate(viewClass.constructorMethod.params.map(function (param) { return variable(param.name); })))]), importType(resolveIdentifier(Identifiers.AppView), [getContextType(view)]))
	          .toDeclStmt(view.viewFactory.name, [StmtModifier.Final]);
	  }
	  function generateCreateMethod(view) {
	      var parentRenderNodeExpr = NULL_EXPR;
	      var parentRenderNodeStmts = [];
	      if (view.viewType === ViewType.COMPONENT) {
	          parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('declarationAppElement').prop('nativeElement')]);
	          parentRenderNodeStmts =
	              [parentRenderNodeVar.set(parentRenderNodeExpr)
	                      .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
	      }
	      var resultExpr;
	      if (view.viewType === ViewType.HOST) {
	          resultExpr = view.nodes[0].appElement;
	      }
	      else {
	          resultExpr = NULL_EXPR;
	      }
	      return parentRenderNodeStmts.concat(view.createMethod.finish(), [
	          THIS_EXPR
	              .callMethod('init', [
	              createFlatArray(view.rootNodesOrAppElements),
	              literalArr(view.nodes.map(function (node) { return node.renderNode; })), literalArr(view.disposables),
	              literalArr(view.subscriptions)
	          ])
	              .toStmt(),
	          new ReturnStatement(resultExpr)
	      ]);
	  }
	  function generateDetectChangesMethod(view) {
	      var stmts = [];
	      if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&
	          view.updateContentQueriesMethod.isEmpty() &&
	          view.afterContentLifecycleCallbacksMethod.isEmpty() &&
	          view.detectChangesRenderPropertiesMethod.isEmpty() &&
	          view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {
	          return stmts;
	      }
	      ListWrapper.addAll(stmts, view.animationBindingsMethod.finish());
	      ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish());
	      stmts.push(THIS_EXPR.callMethod('detectContentChildrenChanges', [DetectChangesVars.throwOnChange])
	          .toStmt());
	      var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
	      if (afterContentStmts.length > 0) {
	          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
	      }
	      ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish());
	      stmts.push(THIS_EXPR.callMethod('detectViewChildrenChanges', [DetectChangesVars.throwOnChange])
	          .toStmt());
	      var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
	      if (afterViewStmts.length > 0) {
	          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
	      }
	      var varStmts = [];
	      var readVars = findReadVarNames(stmts);
	      if (SetWrapper.has(readVars, DetectChangesVars.changed.name)) {
	          varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
	      }
	      if (SetWrapper.has(readVars, DetectChangesVars.changes.name)) {
	          varStmts.push(DetectChangesVars.changes.set(NULL_EXPR)
	              .toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));
	      }
	      if (SetWrapper.has(readVars, DetectChangesVars.valUnwrapper.name)) {
	          varStmts.push(DetectChangesVars.valUnwrapper
	              .set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      }
	      return varStmts.concat(stmts);
	  }
	  function addReturnValuefNotEmpty(statements, value) {
	      if (statements.length > 0) {
	          return statements.concat([new ReturnStatement(value)]);
	      }
	      else {
	          return statements;
	      }
	  }
	  function getContextType(view) {
	      if (view.viewType === ViewType.COMPONENT) {
	          return importType(view.component.type);
	      }
	      return DYNAMIC_TYPE;
	  }
	  function getChangeDetectionMode(view) {
	      var mode;
	      if (view.viewType === ViewType.COMPONENT) {
	          mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
	              ChangeDetectorStatus.CheckAlways :
	              ChangeDetectorStatus.CheckOnce;
	      }
	      else {
	          mode = ChangeDetectorStatus.CheckAlways;
	      }
	      return mode;
	  }

	  var ViewCompileResult = (function () {
	      function ViewCompileResult(statements, viewFactoryVar, dependencies) {
	          this.statements = statements;
	          this.viewFactoryVar = viewFactoryVar;
	          this.dependencies = dependencies;
	      }
	      return ViewCompileResult;
	  }());
	  var ViewCompiler = (function () {
	      function ViewCompiler(_genConfig) {
	          this._genConfig = _genConfig;
	          this._animationCompiler = new AnimationCompiler();
	      }
	      ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes) {
	          var dependencies = [];
	          var compiledAnimations = this._animationCompiler.compileComponent(component, template);
	          var statements = [];
	          var animationTriggers = compiledAnimations.triggers;
	          animationTriggers.forEach(function (entry) {
	              statements.push(entry.statesMapStatement);
	              statements.push(entry.fnStatement);
	          });
	          var view = new CompileView(component, this._genConfig, pipes, styles, animationTriggers, 0, CompileElement.createNull(), []);
	          buildView(view, template, dependencies);
	          // Need to separate binding from creation to be able to refer to
	          // variables that have been declared after usage.
	          bindView(view, template, compiledAnimations.outputs);
	          finishView(view, statements);
	          return new ViewCompileResult(statements, view.viewFactory.name, dependencies);
	      };
	      ViewCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      ViewCompiler.ctorParameters = [
	          { type: CompilerConfig, },
	      ];
	      return ViewCompiler;
	  }());

	  var SourceModule = (function () {
	      function SourceModule(moduleUrl, source) {
	          this.moduleUrl = moduleUrl;
	          this.source = source;
	      }
	      return SourceModule;
	  }());
	  var NgModulesSummary = (function () {
	      function NgModulesSummary(ngModuleByComponent) {
	          this.ngModuleByComponent = ngModuleByComponent;
	      }
	      return NgModulesSummary;
	  }());
	  var OfflineCompiler = (function () {
	      function OfflineCompiler(_metadataResolver, _directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat) {
	          this._metadataResolver = _metadataResolver;
	          this._directiveNormalizer = _directiveNormalizer;
	          this._templateParser = _templateParser;
	          this._styleCompiler = _styleCompiler;
	          this._viewCompiler = _viewCompiler;
	          this._ngModuleCompiler = _ngModuleCompiler;
	          this._outputEmitter = _outputEmitter;
	          this._localeId = _localeId;
	          this._translationFormat = _translationFormat;
	      }
	      OfflineCompiler.prototype.analyzeModules = function (ngModules) {
	          var _this = this;
	          var ngModuleByComponent = new Map();
	          ngModules.forEach(function (ngModule) {
	              var ngModuleMeta = _this._metadataResolver.getNgModuleMetadata(ngModule);
	              ngModuleMeta.declaredDirectives.forEach(function (dirMeta) {
	                  if (dirMeta.isComponent) {
	                      ngModuleByComponent.set(dirMeta.type.reference, ngModuleMeta);
	                  }
	              });
	          });
	          return new NgModulesSummary(ngModuleByComponent);
	      };
	      OfflineCompiler.prototype.clearCache = function () {
	          this._directiveNormalizer.clearCache();
	          this._metadataResolver.clearCache();
	      };
	      OfflineCompiler.prototype.compile = function (moduleUrl, ngModulesSummary, components, ngModules) {
	          var _this = this;
	          var fileSuffix = _splitTypescriptSuffix(moduleUrl)[1];
	          var statements = [];
	          var exportedVars = [];
	          var outputSourceModules = [];
	          // compile all ng modules
	          exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	          // compile components
	          return Promise
	              .all(components.map(function (compType) {
	              var compMeta = _this._metadataResolver.getDirectiveMetadata(compType);
	              var ngModule = ngModulesSummary.ngModuleByComponent.get(compType);
	              if (!ngModule) {
	                  throw new Error("Cannot determine the module for component " + compMeta.type.name + "!");
	              }
	              return Promise
	                  .all([compMeta].concat(ngModule.transitiveModule.directives).map(function (dirMeta) { return _this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult; }))
	                  .then(function (normalizedCompWithDirectives) {
	                  var compMeta = normalizedCompWithDirectives[0];
	                  var dirMetas = normalizedCompWithDirectives.slice(1);
	                  _assertComponent(compMeta);
	                  // compile styles
	                  var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	                  stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                      outputSourceModules.push(_this._codgenStyles(compiledStyleSheet, fileSuffix));
	                  });
	                  // compile components
	                  exportedVars.push(_this._compileComponentFactory(compMeta, fileSuffix, statements));
	                  exportedVars.push(_this._compileComponent(compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas, stylesCompileResults.componentStylesheet, fileSuffix, statements));
	              });
	          }))
	              .then(function () {
	              if (statements.length > 0) {
	                  outputSourceModules.unshift(_this._codegenSourceModule(_ngfactoryModuleUrl(moduleUrl), statements, exportedVars));
	              }
	              return outputSourceModules;
	          });
	      };
	      OfflineCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
	          var appCompileResult = this._ngModuleCompiler.compile(ngModule, [
	              new CompileProviderMetadata({ token: resolveIdentifierToken(Identifiers.LOCALE_ID), useValue: this._localeId }),
	              new CompileProviderMetadata({
	                  token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                  useValue: this._translationFormat
	              })
	          ]);
	          appCompileResult.dependencies.forEach(function (dep) {
	              dep.placeholder.name = _componentFactoryName(dep.comp);
	              dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
	          });
	          targetStatements.push.apply(targetStatements, appCompileResult.statements);
	          return appCompileResult.ngModuleFactoryVar;
	      };
	      OfflineCompiler.prototype._compileComponentFactory = function (compMeta, fileSuffix, targetStatements) {
	          var hostMeta = createHostComponentMeta(compMeta);
	          var hostViewFactoryVar = this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);
	          var compFactoryVar = _componentFactoryName(compMeta.type);
	          targetStatements.push(variable(compFactoryVar)
	              .set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])
	              .instantiate([
	              literal(compMeta.selector), variable(hostViewFactoryVar),
	              importExpr(compMeta.type)
	          ], importType(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]));
	          return compFactoryVar;
	      };
	      OfflineCompiler.prototype._compileComponent = function (compMeta, directives, pipes, schemas, componentStyles, fileSuffix, targetStatements) {
	          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);
	          var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	          var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);
	          if (componentStyles) {
	              ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
	          }
	          ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));
	          return viewResult.viewFactoryVar;
	      };
	      OfflineCompiler.prototype._codgenStyles = function (stylesCompileResult, fileSuffix) {
	          _resolveStyleStatements(stylesCompileResult, fileSuffix);
	          return this._codegenSourceModule(_stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	      };
	      OfflineCompiler.prototype._codegenSourceModule = function (moduleUrl, statements, exportedVars) {
	          return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
	      };
	      return OfflineCompiler;
	  }());
	  function _resolveViewStatements(compileResult) {
	      compileResult.dependencies.forEach(function (dep) {
	          if (dep instanceof ViewFactoryDependency) {
	              var vfd = dep;
	              vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
	          }
	          else if (dep instanceof ComponentFactoryDependency) {
	              var cfd = dep;
	              cfd.placeholder.name = _componentFactoryName(cfd.comp);
	              cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
	          }
	      });
	      return compileResult.statements;
	  }
	  function _resolveStyleStatements(compileResult, fileSuffix) {
	      compileResult.dependencies.forEach(function (dep) {
	          dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
	      });
	      return compileResult.statements;
	  }
	  function _ngfactoryModuleUrl(compUrl) {
	      var urlWithSuffix = _splitTypescriptSuffix(compUrl);
	      return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	  }
	  function _componentFactoryName(comp) {
	      return comp.name + "NgFactory";
	  }
	  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	      return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
	  }
	  function _assertComponent(meta) {
	      if (!meta.isComponent) {
	          throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
	      }
	  }
	  function _splitTypescriptSuffix(path) {
	      if (/\.d\.ts$/.test(path)) {
	          return [path.substring(0, path.length - 5), '.ts'];
	      }
	      var lastDot = path.lastIndexOf('.');
	      if (lastDot !== -1) {
	          return [path.substring(0, lastDot), path.substring(lastDot)];
	      }
	      else {
	          return [path, ''];
	      }
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * An interface for retrieving documents by URL that the compiler uses
	   * to load templates.
	   */
	  var ResourceLoader = (function () {
	      function ResourceLoader() {
	      }
	      ResourceLoader.prototype.get = function (url) { return null; };
	      return ResourceLoader;
	  }());

	  var _ASSET_SCHEME = 'asset:';
	  function createOfflineCompileUrlResolver() {
	      return new UrlResolver(_ASSET_SCHEME);
	  }
	  /**
	   * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	   */
	  var DEFAULT_PACKAGE_URL_PROVIDER = {
	      provide: _angular_core.PACKAGE_ROOT_URL,
	      useValue: '/'
	  };
	  /**
	   * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	   *
	   * This class can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   *
	   * ## Example
	   *
	   * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	   *
	   * @security  When compiling templates at runtime, you must
	   * ensure that the entire template comes from a trusted source.
	   * Attacker-controlled data introduced by a template could expose your
	   * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	   */
	  var UrlResolver = (function () {
	      function UrlResolver(_packagePrefix) {
	          if (_packagePrefix === void 0) { _packagePrefix = null; }
	          this._packagePrefix = _packagePrefix;
	      }
	      /**
	       * Resolves the `url` given the `baseUrl`:
	       * - when the `url` is null, the `baseUrl` is returned,
	       * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	       * `baseUrl` and `url`,
	       * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	       * returned as is (ignoring the `baseUrl`)
	       */
	      UrlResolver.prototype.resolve = function (baseUrl, url) {
	          var resolvedUrl = url;
	          if (isPresent(baseUrl) && baseUrl.length > 0) {
	              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	          }
	          var resolvedParts = _split(resolvedUrl);
	          var prefix = this._packagePrefix;
	          if (isPresent(prefix) && isPresent(resolvedParts) &&
	              resolvedParts[_ComponentIndex.Scheme] == 'package') {
	              var path = resolvedParts[_ComponentIndex.Path];
	              if (this._packagePrefix === _ASSET_SCHEME) {
	                  var pathSegements = path.split(/\//);
	                  resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
	              }
	              else {
	                  prefix = StringWrapper.stripRight(prefix, '/');
	                  path = StringWrapper.stripLeft(path, '/');
	                  return prefix + "/" + path;
	              }
	          }
	          return resolvedUrl;
	      };
	      UrlResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      UrlResolver.ctorParameters = [
	          { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	      ];
	      return UrlResolver;
	  }());
	  /**
	   * Extract the scheme of a URL.
	   */
	  function getUrlScheme(url) {
	      var match = _split(url);
	      return (match && match[_ComponentIndex.Scheme]) || '';
	  }
	  // The code below is adapted from Traceur:
	  // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	  /**
	   * Builds a URI string from already-encoded parts.
	   *
	   * No encoding is performed.  Any component may be omitted as either null or
	   * undefined.
	   *
	   * @param opt_scheme The scheme such as 'http'.
	   * @param opt_userInfo The user name before the '@'.
	   * @param opt_domain The domain such as 'www.google.com', already
	   *     URI-encoded.
	   * @param opt_port The port number.
	   * @param opt_path The path, already URI-encoded.  If it is not
	   *     empty, it must begin with a slash.
	   * @param opt_queryData The URI-encoded query data.
	   * @param opt_fragment The URI-encoded fragment identifier.
	   * @return The fully combined URI.
	   */
	  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	      var out = [];
	      if (isPresent(opt_scheme)) {
	          out.push(opt_scheme + ':');
	      }
	      if (isPresent(opt_domain)) {
	          out.push('//');
	          if (isPresent(opt_userInfo)) {
	              out.push(opt_userInfo + '@');
	          }
	          out.push(opt_domain);
	          if (isPresent(opt_port)) {
	              out.push(':' + opt_port);
	          }
	      }
	      if (isPresent(opt_path)) {
	          out.push(opt_path);
	      }
	      if (isPresent(opt_queryData)) {
	          out.push('?' + opt_queryData);
	      }
	      if (isPresent(opt_fragment)) {
	          out.push('#' + opt_fragment);
	      }
	      return out.join('');
	  }
	  /**
	   * A regular expression for breaking a URI into its component parts.
	   *
	   * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	   * As the "first-match-wins" algorithm is identical to the "greedy"
	   * disambiguation method used by POSIX regular expressions, it is natural and
	   * commonplace to use a regular expression for parsing the potential five
	   * components of a URI reference.
	   *
	   * The following line is the regular expression for breaking-down a
	   * well-formed URI reference into its components.
	   *
	   * <pre>
	   * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	   *  12            3  4          5       6  7        8 9
	   * </pre>
	   *
	   * The numbers in the second line above are only to assist readability; they
	   * indicate the reference points for each subexpression (i.e., each paired
	   * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	   * For example, matching the above expression to
	   * <pre>
	   *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	   * </pre>
	   * results in the following subexpression matches:
	   * <pre>
	   *    $1 = http:
	   *    $2 = http
	   *    $3 = //www.ics.uci.edu
	   *    $4 = www.ics.uci.edu
	   *    $5 = /pub/ietf/uri/
	   *    $6 = <undefined>
	   *    $7 = <undefined>
	   *    $8 = #Related
	   *    $9 = Related
	   * </pre>
	   * where <undefined> indicates that the component is not present, as is the
	   * case for the query component in the above example. Therefore, we can
	   * determine the value of the five components as
	   * <pre>
	   *    scheme    = $2
	   *    authority = $4
	   *    path      = $5
	   *    query     = $7
	   *    fragment  = $9
	   * </pre>
	   *
	   * The regular expression has been modified slightly to expose the
	   * userInfo, domain, and port separately from the authority.
	   * The modified version yields
	   * <pre>
	   *    $1 = http              scheme
	   *    $2 = <undefined>       userInfo -\
	   *    $3 = www.ics.uci.edu   domain     | authority
	   *    $4 = <undefined>       port     -/
	   *    $5 = /pub/ietf/uri/    path
	   *    $6 = <undefined>       query without ?
	   *    $7 = Related           fragment without #
	   * </pre>
	   * @type {!RegExp}
	   * @internal
	   */
	  var _splitRe = new RegExp('^' +
	      '(?:' +
	      '([^:/?#.]+)' +
	      // used by other URL parts such as :,
	      // ?, /, #, and .
	      ':)?' +
	      '(?://' +
	      '(?:([^/?#]*)@)?' +
	      '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	      // digits, dashes, dots, percent
	      // escapes, and unicode characters.
	      '(?::([0-9]+))?' +
	      ')?' +
	      '([^?#]+)?' +
	      '(?:\\?([^#]*))?' +
	      '(?:#(.*))?' +
	      '$');
	  /**
	   * The index of each URI component in the return value of goog.uri.utils.split.
	   * @enum {number}
	   */
	  var _ComponentIndex;
	  (function (_ComponentIndex) {
	      _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
	      _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
	      _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
	      _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
	      _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
	      _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
	      _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
	  })(_ComponentIndex || (_ComponentIndex = {}));
	  /**
	   * Splits a URI into its component parts.
	   *
	   * Each component can be accessed via the component indices; for example:
	   * <pre>
	   * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	   * </pre>
	   *
	   * @param uri The URI string to examine.
	   * @return Each component still URI-encoded.
	   *     Each component that is present will contain the encoded value, whereas
	   *     components that are not present will be undefined or empty, depending
	   *     on the browser's regular expression implementation.  Never null, since
	   *     arbitrary strings may still look like path names.
	   */
	  function _split(uri) {
	      return uri.match(_splitRe);
	  }
	  /**
	    * Removes dot segments in given path component, as described in
	    * RFC 3986, section 5.2.4.
	    *
	    * @param path A non-empty path component.
	    * @return Path component with removed dot segments.
	    */
	  function _removeDotSegments(path) {
	      if (path == '/')
	          return '/';
	      var leadingSlash = path[0] == '/' ? '/' : '';
	      var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	      var segments = path.split('/');
	      var out = [];
	      var up = 0;
	      for (var pos = 0; pos < segments.length; pos++) {
	          var segment = segments[pos];
	          switch (segment) {
	              case '':
	              case '.':
	                  break;
	              case '..':
	                  if (out.length > 0) {
	                      out.pop();
	                  }
	                  else {
	                      up++;
	                  }
	                  break;
	              default:
	                  out.push(segment);
	          }
	      }
	      if (leadingSlash == '') {
	          while (up-- > 0) {
	              out.unshift('..');
	          }
	          if (out.length === 0)
	              out.push('.');
	      }
	      return leadingSlash + out.join('/') + trailingSlash;
	  }
	  /**
	   * Takes an array of the parts from split and canonicalizes the path part
	   * and then joins all the parts.
	   */
	  function _joinAndCanonicalizePath(parts) {
	      var path = parts[_ComponentIndex.Path];
	      path = isBlank(path) ? '' : _removeDotSegments(path);
	      parts[_ComponentIndex.Path] = path;
	      return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	  }
	  /**
	   * Resolves a URL.
	   * @param base The URL acting as the base URL.
	   * @param to The URL to resolve.
	   */
	  function _resolveUrl(base, url) {
	      var parts = _split(encodeURI(url));
	      var baseParts = _split(base);
	      if (isPresent(parts[_ComponentIndex.Scheme])) {
	          return _joinAndCanonicalizePath(parts);
	      }
	      else {
	          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	      }
	      for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	          if (isBlank(parts[i])) {
	              parts[i] = baseParts[i];
	          }
	      }
	      if (parts[_ComponentIndex.Path][0] == '/') {
	          return _joinAndCanonicalizePath(parts);
	      }
	      var path = baseParts[_ComponentIndex.Path];
	      if (isBlank(path))
	          path = '/';
	      var index = path.lastIndexOf('/');
	      path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	      parts[_ComponentIndex.Path] = path;
	      return _joinAndCanonicalizePath(parts);
	  }

	  var DirectiveNormalizer = (function () {
	      function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	          this._resourceLoader = _resourceLoader;
	          this._urlResolver = _urlResolver;
	          this._htmlParser = _htmlParser;
	          this._config = _config;
	          this._resourceLoaderCache = new Map();
	      }
	      DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	      DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	          var _this = this;
	          if (!normalizedDirective.isComponent) {
	              return;
	          }
	          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
	          normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
	      };
	      DirectiveNormalizer.prototype._fetch = function (url) {
	          var result = this._resourceLoaderCache.get(url);
	          if (!result) {
	              result = this._resourceLoader.get(url);
	              this._resourceLoaderCache.set(url, result);
	          }
	          return result;
	      };
	      DirectiveNormalizer.prototype.normalizeDirective = function (directive) {
	          var _this = this;
	          if (!directive.isComponent) {
	              // For non components there is nothing to be normalized yet.
	              return new SyncAsyncResult(directive, Promise.resolve(directive));
	          }
	          var normalizedTemplateSync = null;
	          var normalizedTemplateAsync;
	          if (isPresent(directive.template.template)) {
	              normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template);
	              normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
	          }
	          else if (directive.template.templateUrl) {
	              normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);
	          }
	          else {
	              throw new Error("No template specified for component " + directive.type.name);
	          }
	          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	              // sync case
	              var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);
	              return new SyncAsyncResult(normalizedDirective, Promise.resolve(normalizedDirective));
	          }
	          else {
	              // async case
	              return new SyncAsyncResult(null, normalizedTemplateAsync
	                  .then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); })
	                  .then(function (normalizedTemplate) {
	                  return _cloneDirectiveWithTemplate(directive, normalizedTemplate);
	              }));
	          }
	      };
	      DirectiveNormalizer.prototype.normalizeTemplateSync = function (directiveType, template) {
	          return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);
	      };
	      DirectiveNormalizer.prototype.normalizeTemplateAsync = function (directiveType, template) {
	          var _this = this;
	          var templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
	          return this._fetch(templateUrl)
	              .then(function (value) { return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl); });
	      };
	      DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (directiveType, templateMeta, template, templateAbsUrl) {
	          var interpolationConfig = InterpolationConfig.fromArray(templateMeta.interpolation);
	          var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name, false, interpolationConfig);
	          if (rootNodesAndErrors.errors.length > 0) {
	              var errorString = rootNodesAndErrors.errors.join('\n');
	              throw new Error("Template parse errors:\n" + errorString);
	          }
	          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	              styles: templateMeta.styles,
	              styleUrls: templateMeta.styleUrls,
	              moduleUrl: directiveType.moduleUrl
	          }));
	          var visitor = new TemplatePreparseVisitor();
	          visitAll(visitor, rootNodesAndErrors.rootNodes);
	          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	          var allStyles = templateMetadataStyles.styles.concat(templateStyles.styles);
	          var allStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	          var encapsulation = templateMeta.encapsulation;
	          if (isBlank(encapsulation)) {
	              encapsulation = this._config.defaultEncapsulation;
	          }
	          if (encapsulation === _angular_core.ViewEncapsulation.Emulated && allStyles.length === 0 &&
	              allStyleUrls.length === 0) {
	              encapsulation = _angular_core.ViewEncapsulation.None;
	          }
	          return new CompileTemplateMetadata({
	              encapsulation: encapsulation,
	              template: template,
	              templateUrl: templateAbsUrl,
	              styles: allStyles,
	              styleUrls: allStyleUrls,
	              externalStylesheets: templateMeta.externalStylesheets,
	              ngContentSelectors: visitor.ngContentSelectors,
	              animations: templateMeta.animations,
	              interpolation: templateMeta.interpolation
	          });
	      };
	      DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	          return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	              .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	              encapsulation: templateMeta.encapsulation,
	              template: templateMeta.template,
	              templateUrl: templateMeta.templateUrl,
	              styles: templateMeta.styles,
	              styleUrls: templateMeta.styleUrls,
	              externalStylesheets: externalStylesheets,
	              ngContentSelectors: templateMeta.ngContentSelectors,
	              animations: templateMeta.animations,
	              interpolation: templateMeta.interpolation
	          }); });
	      };
	      DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	          var _this = this;
	          if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	          return Promise
	              .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	              .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	              loadedStylesheets.set(styleUrl, stylesheet);
	              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	          }); }))
	              .then(function (_) { return MapWrapper.values(loadedStylesheets); });
	      };
	      DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	          var _this = this;
	          var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	              .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });
	          var allStyles = stylesheet.styles.map(function (style) {
	              var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
	              allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	              return styleWithImports.style;
	          });
	          return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
	      };
	      DirectiveNormalizer.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveNormalizer.ctorParameters = [
	          { type: ResourceLoader, },
	          { type: UrlResolver, },
	          { type: HtmlParser, },
	          { type: CompilerConfig, },
	      ];
	      return DirectiveNormalizer;
	  }());
	  var TemplatePreparseVisitor = (function () {
	      function TemplatePreparseVisitor() {
	          this.ngContentSelectors = [];
	          this.styles = [];
	          this.styleUrls = [];
	          this.ngNonBindableStackCount = 0;
	      }
	      TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	          var preparsedElement = preparseElement(ast);
	          switch (preparsedElement.type) {
	              case PreparsedElementType.NG_CONTENT:
	                  if (this.ngNonBindableStackCount === 0) {
	                      this.ngContentSelectors.push(preparsedElement.selectAttr);
	                  }
	                  break;
	              case PreparsedElementType.STYLE:
	                  var textContent = '';
	                  ast.children.forEach(function (child) {
	                      if (child instanceof Text) {
	                          textContent += child.value;
	                      }
	                  });
	                  this.styles.push(textContent);
	                  break;
	              case PreparsedElementType.STYLESHEET:
	                  this.styleUrls.push(preparsedElement.hrefAttr);
	                  break;
	              default:
	                  break;
	          }
	          if (preparsedElement.nonBindable) {
	              this.ngNonBindableStackCount++;
	          }
	          visitAll(this, ast.children);
	          if (preparsedElement.nonBindable) {
	              this.ngNonBindableStackCount--;
	          }
	          return null;
	      };
	      TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	      return TemplatePreparseVisitor;
	  }());
	  function _cloneDirectiveWithTemplate(directive, template) {
	      return new CompileDirectiveMetadata({
	          type: directive.type,
	          isComponent: directive.isComponent,
	          selector: directive.selector,
	          exportAs: directive.exportAs,
	          changeDetection: directive.changeDetection,
	          inputs: directive.inputs,
	          outputs: directive.outputs,
	          hostListeners: directive.hostListeners,
	          hostProperties: directive.hostProperties,
	          hostAttributes: directive.hostAttributes,
	          providers: directive.providers,
	          viewProviders: directive.viewProviders,
	          queries: directive.queries,
	          viewQueries: directive.viewQueries,
	          entryComponents: directive.entryComponents,
	          template: template
	      });
	  }

	  function _isDirectiveMetadata(type) {
	      return type instanceof _angular_core.Directive;
	  }
	  /*
	   * Resolve a `Type` for {@link Directive}.
	   *
	   * This interface can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   */
	  var DirectiveResolver = (function () {
	      function DirectiveResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      /**
	       * Return {@link Directive} for a given `Type`.
	       */
	      DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          if (isPresent(typeMetadata)) {
	              var metadata = typeMetadata.find(_isDirectiveMetadata);
	              if (isPresent(metadata)) {
	                  var propertyMetadata = this._reflector.propMetadata(type);
	                  return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	              }
	          }
	          if (throwIfNotFound) {
	              throw new Error("No Directive annotation found on " + stringify(type));
	          }
	          return null;
	      };
	      DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	          var inputs = [];
	          var outputs = [];
	          var host = {};
	          var queries = {};
	          StringMapWrapper.forEach(propertyMetadata, function (metadata, propName) {
	              metadata.forEach(function (a) {
	                  if (a instanceof _angular_core.Input) {
	                      if (isPresent(a.bindingPropertyName)) {
	                          inputs.push(propName + ": " + a.bindingPropertyName);
	                      }
	                      else {
	                          inputs.push(propName);
	                      }
	                  }
	                  else if (a instanceof _angular_core.Output) {
	                      var output = a;
	                      if (isPresent(output.bindingPropertyName)) {
	                          outputs.push(propName + ": " + output.bindingPropertyName);
	                      }
	                      else {
	                          outputs.push(propName);
	                      }
	                  }
	                  else if (a instanceof _angular_core.HostBinding) {
	                      var hostBinding = a;
	                      if (isPresent(hostBinding.hostPropertyName)) {
	                          host[("[" + hostBinding.hostPropertyName + "]")] = propName;
	                      }
	                      else {
	                          host[("[" + propName + "]")] = propName;
	                      }
	                  }
	                  else if (a instanceof _angular_core.HostListener) {
	                      var hostListener = a;
	                      var args = isPresent(hostListener.args) ? hostListener.args.join(', ') : '';
	                      host[("(" + hostListener.eventName + ")")] = propName + "(" + args + ")";
	                  }
	                  else if (a instanceof _angular_core.Query) {
	                      queries[propName] = a;
	                  }
	              });
	          });
	          return this._merge(dm, inputs, outputs, host, queries, directiveType);
	      };
	      DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };
	      DirectiveResolver.prototype._merge = function (dm, inputs, outputs, host, queries, directiveType) {
	          var _this = this;
	          var mergedInputs;
	          if (isPresent(dm.inputs)) {
	              var inputNames_1 = dm.inputs.map(function (def) { return _this._extractPublicName(def); });
	              inputs.forEach(function (inputDef) {
	                  var publicName = _this._extractPublicName(inputDef);
	                  if (inputNames_1.indexOf(publicName) > -1) {
	                      throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
	                  }
	              });
	              mergedInputs = dm.inputs.concat(inputs);
	          }
	          else {
	              mergedInputs = inputs;
	          }
	          var mergedOutputs;
	          if (isPresent(dm.outputs)) {
	              var outputNames_1 = dm.outputs.map(function (def) { return _this._extractPublicName(def); });
	              outputs.forEach(function (outputDef) {
	                  var publicName = _this._extractPublicName(outputDef);
	                  if (outputNames_1.indexOf(publicName) > -1) {
	                      throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
	                  }
	              });
	              mergedOutputs = dm.outputs.concat(outputs);
	          }
	          else {
	              mergedOutputs = outputs;
	          }
	          var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host;
	          var mergedQueries = isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;
	          if (dm instanceof _angular_core.Component) {
	              return new _angular_core.Component({
	                  selector: dm.selector,
	                  inputs: mergedInputs,
	                  outputs: mergedOutputs,
	                  host: mergedHost,
	                  exportAs: dm.exportAs,
	                  moduleId: dm.moduleId,
	                  queries: mergedQueries,
	                  changeDetection: dm.changeDetection,
	                  providers: dm.providers,
	                  viewProviders: dm.viewProviders,
	                  entryComponents: dm.entryComponents,
	                  template: dm.template,
	                  templateUrl: dm.templateUrl,
	                  styles: dm.styles,
	                  styleUrls: dm.styleUrls,
	                  encapsulation: dm.encapsulation,
	                  animations: dm.animations,
	                  interpolation: dm.interpolation
	              });
	          }
	          else {
	              return new _angular_core.Directive({
	                  selector: dm.selector,
	                  inputs: mergedInputs,
	                  outputs: mergedOutputs,
	                  host: mergedHost,
	                  exportAs: dm.exportAs,
	                  queries: mergedQueries,
	                  providers: dm.providers
	              });
	          }
	      };
	      DirectiveResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveResolver.ctorParameters = [
	          { type: ReflectorReader, },
	      ];
	      return DirectiveResolver;
	  }());

	  var LIFECYCLE_INTERFACES = MapWrapper.createFromPairs([
	      [LifecycleHooks.OnInit, _angular_core.OnInit],
	      [LifecycleHooks.OnDestroy, _angular_core.OnDestroy],
	      [LifecycleHooks.DoCheck, _angular_core.DoCheck],
	      [LifecycleHooks.OnChanges, _angular_core.OnChanges],
	      [LifecycleHooks.AfterContentInit, _angular_core.AfterContentInit],
	      [LifecycleHooks.AfterContentChecked, _angular_core.AfterContentChecked],
	      [LifecycleHooks.AfterViewInit, _angular_core.AfterViewInit],
	      [LifecycleHooks.AfterViewChecked, _angular_core.AfterViewChecked],
	  ]);
	  var LIFECYCLE_PROPS = MapWrapper.createFromPairs([
	      [LifecycleHooks.OnInit, 'ngOnInit'],
	      [LifecycleHooks.OnDestroy, 'ngOnDestroy'],
	      [LifecycleHooks.DoCheck, 'ngDoCheck'],
	      [LifecycleHooks.OnChanges, 'ngOnChanges'],
	      [LifecycleHooks.AfterContentInit, 'ngAfterContentInit'],
	      [LifecycleHooks.AfterContentChecked, 'ngAfterContentChecked'],
	      [LifecycleHooks.AfterViewInit, 'ngAfterViewInit'],
	      [LifecycleHooks.AfterViewChecked, 'ngAfterViewChecked'],
	  ]);
	  function hasLifecycleHook(hook, token) {
	      var lcInterface = LIFECYCLE_INTERFACES.get(hook);
	      var lcProp = LIFECYCLE_PROPS.get(hook);
	      return reflector.hasLifecycleHook(token, lcInterface, lcProp);
	  }

	  function _isNgModuleMetadata(obj) {
	      return obj instanceof _angular_core.NgModule;
	  }
	  /**
	   * Resolves types to {@link NgModule}.
	   */
	  var NgModuleResolver = (function () {
	      function NgModuleResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
	          if (isPresent(ngModuleMeta)) {
	              return ngModuleMeta;
	          }
	          else {
	              if (throwIfNotFound) {
	                  throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
	              }
	              return null;
	          }
	      };
	      NgModuleResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      NgModuleResolver.ctorParameters = [
	          { type: ReflectorReader, },
	      ];
	      return NgModuleResolver;
	  }());

	  function _isPipeMetadata(type) {
	      return type instanceof _angular_core.Pipe;
	  }
	  /**
	   * Resolve a `Type` for {@link Pipe}.
	   *
	   * This interface can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   */
	  var PipeResolver = (function () {
	      function PipeResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      /**
	       * Return {@link Pipe} for a given `Type`.
	       */
	      PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          if (isPresent(metas)) {
	              var annotation = metas.find(_isPipeMetadata);
	              if (isPresent(annotation)) {
	                  return annotation;
	              }
	          }
	          if (throwIfNotFound) {
	              throw new Error("No Pipe decorator found on " + stringify(type));
	          }
	          return null;
	      };
	      PipeResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      PipeResolver.ctorParameters = [
	          { type: ReflectorReader, },
	      ];
	      return PipeResolver;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$14 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var CompileMetadataResolver = (function () {
	      function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._ngModuleResolver = _ngModuleResolver;
	          this._directiveResolver = _directiveResolver;
	          this._pipeResolver = _pipeResolver;
	          this._schemaRegistry = _schemaRegistry;
	          this._reflector = _reflector;
	          this._directiveCache = new Map();
	          this._pipeCache = new Map();
	          this._ngModuleCache = new Map();
	          this._ngModuleOfTypes = new Map();
	          this._anonymousTypes = new Map();
	          this._anonymousTypeIndex = 0;
	      }
	      CompileMetadataResolver.prototype.sanitizeTokenName = function (token) {
	          var identifier = stringify(token);
	          if (identifier.indexOf('(') >= 0) {
	              // case: anonymous functions!
	              var found = this._anonymousTypes.get(token);
	              if (isBlank(found)) {
	                  this._anonymousTypes.set(token, this._anonymousTypeIndex++);
	                  found = this._anonymousTypes.get(token);
	              }
	              identifier = "anonymous_token_" + found + "_";
	          }
	          return sanitizeIdentifier(identifier);
	      };
	      CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	          this._directiveCache.delete(type);
	          this._pipeCache.delete(type);
	          this._ngModuleOfTypes.delete(type);
	          // Clear all of the NgModule as they contain transitive information!
	          this._ngModuleCache.clear();
	      };
	      CompileMetadataResolver.prototype.clearCache = function () {
	          this._directiveCache.clear();
	          this._pipeCache.clear();
	          this._ngModuleCache.clear();
	          this._ngModuleOfTypes.clear();
	      };
	      CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
	          var _this = this;
	          var defs = entry.definitions.map(function (def) { return _this.getAnimationStateMetadata(def); });
	          return new CompileAnimationEntryMetadata(entry.name, defs);
	      };
	      CompileMetadataResolver.prototype.getAnimationStateMetadata = function (value) {
	          if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
	              var styles = this.getAnimationStyleMetadata(value.styles);
	              return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
	          }
	          else if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
	              return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps));
	          }
	          return null;
	      };
	      CompileMetadataResolver.prototype.getAnimationStyleMetadata = function (value) {
	          return new CompileAnimationStyleMetadata(value.offset, value.styles);
	      };
	      CompileMetadataResolver.prototype.getAnimationMetadata = function (value) {
	          var _this = this;
	          if (value instanceof _angular_core.AnimationStyleMetadata) {
	              return this.getAnimationStyleMetadata(value);
	          }
	          else if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
	              return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this.getAnimationStyleMetadata(entry); }));
	          }
	          else if (value instanceof _angular_core.AnimationAnimateMetadata) {
	              var animateData = this
	                  .getAnimationMetadata(value.styles);
	              return new CompileAnimationAnimateMetadata(value.timings, animateData);
	          }
	          else if (value instanceof _angular_core.AnimationWithStepsMetadata) {
	              var steps = value.steps.map(function (step) { return _this.getAnimationMetadata(step); });
	              if (value instanceof _angular_core.AnimationGroupMetadata) {
	                  return new CompileAnimationGroupMetadata(steps);
	              }
	              else {
	                  return new CompileAnimationSequenceMetadata(steps);
	              }
	          }
	          return null;
	      };
	      CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType, throwIfNotFound) {
	          var _this = this;
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          directiveType = _angular_core.resolveForwardRef(directiveType);
	          var meta = this._directiveCache.get(directiveType);
	          if (isBlank(meta)) {
	              var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);
	              if (!dirMeta) {
	                  return null;
	              }
	              var templateMeta = null;
	              var changeDetectionStrategy = null;
	              var viewProviders = [];
	              var moduleUrl = staticTypeModuleUrl(directiveType);
	              var entryComponentMetadata = [];
	              var selector = dirMeta.selector;
	              if (dirMeta instanceof _angular_core.Component) {
	                  var cmpMeta = dirMeta;
	                  assertArrayOfStrings('styles', cmpMeta.styles);
	                  assertInterpolationSymbols('interpolation', cmpMeta.interpolation);
	                  var animations = isPresent(cmpMeta.animations) ?
	                      cmpMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :
	                      null;
	                  assertArrayOfStrings('styles', cmpMeta.styles);
	                  assertArrayOfStrings('styleUrls', cmpMeta.styleUrls);
	                  templateMeta = new CompileTemplateMetadata({
	                      encapsulation: cmpMeta.encapsulation,
	                      template: cmpMeta.template,
	                      templateUrl: cmpMeta.templateUrl,
	                      styles: cmpMeta.styles,
	                      styleUrls: cmpMeta.styleUrls,
	                      animations: animations,
	                      interpolation: cmpMeta.interpolation
	                  });
	                  changeDetectionStrategy = cmpMeta.changeDetection;
	                  if (isPresent(dirMeta.viewProviders)) {
	                      viewProviders = this.getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"");
	                  }
	                  moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);
	                  if (cmpMeta.entryComponents) {
	                      entryComponentMetadata =
	                          flattenArray(cmpMeta.entryComponents)
	                              .map(function (type) { return _this.getTypeMetadata(type, staticTypeModuleUrl(type)); })
	                              .concat(entryComponentMetadata);
	                  }
	                  if (!selector) {
	                      selector = this._schemaRegistry.getDefaultComponentElementName();
	                  }
	              }
	              else {
	                  if (!selector) {
	                      throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
	                  }
	              }
	              var providers = [];
	              if (isPresent(dirMeta.providers)) {
	                  providers = this.getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"");
	              }
	              var queries = [];
	              var viewQueries = [];
	              if (isPresent(dirMeta.queries)) {
	                  queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);
	                  viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);
	              }
	              meta = CompileDirectiveMetadata.create({
	                  selector: selector,
	                  exportAs: dirMeta.exportAs,
	                  isComponent: isPresent(templateMeta),
	                  type: this.getTypeMetadata(directiveType, moduleUrl),
	                  template: templateMeta,
	                  changeDetection: changeDetectionStrategy,
	                  inputs: dirMeta.inputs,
	                  outputs: dirMeta.outputs,
	                  host: dirMeta.host,
	                  providers: providers,
	                  viewProviders: viewProviders,
	                  queries: queries,
	                  viewQueries: viewQueries,
	                  entryComponents: entryComponentMetadata
	              });
	              this._directiveCache.set(directiveType, meta);
	          }
	          return meta;
	      };
	      CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
	          var _this = this;
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          moduleType = _angular_core.resolveForwardRef(moduleType);
	          var compileMeta = this._ngModuleCache.get(moduleType);
	          if (!compileMeta) {
	              var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	              if (!meta) {
	                  return null;
	              }
	              var declaredDirectives_1 = [];
	              var exportedDirectives_1 = [];
	              var declaredPipes_1 = [];
	              var exportedPipes_1 = [];
	              var importedModules_1 = [];
	              var exportedModules_1 = [];
	              var providers_1 = [];
	              var entryComponents_1 = [];
	              var bootstrapComponents = [];
	              var schemas = [];
	              if (meta.imports) {
	                  flattenArray(meta.imports).forEach(function (importedType) {
	                      var importedModuleType;
	                      if (isValidType(importedType)) {
	                          importedModuleType = importedType;
	                      }
	                      else if (importedType && importedType.ngModule) {
	                          var moduleWithProviders = importedType;
	                          importedModuleType = moduleWithProviders.ngModule;
	                          if (moduleWithProviders.providers) {
	                              providers_1.push.apply(providers_1, _this.getProvidersMetadata(moduleWithProviders.providers, entryComponents_1, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
	                          }
	                      }
	                      if (importedModuleType) {
	                          var importedMeta = _this.getNgModuleMetadata(importedModuleType, false);
	                          if (importedMeta === null) {
	                              throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
	                          }
	                          importedModules_1.push(importedMeta);
	                      }
	                      else {
	                          throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
	                      }
	                  });
	              }
	              if (meta.exports) {
	                  flattenArray(meta.exports).forEach(function (exportedType) {
	                      if (!isValidType(exportedType)) {
	                          throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
	                      }
	                      var exportedDirMeta;
	                      var exportedPipeMeta;
	                      var exportedModuleMeta;
	                      if (exportedDirMeta = _this.getDirectiveMetadata(exportedType, false)) {
	                          exportedDirectives_1.push(exportedDirMeta);
	                      }
	                      else if (exportedPipeMeta = _this.getPipeMetadata(exportedType, false)) {
	                          exportedPipes_1.push(exportedPipeMeta);
	                      }
	                      else if (exportedModuleMeta = _this.getNgModuleMetadata(exportedType, false)) {
	                          exportedModules_1.push(exportedModuleMeta);
	                      }
	                      else {
	                          throw new Error("Unexpected " + _this._getTypeDescriptor(exportedType) + " '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
	                      }
	                  });
	              }
	              // Note: This will be modified later, so we rely on
	              // getting a new instance every time!
	              var transitiveModule_1 = this._getTransitiveNgModuleMetadata(importedModules_1, exportedModules_1);
	              if (meta.declarations) {
	                  flattenArray(meta.declarations).forEach(function (declaredType) {
	                      if (!isValidType(declaredType)) {
	                          throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
	                      }
	                      var declaredDirMeta;
	                      var declaredPipeMeta;
	                      if (declaredDirMeta = _this.getDirectiveMetadata(declaredType, false)) {
	                          _this._addDirectiveToModule(declaredDirMeta, moduleType, transitiveModule_1, declaredDirectives_1, true);
	                      }
	                      else if (declaredPipeMeta = _this.getPipeMetadata(declaredType, false)) {
	                          _this._addPipeToModule(declaredPipeMeta, moduleType, transitiveModule_1, declaredPipes_1, true);
	                      }
	                      else {
	                          throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
	                      }
	                  });
	              }
	              // The providers of the module have to go last
	              // so that they overwrite any other provider we already added.
	              if (meta.providers) {
	                  providers_1.push.apply(providers_1, this.getProvidersMetadata(meta.providers, entryComponents_1, "provider for the NgModule '" + stringify(moduleType) + "'"));
	              }
	              if (meta.entryComponents) {
	                  entryComponents_1.push.apply(entryComponents_1, flattenArray(meta.entryComponents)
	                      .map(function (type) { return _this.getTypeMetadata(type, staticTypeModuleUrl(type)); }));
	              }
	              if (meta.bootstrap) {
	                  var typeMetadata = flattenArray(meta.bootstrap).map(function (type) {
	                      if (!isValidType(type)) {
	                          throw new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'");
	                      }
	                      return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
	                  });
	                  bootstrapComponents.push.apply(bootstrapComponents, typeMetadata);
	              }
	              entryComponents_1.push.apply(entryComponents_1, bootstrapComponents);
	              if (meta.schemas) {
	                  schemas.push.apply(schemas, flattenArray(meta.schemas));
	              }
	              (_a = transitiveModule_1.entryComponents).push.apply(_a, entryComponents_1);
	              (_b = transitiveModule_1.providers).push.apply(_b, providers_1);
	              compileMeta = new CompileNgModuleMetadata({
	                  type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
	                  providers: providers_1,
	                  entryComponents: entryComponents_1,
	                  bootstrapComponents: bootstrapComponents,
	                  schemas: schemas,
	                  declaredDirectives: declaredDirectives_1,
	                  exportedDirectives: exportedDirectives_1,
	                  declaredPipes: declaredPipes_1,
	                  exportedPipes: exportedPipes_1,
	                  importedModules: importedModules_1,
	                  exportedModules: exportedModules_1,
	                  transitiveModule: transitiveModule_1,
	                  id: meta.id,
	              });
	              transitiveModule_1.modules.push(compileMeta);
	              this._verifyModule(compileMeta);
	              this._ngModuleCache.set(moduleType, compileMeta);
	          }
	          return compileMeta;
	          var _a, _b;
	      };
	      CompileMetadataResolver.prototype._verifyModule = function (moduleMeta) {
	          moduleMeta.exportedDirectives.forEach(function (dirMeta) {
	              if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.reference)) {
	                  throw new Error("Can't export directive " + stringify(dirMeta.type.reference) + " from " + stringify(moduleMeta.type.reference) + " as it was neither declared nor imported!");
	              }
	          });
	          moduleMeta.exportedPipes.forEach(function (pipeMeta) {
	              if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.reference)) {
	                  throw new Error("Can't export pipe " + stringify(pipeMeta.type.reference) + " from " + stringify(moduleMeta.type.reference) + " as it was neither declared nor imported!");
	              }
	          });
	      };
	      CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	          if (this._directiveResolver.resolve(type, false) !== null) {
	              return 'directive';
	          }
	          else if (this._pipeResolver.resolve(type, false) !== null) {
	              return 'pipe';
	          }
	          else if (this._ngModuleResolver.resolve(type, false) !== null) {
	              return 'module';
	          }
	          else if (type.provide) {
	              return 'provider';
	          }
	          else {
	              return 'value';
	          }
	      };
	      CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	          var oldModule = this._ngModuleOfTypes.get(type);
	          if (oldModule && oldModule !== moduleType) {
	              throw new Error(("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! ") +
	                  ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") +
	                  ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + "."));
	          }
	          this._ngModuleOfTypes.set(type, moduleType);
	      };
	      CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	          // collect `providers` / `entryComponents` from all imported and all exported modules
	          var transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), true);
	          var providers = flattenArray(transitiveModules.map(function (ngModule) { return ngModule.providers; }));
	          var entryComponents = flattenArray(transitiveModules.map(function (ngModule) { return ngModule.entryComponents; }));
	          var transitiveExportedModules = getTransitiveModules(importedModules, false);
	          var directives = flattenArray(transitiveExportedModules.map(function (ngModule) { return ngModule.exportedDirectives; }));
	          var pipes = flattenArray(transitiveExportedModules.map(function (ngModule) { return ngModule.exportedPipes; }));
	          return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes);
	      };
	      CompileMetadataResolver.prototype._addDirectiveToModule = function (dirMeta, moduleType, transitiveModule, declaredDirectives, force) {
	          if (force === void 0) { force = false; }
	          if (force || !transitiveModule.directivesSet.has(dirMeta.type.reference)) {
	              transitiveModule.directivesSet.add(dirMeta.type.reference);
	              transitiveModule.directives.push(dirMeta);
	              declaredDirectives.push(dirMeta);
	              this._addTypeToModule(dirMeta.type.reference, moduleType);
	              return true;
	          }
	          return false;
	      };
	      CompileMetadataResolver.prototype._addPipeToModule = function (pipeMeta, moduleType, transitiveModule, declaredPipes, force) {
	          if (force === void 0) { force = false; }
	          if (force || !transitiveModule.pipesSet.has(pipeMeta.type.reference)) {
	              transitiveModule.pipesSet.add(pipeMeta.type.reference);
	              transitiveModule.pipes.push(pipeMeta);
	              declaredPipes.push(pipeMeta);
	              this._addTypeToModule(pipeMeta.type.reference, moduleType);
	              return true;
	          }
	          return false;
	      };
	      CompileMetadataResolver.prototype.getTypeMetadata = function (type, moduleUrl, dependencies) {
	          if (dependencies === void 0) { dependencies = null; }
	          type = _angular_core.resolveForwardRef(type);
	          return new CompileTypeMetadata({
	              name: this.sanitizeTokenName(type),
	              moduleUrl: moduleUrl,
	              reference: type,
	              diDeps: this.getDependenciesMetadata(type, dependencies),
	              lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, type); }),
	          });
	      };
	      CompileMetadataResolver.prototype.getFactoryMetadata = function (factory, moduleUrl, dependencies) {
	          if (dependencies === void 0) { dependencies = null; }
	          factory = _angular_core.resolveForwardRef(factory);
	          return new CompileFactoryMetadata({
	              name: this.sanitizeTokenName(factory),
	              moduleUrl: moduleUrl,
	              reference: factory,
	              diDeps: this.getDependenciesMetadata(factory, dependencies)
	          });
	      };
	      CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          pipeType = _angular_core.resolveForwardRef(pipeType);
	          var meta = this._pipeCache.get(pipeType);
	          if (isBlank(meta)) {
	              var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);
	              if (!pipeMeta) {
	                  return null;
	              }
	              meta = new CompilePipeMetadata({
	                  type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
	                  name: pipeMeta.name,
	                  pure: pipeMeta.pure
	              });
	              this._pipeCache.set(pipeType, meta);
	          }
	          return meta;
	      };
	      CompileMetadataResolver.prototype.getDependenciesMetadata = function (typeOrFunc, dependencies) {
	          var _this = this;
	          var hasUnknownDeps = false;
	          var params = isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
	          if (isBlank(params)) {
	              params = [];
	          }
	          var dependenciesMetadata = params.map(function (param) {
	              var isAttribute = false;
	              var isHost = false;
	              var isSelf = false;
	              var isSkipSelf = false;
	              var isOptional = false;
	              var query = null;
	              var viewQuery = null;
	              var token = null;
	              if (isArray(param)) {
	                  param.forEach(function (paramEntry) {
	                      if (paramEntry instanceof _angular_core.Host) {
	                          isHost = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Self) {
	                          isSelf = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.SkipSelf) {
	                          isSkipSelf = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Optional) {
	                          isOptional = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Attribute) {
	                          isAttribute = true;
	                          token = paramEntry.attributeName;
	                      }
	                      else if (paramEntry instanceof _angular_core.Query) {
	                          if (paramEntry.isViewQuery) {
	                              viewQuery = paramEntry;
	                          }
	                          else {
	                              query = paramEntry;
	                          }
	                      }
	                      else if (paramEntry instanceof _angular_core.Inject) {
	                          token = paramEntry.token;
	                      }
	                      else if (isValidType(paramEntry) && isBlank(token)) {
	                          token = paramEntry;
	                      }
	                  });
	              }
	              else {
	                  token = param;
	              }
	              if (isBlank(token)) {
	                  hasUnknownDeps = true;
	                  return null;
	              }
	              return new CompileDiDependencyMetadata({
	                  isAttribute: isAttribute,
	                  isHost: isHost,
	                  isSelf: isSelf,
	                  isSkipSelf: isSkipSelf,
	                  isOptional: isOptional,
	                  query: isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
	                  viewQuery: isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
	                  token: _this.getTokenMetadata(token)
	              });
	          });
	          if (hasUnknownDeps) {
	              var depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringify(dep.token) : '?'; })
	                  .join(', ');
	              throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
	          }
	          return dependenciesMetadata;
	      };
	      CompileMetadataResolver.prototype.getTokenMetadata = function (token) {
	          token = _angular_core.resolveForwardRef(token);
	          var compileToken;
	          if (isString(token)) {
	              compileToken = new CompileTokenMetadata({ value: token });
	          }
	          else {
	              compileToken = new CompileTokenMetadata({
	                  identifier: new CompileIdentifierMetadata({
	                      reference: token,
	                      name: this.sanitizeTokenName(token),
	                      moduleUrl: staticTypeModuleUrl(token)
	                  })
	              });
	          }
	          return compileToken;
	      };
	      CompileMetadataResolver.prototype.getProvidersMetadata = function (providers, targetEntryComponents, debugInfo) {
	          var _this = this;
	          var compileProviders = [];
	          providers.forEach(function (provider, providerIdx) {
	              provider = _angular_core.resolveForwardRef(provider);
	              if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
	                  provider = new ProviderMeta(provider.provide, provider);
	              }
	              var compileProvider;
	              if (isArray(provider)) {
	                  compileProvider = _this.getProvidersMetadata(provider, targetEntryComponents, debugInfo);
	              }
	              else if (provider instanceof ProviderMeta) {
	                  var tokenMeta = _this.getTokenMetadata(provider.token);
	                  if (tokenMeta.reference ===
	                      resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
	                      targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
	                  }
	                  else {
	                      compileProvider = _this.getProviderMetadata(provider);
	                  }
	              }
	              else if (isValidType(provider)) {
	                  compileProvider = _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
	              }
	              else {
	                  var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                      if (seenProviderIdx < providerIdx) {
	                          soFar.push("" + stringify(seenProvider));
	                      }
	                      else if (seenProviderIdx == providerIdx) {
	                          soFar.push("?" + stringify(seenProvider) + "?");
	                      }
	                      else if (seenProviderIdx == providerIdx + 1) {
	                          soFar.push('...');
	                      }
	                      return soFar;
	                  }, [])
	                      .join(', ');
	                  throw new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
	              }
	              if (compileProvider) {
	                  compileProviders.push(compileProvider);
	              }
	          });
	          return compileProviders;
	      };
	      CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider) {
	          var _this = this;
	          var components = [];
	          var collectedIdentifiers = [];
	          if (provider.useFactory || provider.useExisting || provider.useClass) {
	              throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
	          }
	          if (!provider.multi) {
	              throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
	          }
	          convertToCompileValue(provider.useValue, collectedIdentifiers);
	          collectedIdentifiers.forEach(function (identifier) {
	              var dirMeta = _this.getDirectiveMetadata(identifier.reference, false);
	              if (dirMeta) {
	                  components.push(dirMeta.type);
	              }
	          });
	          return components;
	      };
	      CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	          var compileDeps;
	          var compileTypeMetadata = null;
	          var compileFactoryMetadata = null;
	          if (isPresent(provider.useClass)) {
	              compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
	              compileDeps = compileTypeMetadata.diDeps;
	          }
	          else if (isPresent(provider.useFactory)) {
	              compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
	              compileDeps = compileFactoryMetadata.diDeps;
	          }
	          return new CompileProviderMetadata({
	              token: this.getTokenMetadata(provider.token),
	              useClass: compileTypeMetadata,
	              useValue: convertToCompileValue(provider.useValue, []),
	              useFactory: compileFactoryMetadata,
	              useExisting: isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) :
	                  null,
	              deps: compileDeps,
	              multi: provider.multi
	          });
	      };
	      CompileMetadataResolver.prototype.getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	          var _this = this;
	          var res = [];
	          StringMapWrapper.forEach(queries, function (query, propertyName) {
	              if (query.isViewQuery === isViewQuery) {
	                  res.push(_this.getQueryMetadata(query, propertyName, directiveType));
	              }
	          });
	          return res;
	      };
	      CompileMetadataResolver.prototype._queryVarBindings = function (selector) {
	          return StringWrapper.split(selector, /\s*,\s*/g);
	      };
	      CompileMetadataResolver.prototype.getQueryMetadata = function (q, propertyName, typeOrFunc) {
	          var _this = this;
	          var selectors;
	          if (isString(q.selector)) {
	              selectors = this._queryVarBindings(q.selector).map(function (varName) { return _this.getTokenMetadata(varName); });
	          }
	          else {
	              if (!isPresent(q.selector)) {
	                  throw new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
	              }
	              selectors = [this.getTokenMetadata(q.selector)];
	          }
	          return new CompileQueryMetadata({
	              selectors: selectors,
	              first: q.first,
	              descendants: q.descendants,
	              propertyName: propertyName,
	              read: isPresent(q.read) ? this.getTokenMetadata(q.read) : null
	          });
	      };
	      CompileMetadataResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      CompileMetadataResolver.ctorParameters = [
	          { type: NgModuleResolver, },
	          { type: DirectiveResolver, },
	          { type: PipeResolver, },
	          { type: ElementSchemaRegistry, },
	          { type: ReflectorReader, },
	      ];
	      return CompileMetadataResolver;
	  }());
	  function getTransitiveModules(modules, includeImports, targetModules, visitedModules) {
	      if (targetModules === void 0) { targetModules = []; }
	      if (visitedModules === void 0) { visitedModules = new Set(); }
	      modules.forEach(function (ngModule) {
	          if (!visitedModules.has(ngModule.type.reference)) {
	              visitedModules.add(ngModule.type.reference);
	              var nestedModules = includeImports ?
	                  ngModule.importedModules.concat(ngModule.exportedModules) :
	                  ngModule.exportedModules;
	              getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules);
	              // Add after recursing so imported/exported modules are before the module itself.
	              // This is important for overwriting providers of imported modules!
	              targetModules.push(ngModule);
	          }
	      });
	      return targetModules;
	  }
	  function flattenArray(tree, out) {
	      if (out === void 0) { out = []; }
	      if (tree) {
	          for (var i = 0; i < tree.length; i++) {
	              var item = _angular_core.resolveForwardRef(tree[i]);
	              if (isArray(item)) {
	                  flattenArray(item, out);
	              }
	              else {
	                  out.push(item);
	              }
	          }
	      }
	      return out;
	  }
	  function isValidType(value) {
	      return isStaticSymbol(value) || (value instanceof _angular_core.Type);
	  }
	  function staticTypeModuleUrl(value) {
	      return isStaticSymbol(value) ? value.filePath : null;
	  }
	  function componentModuleUrl(reflector, type, cmpMetadata) {
	      if (isStaticSymbol(type)) {
	          return staticTypeModuleUrl(type);
	      }
	      if (isPresent(cmpMetadata.moduleId)) {
	          var moduleId = cmpMetadata.moduleId;
	          var scheme = getUrlScheme(moduleId);
	          return isPresent(scheme) && scheme.length > 0 ? moduleId :
	              "package:" + moduleId + MODULE_SUFFIX;
	      }
	      return reflector.importUri(type);
	  }
	  function convertToCompileValue(value, targetIdentifiers) {
	      return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	  }
	  var _CompileValueConverter = (function (_super) {
	      __extends$14(_CompileValueConverter, _super);
	      function _CompileValueConverter() {
	          _super.apply(this, arguments);
	      }
	      _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	          var identifier;
	          if (isStaticSymbol(value)) {
	              identifier = new CompileIdentifierMetadata({ name: value.name, moduleUrl: value.filePath, reference: value });
	          }
	          else {
	              identifier = new CompileIdentifierMetadata({ reference: value });
	          }
	          targetIdentifiers.push(identifier);
	          return identifier;
	      };
	      return _CompileValueConverter;
	  }(ValueTransformer));

	  var ComponentFactoryDependency$1 = (function () {
	      function ComponentFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ComponentFactoryDependency;
	  }());
	  var NgModuleCompileResult = (function () {
	      function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	          this.statements = statements;
	          this.ngModuleFactoryVar = ngModuleFactoryVar;
	          this.dependencies = dependencies;
	      }
	      return NgModuleCompileResult;
	  }());
	  var NgModuleCompiler = (function () {
	      function NgModuleCompiler() {
	      }
	      NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	          var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ?
	              "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl :
	              "in NgModule " + ngModuleMeta.type.name;
	          var sourceFile = new ParseSourceFile('', sourceFileName);
	          var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	          var deps = [];
	          var bootstrapComponentFactories = [];
	          var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	              var id = new CompileIdentifierMetadata({ name: entryComponent.name });
	              if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
	                  bootstrapComponentFactories.push(id);
	              }
	              deps.push(new ComponentFactoryDependency$1(entryComponent, id));
	              return id;
	          });
	          var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	          var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	          providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	          var injectorClass = builder.build();
	          var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
	          var ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	              .set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory))
	              .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(resolveIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]);
	          var stmts = [injectorClass, ngModuleFactoryStmt];
	          if (ngModuleMeta.id) {
	              var registerFactoryStmt = importExpr(resolveIdentifier(Identifiers.RegisterModuleFactoryFn))
	                  .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                  .toStmt();
	              stmts.push(registerFactoryStmt);
	          }
	          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	      };
	      NgModuleCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      NgModuleCompiler.ctorParameters = [];
	      return NgModuleCompiler;
	  }());
	  var _InjectorBuilder = (function () {
	      function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	          this._ngModuleMeta = _ngModuleMeta;
	          this._entryComponentFactories = _entryComponentFactories;
	          this._bootstrapComponentFactories = _bootstrapComponentFactories;
	          this._sourceSpan = _sourceSpan;
	          this._tokens = [];
	          this._instances = new Map();
	          this._fields = [];
	          this._createStmts = [];
	          this._destroyStmts = [];
	          this._getters = [];
	      }
	      _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	          var _this = this;
	          var providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	          var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
	          var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	              this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
	          }
	          this._tokens.push(resolvedProvider.token);
	          this._instances.set(resolvedProvider.token.reference, instance);
	      };
	      _InjectorBuilder.prototype.build = function () {
	          var _this = this;
	          var getMethodStmts = this._tokens.map(function (token) {
	              var providerExpr = _this._instances.get(token.reference);
	              return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	          });
	          var methods = [
	              new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
	              new ClassMethod('getInternal', [
	                  new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),
	                  new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)
	              ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE),
	              new ClassMethod('destroyInternal', [], this._destroyStmts),
	          ];
	          var ctor = new ClassMethod(null, [new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector)))], [SUPER_EXPR
	                  .callFn([
	                  variable(InjectorProps.parent.name),
	                  literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	                  literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	              ])
	                  .toStmt()]);
	          var injClassName = this._ngModuleMeta.type.name + "Injector";
	          return new ClassStmt(injClassName, importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]), this._fields, this._getters, ctor, methods);
	      };
	      _InjectorBuilder.prototype._getProviderValue = function (provider) {
	          var _this = this;
	          var result;
	          if (isPresent(provider.useExisting)) {
	              result = this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }));
	          }
	          else if (isPresent(provider.useFactory)) {
	              var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
	              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	              result = importExpr(provider.useFactory).callFn(depsExpr);
	          }
	          else if (isPresent(provider.useClass)) {
	              var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
	              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	              result =
	                  importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	          }
	          else {
	              result = convertValueToOutputAst(provider.useValue);
	          }
	          return result;
	      };
	      _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	          var resolvedProviderValueExpr;
	          var type;
	          if (isMulti) {
	              resolvedProviderValueExpr = literalArr(providerValueExpressions);
	              type = new ArrayType(DYNAMIC_TYPE);
	          }
	          else {
	              resolvedProviderValueExpr = providerValueExpressions[0];
	              type = providerValueExpressions[0].type;
	          }
	          if (isBlank(type)) {
	              type = DYNAMIC_TYPE;
	          }
	          if (isEager) {
	              this._fields.push(new ClassField(propName, type));
	              this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	          }
	          else {
	              var internalField = "_" + propName;
	              this._fields.push(new ClassField(internalField, type));
	              // Note: Equals is important for JS so that it also checks the undefined case!
	              var getterStmts = [
	                  new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
	                  new ReturnStatement(THIS_EXPR.prop(internalField))
	              ];
	              this._getters.push(new ClassGetter(propName, getterStmts, type));
	          }
	          return THIS_EXPR.prop(propName);
	      };
	      _InjectorBuilder.prototype._getDependency = function (dep) {
	          var result = null;
	          if (dep.isValue) {
	              result = literal(dep.value);
	          }
	          if (!dep.isSkipSelf) {
	              if (dep.token &&
	                  (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||
	                      dep.token.reference ===
	                          resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
	                  result = THIS_EXPR;
	              }
	              if (isBlank(result)) {
	                  result = this._instances.get(dep.token.reference);
	              }
	          }
	          if (isBlank(result)) {
	              var args = [createDiTokenExpression(dep.token)];
	              if (dep.isOptional) {
	                  args.push(NULL_EXPR);
	              }
	              result = InjectorProps.parent.callMethod('get', args);
	          }
	          return result;
	      };
	      return _InjectorBuilder;
	  }());
	  var InjectorProps = (function () {
	      function InjectorProps() {
	      }
	      InjectorProps.parent = THIS_EXPR.prop('parent');
	      return InjectorProps;
	  }());
	  var InjectMethodVars$1 = (function () {
	      function InjectMethodVars() {
	      }
	      InjectMethodVars.token = variable('token');
	      InjectMethodVars.notFoundResult = variable('notFoundResult');
	      return InjectMethodVars;
	  }());

	  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	  var CATCH_ERROR_VAR$2 = variable('error');
	  var CATCH_STACK_VAR$2 = variable('stack');
	  var _EmittedLine = (function () {
	      function _EmittedLine(indent) {
	          this.indent = indent;
	          this.parts = [];
	      }
	      return _EmittedLine;
	  }());
	  var EmitterVisitorContext = (function () {
	      function EmitterVisitorContext(_exportedVars, _indent) {
	          this._exportedVars = _exportedVars;
	          this._indent = _indent;
	          this._classes = [];
	          this._lines = [new _EmittedLine(_indent)];
	      }
	      EmitterVisitorContext.createRoot = function (exportedVars) {
	          return new EmitterVisitorContext(exportedVars, 0);
	      };
	      Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	          get: function () { return this._lines[this._lines.length - 1]; },
	          enumerable: true,
	          configurable: true
	      });
	      EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	      EmitterVisitorContext.prototype.println = function (lastPart) {
	          if (lastPart === void 0) { lastPart = ''; }
	          this.print(lastPart, true);
	      };
	      EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	      EmitterVisitorContext.prototype.print = function (part, newLine) {
	          if (newLine === void 0) { newLine = false; }
	          if (part.length > 0) {
	              this._currentLine.parts.push(part);
	          }
	          if (newLine) {
	              this._lines.push(new _EmittedLine(this._indent));
	          }
	      };
	      EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	          if (this.lineIsEmpty()) {
	              this._lines.pop();
	          }
	      };
	      EmitterVisitorContext.prototype.incIndent = function () {
	          this._indent++;
	          this._currentLine.indent = this._indent;
	      };
	      EmitterVisitorContext.prototype.decIndent = function () {
	          this._indent--;
	          this._currentLine.indent = this._indent;
	      };
	      EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	      EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	      Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	          get: function () {
	              return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      EmitterVisitorContext.prototype.toSource = function () {
	          var lines = this._lines;
	          if (lines[lines.length - 1].parts.length === 0) {
	              lines = lines.slice(0, lines.length - 1);
	          }
	          return lines
	              .map(function (line) {
	              if (line.parts.length > 0) {
	                  return _createIndent(line.indent) + line.parts.join('');
	              }
	              else {
	                  return '';
	              }
	          })
	              .join('\n');
	      };
	      return EmitterVisitorContext;
	  }());
	  var AbstractEmitterVisitor = (function () {
	      function AbstractEmitterVisitor(_escapeDollarInStrings) {
	          this._escapeDollarInStrings = _escapeDollarInStrings;
	      }
	      AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	          stmt.expr.visitExpression(this, ctx);
	          ctx.println(';');
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	          ctx.print("return ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(';');
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	          ctx.print("if (");
	          stmt.condition.visitExpression(this, ctx);
	          ctx.print(") {");
	          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
	          if (stmt.trueCase.length <= 1 && !hasElseCase) {
	              ctx.print(" ");
	              this.visitAllStatements(stmt.trueCase, ctx);
	              ctx.removeEmptyLastLine();
	              ctx.print(" ");
	          }
	          else {
	              ctx.println();
	              ctx.incIndent();
	              this.visitAllStatements(stmt.trueCase, ctx);
	              ctx.decIndent();
	              if (hasElseCase) {
	                  ctx.println("} else {");
	                  ctx.incIndent();
	                  this.visitAllStatements(stmt.falseCase, ctx);
	                  ctx.decIndent();
	              }
	          }
	          ctx.println("}");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	          ctx.print("throw ");
	          stmt.error.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	          var lines = stmt.comment.split('\n');
	          lines.forEach(function (line) { ctx.println("// " + line); });
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	          var lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          ctx.print(expr.name + " = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	          var lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          expr.receiver.visitExpression(this, ctx);
	          ctx.print("[");
	          expr.index.visitExpression(this, ctx);
	          ctx.print("] = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	          var lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          expr.receiver.visitExpression(this, ctx);
	          ctx.print("." + expr.name + " = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	          expr.receiver.visitExpression(this, ctx);
	          var name = expr.name;
	          if (isPresent(expr.builtin)) {
	              name = this.getBuiltinMethodName(expr.builtin);
	              if (isBlank(name)) {
	                  // some builtins just mean to skip the call.
	                  return null;
	              }
	          }
	          ctx.print("." + name + "(");
	          this.visitAllExpressions(expr.args, ctx, ",");
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	          expr.fn.visitExpression(this, ctx);
	          ctx.print("(");
	          this.visitAllExpressions(expr.args, ctx, ',');
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	          var varName = ast.name;
	          if (isPresent(ast.builtin)) {
	              switch (ast.builtin) {
	                  case BuiltinVar.Super:
	                      varName = 'super';
	                      break;
	                  case BuiltinVar.This:
	                      varName = 'this';
	                      break;
	                  case BuiltinVar.CatchError:
	                      varName = CATCH_ERROR_VAR$2.name;
	                      break;
	                  case BuiltinVar.CatchStack:
	                      varName = CATCH_STACK_VAR$2.name;
	                      break;
	                  default:
	                      throw new Error("Unknown builtin variable " + ast.builtin);
	              }
	          }
	          ctx.print(varName);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	          ctx.print("new ");
	          ast.classExpr.visitExpression(this, ctx);
	          ctx.print("(");
	          this.visitAllExpressions(ast.args, ctx, ',');
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx, absentValue) {
	          if (absentValue === void 0) { absentValue = 'null'; }
	          var value = ast.value;
	          if (isString(value)) {
	              ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
	          }
	          else if (isBlank(value)) {
	              ctx.print(absentValue);
	          }
	          else {
	              ctx.print("" + value);
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	          ctx.print("(");
	          ast.condition.visitExpression(this, ctx);
	          ctx.print('? ');
	          ast.trueCase.visitExpression(this, ctx);
	          ctx.print(': ');
	          ast.falseCase.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	          ctx.print('!');
	          ast.condition.visitExpression(this, ctx);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	          var opStr;
	          switch (ast.operator) {
	              case BinaryOperator.Equals:
	                  opStr = '==';
	                  break;
	              case BinaryOperator.Identical:
	                  opStr = '===';
	                  break;
	              case BinaryOperator.NotEquals:
	                  opStr = '!=';
	                  break;
	              case BinaryOperator.NotIdentical:
	                  opStr = '!==';
	                  break;
	              case BinaryOperator.And:
	                  opStr = '&&';
	                  break;
	              case BinaryOperator.Or:
	                  opStr = '||';
	                  break;
	              case BinaryOperator.Plus:
	                  opStr = '+';
	                  break;
	              case BinaryOperator.Minus:
	                  opStr = '-';
	                  break;
	              case BinaryOperator.Divide:
	                  opStr = '/';
	                  break;
	              case BinaryOperator.Multiply:
	                  opStr = '*';
	                  break;
	              case BinaryOperator.Modulo:
	                  opStr = '%';
	                  break;
	              case BinaryOperator.Lower:
	                  opStr = '<';
	                  break;
	              case BinaryOperator.LowerEquals:
	                  opStr = '<=';
	                  break;
	              case BinaryOperator.Bigger:
	                  opStr = '>';
	                  break;
	              case BinaryOperator.BiggerEquals:
	                  opStr = '>=';
	                  break;
	              default:
	                  throw new Error("Unknown operator " + ast.operator);
	          }
	          ctx.print("(");
	          ast.lhs.visitExpression(this, ctx);
	          ctx.print(" " + opStr + " ");
	          ast.rhs.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	          ast.receiver.visitExpression(this, ctx);
	          ctx.print(".");
	          ctx.print(ast.name);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	          ast.receiver.visitExpression(this, ctx);
	          ctx.print("[");
	          ast.index.visitExpression(this, ctx);
	          ctx.print("]");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          var useNewLine = ast.entries.length > 1;
	          ctx.print("[", useNewLine);
	          ctx.incIndent();
	          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	          ctx.decIndent();
	          ctx.print("]", useNewLine);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	          var _this = this;
	          var useNewLine = ast.entries.length > 1;
	          ctx.print("{", useNewLine);
	          ctx.incIndent();
	          this.visitAllObjects(function (entry /** TODO #9100 */) {
	              ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
	              entry[1].visitExpression(_this, ctx);
	          }, ast.entries, ctx, ',', useNewLine);
	          ctx.decIndent();
	          ctx.print("}", useNewLine);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	          var _this = this;
	          if (newLine === void 0) { newLine = false; }
	          this.visitAllObjects(function (expr /** TODO #9100 */) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	      };
	      AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	          if (newLine === void 0) { newLine = false; }
	          for (var i = 0; i < expressions.length; i++) {
	              if (i > 0) {
	                  ctx.print(separator, newLine);
	              }
	              handler(expressions[i]);
	          }
	          if (newLine) {
	              ctx.println();
	          }
	      };
	      AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	          var _this = this;
	          statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	      };
	      return AbstractEmitterVisitor;
	  }());
	  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	      if (alwaysQuote === void 0) { alwaysQuote = true; }
	      if (isBlank(input)) {
	          return null;
	      }
	      var body = StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function (match /** TODO #9100 */) {
	          if (match[0] == '$') {
	              return escapeDollar ? '\\$' : '$';
	          }
	          else if (match[0] == '\n') {
	              return '\\n';
	          }
	          else if (match[0] == '\r') {
	              return '\\r';
	          }
	          else {
	              return "\\" + match[0];
	          }
	      });
	      var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	      return requiresQuotes ? "'" + body + "'" : body;
	  }
	  function _createIndent(count) {
	      var res = '';
	      for (var i = 0; i < count; i++) {
	          res += '  ';
	      }
	      return res;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$15 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var _debugModuleUrl = 'asset://debug/lib';
	  function debugOutputAstAsTypeScript(ast) {
	      var converter = new _TsEmitterVisitor(_debugModuleUrl);
	      var ctx = EmitterVisitorContext.createRoot([]);
	      var asts;
	      if (isArray(ast)) {
	          asts = ast;
	      }
	      else {
	          asts = [ast];
	      }
	      asts.forEach(function (ast) {
	          if (ast instanceof Statement) {
	              ast.visitStatement(converter, ctx);
	          }
	          else if (ast instanceof Expression) {
	              ast.visitExpression(converter, ctx);
	          }
	          else if (ast instanceof Type$1) {
	              ast.visitType(converter, ctx);
	          }
	          else {
	              throw new Error("Don't know how to print debug info for " + ast);
	          }
	      });
	      return ctx.toSource();
	  }
	  var TypeScriptEmitter = (function () {
	      function TypeScriptEmitter(_importGenerator) {
	          this._importGenerator = _importGenerator;
	      }
	      TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	          var _this = this;
	          var converter = new _TsEmitterVisitor(moduleUrl);
	          var ctx = EmitterVisitorContext.createRoot(exportedVars);
	          converter.visitAllStatements(stmts, ctx);
	          var srcParts = [];
	          converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	              // Note: can't write the real word for import as it screws up system.js auto detection...
	              srcParts.push("imp" +
	                  ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
	          });
	          srcParts.push(ctx.toSource());
	          return srcParts.join('\n');
	      };
	      return TypeScriptEmitter;
	  }());
	  var _TsEmitterVisitor = (function (_super) {
	      __extends$15(_TsEmitterVisitor, _super);
	      function _TsEmitterVisitor(_moduleUrl) {
	          _super.call(this, false);
	          this._moduleUrl = _moduleUrl;
	          this.importsWithPrefixes = new Map();
	      }
	      _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	          if (defaultType === void 0) { defaultType = 'any'; }
	          if (isPresent(t)) {
	              t.visitType(this, ctx);
	          }
	          else {
	              ctx.print(defaultType);
	          }
	      };
	      _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	          _super.prototype.visitLiteralExpr.call(this, ast, ctx, '(null as any)');
	      };
	      _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	          this._visitIdentifier(ast.value, ast.typeParams, ctx);
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          if (stmt.hasModifier(StmtModifier.Final)) {
	              ctx.print("const");
	          }
	          else {
	              ctx.print("var");
	          }
	          ctx.print(" " + stmt.name + ":");
	          this.visitType(stmt.type, ctx);
	          ctx.print(" = ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	          ctx.print("(<");
	          ast.type.visitType(this, ctx);
	          ctx.print(">");
	          ast.value.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var _this = this;
	          ctx.pushClass(stmt);
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          ctx.print("class " + stmt.name);
	          if (isPresent(stmt.parent)) {
	              ctx.print(" extends ");
	              stmt.parent.visitExpression(this, ctx);
	          }
	          ctx.println(" {");
	          ctx.incIndent();
	          stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	          if (isPresent(stmt.constructorMethod)) {
	              this._visitClassConstructor(stmt, ctx);
	          }
	          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	          stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	          ctx.decIndent();
	          ctx.println("}");
	          ctx.popClass();
	          return null;
	      };
	      _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	          if (field.hasModifier(StmtModifier.Private)) {
	              // comment out as a workaround for #10967
	              ctx.print("/*private*/ ");
	          }
	          ctx.print(field.name);
	          ctx.print(':');
	          this.visitType(field.type, ctx);
	          ctx.println(";");
	      };
	      _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	          if (getter.hasModifier(StmtModifier.Private)) {
	              ctx.print("private ");
	          }
	          ctx.print("get " + getter.name + "()");
	          ctx.print(':');
	          this.visitType(getter.type, ctx);
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(getter.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	          ctx.print("constructor(");
	          this._visitParams(stmt.constructorMethod.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.constructorMethod.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	          if (method.hasModifier(StmtModifier.Private)) {
	              ctx.print("private ");
	          }
	          ctx.print(method.name + "(");
	          this._visitParams(method.params, ctx);
	          ctx.print("):");
	          this.visitType(method.type, ctx, 'void');
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(method.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	          ctx.print("(");
	          this._visitParams(ast.params, ctx);
	          ctx.print("):");
	          this.visitType(ast.type, ctx, 'void');
	          ctx.println(" => {");
	          ctx.incIndent();
	          this.visitAllStatements(ast.statements, ctx);
	          ctx.decIndent();
	          ctx.print("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          ctx.print("function " + stmt.name + "(");
	          this._visitParams(stmt.params, ctx);
	          ctx.print("):");
	          this.visitType(stmt.type, ctx, 'void');
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.statements, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          ctx.println("try {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.bodyStmts, ctx);
	          ctx.decIndent();
	          ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
	          ctx.incIndent();
	          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [
	                  StmtModifier.Final
	              ])].concat(stmt.catchStmts);
	          this.visitAllStatements(catchStmts, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	          var typeStr;
	          switch (type.name) {
	              case BuiltinTypeName.Bool:
	                  typeStr = 'boolean';
	                  break;
	              case BuiltinTypeName.Dynamic:
	                  typeStr = 'any';
	                  break;
	              case BuiltinTypeName.Function:
	                  typeStr = 'Function';
	                  break;
	              case BuiltinTypeName.Number:
	                  typeStr = 'number';
	                  break;
	              case BuiltinTypeName.Int:
	                  typeStr = 'number';
	                  break;
	              case BuiltinTypeName.String:
	                  typeStr = 'string';
	                  break;
	              default:
	                  throw new Error("Unsupported builtin type " + type.name);
	          }
	          ctx.print(typeStr);
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {
	          this._visitIdentifier(ast.value, ast.typeParams, ctx);
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	          this.visitType(type.of, ctx);
	          ctx.print("[]");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	          ctx.print("{[key: string]:");
	          this.visitType(type.valueType, ctx);
	          ctx.print("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	          var name;
	          switch (method) {
	              case BuiltinMethod.ConcatArray:
	                  name = 'concat';
	                  break;
	              case BuiltinMethod.SubscribeObservable:
	                  name = 'subscribe';
	                  break;
	              case BuiltinMethod.Bind:
	                  name = 'bind';
	                  break;
	              default:
	                  throw new Error("Unknown builtin method: " + method);
	          }
	          return name;
	      };
	      _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	          var _this = this;
	          this.visitAllObjects(function (param /** TODO #9100 */) {
	              ctx.print(param.name);
	              ctx.print(':');
	              _this.visitType(param.type, ctx);
	          }, params, ctx, ',');
	      };
	      _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	          var _this = this;
	          if (isBlank(value.name)) {
	              throw new Error("Internal error: unknown identifier " + value);
	          }
	          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
	              var prefix = this.importsWithPrefixes.get(value.moduleUrl);
	              if (isBlank(prefix)) {
	                  prefix = "import" + this.importsWithPrefixes.size;
	                  this.importsWithPrefixes.set(value.moduleUrl, prefix);
	              }
	              ctx.print(prefix + ".");
	          }
	          if (value.reference && value.reference.members) {
	              ctx.print(value.reference.name);
	              ctx.print('.');
	              ctx.print(value.reference.members.join('.'));
	          }
	          else {
	              ctx.print(value.name);
	          }
	          if (isPresent(typeParams) && typeParams.length > 0) {
	              ctx.print("<");
	              this.visitAllObjects(function (type /** TODO #9100 */) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	              ctx.print(">");
	          }
	      };
	      return _TsEmitterVisitor;
	  }(AbstractEmitterVisitor));

	  function interpretStatements(statements, resultVar) {
	      var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
	      var ctx = new _ExecutionContext(null, null, null, new Map());
	      var visitor = new StatementInterpreter();
	      var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	      return isPresent(result) ? result.value : null;
	  }
	  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	      var childCtx = ctx.createChildWihtLocalVars();
	      for (var i = 0; i < varNames.length; i++) {
	          childCtx.vars.set(varNames[i], varValues[i]);
	      }
	      var result = visitor.visitAllStatements(statements, childCtx);
	      return isPresent(result) ? result.value : null;
	  }
	  var _ExecutionContext = (function () {
	      function _ExecutionContext(parent, instance, className, vars) {
	          this.parent = parent;
	          this.instance = instance;
	          this.className = className;
	          this.vars = vars;
	      }
	      _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	          return new _ExecutionContext(this, this.instance, this.className, new Map());
	      };
	      return _ExecutionContext;
	  }());
	  var ReturnValue = (function () {
	      function ReturnValue(value) {
	          this.value = value;
	      }
	      return ReturnValue;
	  }());
	  function createDynamicClass(_classStmt, _ctx, _visitor) {
	      var propertyDescriptors = {};
	      _classStmt.getters.forEach(function (getter) {
	          // Note: use `function` instead of arrow function to capture `this`
	          propertyDescriptors[getter.name] = {
	              configurable: false,
	              get: function () {
	                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                  return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	              }
	          };
	      });
	      _classStmt.methods.forEach(function (method) {
	          var paramNames = method.params.map(function (param) { return param.name; });
	          // Note: use `function` instead of arrow function to capture `this`
	          propertyDescriptors[method.name] = {
	              writable: false,
	              configurable: false,
	              value: function () {
	                  var args = [];
	                  for (var _i = 0; _i < arguments.length; _i++) {
	                      args[_i - 0] = arguments[_i];
	                  }
	                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                  return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	              }
	          };
	      });
	      var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	      // Note: use `function` instead of arrow function to capture `this`
	      var ctor = function () {
	          var _this = this;
	          var args = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              args[_i - 0] = arguments[_i];
	          }
	          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	          _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	      };
	      var superClass = _classStmt.parent.visitExpression(_visitor, _ctx);
	      ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	      return ctor;
	  }
	  var StatementInterpreter = (function () {
	      function StatementInterpreter() {
	      }
	      StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	      StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	          return null;
	      };
	      StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	          var value = expr.value.visitExpression(this, ctx);
	          var currCtx = ctx;
	          while (currCtx != null) {
	              if (currCtx.vars.has(expr.name)) {
	                  currCtx.vars.set(expr.name, value);
	                  return value;
	              }
	              currCtx = currCtx.parent;
	          }
	          throw new Error("Not declared variable " + expr.name);
	      };
	      StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	          var varName = ast.name;
	          if (isPresent(ast.builtin)) {
	              switch (ast.builtin) {
	                  case BuiltinVar.Super:
	                      return ctx.instance.__proto__;
	                  case BuiltinVar.This:
	                      return ctx.instance;
	                  case BuiltinVar.CatchError:
	                      varName = CATCH_ERROR_VAR$1;
	                      break;
	                  case BuiltinVar.CatchStack:
	                      varName = CATCH_STACK_VAR$1;
	                      break;
	                  default:
	                      throw new Error("Unknown builtin variable " + ast.builtin);
	              }
	          }
	          var currCtx = ctx;
	          while (currCtx != null) {
	              if (currCtx.vars.has(varName)) {
	                  return currCtx.vars.get(varName);
	              }
	              currCtx = currCtx.parent;
	          }
	          throw new Error("Not declared variable " + varName);
	      };
	      StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	          var receiver = expr.receiver.visitExpression(this, ctx);
	          var index = expr.index.visitExpression(this, ctx);
	          var value = expr.value.visitExpression(this, ctx);
	          receiver[index] = value;
	          return value;
	      };
	      StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	          var receiver = expr.receiver.visitExpression(this, ctx);
	          var value = expr.value.visitExpression(this, ctx);
	          receiver[expr.name] = value;
	          return value;
	      };
	      StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	          var receiver = expr.receiver.visitExpression(this, ctx);
	          var args = this.visitAllExpressions(expr.args, ctx);
	          var result;
	          if (isPresent(expr.builtin)) {
	              switch (expr.builtin) {
	                  case BuiltinMethod.ConcatArray:
	                      result = ListWrapper.concat(receiver, args[0]);
	                      break;
	                  case BuiltinMethod.SubscribeObservable:
	                      result = receiver.subscribe({ next: args[0] });
	                      break;
	                  case BuiltinMethod.Bind:
	                      result = receiver.bind(args[0]);
	                      break;
	                  default:
	                      throw new Error("Unknown builtin method " + expr.builtin);
	              }
	          }
	          else {
	              result = receiver[expr.name].apply(receiver, args);
	          }
	          return result;
	      };
	      StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	          var args = this.visitAllExpressions(stmt.args, ctx);
	          var fnExpr = stmt.fn;
	          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	              return null;
	          }
	          else {
	              var fn = stmt.fn.visitExpression(this, ctx);
	              return fn.apply(null, args);
	          }
	      };
	      StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	          return new ReturnValue(stmt.value.visitExpression(this, ctx));
	      };
	      StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var clazz = createDynamicClass(stmt, ctx, this);
	          ctx.vars.set(stmt.name, clazz);
	          return null;
	      };
	      StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	          return stmt.expr.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	          var condition = stmt.condition.visitExpression(this, ctx);
	          if (condition) {
	              return this.visitAllStatements(stmt.trueCase, ctx);
	          }
	          else if (isPresent(stmt.falseCase)) {
	              return this.visitAllStatements(stmt.falseCase, ctx);
	          }
	          return null;
	      };
	      StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          try {
	              return this.visitAllStatements(stmt.bodyStmts, ctx);
	          }
	          catch (e) {
	              var childCtx = ctx.createChildWihtLocalVars();
	              childCtx.vars.set(CATCH_ERROR_VAR$1, e);
	              childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);
	              return this.visitAllStatements(stmt.catchStmts, childCtx);
	          }
	      };
	      StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	          throw stmt.error.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	      StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	          var args = this.visitAllExpressions(ast.args, ctx);
	          var clazz = ast.classExpr.visitExpression(this, ctx);
	          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	      };
	      StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	      StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	          return ast.value.reference;
	      };
	      StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	          if (ast.condition.visitExpression(this, ctx)) {
	              return ast.trueCase.visitExpression(this, ctx);
	          }
	          else if (isPresent(ast.falseCase)) {
	              return ast.falseCase.visitExpression(this, ctx);
	          }
	          return null;
	      };
	      StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	          return !ast.condition.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	          return ast.value.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	          var paramNames = ast.params.map(function (param) { return param.name; });
	          return _declareFn(paramNames, ast.statements, ctx, this);
	      };
	      StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          var paramNames = stmt.params.map(function (param) { return param.name; });
	          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	          return null;
	      };
	      StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	          var _this = this;
	          var lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	          var rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	          switch (ast.operator) {
	              case BinaryOperator.Equals:
	                  return lhs() == rhs();
	              case BinaryOperator.Identical:
	                  return lhs() === rhs();
	              case BinaryOperator.NotEquals:
	                  return lhs() != rhs();
	              case BinaryOperator.NotIdentical:
	                  return lhs() !== rhs();
	              case BinaryOperator.And:
	                  return lhs() && rhs();
	              case BinaryOperator.Or:
	                  return lhs() || rhs();
	              case BinaryOperator.Plus:
	                  return lhs() + rhs();
	              case BinaryOperator.Minus:
	                  return lhs() - rhs();
	              case BinaryOperator.Divide:
	                  return lhs() / rhs();
	              case BinaryOperator.Multiply:
	                  return lhs() * rhs();
	              case BinaryOperator.Modulo:
	                  return lhs() % rhs();
	              case BinaryOperator.Lower:
	                  return lhs() < rhs();
	              case BinaryOperator.LowerEquals:
	                  return lhs() <= rhs();
	              case BinaryOperator.Bigger:
	                  return lhs() > rhs();
	              case BinaryOperator.BiggerEquals:
	                  return lhs() >= rhs();
	              default:
	                  throw new Error("Unknown operator " + ast.operator);
	          }
	      };
	      StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	          var result;
	          var receiver = ast.receiver.visitExpression(this, ctx);
	          result = receiver[ast.name];
	          return result;
	      };
	      StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	          var receiver = ast.receiver.visitExpression(this, ctx);
	          var prop = ast.index.visitExpression(this, ctx);
	          return receiver[prop];
	      };
	      StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          return this.visitAllExpressions(ast.entries, ctx);
	      };
	      StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	          var _this = this;
	          var result = {};
	          ast.entries.forEach(function (entry) { return result[entry[0]] =
	              entry[1].visitExpression(_this, ctx); });
	          return result;
	      };
	      StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	          var _this = this;
	          return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	      };
	      StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	          for (var i = 0; i < statements.length; i++) {
	              var stmt = statements[i];
	              var val = stmt.visitStatement(this, ctx);
	              if (val instanceof ReturnValue) {
	                  return val;
	              }
	          }
	          return null;
	      };
	      return StatementInterpreter;
	  }());
	  function _declareFn(varNames, statements, ctx, visitor) {
	      return function () {
	          var args = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              args[_i - 0] = arguments[_i];
	          }
	          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	      };
	  }
	  var CATCH_ERROR_VAR$1 = 'error';
	  var CATCH_STACK_VAR$1 = 'stack';

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$17 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var AbstractJsEmitterVisitor = (function (_super) {
	      __extends$17(AbstractJsEmitterVisitor, _super);
	      function AbstractJsEmitterVisitor() {
	          _super.call(this, false);
	      }
	      AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var _this = this;
	          ctx.pushClass(stmt);
	          this._visitClassConstructor(stmt, ctx);
	          if (isPresent(stmt.parent)) {
	              ctx.print(stmt.name + ".prototype = Object.create(");
	              stmt.parent.visitExpression(this, ctx);
	              ctx.println(".prototype);");
	          }
	          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	          stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	          ctx.popClass();
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	          ctx.print("function " + stmt.name + "(");
	          if (isPresent(stmt.constructorMethod)) {
	              this._visitParams(stmt.constructorMethod.params, ctx);
	          }
	          ctx.println(") {");
	          ctx.incIndent();
	          if (isPresent(stmt.constructorMethod)) {
	              if (stmt.constructorMethod.body.length > 0) {
	                  ctx.println("var self = this;");
	                  this.visitAllStatements(stmt.constructorMethod.body, ctx);
	              }
	          }
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	          ctx.incIndent();
	          if (getter.body.length > 0) {
	              ctx.println("var self = this;");
	              this.visitAllStatements(getter.body, ctx);
	          }
	          ctx.decIndent();
	          ctx.println("}});");
	      };
	      AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	          ctx.print(stmt.name + ".prototype." + method.name + " = function(");
	          this._visitParams(method.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          if (method.body.length > 0) {
	              ctx.println("var self = this;");
	              this.visitAllStatements(method.body, ctx);
	          }
	          ctx.decIndent();
	          ctx.println("};");
	      };
	      AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	          if (ast.builtin === BuiltinVar.This) {
	              ctx.print('self');
	          }
	          else if (ast.builtin === BuiltinVar.Super) {
	              throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	          }
	          else {
	              _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	          }
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          ctx.print("var " + stmt.name + " = ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	          ast.value.visitExpression(this, ctx);
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	          var fnExpr = expr.fn;
	          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	              ctx.currentClass.parent.visitExpression(this, ctx);
	              ctx.print(".call(this");
	              if (expr.args.length > 0) {
	                  ctx.print(", ");
	                  this.visitAllExpressions(expr.args, ctx, ',');
	              }
	              ctx.print(")");
	          }
	          else {
	              _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	          }
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	          ctx.print("function(");
	          this._visitParams(ast.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(ast.statements, ctx);
	          ctx.decIndent();
	          ctx.print("}");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          ctx.print("function " + stmt.name + "(");
	          this._visitParams(stmt.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.statements, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          ctx.println("try {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.bodyStmts, ctx);
	          ctx.decIndent();
	          ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
	          ctx.incIndent();
	          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [
	                  StmtModifier.Final
	              ])].concat(stmt.catchStmts);
	          this.visitAllStatements(catchStmts, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	          this.visitAllObjects(function (param /** TODO #9100 */) { return ctx.print(param.name); }, params, ctx, ',');
	      };
	      AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	          var name;
	          switch (method) {
	              case BuiltinMethod.ConcatArray:
	                  name = 'concat';
	                  break;
	              case BuiltinMethod.SubscribeObservable:
	                  name = 'subscribe';
	                  break;
	              case BuiltinMethod.Bind:
	                  name = 'bind';
	                  break;
	              default:
	                  throw new Error("Unknown builtin method: " + method);
	          }
	          return name;
	      };
	      return AbstractJsEmitterVisitor;
	  }(AbstractEmitterVisitor));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$16 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  function jitStatements(sourceUrl, statements, resultVar) {
	      var converter = new JitEmitterVisitor();
	      var ctx = EmitterVisitorContext.createRoot([resultVar]);
	      converter.visitAllStatements(statements, ctx);
	      return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
	  }
	  var JitEmitterVisitor = (function (_super) {
	      __extends$16(JitEmitterVisitor, _super);
	      function JitEmitterVisitor() {
	          _super.apply(this, arguments);
	          this._evalArgNames = [];
	          this._evalArgValues = [];
	      }
	      JitEmitterVisitor.prototype.getArgs = function () {
	          var result = {};
	          for (var i = 0; i < this._evalArgNames.length; i++) {
	              result[this._evalArgNames[i]] = this._evalArgValues[i];
	          }
	          return result;
	      };
	      JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	          var value = ast.value.reference;
	          var id = this._evalArgValues.indexOf(value);
	          if (id === -1) {
	              id = this._evalArgValues.length;
	              this._evalArgValues.push(value);
	              var name = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';
	              this._evalArgNames.push(sanitizeIdentifier("jit_" + name + id));
	          }
	          ctx.print(this._evalArgNames[id]);
	          return null;
	      };
	      return JitEmitterVisitor;
	  }(AbstractJsEmitterVisitor));

	  /**
	   * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	   *
	   * Please make sure to keep to edits in sync with the source file.
	   *
	   * Source:
	   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	   *
	   * The original file level comment is reproduced below
	   */
	  /*
	    This is a limited shim for ShadowDOM css styling.
	    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	    The intention here is to support only the styling features which can be
	    relatively simply implemented. The goal is to allow users to avoid the
	    most obvious pitfalls and do so without compromising performance significantly.
	    For ShadowDOM styling that's not covered here, a set of best practices
	    can be provided that should allow users to accomplish more complex styling.

	    The following is a list of specific ShadowDOM styling features and a brief
	    discussion of the approach used to shim.

	    Shimmed features:

	    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	    element using the :host rule. To shim this feature, the :host styles are
	    reformatted and prefixed with a given scope name and promoted to a
	    document level stylesheet.
	    For example, given a scope name of .foo, a rule like this:

	      :host {
	          background: red;
	        }
	      }

	    becomes:

	      .foo {
	        background: red;
	      }

	    * encapsulation: Styles defined within ShadowDOM, apply only to
	    dom inside the ShadowDOM. Polymer uses one of two techniques to implement
	    this feature.

	    By default, rules are prefixed with the host element tag name
	    as a descendant selector. This ensures styling does not leak out of the 'top'
	    of the element's ShadowDOM. For example,

	    div {
	        font-weight: bold;
	      }

	    becomes:

	    x-foo div {
	        font-weight: bold;
	      }

	    becomes:


	    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	    selectors are scoped by adding an attribute selector suffix to each
	    simple selector that contains the host element tag name. Each element
	    in the element's ShadowDOM template is also given the scope attribute.
	    Thus, these rules match only elements that have the scope attribute.
	    For example, given a scope name of x-foo, a rule like this:

	      div {
	        font-weight: bold;
	      }

	    becomes:

	      div[x-foo] {
	        font-weight: bold;
	      }

	    Note that elements that are dynamically added to a scope must have the scope
	    selector added to them manually.

	    * upper/lower bound encapsulation: Styles which are defined outside a
	    shadowRoot should not cross the ShadowDOM boundary and should not apply
	    inside a shadowRoot.

	    This styling behavior is not emulated. Some possible ways to do this that
	    were rejected due to complexity and/or performance concerns include: (1) reset
	    every possible property for every possible selector for a given scope name;
	    (2) re-implement css in javascript.

	    As an alternative, users should make sure to use selectors
	    specific to the scope in which they are working.

	    * ::distributed: This behavior is not emulated. It's often not necessary
	    to style the contents of a specific insertion point and instead, descendants
	    of the host element can be styled selectively. Users can also create an
	    extra node around an insertion point and style that node's contents
	    via descendent selectors. For example, with a shadowRoot like this:

	      <style>
	        ::content(div) {
	          background: red;
	        }
	      </style>
	      <content></content>

	    could become:

	      <style>
	        / *@polyfill .content-container div * /
	        ::content(div) {
	          background: red;
	        }
	      </style>
	      <div class="content-container">
	        <content></content>
	      </div>

	    Note the use of @polyfill in the comment above a ShadowDOM specific style
	    declaration. This is a directive to the styling shim to use the selector
	    in comments in lieu of the next selector when running under polyfill.
	  */
	  var ShadowCss = (function () {
	      function ShadowCss() {
	          this.strictStyling = true;
	      }
	      /*
	      * Shim some cssText with the given selector. Returns cssText that can
	      * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	      *
	      * When strictStyling is true:
	      * - selector is the attribute added to all elements inside the host,
	      * - hostSelector is the attribute added to the host itself.
	      */
	      ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	          if (hostSelector === void 0) { hostSelector = ''; }
	          var sourceMappingUrl = extractSourceMappingUrl(cssText);
	          cssText = stripComments(cssText);
	          cssText = this._insertDirectives(cssText);
	          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	      };
	      ShadowCss.prototype._insertDirectives = function (cssText) {
	          cssText = this._insertPolyfillDirectivesInCssText(cssText);
	          return this._insertPolyfillRulesInCssText(cssText);
	      };
	      /*
	       * Process styles to convert native ShadowDOM rules that will trip
	       * up the css parser; we rely on decorating the stylesheet with inert rules.
	       *
	       * For example, we convert this rule:
	       *
	       * polyfill-next-selector { content: ':host menu-item'; }
	       * ::content menu-item {
	       *
	       * to this:
	       *
	       * scopeName menu-item {
	       *
	      **/
	      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          return StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m /** TODO #9100 */) { return m[1] + '{'; });
	      };
	      /*
	       * Process styles to add rules which will only apply under the polyfill
	       *
	       * For example, we convert this rule:
	       *
	       * polyfill-rule {
	       *   content: ':host menu-item';
	       * ...
	       * }
	       *
	       * to this:
	       *
	       * scopeName menu-item {...}
	       *
	      **/
	      ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          return StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m /** TODO #9100 */) {
	              var rule = m[0];
	              rule = StringWrapper.replace(rule, m[1], '');
	              rule = StringWrapper.replace(rule, m[2], '');
	              return m[3] + rule;
	          });
	      };
	      /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	       *
	       *  .foo {... }
	       *
	       *  and converts this to
	       *
	       *  scopeName .foo { ... }
	      */
	      ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	          var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	          cssText = this._insertPolyfillHostInCssText(cssText);
	          cssText = this._convertColonHost(cssText);
	          cssText = this._convertColonHostContext(cssText);
	          cssText = this._convertShadowDOMSelectors(cssText);
	          if (isPresent(scopeSelector)) {
	              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	          }
	          cssText = cssText + '\n' + unscoped;
	          return cssText.trim();
	      };
	      /*
	       * Process styles to add rules which will only apply under the polyfill
	       * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	       * occasions, e.g. -webkit-calc on Safari.)
	       * For example, we convert this rule:
	       *
	       * @polyfill-unscoped-rule {
	       *   content: 'menu-item';
	       * ... }
	       *
	       * to this:
	       *
	       * menu-item {...}
	       *
	      **/
	      ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          var r = '';
	          var m;
	          _cssContentUnscopedRuleRe.lastIndex = 0;
	          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	              var rule = m[0];
	              rule = StringWrapper.replace(rule, m[2], '');
	              rule = StringWrapper.replace(rule, m[1], m[3]);
	              r += rule + '\n\n';
	          }
	          return r;
	      };
	      /*
	       * convert a rule like :host(.foo) > .bar { }
	       *
	       * to
	       *
	       * scopeName.foo > .bar
	      */
	      ShadowCss.prototype._convertColonHost = function (cssText) {
	          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	      };
	      /*
	       * convert a rule like :host-context(.foo) > .bar { }
	       *
	       * to
	       *
	       * scopeName.foo > .bar, .foo scopeName > .bar { }
	       *
	       * and
	       *
	       * :host-context(.foo:host) .bar { ... }
	       *
	       * to
	       *
	       * scopeName.foo .bar { ... }
	      */
	      ShadowCss.prototype._convertColonHostContext = function (cssText) {
	          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	      };
	      ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	          // p1 = :host, p2 = contents of (), p3 rest of rule
	          return StringWrapper.replaceAllMapped(cssText, regExp, function (m /** TODO #9100 */) {
	              if (isPresent(m[2])) {
	                  var parts = m[2].split(','), r = [];
	                  for (var i = 0; i < parts.length; i++) {
	                      var p = parts[i];
	                      if (isBlank(p))
	                          break;
	                      p = p.trim();
	                      r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                  }
	                  return r.join(',');
	              }
	              else {
	                  return _polyfillHostNoCombinator + m[3];
	              }
	          });
	      };
	      ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	          if (StringWrapper.contains(part, _polyfillHost)) {
	              return this._colonHostPartReplacer(host, part, suffix);
	          }
	          else {
	              return host + part + suffix + ', ' + part + ' ' + host + suffix;
	          }
	      };
	      ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	          return host + StringWrapper.replace(part, _polyfillHost, '') + suffix;
	      };
	      /*
	       * Convert combinators like ::shadow and pseudo-elements like ::content
	       * by replacing with space.
	      */
	      ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	          return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return StringWrapper.replaceAll(result, pattern, ' '); }, cssText);
	      };
	      // change a selector like 'div' to 'name div'
	      ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	          var _this = this;
	          return processRules(cssText, function (rule) {
	              var selector = rule.selector;
	              var content = rule.content;
	              if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
	                  selector =
	                      _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	              }
	              else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports')) {
	                  content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	              }
	              return new CssRule(selector, content);
	          });
	      };
	      ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	          var _this = this;
	          return selector.split(',')
	              .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	              .map(function (deepParts) {
	              var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	              var applyScope = function (shallowPart) {
	                  if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                      return strict ?
	                          _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                          _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                  }
	                  else {
	                      return shallowPart;
	                  }
	              };
	              return [applyScope(shallowPart)].concat(otherParts).join(' ');
	          })
	              .join(', ');
	      };
	      ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	          var re = this._makeScopeMatcher(scopeSelector);
	          return !re.test(selector);
	      };
	      ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	          var lre = /\[/g;
	          var rre = /\]/g;
	          scopeSelector = StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	          scopeSelector = StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	      };
	      ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	          // Difference from webcomponents.js: scopeSelector could not be an array
	          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	      };
	      // scope via name and [is=name]
	      ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	          // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	          _polyfillHostRe.lastIndex = 0;
	          if (_polyfillHostRe.test(selector)) {
	              var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	              selector = StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	              return StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	          }
	          else {
	              return scopeSelector + ' ' + selector;
	          }
	      };
	      // return a selector with [name] suffix on each simple selector
	      // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
	      ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	          var _this = this;
	          var isRe = /\[is=([^\]]*)\]/g;
	          scopeSelector = scopeSelector.replace(isRe, function (_) {
	              var parts = [];
	              for (var _i = 1; _i < arguments.length; _i++) {
	                  parts[_i - 1] = arguments[_i];
	              }
	              return parts[0];
	          });
	          var attrName = '[' + scopeSelector + ']';
	          var _scopeSelectorPart = function (p) {
	              var scopedP = p.trim();
	              if (scopedP.length == 0) {
	                  return '';
	              }
	              if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                  scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	              }
	              else {
	                  // remove :host since it should be unnecessary
	                  var t = p.replace(_polyfillHostRe, '');
	                  if (t.length > 0) {
	                      var matches = t.match(/([^:]*)(:*)(.*)/);
	                      if (matches !== null) {
	                          scopedP = matches[1] + attrName + matches[2] + matches[3];
	                      }
	                  }
	              }
	              return scopedP;
	          };
	          var sep = /( |>|\+|~)\s*/g;
	          var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	          var scoped = '';
	          var startIndex = 0;
	          var res;
	          while ((res = sep.exec(selector)) !== null) {
	              var separator = res[1];
	              var part = selector.slice(startIndex, res.index).trim();
	              // if a selector appears before :host-context it should not be shimmed as it
	              // matches on ancestor elements and not on elements in the host's shadow
	              var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	              scoped += scopedPart + " " + separator + " ";
	              startIndex = sep.lastIndex;
	          }
	          return scoped + _scopeSelectorPart(selector.substring(startIndex));
	      };
	      ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	          return selector.replace(_colonHostContextRe, _polyfillHostContext)
	              .replace(_colonHostRe, _polyfillHost);
	      };
	      return ShadowCss;
	  }());
	  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
	  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
	  var _polyfillHost = '-shadowcsshost';
	  // note: :host-context pre-processed to -shadowcsshostcontext.
	  var _polyfillHostContext = '-shadowcsscontext';
	  var _parenSuffix = ')(?:\\((' +
	      '(?:\\([^)(]*\\)|[^)(]*)+?' +
	      ')\\))?([^,{]*)';
	  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	  var _shadowDOMSelectorsRe = [
	      /::shadow/g,
	      /::content/g,
	      // Deprecated selectors
	      /\/shadow-deep\//g,
	      /\/shadow\//g,
	  ];
	  var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	  var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	  var _polyfillHostRe = /-shadowcsshost/gim;
	  var _colonHostRe = /:host/gim;
	  var _colonHostContextRe = /:host-context/gim;
	  var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	  function stripComments(input) {
	      return StringWrapper.replaceAllMapped(input, _commentRe, function (_ /** TODO #9100 */) { return ''; });
	  }
	  // all comments except inline source mapping
	  var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	  function extractSourceMappingUrl(input) {
	      var matcher = input.match(_sourceMappingUrlRe);
	      return matcher ? matcher[0] : '';
	  }
	  var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	  var _curlyRe = /([{}])/g;
	  var OPEN_CURLY = '{';
	  var CLOSE_CURLY = '}';
	  var BLOCK_PLACEHOLDER = '%BLOCK%';
	  var CssRule = (function () {
	      function CssRule(selector, content) {
	          this.selector = selector;
	          this.content = content;
	      }
	      return CssRule;
	  }());
	  function processRules(input, ruleCallback) {
	      var inputWithEscapedBlocks = escapeBlocks(input);
	      var nextBlockIndex = 0;
	      return StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function (m /** TODO #9100 */) {
	          var selector = m[2];
	          var content = '';
	          var suffix = m[4];
	          var contentPrefix = '';
	          if (isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
	              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	              suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
	              contentPrefix = '{';
	          }
	          var rule = ruleCallback(new CssRule(selector, content));
	          return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	      });
	  }
	  var StringWithEscapedBlocks = (function () {
	      function StringWithEscapedBlocks(escapedString, blocks) {
	          this.escapedString = escapedString;
	          this.blocks = blocks;
	      }
	      return StringWithEscapedBlocks;
	  }());
	  function escapeBlocks(input) {
	      var inputParts = StringWrapper.split(input, _curlyRe);
	      var resultParts = [];
	      var escapedBlocks = [];
	      var bracketCount = 0;
	      var currentBlockParts = [];
	      for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
	          var part = inputParts[partIndex];
	          if (part == CLOSE_CURLY) {
	              bracketCount--;
	          }
	          if (bracketCount > 0) {
	              currentBlockParts.push(part);
	          }
	          else {
	              if (currentBlockParts.length > 0) {
	                  escapedBlocks.push(currentBlockParts.join(''));
	                  resultParts.push(BLOCK_PLACEHOLDER);
	                  currentBlockParts = [];
	              }
	              resultParts.push(part);
	          }
	          if (part == OPEN_CURLY) {
	              bracketCount++;
	          }
	      }
	      if (currentBlockParts.length > 0) {
	          escapedBlocks.push(currentBlockParts.join(''));
	          resultParts.push(BLOCK_PLACEHOLDER);
	      }
	      return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	  }

	  var COMPONENT_VARIABLE = '%COMP%';
	  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	  var StylesCompileDependency = (function () {
	      function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
	          this.moduleUrl = moduleUrl;
	          this.isShimmed = isShimmed;
	          this.valuePlaceholder = valuePlaceholder;
	      }
	      return StylesCompileDependency;
	  }());
	  var StylesCompileResult = (function () {
	      function StylesCompileResult(componentStylesheet, externalStylesheets) {
	          this.componentStylesheet = componentStylesheet;
	          this.externalStylesheets = externalStylesheets;
	      }
	      return StylesCompileResult;
	  }());
	  var CompiledStylesheet = (function () {
	      function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	          this.statements = statements;
	          this.stylesVar = stylesVar;
	          this.dependencies = dependencies;
	          this.isShimmed = isShimmed;
	          this.meta = meta;
	      }
	      return CompiledStylesheet;
	  }());
	  var StyleCompiler = (function () {
	      function StyleCompiler(_urlResolver) {
	          this._urlResolver = _urlResolver;
	          this._shadowCss = new ShadowCss();
	      }
	      StyleCompiler.prototype.compileComponent = function (comp) {
	          var _this = this;
	          var externalStylesheets = [];
	          var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	              styles: comp.template.styles,
	              styleUrls: comp.template.styleUrls,
	              moduleUrl: comp.type.moduleUrl
	          }), true);
	          comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
	              var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	              externalStylesheets.push(compiledStylesheet);
	          });
	          return new StylesCompileResult(componentStylesheet, externalStylesheets);
	      };
	      StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	          var _this = this;
	          var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
	          var styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	          var dependencies = [];
	          for (var i = 0; i < stylesheet.styleUrls.length; i++) {
	              var identifier = new CompileIdentifierMetadata({ name: getStylesVarName(null) });
	              dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
	              styleExpressions.push(new ExternalExpr(identifier));
	          }
	          // styles variable contains plain strings and arrays of other styles arrays (recursive),
	          // so we set its type to dynamic.
	          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	          var stmt = variable(stylesVar)
	              .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]);
	          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	      };
	      StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	      };
	      StyleCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      StyleCompiler.ctorParameters = [
	          { type: UrlResolver, },
	      ];
	      return StyleCompiler;
	  }());
	  function getStylesVarName(component) {
	      var result = "styles";
	      if (component) {
	          result += "_" + component.type.name;
	      }
	      return result;
	  }

	  /**
	   * An internal module of the Angular compiler that begins with component types,
	   * extracts templates, and eventually produces a compiled version of the component
	   * ready for linking into an application.
	   *
	   * @security  When compiling templates at runtime, you must ensure that the entire template comes
	   * from a trusted source. Attacker-controlled data introduced by a template could expose your
	   * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	   */
	  var RuntimeCompiler = (function () {
	      function RuntimeCompiler(_injector, _metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig) {
	          this._injector = _injector;
	          this._metadataResolver = _metadataResolver;
	          this._templateNormalizer = _templateNormalizer;
	          this._templateParser = _templateParser;
	          this._styleCompiler = _styleCompiler;
	          this._viewCompiler = _viewCompiler;
	          this._ngModuleCompiler = _ngModuleCompiler;
	          this._compilerConfig = _compilerConfig;
	          this._compiledTemplateCache = new Map();
	          this._compiledHostTemplateCache = new Map();
	          this._compiledNgModuleCache = new Map();
	      }
	      Object.defineProperty(RuntimeCompiler.prototype, "injector", {
	          get: function () { return this._injector; },
	          enumerable: true,
	          configurable: true
	      });
	      RuntimeCompiler.prototype.compileModuleSync = function (moduleType) {
	          return this._compileModuleAndComponents(moduleType, true).syncResult;
	      };
	      RuntimeCompiler.prototype.compileModuleAsync = function (moduleType) {
	          return this._compileModuleAndComponents(moduleType, false).asyncResult;
	      };
	      RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	          return this._compileModuleAndAllComponents(moduleType, true).syncResult;
	      };
	      RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
	      };
	      RuntimeCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	          var componentPromise = this._compileComponents(moduleType, isSync);
	          var ngModuleFactory = this._compileModule(moduleType);
	          return new SyncAsyncResult(ngModuleFactory, componentPromise.then(function () { return ngModuleFactory; }));
	      };
	      RuntimeCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	          var _this = this;
	          var componentPromise = this._compileComponents(moduleType, isSync);
	          var ngModuleFactory = this._compileModule(moduleType);
	          var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
	          var componentFactories = [];
	          var templates = new Set();
	          moduleMeta.transitiveModule.modules.forEach(function (moduleMeta) {
	              moduleMeta.declaredDirectives.forEach(function (dirMeta) {
	                  if (dirMeta.isComponent) {
	                      var template = _this._createCompiledHostTemplate(dirMeta.type.reference);
	                      templates.add(template);
	                      componentFactories.push(template.proxyComponentFactory);
	                  }
	              });
	          });
	          var syncResult = new _angular_core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);
	          // Note: host components themselves can always be compiled synchronously as they have an
	          // inline template. However, we still need to wait for the components that they
	          // reference to be loaded / compiled.
	          var compile = function () {
	              templates.forEach(function (template) { _this._compileTemplate(template); });
	              return syncResult;
	          };
	          var asyncResult = isSync ? Promise.resolve(compile()) : componentPromise.then(compile);
	          return new SyncAsyncResult(syncResult, asyncResult);
	      };
	      RuntimeCompiler.prototype._compileModule = function (moduleType) {
	          var _this = this;
	          var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	          if (!ngModuleFactory) {
	              var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
	              // Always provide a bound Compiler
	              var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	              var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	              compileResult.dependencies.forEach(function (dep) {
	                  dep.placeholder.reference =
	                      _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
	                  dep.placeholder.name = "compFactory_" + dep.comp.name;
	              });
	              if (!this._compilerConfig.useJit) {
	                  ngModuleFactory =
	                      interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
	              }
	              else {
	                  ngModuleFactory = jitStatements(moduleMeta_1.type.name + ".ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
	              }
	              this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	          }
	          return ngModuleFactory;
	      };
	      /**
	       * @internal
	       */
	      RuntimeCompiler.prototype._compileComponents = function (mainModule, isSync) {
	          var _this = this;
	          var templates = new Set();
	          var loadingPromises = [];
	          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	          ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	              localModuleMeta.declaredDirectives.forEach(function (dirMeta) {
	                  if (dirMeta.isComponent) {
	                      templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                      dirMeta.entryComponents.forEach(function (entryComponentType) {
	                          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference));
	                      });
	                  }
	              });
	              localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                  templates.add(_this._createCompiledHostTemplate(entryComponentType.reference));
	                  // TODO: what about entryComponents of entryComponents?
	              });
	          });
	          templates.forEach(function (template) {
	              if (template.loading) {
	                  if (isSync) {
	                      throw new ComponentStillLoadingError(template.compType.reference);
	                  }
	                  else {
	                      loadingPromises.push(template.loading);
	                  }
	              }
	          });
	          var compile = function () { templates.forEach(function (template) { _this._compileTemplate(template); }); };
	          if (isSync) {
	              compile();
	              return Promise.resolve(null);
	          }
	          else {
	              return Promise.all(loadingPromises).then(compile);
	          }
	      };
	      RuntimeCompiler.prototype.clearCacheFor = function (type) {
	          this._compiledNgModuleCache.delete(type);
	          this._metadataResolver.clearCacheFor(type);
	          this._compiledHostTemplateCache.delete(type);
	          var compiledTemplate = this._compiledTemplateCache.get(type);
	          if (compiledTemplate) {
	              this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);
	              this._compiledTemplateCache.delete(type);
	          }
	      };
	      RuntimeCompiler.prototype.clearCache = function () {
	          this._metadataResolver.clearCache();
	          this._compiledTemplateCache.clear();
	          this._compiledHostTemplateCache.clear();
	          this._templateNormalizer.clearCache();
	          this._compiledNgModuleCache.clear();
	      };
	      RuntimeCompiler.prototype._createCompiledHostTemplate = function (compType) {
	          var compiledTemplate = this._compiledHostTemplateCache.get(compType);
	          if (isBlank(compiledTemplate)) {
	              var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	              assertComponent(compMeta);
	              var hostMeta = createHostComponentMeta(compMeta);
	              compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, [compMeta], [], [], this._templateNormalizer.normalizeDirective(hostMeta));
	              this._compiledHostTemplateCache.set(compType, compiledTemplate);
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	          var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	          if (isBlank(compiledTemplate)) {
	              assertComponent(compMeta);
	              compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, ngModule.transitiveModule.directives, ngModule.transitiveModule.pipes, ngModule.schemas, this._templateNormalizer.normalizeDirective(compMeta));
	              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._assertComponentKnown = function (compType, isHost) {
	          var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) :
	              this._compiledTemplateCache.get(compType);
	          if (!compiledTemplate) {
	              if (isHost) {
	                  throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " does not exist!");
	              }
	              else {
	                  throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	              }
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._assertComponentLoaded = function (compType, isHost) {
	          var compiledTemplate = this._assertComponentKnown(compType, isHost);
	          if (compiledTemplate.loading) {
	              throw new Error("Illegal state: CompiledTemplate for " + stringify(compType) + " (isHost: " + isHost + ") is still loading!");
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._compileTemplate = function (template) {
	          var _this = this;
	          if (template.isCompiled) {
	              return;
	          }
	          var compMeta = template.normalizedCompMeta;
	          var externalStylesheetsByModuleUrl = new Map();
	          var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	          stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
	          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	          var viewCompMetas = template.viewComponentTypes.map(function (compType) { return _this._assertComponentLoaded(compType, false).normalizedCompMeta; });
	          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, template.schemas, compMeta.type.name);
	          var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes);
	          compileResult.dependencies.forEach(function (dep) {
	              var depTemplate;
	              if (dep instanceof ViewFactoryDependency) {
	                  var vfd = dep;
	                  depTemplate = _this._assertComponentLoaded(vfd.comp.reference, false);
	                  vfd.placeholder.reference = depTemplate.proxyViewFactory;
	                  vfd.placeholder.name = "viewFactory_" + vfd.comp.name;
	              }
	              else if (dep instanceof ComponentFactoryDependency) {
	                  var cfd = dep;
	                  depTemplate = _this._assertComponentLoaded(cfd.comp.reference, true);
	                  cfd.placeholder.reference = depTemplate.proxyComponentFactory;
	                  cfd.placeholder.name = "compFactory_" + cfd.comp.name;
	              }
	          });
	          var statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
	          var factory;
	          if (!this._compilerConfig.useJit) {
	              factory = interpretStatements(statements, compileResult.viewFactoryVar);
	          }
	          else {
	              factory = jitStatements("" + template.compType.name + (template.isHost ? '_Host' : '') + ".ngfactory.js", statements, compileResult.viewFactoryVar);
	          }
	          template.compiled(factory);
	      };
	      RuntimeCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	          var _this = this;
	          result.dependencies.forEach(function (dep, i) {
	              var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	              var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	              dep.valuePlaceholder.reference = nestedStylesArr;
	              dep.valuePlaceholder.name = "importedStyles" + i;
	          });
	      };
	      RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	          if (!this._compilerConfig.useJit) {
	              return interpretStatements(result.statements, result.stylesVar);
	          }
	          else {
	              return jitStatements(result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
	          }
	      };
	      RuntimeCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      RuntimeCompiler.ctorParameters = [
	          { type: _angular_core.Injector, },
	          { type: CompileMetadataResolver, },
	          { type: DirectiveNormalizer, },
	          { type: TemplateParser, },
	          { type: StyleCompiler, },
	          { type: ViewCompiler, },
	          { type: NgModuleCompiler, },
	          { type: CompilerConfig, },
	      ];
	      return RuntimeCompiler;
	  }());
	  var CompiledTemplate = (function () {
	      function CompiledTemplate(isHost, selector, compType, viewDirectivesAndComponents, viewPipes, schemas, _normalizeResult) {
	          var _this = this;
	          this.isHost = isHost;
	          this.compType = compType;
	          this.viewPipes = viewPipes;
	          this.schemas = schemas;
	          this._viewFactory = null;
	          this.loading = null;
	          this._normalizedCompMeta = null;
	          this.isCompiled = false;
	          this.isCompiledWithDeps = false;
	          this.viewComponentTypes = [];
	          this.viewDirectives = [];
	          viewDirectivesAndComponents.forEach(function (dirMeta) {
	              if (dirMeta.isComponent) {
	                  _this.viewComponentTypes.push(dirMeta.type.reference);
	              }
	              else {
	                  _this.viewDirectives.push(dirMeta);
	              }
	          });
	          this.proxyViewFactory = function () {
	              var args = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  args[_i - 0] = arguments[_i];
	              }
	              if (!_this._viewFactory) {
	                  throw new Error("Illegal state: CompiledTemplate for " + stringify(_this.compType) + " is not compiled yet!");
	              }
	              return _this._viewFactory.apply(null, args);
	          };
	          this.proxyComponentFactory = isHost ?
	              new _angular_core.ComponentFactory(selector, this.proxyViewFactory, compType.reference) :
	              null;
	          if (_normalizeResult.syncResult) {
	              this._normalizedCompMeta = _normalizeResult.syncResult;
	          }
	          else {
	              this.loading = _normalizeResult.asyncResult.then(function (normalizedCompMeta) {
	                  _this._normalizedCompMeta = normalizedCompMeta;
	                  _this.loading = null;
	              });
	          }
	      }
	      Object.defineProperty(CompiledTemplate.prototype, "normalizedCompMeta", {
	          get: function () {
	              if (this.loading) {
	                  throw new Error("Template is still loading for " + this.compType.name + "!");
	              }
	              return this._normalizedCompMeta;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      CompiledTemplate.prototype.compiled = function (viewFactory) {
	          this._viewFactory = viewFactory;
	          this.isCompiled = true;
	      };
	      CompiledTemplate.prototype.depsCompiled = function () { this.isCompiledWithDeps = true; };
	      return CompiledTemplate;
	  }());
	  function assertComponent(meta) {
	      if (!meta.isComponent) {
	          throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
	      }
	  }
	  /**
	   * Implements `Compiler` by delegating to the RuntimeCompiler using a known module.
	   */
	  var ModuleBoundCompiler = (function () {
	      function ModuleBoundCompiler(_delegate, _ngModule) {
	          this._delegate = _delegate;
	          this._ngModule = _ngModule;
	      }
	      Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	          get: function () { return this._delegate.injector; },
	          enumerable: true,
	          configurable: true
	      });
	      ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	          return this._delegate.compileModuleSync(moduleType);
	      };
	      ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	          return this._delegate.compileModuleAsync(moduleType);
	      };
	      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	      };
	      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	      };
	      /**
	       * Clears all caches
	       */
	      ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	      /**
	       * Clears the cache for the given component/ngModule.
	       */
	      ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	      return ModuleBoundCompiler;
	  }());

	  // =================================================================================================
	  // =================================================================================================
	  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	  // =================================================================================================
	  // =================================================================================================
	  //
	  //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	  //                               Reach out to mprobst for details.
	  //
	  // =================================================================================================
	  /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	  var SECURITY_SCHEMA = {};
	  function registerContext(ctx, specs) {
	      for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	          var spec = specs_1[_i];
	          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	      }
	  }
	  // Case is insignificant below, all element and attribute names are lower-cased for lookup.
	  registerContext(_angular_core.SecurityContext.HTML, [
	      'iframe|srcdoc',
	      '*|innerHTML',
	      '*|outerHTML',
	  ]);
	  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	  // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	  registerContext(_angular_core.SecurityContext.URL, [
	      '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	      'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	      'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	      'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	  ]);
	  registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	      'applet|code',
	      'applet|codebase',
	      'base|href',
	      'embed|src',
	      'frame|src',
	      'head|profile',
	      'html|manifest',
	      'iframe|src',
	      'link|href',
	      'media|src',
	      'object|codebase',
	      'object|data',
	      'script|src',
	  ]);

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$18 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var BOOLEAN = 'boolean';
	  var NUMBER = 'number';
	  var STRING = 'string';
	  var OBJECT = 'object';
	  /**
	   * This array represents the DOM schema. It encodes inheritance, properties, and events.
	   *
	   * ## Overview
	   *
	   * Each line represents one kind of element. The `element_inheritance` and properties are joined
	   * using `element_inheritance|properties` syntax.
	   *
	   * ## Element Inheritance
	   *
	   * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	   * Here the individual elements are separated by `,` (commas). Every element in the list
	   * has identical properties.
	   *
	   * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	   * specified then `""` (blank) element is assumed.
	   *
	   * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	   * elements.
	   *
	   * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	   *
	   * ## Properties
	   *
	   * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	   * by a special character designating its type:
	   *
	   * - (no prefix): property is a string.
	   * - `*`: property represents an event.
	   * - `!`: property is a boolean.
	   * - `#`: property is a number.
	   * - `%`: property is an object.
	   *
	   * ## Query
	   *
	   * The class creates an internal squas representation which allows to easily answer the query of
	   * if a given property exist on a given element.
	   *
	   * NOTE: We don't yet support querying for types or events.
	   * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	   *       see dom_element_schema_registry_spec.ts
	   */
	  // =================================================================================================
	  // =================================================================================================
	  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	  // =================================================================================================
	  // =================================================================================================
	  //
	  //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	  //
	  // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	  // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	  //
	  // =================================================================================================
	  var SCHEMA = [
	      '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	      '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	      'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	      ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	      ':svg:graphics^:svg:|',
	      ':svg:animation^:svg:|*begin,*end,*repeat',
	      ':svg:geometry^:svg:|',
	      ':svg:componentTransferFunction^:svg:|',
	      ':svg:gradient^:svg:|',
	      ':svg:textContent^:svg:graphics|',
	      ':svg:textPositioning^:svg:textContent|',
	      'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	      'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	      'audio^media|',
	      'br^[HTMLElement]|clear',
	      'base^[HTMLElement]|href,target',
	      'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	      'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	      'canvas^[HTMLElement]|#height,#width',
	      'content^[HTMLElement]|select',
	      'dl^[HTMLElement]|!compact',
	      'datalist^[HTMLElement]|',
	      'details^[HTMLElement]|!open',
	      'dialog^[HTMLElement]|!open,returnValue',
	      'dir^[HTMLElement]|!compact',
	      'div^[HTMLElement]|align',
	      'embed^[HTMLElement]|align,height,name,src,type,width',
	      'fieldset^[HTMLElement]|!disabled,name',
	      'font^[HTMLElement]|color,face,size',
	      'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	      'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	      'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	      'hr^[HTMLElement]|align,color,!noShade,size,width',
	      'head^[HTMLElement]|',
	      'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	      'html^[HTMLElement]|version',
	      'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	      'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	      'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	      'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	      'li^[HTMLElement]|type,#value',
	      'label^[HTMLElement]|htmlFor',
	      'legend^[HTMLElement]|align',
	      'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	      'map^[HTMLElement]|name',
	      'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	      'menu^[HTMLElement]|!compact',
	      'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	      'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	      'ins,del^[HTMLElement]|cite,dateTime',
	      'ol^[HTMLElement]|!compact,!reversed,#start,type',
	      'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	      'optgroup^[HTMLElement]|!disabled,label',
	      'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	      'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	      'p^[HTMLElement]|align',
	      'param^[HTMLElement]|name,type,value,valueType',
	      'picture^[HTMLElement]|',
	      'pre^[HTMLElement]|#width',
	      'progress^[HTMLElement]|#max,#value',
	      'q,blockquote,cite^[HTMLElement]|',
	      'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	      'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	      'shadow^[HTMLElement]|',
	      'source^[HTMLElement]|media,sizes,src,srcset,type',
	      'span^[HTMLElement]|',
	      'style^[HTMLElement]|!disabled,media,type',
	      'caption^[HTMLElement]|align',
	      'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	      'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	      'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	      'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	      'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	      'template^[HTMLElement]|',
	      'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	      'title^[HTMLElement]|text',
	      'track^[HTMLElement]|!default,kind,label,src,srclang',
	      'ul^[HTMLElement]|!compact,type',
	      'unknown^[HTMLElement]|',
	      'video^media|#height,poster,#width',
	      ':svg:a^:svg:graphics|',
	      ':svg:animate^:svg:animation|',
	      ':svg:animateMotion^:svg:animation|',
	      ':svg:animateTransform^:svg:animation|',
	      ':svg:circle^:svg:geometry|',
	      ':svg:clipPath^:svg:graphics|',
	      ':svg:cursor^:svg:|',
	      ':svg:defs^:svg:graphics|',
	      ':svg:desc^:svg:|',
	      ':svg:discard^:svg:|',
	      ':svg:ellipse^:svg:geometry|',
	      ':svg:feBlend^:svg:|',
	      ':svg:feColorMatrix^:svg:|',
	      ':svg:feComponentTransfer^:svg:|',
	      ':svg:feComposite^:svg:|',
	      ':svg:feConvolveMatrix^:svg:|',
	      ':svg:feDiffuseLighting^:svg:|',
	      ':svg:feDisplacementMap^:svg:|',
	      ':svg:feDistantLight^:svg:|',
	      ':svg:feDropShadow^:svg:|',
	      ':svg:feFlood^:svg:|',
	      ':svg:feFuncA^:svg:componentTransferFunction|',
	      ':svg:feFuncB^:svg:componentTransferFunction|',
	      ':svg:feFuncG^:svg:componentTransferFunction|',
	      ':svg:feFuncR^:svg:componentTransferFunction|',
	      ':svg:feGaussianBlur^:svg:|',
	      ':svg:feImage^:svg:|',
	      ':svg:feMerge^:svg:|',
	      ':svg:feMergeNode^:svg:|',
	      ':svg:feMorphology^:svg:|',
	      ':svg:feOffset^:svg:|',
	      ':svg:fePointLight^:svg:|',
	      ':svg:feSpecularLighting^:svg:|',
	      ':svg:feSpotLight^:svg:|',
	      ':svg:feTile^:svg:|',
	      ':svg:feTurbulence^:svg:|',
	      ':svg:filter^:svg:|',
	      ':svg:foreignObject^:svg:graphics|',
	      ':svg:g^:svg:graphics|',
	      ':svg:image^:svg:graphics|',
	      ':svg:line^:svg:geometry|',
	      ':svg:linearGradient^:svg:gradient|',
	      ':svg:mpath^:svg:|',
	      ':svg:marker^:svg:|',
	      ':svg:mask^:svg:|',
	      ':svg:metadata^:svg:|',
	      ':svg:path^:svg:geometry|',
	      ':svg:pattern^:svg:|',
	      ':svg:polygon^:svg:geometry|',
	      ':svg:polyline^:svg:geometry|',
	      ':svg:radialGradient^:svg:gradient|',
	      ':svg:rect^:svg:geometry|',
	      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	      ':svg:script^:svg:|type',
	      ':svg:set^:svg:animation|',
	      ':svg:stop^:svg:|',
	      ':svg:style^:svg:|!disabled,media,title,type',
	      ':svg:switch^:svg:graphics|',
	      ':svg:symbol^:svg:|',
	      ':svg:tspan^:svg:textPositioning|',
	      ':svg:text^:svg:textPositioning|',
	      ':svg:textPath^:svg:textContent|',
	      ':svg:title^:svg:|',
	      ':svg:use^:svg:graphics|',
	      ':svg:view^:svg:|#zoomAndPan',
	      'data^[HTMLElement]|value',
	      'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	      'summary^[HTMLElement]|',
	      'time^[HTMLElement]|dateTime',
	  ];
	  var _ATTR_TO_PROP = {
	      'class': 'className',
	      'formaction': 'formAction',
	      'innerHtml': 'innerHTML',
	      'readonly': 'readOnly',
	      'tabindex': 'tabIndex',
	  };
	  var DomElementSchemaRegistry = (function (_super) {
	      __extends$18(DomElementSchemaRegistry, _super);
	      function DomElementSchemaRegistry() {
	          var _this = this;
	          _super.call(this);
	          this._schema = {};
	          SCHEMA.forEach(function (encodedType) {
	              var type = {};
	              var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	              var properties = strProperties.split(',');
	              var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	              typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	              var superType = superName && _this._schema[superName.toLowerCase()];
	              if (superType) {
	                  Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	              }
	              properties.forEach(function (property) {
	                  if (property.length > 0) {
	                      switch (property[0]) {
	                          case '*':
	                              // We don't yet support events.
	                              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                              // will
	                              // almost certainly introduce bad XSS vulnerabilities.
	                              // type[property.substring(1)] = EVENT;
	                              break;
	                          case '!':
	                              type[property.substring(1)] = BOOLEAN;
	                              break;
	                          case '#':
	                              type[property.substring(1)] = NUMBER;
	                              break;
	                          case '%':
	                              type[property.substring(1)] = OBJECT;
	                              break;
	                          default:
	                              type[property] = STRING;
	                      }
	                  }
	              });
	          });
	      }
	      DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	              return true;
	          }
	          if (tagName.indexOf('-') > -1) {
	              if (tagName === 'ng-container' || tagName === 'ng-content') {
	                  return false;
	              }
	              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                  // Can't tell now as we don't know which properties a custom element will get
	                  // once it is instantiated
	                  return true;
	              }
	          }
	          var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	          return !!elementProperties[propName];
	      };
	      DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	              return true;
	          }
	          if (tagName.indexOf('-') > -1) {
	              if (tagName === 'ng-container' || tagName === 'ng-content') {
	                  return true;
	              }
	              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                  // Allow any custom elements
	                  return true;
	              }
	          }
	          return !!this._schema[tagName.toLowerCase()];
	      };
	      /**
	       * securityContext returns the security context for the given property on the given DOM tag.
	       *
	       * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	       * possible to bind a value into a changing attribute or tag name.
	       *
	       * The filtering is white list based. All attributes in the schema above are assumed to have the
	       * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	       * attack vectors are assigned their appropriate context.
	       */
	      DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName) {
	          // Make sure comparisons are case insensitive, so that case differences between attribute and
	          // property names do not have a security impact.
	          tagName = tagName.toLowerCase();
	          propName = propName.toLowerCase();
	          var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	          if (ctx) {
	              return ctx;
	          }
	          ctx = SECURITY_SCHEMA['*|' + propName];
	          return ctx ? ctx : _angular_core.SecurityContext.NONE;
	      };
	      DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	      DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	      DomElementSchemaRegistry.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DomElementSchemaRegistry.ctorParameters = [];
	      return DomElementSchemaRegistry;
	  }(ElementSchemaRegistry));

	  var _NO_RESOURCE_LOADER = {
	      get: function (url) {
	          throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	      }
	  };
	  /**
	   * A set of providers that provide `RuntimeCompiler` and its dependencies to use for
	   * template compilation.
	   */
	  var COMPILER_PROVIDERS = [
	      { provide: Reflector, useValue: reflector },
	      { provide: ReflectorReader, useExisting: Reflector },
	      { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	      Console,
	      Lexer,
	      Parser,
	      HtmlParser,
	      {
	          provide: I18NHtmlParser,
	          useFactory: function (parser, translations, format) {
	              return new I18NHtmlParser(parser, translations, format);
	          },
	          deps: [
	              HtmlParser,
	              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	          ]
	      },
	      TemplateParser,
	      DirectiveNormalizer,
	      CompileMetadataResolver,
	      DEFAULT_PACKAGE_URL_PROVIDER,
	      StyleCompiler,
	      ViewCompiler,
	      NgModuleCompiler,
	      { provide: CompilerConfig, useValue: new CompilerConfig() },
	      RuntimeCompiler,
	      { provide: _angular_core.Compiler, useExisting: RuntimeCompiler },
	      DomElementSchemaRegistry,
	      { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	      UrlResolver,
	      DirectiveResolver,
	      PipeResolver,
	      NgModuleResolver
	  ];
	  var RuntimeCompilerFactory = (function () {
	      function RuntimeCompilerFactory(defaultOptions) {
	          this._defaultOptions = [{
	                  useDebug: _angular_core.isDevMode(),
	                  useJit: true,
	                  defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
	              }].concat(defaultOptions);
	      }
	      RuntimeCompilerFactory.prototype.createCompiler = function (options) {
	          if (options === void 0) { options = []; }
	          var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
	          var injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	              COMPILER_PROVIDERS, {
	                  provide: CompilerConfig,
	                  useFactory: function () {
	                      return new CompilerConfig({
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers. E.g. important for the testing platform.
	                          genDebugInfo: mergedOptions.useDebug,
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers
	                          useJit: mergedOptions.useJit,
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers
	                          defaultEncapsulation: mergedOptions.defaultEncapsulation,
	                          logBindingUpdate: mergedOptions.useDebug
	                      });
	                  },
	                  deps: []
	              },
	              mergedOptions.providers
	          ]);
	          return injector.get(_angular_core.Compiler);
	      };
	      RuntimeCompilerFactory.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      RuntimeCompilerFactory.ctorParameters = [
	          { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	      ];
	      return RuntimeCompilerFactory;
	  }());
	  function _initReflector() {
	      reflector.reflectionCapabilities = new ReflectionCapabilities();
	  }
	  /**
	   * A platform that included corePlatform and the compiler.
	   *
	   * @experimental
	   */
	  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	      { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	      { provide: _angular_core.CompilerFactory, useClass: RuntimeCompilerFactory },
	      { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	  ]);
	  function _mergeOptions(optionsArr) {
	      return {
	          useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),
	          useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	          defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	          providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))
	      };
	  }
	  function _lastDefined(args) {
	      for (var i = args.length - 1; i >= 0; i--) {
	          if (args[i] !== undefined) {
	              return args[i];
	          }
	      }
	      return undefined;
	  }
	  function _mergeArrays(parts) {
	      var result = [];
	      parts.forEach(function (part) { return part && result.push.apply(result, part); });
	      return result;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  // asset:<package-name>/<realm>/<path-to-module>
	  var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
	  /**
	   * Interface that defines how import statements should be generated.
	   */
	  var ImportGenerator = (function () {
	      function ImportGenerator() {
	      }
	      ImportGenerator.parseAssetUrl = function (url) { return AssetUrl.parse(url); };
	      return ImportGenerator;
	  }());
	  var AssetUrl = (function () {
	      function AssetUrl(packageName, firstLevelDir, modulePath) {
	          this.packageName = packageName;
	          this.firstLevelDir = firstLevelDir;
	          this.modulePath = modulePath;
	      }
	      AssetUrl.parse = function (url, allowNonMatching) {
	          if (allowNonMatching === void 0) { allowNonMatching = true; }
	          var match = url.match(_ASSET_URL_RE);
	          if (match !== null) {
	              return new AssetUrl(match[1], match[2], match[3]);
	          }
	          if (allowNonMatching) {
	              return null;
	          }
	          throw new Error("Url " + url + " is not a valid asset: url");
	      };
	      return AssetUrl;
	  }());

	  var __compiler_private__ = {
	      SelectorMatcher: SelectorMatcher,
	      CssSelector: CssSelector,
	      AssetUrl: AssetUrl,
	      ImportGenerator: ImportGenerator,
	      CompileMetadataResolver: CompileMetadataResolver,
	      HtmlParser: HtmlParser,
	      InterpolationConfig: InterpolationConfig,
	      DirectiveNormalizer: DirectiveNormalizer,
	      Lexer: Lexer,
	      Parser: Parser,
	      ParseLocation: ParseLocation,
	      ParseError: ParseError,
	      ParseErrorLevel: ParseErrorLevel,
	      ParseSourceFile: ParseSourceFile,
	      ParseSourceSpan: ParseSourceSpan,
	      TemplateParser: TemplateParser,
	      DomElementSchemaRegistry: DomElementSchemaRegistry,
	      StyleCompiler: StyleCompiler,
	      ViewCompiler: ViewCompiler,
	      NgModuleCompiler: NgModuleCompiler,
	      TypeScriptEmitter: TypeScriptEmitter
	  };

	  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	  exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
	  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	  exports.CompileFactoryMetadata = CompileFactoryMetadata;
	  exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
	  exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
	  exports.CompilePipeMetadata = CompilePipeMetadata;
	  exports.CompileProviderMetadata = CompileProviderMetadata;
	  exports.CompileQueryMetadata = CompileQueryMetadata;
	  exports.CompileTemplateMetadata = CompileTemplateMetadata;
	  exports.CompileTokenMetadata = CompileTokenMetadata;
	  exports.CompileTypeMetadata = CompileTypeMetadata;
	  exports.CompilerConfig = CompilerConfig;
	  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	  exports.DirectiveResolver = DirectiveResolver;
	  exports.NgModuleResolver = NgModuleResolver;
	  exports.OfflineCompiler = OfflineCompiler;
	  exports.PipeResolver = PipeResolver;
	  exports.RenderTypes = RenderTypes;
	  exports.ResourceLoader = ResourceLoader;
	  exports.RuntimeCompiler = RuntimeCompiler;
	  exports.SourceModule = SourceModule;
	  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	  exports.UrlResolver = UrlResolver;
	  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	  exports.platformCoreDynamic = platformCoreDynamic;
	  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	  exports.InterpolationConfig = InterpolationConfig;
	  exports.ElementSchemaRegistry = ElementSchemaRegistry;
	  exports.I18NHtmlParser = I18NHtmlParser;
	  exports.MessageBundle = MessageBundle;
	  exports.Xliff = Xliff;
	  exports.Xmb = Xmb;
	  exports.Xtb = Xtb;
	  exports.TextAst = TextAst;
	  exports.BoundTextAst = BoundTextAst;
	  exports.AttrAst = AttrAst;
	  exports.BoundElementPropertyAst = BoundElementPropertyAst;
	  exports.BoundEventAst = BoundEventAst;
	  exports.ReferenceAst = ReferenceAst;
	  exports.VariableAst = VariableAst;
	  exports.ElementAst = ElementAst;
	  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	  exports.DirectiveAst = DirectiveAst;
	  exports.ProviderAst = ProviderAst;
	  exports.NgContentAst = NgContentAst;
	  exports.templateVisitAll = templateVisitAll;
	  exports.__compiler_private__ = __compiler_private__;

	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.0.0
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(8), __webpack_require__(9)) :
	    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subject', 'rxjs/Observable'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx));
	}(this, function (exports,rxjs_Subject,rxjs_Observable) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    function scheduleMicroTask(fn) {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var global$1 = globalScope;
	    function getTypeNameForDebugging(type) {
	        if (type['name']) {
	            return type['name'];
	        }
	        return typeof type;
	    }
	    var Math = global$1.Math;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj !== undefined && obj !== null;
	    }
	    function isBlank(obj) {
	        return obj === undefined || obj === null;
	    }
	    function isString(obj) {
	        return typeof obj === 'string';
	    }
	    function isFunction(obj) {
	        return typeof obj === 'function';
	    }
	    function isPromise(obj) {
	        // allow any Promise/A+ compliant thenable.
	        // It's up to the caller to ensure that obj.then conforms to the spec
	        return isPresent(obj) && isFunction(obj.then);
	    }
	    function isArray(obj) {
	        return Array.isArray(obj);
	    }
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token === undefined || token === null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return token.overriddenName;
	        }
	        if (token.name) {
	            return token.name;
	        }
	        var res = token.toString();
	        var newLineIndex = res.indexOf('\n');
	        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	    }
	    var StringWrapper = (function () {
	        function StringWrapper() {
	        }
	        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	        StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	        StringWrapper.equals = function (s, s2) { return s === s2; };
	        StringWrapper.stripLeft = function (s, charVal) {
	            if (s && s.length) {
	                var pos = 0;
	                for (var i = 0; i < s.length; i++) {
	                    if (s[i] != charVal)
	                        break;
	                    pos++;
	                }
	                s = s.substring(pos);
	            }
	            return s;
	        };
	        StringWrapper.stripRight = function (s, charVal) {
	            if (s && s.length) {
	                var pos = s.length;
	                for (var i = s.length - 1; i >= 0; i--) {
	                    if (s[i] != charVal)
	                        break;
	                    pos--;
	                }
	                s = s.substring(0, pos);
	            }
	            return s;
	        };
	        StringWrapper.replace = function (s, from, replace) {
	            return s.replace(from, replace);
	        };
	        StringWrapper.replaceAll = function (s, from, replace) {
	            return s.replace(from, replace);
	        };
	        StringWrapper.slice = function (s, from, to) {
	            if (from === void 0) { from = 0; }
	            if (to === void 0) { to = null; }
	            return s.slice(from, to === null ? undefined : to);
	        };
	        StringWrapper.replaceAllMapped = function (s, from, cb) {
	            return s.replace(from, function () {
	                var matches = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    matches[_i - 0] = arguments[_i];
	                }
	                // Remove offset & string from the result array
	                matches.splice(-2, 2);
	                // The callback receives match, p1, ..., pn
	                return cb(matches);
	            });
	        };
	        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	        StringWrapper.compare = function (a, b) {
	            if (a < b) {
	                return -1;
	            }
	            else if (a > b) {
	                return 1;
	            }
	            else {
	                return 0;
	            }
	        };
	        return StringWrapper;
	    }());
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	        NumberWrapper.equal = function (a, b) { return a === b; };
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        NumberWrapper.parseInt = function (text, radix) {
	            if (radix == 10) {
	                if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else if (radix == 16) {
	                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else {
	                var result = parseInt(text, radix);
	                if (!isNaN(result)) {
	                    return result;
	                }
	            }
	            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	        };
	        Object.defineProperty(NumberWrapper, "NaN", {
	            get: function () { return NaN; },
	            enumerable: true,
	            configurable: true
	        });
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        NumberWrapper.isNaN = function (value) { return isNaN(value); };
	        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	        return NumberWrapper;
	    }());
	    // JS has NaN !== NaN
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    // JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	    function getMapKey(value) {
	        return value;
	    }
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    function print(obj) {
	        console.log(obj);
	    }
	    function warn(obj) {
	        console.warn(obj);
	    }
	    var _symbolIterator = null;
	    function getSymbolIterator() {
	        if (isBlank(_symbolIterator)) {
	            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        Map.prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }

	    var _nextClassId = 0;
	    function extractAnnotation(annotation) {
	        if (isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
	            // it is a decorator, extract annotation
	            annotation = annotation.annotation;
	        }
	        return annotation;
	    }
	    function applyParams(fnOrArray, key) {
	        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	            fnOrArray === Number || fnOrArray === Array) {
	            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	        }
	        if (isFunction(fnOrArray)) {
	            return fnOrArray;
	        }
	        else if (fnOrArray instanceof Array) {
	            var annotations = fnOrArray;
	            var annoLength = annotations.length - 1;
	            var fn = fnOrArray[annoLength];
	            if (!isFunction(fn)) {
	                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	            }
	            if (annoLength != fn.length) {
	                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	            }
	            var paramsAnnotations = [];
	            for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
	                var paramAnnotations = [];
	                paramsAnnotations.push(paramAnnotations);
	                var annotation = annotations[i];
	                if (annotation instanceof Array) {
	                    for (var j = 0; j < annotation.length; j++) {
	                        paramAnnotations.push(extractAnnotation(annotation[j]));
	                    }
	                }
	                else if (isFunction(annotation)) {
	                    paramAnnotations.push(extractAnnotation(annotation));
	                }
	                else {
	                    paramAnnotations.push(annotation);
	                }
	            }
	            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	            return fn;
	        }
	        else {
	            throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	        }
	    }
	    /**
	     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	     *
	     * ## Basic Example
	     *
	     * ```
	     * var Greeter = ng.Class({
	     *   constructor: function(name) {
	     *     this.name = name;
	     *   },
	     *
	     *   greet: function() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class Greeter {
	     *   constructor(name) {
	     *     this.name = name;
	     *   }
	     *
	     *   greet() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * }
	     * ```
	     *
	     * or equivalent to ES5:
	     *
	     * ```
	     * var Greeter = function (name) {
	     *   this.name = name;
	     * }
	     *
	     * Greeter.prototype.greet = function () {
	     *   alert('Hello ' + this.name + '!');
	     * }
	     * ```
	     *
	     * ### Example with parameter annotations
	     *
	     * ```
	     * var MyService = ng.Class({
	     *   constructor: [String, [new Query(), QueryList], function(name, queryList) {
	     *     ...
	     *   }]
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class MyService {
	     *   constructor(name: string, @Query() queryList: QueryList) {
	     *     ...
	     *   }
	     * }
	     * ```
	     *
	     * ### Example with inheritance
	     *
	     * ```
	     * var Shape = ng.Class({
	     *   constructor: (color) {
	     *     this.color = color;
	     *   }
	     * });
	     *
	     * var Square = ng.Class({
	     *   extends: Shape,
	     *   constructor: function(color, size) {
	     *     Shape.call(this, color);
	     *     this.size = size;
	     *   }
	     * });
	     * ```
	     * @stable
	     */
	    function Class(clsDef) {
	        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	        var proto = constructor.prototype;
	        if (clsDef.hasOwnProperty('extends')) {
	            if (isFunction(clsDef.extends)) {
	                constructor.prototype = proto =
	                    Object.create(clsDef.extends.prototype);
	            }
	            else {
	                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	            }
	        }
	        for (var key in clsDef) {
	            if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
	                proto[key] = applyParams(clsDef[key], key);
	            }
	        }
	        if (this && this.annotations instanceof Array) {
	            Reflect.defineMetadata('annotations', this.annotations, constructor);
	        }
	        var constructorName = constructor['name'];
	        if (!constructorName || constructorName === 'constructor') {
	            constructor['overriddenName'] = "class" + _nextClassId++;
	        }
	        return constructor;
	    }
	    var Reflect = global$1.Reflect;
	    function makeDecorator(name, props, parentClass, chainFn) {
	        if (chainFn === void 0) { chainFn = null; }
	        var metaCtor = makeMetadataCtor([props]);
	        function DecoratorFactory(objOrType) {
	            if (!(Reflect && Reflect.getMetadata)) {
	                throw 'reflect-metadata shim is required when using class decorators';
	            }
	            if (this instanceof DecoratorFactory) {
	                metaCtor.call(this, objOrType);
	                return this;
	            }
	            else {
	                var annotationInstance_1 = new DecoratorFactory(objOrType);
	                var chainAnnotation = isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
	                chainAnnotation.push(annotationInstance_1);
	                var TypeDecorator = function TypeDecorator(cls) {
	                    var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	                    annotations.push(annotationInstance_1);
	                    Reflect.defineMetadata('annotations', annotations, cls);
	                    return cls;
	                };
	                TypeDecorator.annotations = chainAnnotation;
	                TypeDecorator.Class = Class;
	                if (chainFn)
	                    chainFn(TypeDecorator);
	                return TypeDecorator;
	            }
	        }
	        if (parentClass) {
	            DecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        DecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        DecoratorFactory.annotationCls = DecoratorFactory;
	        return DecoratorFactory;
	    }
	    function makeMetadataCtor(props) {
	        function ctor() {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            props.forEach(function (prop, i) {
	                var argVal = args[i];
	                if (Array.isArray(prop)) {
	                    // plain parameter
	                    var val = !argVal || argVal === undefined ? prop[1] : argVal;
	                    _this[prop[0]] = val;
	                }
	                else {
	                    for (var propName in prop) {
	                        var val = !argVal || argVal[propName] === undefined ? prop[propName] : argVal[propName];
	                        _this[propName] = val;
	                    }
	                }
	            });
	        }
	        return ctor;
	    }
	    function makeParamDecorator(name, props, parentClass) {
	        var metaCtor = makeMetadataCtor(props);
	        function ParamDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof ParamDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
	            ParamDecorator.annotation = annotationInstance;
	            return ParamDecorator;
	            function ParamDecorator(cls, unusedKey, index) {
	                var parameters = Reflect.getMetadata('parameters', cls) || [];
	                // there might be gaps if some in between parameters do not have annotations.
	                // we pad with nulls.
	                while (parameters.length <= index) {
	                    parameters.push(null);
	                }
	                parameters[index] = parameters[index] || [];
	                var annotationsForParam = parameters[index];
	                annotationsForParam.push(annotationInstance);
	                Reflect.defineMetadata('parameters', parameters, cls);
	                return cls;
	            }
	            var _a;
	        }
	        if (parentClass) {
	            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
	        return ParamDecoratorFactory;
	    }
	    function makePropDecorator(name, props, parentClass) {
	        var metaCtor = makeMetadataCtor(props);
	        function PropDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof PropDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            else {
	                var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
	                return function PropDecorator(target, name) {
	                    var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	                    meta[name] = meta[name] || [];
	                    meta[name].unshift(decoratorInstance);
	                    Reflect.defineMetadata('propMetadata', meta, target.constructor);
	                };
	            }
	            var _a;
	        }
	        if (parentClass) {
	            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
	        return PropDecoratorFactory;
	    }

	    /**
	     * Inject decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Inject = makeParamDecorator('Inject', [['token', undefined]]);
	    /**
	     * Optional decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Optional = makeParamDecorator('Optional', []);
	    /**
	     * Injectable decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Injectable = makeParamDecorator('Injectable', []);
	    /**
	     * Self decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Self = makeParamDecorator('Self', []);
	    /**
	     * SkipSelf decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var SkipSelf = makeParamDecorator('SkipSelf', []);
	    /**
	     * Host decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Host = makeParamDecorator('Host', []);

	    /**
	     * Creates a token that can be used in a DI Provider.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	     *
	     * ```typescript
	     * var t = new OpaqueToken("value");
	     *
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: t, useValue: "bindingValue"}
	     * ]);
	     *
	     * expect(injector.get(t)).toEqual("bindingValue");
	     * ```
	     *
	     * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	     * caused by multiple providers using the same string as two different tokens.
	     *
	     * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	     * error messages.
	     * @stable
	     */
	    // so that metadata is gathered for this class
	    var OpaqueToken = (function () {
	        function OpaqueToken(_desc) {
	            this._desc = _desc;
	        }
	        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	        OpaqueToken.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        OpaqueToken.ctorParameters = [
	            null,
	        ];
	        return OpaqueToken;
	    }());

	    /**
	     * This token can be used to create a virtual provider that will populate the
	     * `entryComponents` fields of components and ng modules based on its `useValue`.
	     * All components that are referenced in the `useValue` value (either directly
	     * or in a nested array or map) will be added to the `entryComponents` property.
	     *
	     * ### Example
	     * The following example shows how the router can populate the `entryComponents`
	     * field of an NgModule based on the router configuration which refers
	     * to components.
	     *
	     * ```typescript
	     * // helper function inside the router
	     * function provideRoutes(routes) {
	     *   return [
	     *     {provide: ROUTES, useValue: routes},
	     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	     *   ];
	     * }
	     *
	     * // user code
	     * let routes = [
	     *   {path: '/root', component: RootComp},
	     *   {path: '/teams', component: TeamsComp}
	     * ];
	     *
	     * @NgModule({
	     *   providers: [provideRoutes(routes)]
	     * })
	     * class ModuleWithRoutes {}
	     * ```
	     *
	     * @experimental
	     */
	    var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
	    /**
	     * Attribute decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	    /**
	     * Base class for query metadata.
	     *
	     * See {@link ContentChildren}, {@link ContentChild}, {@link ViewChildren}, {@link ViewChild} for
	     * more information.
	     *
	     * @stable
	     */
	    var Query = (function () {
	        function Query() {
	        }
	        return Query;
	    }());
	    /**
	     * ContentChildren decorator and metadata.
	     *
	     *  @stable
	     *  @Annotation
	     */
	    var ContentChildren = makePropDecorator('ContentChildren', [
	        ['selector', undefined],
	        { first: false, isViewQuery: false, descendants: false, read: undefined }
	    ], Query);
	    /**
	     * @whatItDoes Configures a content query.
	     *
	     * @howToUse
	     *
	     * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}
	     *
	     * @description
	     *
	     * You can use ContentChild to get the first element or the directive matching the selector from the
	     * content DOM. If the content DOM changes, and a new child matches the selector,
	     * the property will be updated.
	     *
	     * Content queries are set before the `ngAfterContentInit` callback is called.
	     *
	     * **Metadata Properties**:
	     *
	     * * **selector** - the directive type or the name used for querying.
	     * * **read** - read a different token from the queried element.
	     *
	     * Let's look at an example:
	     *
	     * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/core`
	     *
	     * @stable
	     * @Annotation
	     */
	    var ContentChild = makePropDecorator('ContentChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: false,
	            descendants: false,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * @whatItDoes Configures a view query.
	     *
	     * @howToUse
	     *
	     * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}
	     *
	     * @description
	     *
	     * You can use ViewChildren to get the {@link QueryList} of elements or directives from the
	     * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,
	     * and the changes observable of the query list will emit a new value.
	     *
	     * View queries are set before the `ngAfterViewInit` callback is called.
	     *
	     * **Metadata Properties**:
	     *
	     * * **selector** - the directive type or the name used for querying.
	     * * **read** - read a different token from the queried elements.
	     *
	     * Let's look at an example:
	     *
	     * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/core`
	     *
	     * @stable
	     * @Annotation
	     */
	    var ViewChildren = makePropDecorator('ViewChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var ViewChild = makePropDecorator('ViewChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);

	    /**
	     * Describes within the change detector which strategy will be used the next time change
	     * detection is triggered.
	     * @stable
	     */
	    exports.ChangeDetectionStrategy;
	    (function (ChangeDetectionStrategy) {
	        /**
	         * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
	         */
	        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
	        /**
	         * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
	         */
	        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
	    })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
	    /**
	     * Describes the status of the detector.
	     */
	    var ChangeDetectorStatus;
	    (function (ChangeDetectorStatus) {
	        /**
	         * `CheckedOnce` means that after calling detectChanges the mode of the change detector
	         * will become `Checked`.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
	        /**
	         * `Checked` means that the change detector should be skipped until its mode changes to
	         * `CheckOnce`.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
	        /**
	         * `CheckAlways` means that after calling detectChanges the mode of the change detector
	         * will remain `CheckAlways`.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
	        /**
	         * `Detached` means that the change detector sub tree is not a part of the main tree and
	         * should be skipped.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
	        /**
	         * `Errored` means that the change detector encountered an error checking a binding
	         * or calling a directive lifecycle method and is now in an inconsistent state. Change
	         * detectors in this state will no longer detect changes.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
	        /**
	         * `Destroyed` means that the change detector is destroyed.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
	    })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
	    /**
	     * List of possible {@link ChangeDetectionStrategy} values.
	     */
	    var CHANGE_DETECTION_STRATEGY_VALUES = [
	        exports.ChangeDetectionStrategy.OnPush,
	        exports.ChangeDetectionStrategy.Default,
	    ];
	    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	        return isBlank(changeDetectionStrategy) ||
	            changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
	    }

	    /**
	     * Directive decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Directive = makeDecorator('Directive', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        providers: undefined,
	        exportAs: undefined,
	        queries: undefined
	    });
	    /**
	     * Component decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Component = makeDecorator('Component', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        exportAs: undefined,
	        moduleId: undefined,
	        providers: undefined,
	        viewProviders: undefined,
	        changeDetection: exports.ChangeDetectionStrategy.Default,
	        queries: undefined,
	        templateUrl: undefined,
	        template: undefined,
	        styleUrls: undefined,
	        styles: undefined,
	        animations: undefined,
	        encapsulation: undefined,
	        interpolation: undefined,
	        entryComponents: undefined
	    }, Directive);
	    /**
	     * Pipe decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Pipe = makeDecorator('Pipe', {
	        name: undefined,
	        pure: true,
	    });
	    /**
	     * Input decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	    /**
	     * Output decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @stable
	     */
	    var LifecycleHooks;
	    (function (LifecycleHooks) {
	        LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
	        LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
	        LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
	        LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
	        LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
	        LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
	        LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
	        LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
	    })(LifecycleHooks || (LifecycleHooks = {}));
	    var LIFECYCLE_HOOKS_VALUES = [
	        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	        LifecycleHooks.AfterViewChecked
	    ];
	    /**
	     * @whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
	     *
	     * @description
	     * `ngOnChanges` is called right after the data-bound properties have been checked and before view
	     * and content children are checked if at least one of them has changed.
	     * The `changes` parameter contains the changed properties.
	     *
	     * See {@linkDocs guide/lifecycle-hooks#onchanges "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var OnChanges = (function () {
	        function OnChanges() {
	        }
	        return OnChanges;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after data-bound properties of a directive are
	     * initialized.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
	     *
	     * @description
	     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
	     * first time, and before any of its children have been checked. It is invoked only once when the
	     * directive is instantiated.
	     *
	     * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var OnInit = (function () {
	        function OnInit() {
	        }
	        return OnInit;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
	     *
	     * @description
	     * `ngDoCheck` gets called to check the changes in the directives in addition to the default
	     * algorithm. The default change detection algorithm looks for differences by comparing
	     * bound-property values by reference across change detection runs.
	     *
	     * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to
	     * changes on the same input, as `ngOnChanges` will continue to be called when the default change
	     * detector detects changes.
	     *
	     * See {@link KeyValueDiffers} and {@link IterableDiffers} for implementing custom dirty checking
	     * for collections.
	     *
	     * See {@linkDocs guide/lifecycle-hooks#docheck "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var DoCheck = (function () {
	        function DoCheck() {
	        }
	        return DoCheck;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called when a directive or pipe is destroyed.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
	     *
	     * @description
	     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
	     * instance is destroyed.
	     *
	     * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var OnDestroy = (function () {
	        function OnDestroy() {
	        }
	        return OnDestroy;
	    }());
	    /**
	     *
	     * @whatItDoes Lifecycle hook that is called after a directive's content has been fully
	     * initialized.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterContentInit = (function () {
	        function AfterContentInit() {
	        }
	        return AfterContentInit;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after every check of a directive's content.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterContentChecked = (function () {
	        function AfterContentChecked() {
	        }
	        return AfterContentChecked;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after a component's view has been fully
	     * initialized.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterViewInit = (function () {
	        function AfterViewInit() {
	        }
	        return AfterViewInit;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after every check of a component's view.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterViewChecked = (function () {
	        function AfterViewChecked() {
	        }
	        return AfterViewChecked;
	    }());

	    /**
	     * Defines a schema that will allow:
	     * - any non-angular elements with a `-` in their name,
	     * - any properties on elements with a `-` in their name which is the common rule for custom
	     * elements.
	     *
	     * @stable
	     */
	    var CUSTOM_ELEMENTS_SCHEMA = {
	        name: 'custom-elements'
	    };
	    /**
	     * Defines a schema that will allow any property on any element.
	     *
	     * @experimental
	     */
	    var NO_ERRORS_SCHEMA = {
	        name: 'no-errors-schema'
	    };
	    /**
	     * NgModule decorator and metadata
	     *
	     * @stable
	     * @Annotation
	     */
	    var NgModule = makeDecorator('NgModule', {
	        providers: undefined,
	        declarations: undefined,
	        imports: undefined,
	        exports: undefined,
	        entryComponents: undefined,
	        bootstrap: undefined,
	        schemas: undefined,
	        id: undefined,
	    });

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Defines template and style encapsulation options available for Component's {@link Component}.
	     *
	     * See {@link ViewMetadata#encapsulation}.
	     * @stable
	     */
	    exports.ViewEncapsulation;
	    (function (ViewEncapsulation) {
	        /**
	         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	         * Element and pre-processing the style rules provided via
	         * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
	         * attribute to all selectors.
	         *
	         * This is the default option.
	         */
	        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	        /**
	         * Use the native encapsulation mechanism of the renderer.
	         *
	         * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	         * creating a ShadowRoot for Component's Host Element.
	         */
	        ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	        /**
	         * Don't provide any template or style encapsulation.
	         */
	        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
	    var VIEW_ENCAPSULATION_VALUES = [exports.ViewEncapsulation.Emulated, exports.ViewEncapsulation.Native, exports.ViewEncapsulation.None];
	    /**
	     * Metadata properties available for configuring Views.
	     *
	     * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	     * `@View` annotation specifies the HTML template to use, and lists the directives that are active
	     * within the template.
	     *
	     * When a component is instantiated, the template is loaded into the component's shadow root, and
	     * the expressions and statements in the template are evaluated against the component.
	     *
	     * For details on the `@Component` annotation, see {@link Component}.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   selector: 'greet',
	     *   template: 'Hello {{name}}!',
	     *   directives: [GreetUser, Bold]
	     * })
	     * class Greet {
	     *   name: string;
	     *
	     *   constructor() {
	     *     this.name = 'World';
	     *   }
	     * }
	     * ```
	     *
	     * @deprecated Use Component instead.
	     */
	    var ViewMetadata = (function () {
	        function ViewMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	            this.templateUrl = templateUrl;
	            this.template = template;
	            this.styleUrls = styleUrls;
	            this.styles = styles;
	            this.encapsulation = encapsulation;
	            this.animations = animations;
	            this.interpolation = interpolation;
	        }
	        return ViewMetadata;
	    }());

	    /**
	     * Allows to refer to references which are not yet defined.
	     *
	     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	     * DI is declared,
	     * but not yet defined. It is also used when the `token` which we use when creating a query is not
	     * yet defined.
	     *
	     * ### Example
	     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	     * @experimental
	     */
	    function forwardRef(forwardRefFn) {
	        forwardRefFn.__forward_ref__ = forwardRef;
	        forwardRefFn.toString = function () { return stringify(this()); };
	        return forwardRefFn;
	    }
	    /**
	     * Lazily retrieves the reference value from a forwardRef.
	     *
	     * Acts as the identity function when given a non-forward-ref value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	     *
	     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	     *
	     * See: {@link forwardRef}
	     * @experimental
	     */
	    function resolveForwardRef(type) {
	        if (isFunction(type) && type.hasOwnProperty('__forward_ref__') &&
	            type.__forward_ref__ === forwardRef) {
	            return type();
	        }
	        else {
	            return type;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * @stable
	     */
	    var BaseError = (function (_super) {
	        __extends(BaseError, _super);
	        function BaseError(message) {
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            var nativeError = _super.call(this, message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            get: function () { return this._nativeError.message; },
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            get: function () { return this._nativeError.stack; },
	            set: function (value) { this._nativeError.stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * @stable
	     */
	    var WrappedError = (function (_super) {
	        __extends(WrappedError, _super);
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            get: function () {
	                return (this.originalError instanceof Error ? this.originalError : this._nativeError)
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    var _THROW_IF_NOT_FOUND = new Object();
	    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	    var _NullInjector = (function () {
	        function _NullInjector() {
	        }
	        _NullInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	            if (notFoundValue === _THROW_IF_NOT_FOUND) {
	                throw new Error("No provider for " + stringify(token) + "!");
	            }
	            return notFoundValue;
	        };
	        return _NullInjector;
	    }());
	    /**
	     * @whatItDoes Injector interface
	     * @howToUse
	     * ```
	     * const injector: Injector = ...;
	     * injector.get(...);
	     * ```
	     *
	     * @description
	     * For more details, see the {@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	     *
	     * ### Example
	     *
	     * {@example core/di/ts/injector_spec.ts region='Injector'}
	     *
	     * `Injector` returns itself when given `Injector` as a token:
	     * {@example core/di/ts/injector_spec.ts region='injectInjector'}
	     *
	     * @stable
	     */
	    var Injector = (function () {
	        function Injector() {
	        }
	        /**
	         * Retrieves an instance from the injector based on the provided token.
	         * If not found:
	         * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to
	         * Injector.THROW_IF_NOT_FOUND is given
	         * - Returns the `notFoundValue` otherwise
	         * ```
	         */
	        Injector.prototype.get = function (token, notFoundValue) { return unimplemented(); };
	        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	        Injector.NULL = new _NullInjector();
	        return Injector;
	    }());

	    var Map$1 = global$1.Map;
	    var Set = global$1.Set;
	    // Safari and Internet Explorer do not support the iterable parameter to the
	    // Map constructor.  We work around that by manually adding the items.
	    var createMapFromPairs = (function () {
	        try {
	            if (new Map$1([[1, 2]]).size === 1) {
	                return function createMapFromPairs(pairs) { return new Map$1(pairs); };
	            }
	        }
	        catch (e) {
	        }
	        return function createMapAndPopulateFromPairs(pairs) {
	            var map = new Map$1();
	            for (var i = 0; i < pairs.length; i++) {
	                var pair = pairs[i];
	                map.set(pair[0], pair[1]);
	            }
	            return map;
	        };
	    })();
	    var createMapFromMap = (function () {
	        try {
	            if (new Map$1(new Map$1())) {
	                return function createMapFromMap(m) { return new Map$1(m); };
	            }
	        }
	        catch (e) {
	        }
	        return function createMapAndPopulateFromMap(m) {
	            var map = new Map$1();
	            m.forEach(function (v, k) { map.set(k, v); });
	            return map;
	        };
	    })();
	    var _clearValues = (function () {
	        if ((new Map$1()).keys().next) {
	            return function _clearValues(m) {
	                var keyIterator = m.keys();
	                var k;
	                while (!((k = keyIterator.next()).done)) {
	                    m.set(k.value, null);
	                }
	            };
	        }
	        else {
	            return function _clearValuesWithForeEach(m) {
	                m.forEach(function (v, k) { m.set(k, null); });
	            };
	        }
	    })();
	    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	    var _arrayFromMap = (function () {
	        try {
	            if ((new Map$1()).values().next) {
	                return function createArrayFromMap(m, getValues) {
	                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
	                };
	            }
	        }
	        catch (e) {
	        }
	        return function createArrayFromMapWithForeach(m, getValues) {
	            var res = ListWrapper.createFixedSize(m.size), i = 0;
	            m.forEach(function (v, k) {
	                res[i] = getValues ? v : k;
	                i++;
	            });
	            return res;
	        };
	    })();
	    var MapWrapper = (function () {
	        function MapWrapper() {
	        }
	        MapWrapper.clone = function (m) { return createMapFromMap(m); };
	        MapWrapper.createFromStringMap = function (stringMap) {
	            var result = new Map$1();
	            for (var prop in stringMap) {
	                result.set(prop, stringMap[prop]);
	            }
	            return result;
	        };
	        MapWrapper.toStringMap = function (m) {
	            var r = {};
	            m.forEach(function (v, k) { return r[k] = v; });
	            return r;
	        };
	        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };
	        MapWrapper.clearValues = function (m) { _clearValues(m); };
	        MapWrapper.iterable = function (m) { return m; };
	        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };
	        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };
	        return MapWrapper;
	    }());
	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        StringMapWrapper.create = function () {
	            // Note: We are not using Object.create(null) here due to
	            // performance!
	            // http://jsperf.com/ng2-object-create-null
	            return {};
	        };
	        StringMapWrapper.contains = function (map, key) {
	            return map.hasOwnProperty(key);
	        };
	        StringMapWrapper.get = function (map, key) {
	            return map.hasOwnProperty(key) ? map[key] : undefined;
	        };
	        StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	        StringMapWrapper.keys = function (map) { return Object.keys(map); };
	        StringMapWrapper.values = function (map) {
	            return Object.keys(map).map(function (k) { return map[k]; });
	        };
	        StringMapWrapper.isEmpty = function (map) {
	            for (var prop in map) {
	                return false;
	            }
	            return true;
	        };
	        StringMapWrapper.delete = function (map, key) { delete map[key]; };
	        StringMapWrapper.forEach = function (map, callback) {
	            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
	                var k = _a[_i];
	                callback(map[k], k);
	            }
	        };
	        StringMapWrapper.merge = function (m1, m2) {
	            var m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        StringMapWrapper.equals = function (m1, m2) {
	            var k1 = Object.keys(m1);
	            var k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var i = 0; i < k1.length; i++) {
	                var key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        // JS has no way to express a statically fixed size list, but dart does so we
	        // keep both methods.
	        ListWrapper.createFixedSize = function (size) { return new Array(size); };
	        ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	        ListWrapper.clone = function (array) { return array.slice(0); };
	        ListWrapper.forEachWithIndex = function (array, fn) {
	            for (var i = 0; i < array.length; i++) {
	                fn(array[i], i);
	            }
	        };
	        ListWrapper.first = function (array) {
	            if (!array)
	                return null;
	            return array[0];
	        };
	        ListWrapper.last = function (array) {
	            if (!array || array.length == 0)
	                return null;
	            return array[array.length - 1];
	        };
	        ListWrapper.indexOf = function (array, value, startIndex) {
	            if (startIndex === void 0) { startIndex = 0; }
	            return array.indexOf(value, startIndex);
	        };
	        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	        ListWrapper.reversed = function (array) {
	            var a = ListWrapper.clone(array);
	            return a.reverse();
	        };
	        ListWrapper.concat = function (a, b) { return a.concat(b); };
	        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	        ListWrapper.removeAt = function (list, index) {
	            var res = list[index];
	            list.splice(index, 1);
	            return res;
	        };
	        ListWrapper.removeAll = function (list, items) {
	            for (var i = 0; i < items.length; ++i) {
	                var index = list.indexOf(items[i]);
	                list.splice(index, 1);
	            }
	        };
	        ListWrapper.remove = function (list, el) {
	            var index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        ListWrapper.clear = function (list) { list.length = 0; };
	        ListWrapper.isEmpty = function (list) { return list.length == 0; };
	        ListWrapper.fill = function (list, value, start, end) {
	            if (start === void 0) { start = 0; }
	            if (end === void 0) { end = null; }
	            list.fill(value, start, end === null ? list.length : end);
	        };
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        ListWrapper.slice = function (l, from, to) {
	            if (from === void 0) { from = 0; }
	            if (to === void 0) { to = null; }
	            return l.slice(from, to === null ? undefined : to);
	        };
	        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	        ListWrapper.sort = function (l, compareFn) {
	            if (isPresent(compareFn)) {
	                l.sort(compareFn);
	            }
	            else {
	                l.sort();
	            }
	        };
	        ListWrapper.toString = function (l) { return l.toString(); };
	        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	        ListWrapper.maximum = function (list, predicate) {
	            if (list.length == 0) {
	                return null;
	            }
	            var solution = null;
	            var maxValue = -Infinity;
	            for (var index = 0; index < list.length; index++) {
	                var candidate = list[index];
	                if (isBlank(candidate)) {
	                    continue;
	                }
	                var candidateValue = predicate(candidate);
	                if (candidateValue > maxValue) {
	                    solution = candidate;
	                    maxValue = candidateValue;
	                }
	            }
	            return solution;
	        };
	        ListWrapper.flatten = function (list) {
	            var target = [];
	            _flattenArray(list, target);
	            return target;
	        };
	        ListWrapper.addAll = function (list, source) {
	            for (var i = 0; i < source.length; i++) {
	                list.push(source[i]);
	            }
	        };
	        return ListWrapper;
	    }());
	    function _flattenArray(source, target) {
	        if (isPresent(source)) {
	            for (var i = 0; i < source.length; i++) {
	                var item = source[i];
	                if (isArray(item)) {
	                    _flattenArray(item, target);
	                }
	                else {
	                    target.push(item);
	                }
	            }
	        }
	        return target;
	    }
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return isArray(obj) ||
	            (!(obj instanceof Map$1) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	    function areIterablesEqual(a, b, comparator) {
	        var iterator1 = a[getSymbolIterator()]();
	        var iterator2 = b[getSymbolIterator()]();
	        while (true) {
	            var item1 = iterator1.next();
	            var item2 = iterator2.next();
	            if (item1.done && item2.done)
	                return true;
	            if (item1.done || item2.done)
	                return false;
	            if (!comparator(item1.value, item2.value))
	                return false;
	        }
	    }
	    function iterateListLike(obj, fn) {
	        if (isArray(obj)) {
	            for (var i = 0; i < obj.length; i++) {
	                fn(obj[i]);
	            }
	        }
	        else {
	            var iterator = obj[getSymbolIterator()]();
	            var item;
	            while (!((item = iterator.next()).done)) {
	                fn(item.value);
	            }
	        }
	    }
	    // Safari and Internet Explorer do not support the iterable parameter to the
	    // Set constructor.  We work around that by manually adding the items.
	    var createSetFromList = (function () {
	        var test = new Set([1, 2, 3]);
	        if (test.size === 3) {
	            return function createSetFromList(lst) { return new Set(lst); };
	        }
	        else {
	            return function createSetAndPopulateFromList(lst) {
	                var res = new Set(lst);
	                if (res.size !== lst.length) {
	                    for (var i = 0; i < lst.length; i++) {
	                        res.add(lst[i]);
	                    }
	                }
	                return res;
	            };
	        }
	    })();
	    var SetWrapper = (function () {
	        function SetWrapper() {
	        }
	        SetWrapper.createFromList = function (lst) { return createSetFromList(lst); };
	        SetWrapper.has = function (s, key) { return s.has(key); };
	        SetWrapper.delete = function (m, k) { m.delete(k); };
	        return SetWrapper;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    function findFirstClosedCycle(keys) {
	        var res = [];
	        for (var i = 0; i < keys.length; ++i) {
	            if (ListWrapper.contains(res, keys[i])) {
	                res.push(keys[i]);
	                return res;
	            }
	            res.push(keys[i]);
	        }
	        return res;
	    }
	    function constructResolvingPath(keys) {
	        if (keys.length > 1) {
	            var reversed = findFirstClosedCycle(ListWrapper.reversed(keys));
	            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	            return ' (' + tokenStrs.join(' -> ') + ')';
	        }
	        return '';
	    }
	    /**
	     * Base class for all errors arising from misconfigured providers.
	     * @stable
	     */
	    var AbstractProviderError = (function (_super) {
	        __extends$1(AbstractProviderError, _super);
	        function AbstractProviderError(injector, key, constructResolvingMessage) {
	            _super.call(this, 'DI Error');
	            this.keys = [key];
	            this.injectors = [injector];
	            this.constructResolvingMessage = constructResolvingMessage;
	            this.message = this.constructResolvingMessage(this.keys);
	        }
	        AbstractProviderError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	            this.message = this.constructResolvingMessage(this.keys);
	        };
	        return AbstractProviderError;
	    }(BaseError));
	    /**
	     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
	     * {@link Injector} does not have a {@link Provider} for the given key.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b:B) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     * @stable
	     */
	    var NoProviderError = (function (_super) {
	        __extends$1(NoProviderError, _super);
	        function NoProviderError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                var first = stringify(ListWrapper.first(keys).token);
	                return "No provider for " + first + "!" + constructResolvingPath(keys);
	            });
	        }
	        return NoProviderError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when dependencies form a cycle.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	     * ]);
	     *
	     * expect(() => injector.get("one")).toThrowError();
	     * ```
	     *
	     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	     * @stable
	     */
	    var CyclicDependencyError = (function (_super) {
	        __extends$1(CyclicDependencyError, _super);
	        function CyclicDependencyError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	            });
	        }
	        return CyclicDependencyError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when a constructing type returns with an Error.
	     *
	     * The `InstantiationError` class contains the original error plus the dependency graph which caused
	     * this object to be instantiated.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor() {
	     *     throw new Error('message');
	     *   }
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([A]);

	     * try {
	     *   injector.get(A);
	     * } catch (e) {
	     *   expect(e instanceof InstantiationError).toBe(true);
	     *   expect(e.originalException.message).toEqual("message");
	     *   expect(e.originalStack).toBeDefined();
	     * }
	     * ```
	     * @stable
	     */
	    var InstantiationError = (function (_super) {
	        __extends$1(InstantiationError, _super);
	        function InstantiationError(injector, originalException, originalStack, key) {
	            _super.call(this, 'DI Error', originalException);
	            this.keys = [key];
	            this.injectors = [injector];
	        }
	        InstantiationError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	        };
	        Object.defineProperty(InstantiationError.prototype, "message", {
	            get: function () {
	                var first = stringify(ListWrapper.first(this.keys).token);
	                return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(InstantiationError.prototype, "causeKey", {
	            get: function () { return this.keys[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return InstantiationError;
	    }(WrappedError));
	    /**
	     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	     * creation.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	     * ```
	     * @stable
	     */
	    var InvalidProviderError = (function (_super) {
	        __extends$1(InvalidProviderError, _super);
	        function InvalidProviderError(provider) {
	            _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	        }
	        return InvalidProviderError;
	    }(BaseError));
	    /**
	     * Thrown when the class has no annotation information.
	     *
	     * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	     * need to be injected into the constructor.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     *
	     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	     *
	     * ```typescript
	     * class B {}
	     *
	     * class A {
	     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	     * ```
	     * @stable
	     */
	    var NoAnnotationError = (function (_super) {
	        __extends$1(NoAnnotationError, _super);
	        function NoAnnotationError(typeOrFunc, params) {
	            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	        }
	        NoAnnotationError._genMessage = function (typeOrFunc, params) {
	            var signature = [];
	            for (var i = 0, ii = params.length; i < ii; i++) {
	                var parameter = params[i];
	                if (isBlank(parameter) || parameter.length == 0) {
	                    signature.push('?');
	                }
	                else {
	                    signature.push(parameter.map(stringify).join(' '));
	                }
	            }
	            return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	                signature.join(', ') + '). ' +
	                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	                stringify(typeOrFunc) + '\' is decorated with Injectable.';
	        };
	        return NoAnnotationError;
	    }(BaseError));
	    /**
	     * Thrown when getting an object by index.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	     *
	     * ```typescript
	     * class A {}
	     *
	     * var injector = Injector.resolveAndCreate([A]);
	     *
	     * expect(() => injector.getAt(100)).toThrowError();
	     * ```
	     * @stable
	     */
	    var OutOfBoundsError = (function (_super) {
	        __extends$1(OutOfBoundsError, _super);
	        function OutOfBoundsError(index) {
	            _super.call(this, "Index " + index + " is out-of-bounds.");
	        }
	        return OutOfBoundsError;
	    }(BaseError));
	    // TODO: add a working example after alpha38 is released
	    /**
	     * Thrown when a multi provider and a regular provider are bound to the same token.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate([
	     *   { provide: "Strings", useValue: "string1", multi: true},
	     *   { provide: "Strings", useValue: "string2", multi: false}
	     * ])).toThrowError();
	     * ```
	     */
	    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	        __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
	        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
	                provider2.toString());
	        }
	        return MixingMultiProvidersWithRegularProvidersError;
	    }(BaseError));

	    /**
	     * A unique object used for retrieving items from the {@link ReflectiveInjector}.
	     *
	     * Keys have:
	     * - a system-wide unique `id`.
	     * - a `token`.
	     *
	     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
	     * the
	     * injector to store created objects in a more efficient way.
	     *
	     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
	     * resolving
	     * providers.
	     * @experimental
	     */
	    var ReflectiveKey = (function () {
	        /**
	         * Private
	         */
	        function ReflectiveKey(token, id) {
	            this.token = token;
	            this.id = id;
	            if (isBlank(token)) {
	                throw new Error('Token must be defined!');
	            }
	        }
	        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	            /**
	             * Returns a stringified token.
	             */
	            get: function () { return stringify(this.token); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Retrieves a `Key` for a token.
	         */
	        ReflectiveKey.get = function (token) {
	            return _globalKeyRegistry.get(resolveForwardRef(token));
	        };
	        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	            /**
	             * @returns the number of keys registered in the system.
	             */
	            get: function () { return _globalKeyRegistry.numberOfKeys; },
	            enumerable: true,
	            configurable: true
	        });
	        return ReflectiveKey;
	    }());
	    /**
	     * @internal
	     */
	    var KeyRegistry = (function () {
	        function KeyRegistry() {
	            this._allKeys = new Map();
	        }
	        KeyRegistry.prototype.get = function (token) {
	            if (token instanceof ReflectiveKey)
	                return token;
	            if (this._allKeys.has(token)) {
	                return this._allKeys.get(token);
	            }
	            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	            this._allKeys.set(token, newKey);
	            return newKey;
	        };
	        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	            get: function () { return this._allKeys.size; },
	            enumerable: true,
	            configurable: true
	        });
	        return KeyRegistry;
	    }());
	    var _globalKeyRegistry = new KeyRegistry();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Represents a type that a Component or other object is instances of.
	     *
	     * @description
	     *
	     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	     * the `MyCustomComponent` constructor function.
	     *
	     * @stable
	     */
	    var Type = Function;

	    var ReflectionCapabilities = (function () {
	        function ReflectionCapabilities(reflect) {
	            this._reflect = reflect || global$1.Reflect;
	        }
	        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        ReflectionCapabilities.prototype.factory = function (t) {
	            var prototype = t.prototype;
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i - 0] = arguments[_i];
	                }
	                var instance = Object.create(prototype);
	                t.apply(instance, args);
	                return instance;
	            };
	        };
	        /** @internal */
	        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes /** TODO #9100 */, paramAnnotations /** TODO #9100 */) {
	            var result;
	            if (typeof paramTypes === 'undefined') {
	                result = new Array(paramAnnotations.length);
	            }
	            else {
	                result = new Array(paramTypes.length);
	            }
	            for (var i = 0; i < result.length; i++) {
	                // TS outputs Object for parameters without types, while Traceur omits
	                // the annotations. For now we preserve the Traceur behavior to aid
	                // migration, but this can be revisited.
	                if (typeof paramTypes === 'undefined') {
	                    result[i] = [];
	                }
	                else if (paramTypes[i] != Object) {
	                    result[i] = [paramTypes[i]];
	                }
	                else {
	                    result[i] = [];
	                }
	                if (isPresent(paramAnnotations) && isPresent(paramAnnotations[i])) {
	                    result[i] = result[i].concat(paramAnnotations[i]);
	                }
	            }
	            return result;
	        };
	        ReflectionCapabilities.prototype.parameters = function (typeOrFunc) {
	            // Prefer the direct API.
	            if (isPresent(typeOrFunc.parameters)) {
	                return typeOrFunc.parameters;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (isPresent(typeOrFunc.ctorParameters)) {
	                var ctorParameters = typeOrFunc.ctorParameters;
	                var paramTypes_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) { return ctorParam && ctorParam.type; });
	                var paramAnnotations_1 = ctorParameters.map(function (ctorParam /** TODO #9100 */) {
	                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	                });
	                return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
	                var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
	                var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
	                if (isPresent(paramTypes) || isPresent(paramAnnotations)) {
	                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	                }
	            }
	            // The array has to be filled with `undefined` because holes would be skipped by `some`
	            var parameters = new Array(typeOrFunc.length);
	            parameters.fill(undefined);
	            return parameters;
	        };
	        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	            // Prefer the direct API.
	            if (isPresent(typeOrFunc.annotations)) {
	                var annotations = typeOrFunc.annotations;
	                if (isFunction(annotations) && annotations.annotations) {
	                    annotations = annotations.annotations;
	                }
	                return annotations;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (isPresent(typeOrFunc.decorators)) {
	                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
	                var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
	                if (isPresent(annotations))
	                    return annotations;
	            }
	            return [];
	        };
	        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            // Prefer the direct API.
	            if (isPresent(typeOrFunc.propMetadata)) {
	                var propMetadata = typeOrFunc.propMetadata;
	                if (isFunction(propMetadata) && propMetadata.propMetadata) {
	                    propMetadata = propMetadata.propMetadata;
	                }
	                return propMetadata;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (isPresent(typeOrFunc.propDecorators)) {
	                var propDecorators_1 = typeOrFunc.propDecorators;
	                var propMetadata_1 = {};
	                Object.keys(propDecorators_1).forEach(function (prop) {
	                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	                });
	                return propMetadata_1;
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
	                var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
	                if (isPresent(propMetadata))
	                    return propMetadata;
	            }
	            return {};
	        };
	        // Note: JavaScript does not support to query for interfaces during runtime.
	        // However, we can't throw here as the reflector will always call this method
	        // when asked for a lifecycle interface as this is what we check in Dart.
	        ReflectionCapabilities.prototype.interfaces = function (type) { return []; };
	        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {
	            if (!(type instanceof Type))
	                return false;
	            var proto = type.prototype;
	            return !!proto[lcProperty];
	        };
	        ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	        ReflectionCapabilities.prototype.setter = function (name) {
	            return new Function('o', 'v', 'return o.' + name + ' = v;');
	        };
	        ReflectionCapabilities.prototype.method = function (name) {
	            var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	            return new Function('o', 'args', functionBody);
	        };
	        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
	        ReflectionCapabilities.prototype.importUri = function (type) {
	            // StaticSymbol
	            if (typeof type === 'object' && type['filePath']) {
	                return type['filePath'];
	            }
	            // Runtime type
	            return "./" + stringify(type);
	        };
	        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
	        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	        return ReflectionCapabilities;
	    }());
	    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	        if (!decoratorInvocations) {
	            return [];
	        }
	        return decoratorInvocations.map(function (decoratorInvocation) {
	            var decoratorType = decoratorInvocation.type;
	            var annotationCls = decoratorType.annotationCls;
	            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	        });
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Provides read-only access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     */
	    var ReflectorReader = (function () {
	        function ReflectorReader() {
	        }
	        return ReflectorReader;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     */
	    var Reflector = (function (_super) {
	        __extends$2(Reflector, _super);
	        function Reflector(reflectionCapabilities) {
	            _super.call(this);
	            /** @internal */
	            this._injectableInfo = new Map$1();
	            /** @internal */
	            this._getters = new Map$1();
	            /** @internal */
	            this._setters = new Map$1();
	            /** @internal */
	            this._methods = new Map$1();
	            this._usedKeys = null;
	            this.reflectionCapabilities = reflectionCapabilities;
	        }
	        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	        Reflector.prototype.isReflectionEnabled = function () { return this.reflectionCapabilities.isReflectionEnabled(); };
	        /**
	         * Causes `this` reflector to track keys used to access
	         * {@link ReflectionInfo} objects.
	         */
	        Reflector.prototype.trackUsage = function () { this._usedKeys = new Set(); };
	        /**
	         * Lists types for which reflection information was not requested since
	         * {@link #trackUsage} was called. This list could later be audited as
	         * potential dead code.
	         */
	        Reflector.prototype.listUnusedKeys = function () {
	            var _this = this;
	            if (this._usedKeys == null) {
	                throw new Error('Usage tracking is disabled');
	            }
	            var allTypes = MapWrapper.keys(this._injectableInfo);
	            return allTypes.filter(function (key) { return !SetWrapper.has(_this._usedKeys, key); });
	        };
	        Reflector.prototype.registerFunction = function (func, funcInfo) {
	            this._injectableInfo.set(func, funcInfo);
	        };
	        Reflector.prototype.registerType = function (type, typeInfo) {
	            this._injectableInfo.set(type, typeInfo);
	        };
	        Reflector.prototype.registerGetters = function (getters) { _mergeMaps(this._getters, getters); };
	        Reflector.prototype.registerSetters = function (setters) { _mergeMaps(this._setters, setters); };
	        Reflector.prototype.registerMethods = function (methods) { _mergeMaps(this._methods, methods); };
	        Reflector.prototype.factory = function (type) {
	            if (this._containsReflectionInfo(type)) {
	                var res = this._getReflectionInfo(type).factory;
	                return isPresent(res) ? res : null;
	            }
	            else {
	                return this.reflectionCapabilities.factory(type);
	            }
	        };
	        Reflector.prototype.parameters = function (typeOrFunc) {
	            if (this._injectableInfo.has(typeOrFunc)) {
	                var res = this._getReflectionInfo(typeOrFunc).parameters;
	                return isPresent(res) ? res : [];
	            }
	            else {
	                return this.reflectionCapabilities.parameters(typeOrFunc);
	            }
	        };
	        Reflector.prototype.annotations = function (typeOrFunc) {
	            if (this._injectableInfo.has(typeOrFunc)) {
	                var res = this._getReflectionInfo(typeOrFunc).annotations;
	                return isPresent(res) ? res : [];
	            }
	            else {
	                return this.reflectionCapabilities.annotations(typeOrFunc);
	            }
	        };
	        Reflector.prototype.propMetadata = function (typeOrFunc) {
	            if (this._injectableInfo.has(typeOrFunc)) {
	                var res = this._getReflectionInfo(typeOrFunc).propMetadata;
	                return isPresent(res) ? res : {};
	            }
	            else {
	                return this.reflectionCapabilities.propMetadata(typeOrFunc);
	            }
	        };
	        Reflector.prototype.interfaces = function (type) {
	            if (this._injectableInfo.has(type)) {
	                var res = this._getReflectionInfo(type).interfaces;
	                return isPresent(res) ? res : [];
	            }
	            else {
	                return this.reflectionCapabilities.interfaces(type);
	            }
	        };
	        Reflector.prototype.hasLifecycleHook = function (type, lcInterface, lcProperty) {
	            var interfaces = this.interfaces(type);
	            if (interfaces.indexOf(lcInterface) !== -1) {
	                return true;
	            }
	            else {
	                return this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);
	            }
	        };
	        Reflector.prototype.getter = function (name) {
	            if (this._getters.has(name)) {
	                return this._getters.get(name);
	            }
	            else {
	                return this.reflectionCapabilities.getter(name);
	            }
	        };
	        Reflector.prototype.setter = function (name) {
	            if (this._setters.has(name)) {
	                return this._setters.get(name);
	            }
	            else {
	                return this.reflectionCapabilities.setter(name);
	            }
	        };
	        Reflector.prototype.method = function (name) {
	            if (this._methods.has(name)) {
	                return this._methods.get(name);
	            }
	            else {
	                return this.reflectionCapabilities.method(name);
	            }
	        };
	        /** @internal */
	        Reflector.prototype._getReflectionInfo = function (typeOrFunc) {
	            if (isPresent(this._usedKeys)) {
	                this._usedKeys.add(typeOrFunc);
	            }
	            return this._injectableInfo.get(typeOrFunc);
	        };
	        /** @internal */
	        Reflector.prototype._containsReflectionInfo = function (typeOrFunc) { return this._injectableInfo.has(typeOrFunc); };
	        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
	        };
	        Reflector.prototype.resolveEnum = function (identifier, name) {
	            return this.reflectionCapabilities.resolveEnum(identifier, name);
	        };
	        return Reflector;
	    }(ReflectorReader));
	    function _mergeMaps(target, config) {
	        StringMapWrapper.forEach(config, function (v, k) { return target.set(k, v); });
	    }

	    /**
	     * The {@link Reflector} used internally in Angular to access metadata
	     * about symbols.
	     */
	    var reflector = new Reflector(new ReflectionCapabilities());

	    /**
	     * `Dependency` is used by the framework to extend DI.
	     * This is internal to Angular and should not be used directly.
	     */
	    var ReflectiveDependency = (function () {
	        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
	            this.key = key;
	            this.optional = optional;
	            this.lowerBoundVisibility = lowerBoundVisibility;
	            this.upperBoundVisibility = upperBoundVisibility;
	            this.properties = properties;
	        }
	        ReflectiveDependency.fromKey = function (key) {
	            return new ReflectiveDependency(key, false, null, null, []);
	        };
	        return ReflectiveDependency;
	    }());
	    var _EMPTY_LIST = [];
	    var ResolvedReflectiveProvider_ = (function () {
	        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	            this.key = key;
	            this.resolvedFactories = resolvedFactories;
	            this.multiProvider = multiProvider;
	        }
	        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	            get: function () { return this.resolvedFactories[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return ResolvedReflectiveProvider_;
	    }());
	    /**
	     * An internal resolved representation of a factory function created by resolving {@link
	     * Provider}.
	     * @experimental
	     */
	    var ResolvedReflectiveFactory = (function () {
	        function ResolvedReflectiveFactory(
	            /**
	             * Factory function which can return an instance of an object represented by a key.
	             */
	            factory,
	            /**
	             * Arguments (dependencies) to the `factory` function.
	             */
	            dependencies) {
	            this.factory = factory;
	            this.dependencies = dependencies;
	        }
	        return ResolvedReflectiveFactory;
	    }());
	    /**
	     * Resolve a single provider.
	     */
	    function resolveReflectiveFactory(provider) {
	        var factoryFn;
	        var resolvedDeps;
	        if (isPresent(provider.useClass)) {
	            var useClass = resolveForwardRef(provider.useClass);
	            factoryFn = reflector.factory(useClass);
	            resolvedDeps = _dependenciesFor(useClass);
	        }
	        else if (isPresent(provider.useExisting)) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	        }
	        else if (isPresent(provider.useFactory)) {
	            factoryFn = provider.useFactory;
	            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	        }
	        else {
	            factoryFn = function () { return provider.useValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	    }
	    /**
	     * Converts the {@link Provider} into {@link ResolvedProvider}.
	     *
	     * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
	     * convenience provider syntax.
	     */
	    function resolveReflectiveProvider(provider) {
	        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	    }
	    /**
	     * Resolve a list of Providers.
	     */
	    function resolveReflectiveProviders(providers) {
	        var normalized = _normalizeProviders(providers, []);
	        var resolved = normalized.map(resolveReflectiveProvider);
	        return MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));
	    }
	    /**
	     * Merges a list of ResolvedProviders into a list where
	     * each key is contained exactly once and multi providers
	     * have been merged.
	     */
	    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	        for (var i = 0; i < providers.length; i++) {
	            var provider = providers[i];
	            var existing = normalizedProvidersMap.get(provider.key.id);
	            if (isPresent(existing)) {
	                if (provider.multiProvider !== existing.multiProvider) {
	                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
	                }
	                if (provider.multiProvider) {
	                    for (var j = 0; j < provider.resolvedFactories.length; j++) {
	                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                    }
	                }
	                else {
	                    normalizedProvidersMap.set(provider.key.id, provider);
	                }
	            }
	            else {
	                var resolvedProvider;
	                if (provider.multiProvider) {
	                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
	                }
	                else {
	                    resolvedProvider = provider;
	                }
	                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	            }
	        }
	        return normalizedProvidersMap;
	    }
	    function _normalizeProviders(providers, res) {
	        providers.forEach(function (b) {
	            if (b instanceof Type) {
	                res.push({ provide: b, useClass: b });
	            }
	            else if (b && typeof b == 'object' && b.provide !== undefined) {
	                res.push(b);
	            }
	            else if (b instanceof Array) {
	                _normalizeProviders(b, res);
	            }
	            else {
	                throw new InvalidProviderError(b);
	            }
	        });
	        return res;
	    }
	    function constructDependencies(typeOrFunc, dependencies) {
	        if (isBlank(dependencies)) {
	            return _dependenciesFor(typeOrFunc);
	        }
	        else {
	            var params = dependencies.map(function (t) { return [t]; });
	            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params); });
	        }
	    }
	    function _dependenciesFor(typeOrFunc) {
	        var params = reflector.parameters(typeOrFunc);
	        if (isBlank(params))
	            return [];
	        if (params.some(isBlank)) {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	    }
	    function _extractToken(typeOrFunc /** TODO #9100 */, metadata /** TODO #9100 */ /*any[] | any*/, params) {
	        var depProps = [];
	        var token = null;
	        var optional = false;
	        if (!isArray(metadata)) {
	            if (metadata instanceof Inject) {
	                return _createDependency(metadata.token, optional, null, null, depProps);
	            }
	            else {
	                return _createDependency(metadata, optional, null, null, depProps);
	            }
	        }
	        var lowerBoundVisibility = null;
	        var upperBoundVisibility = null;
	        for (var i = 0; i < metadata.length; ++i) {
	            var paramMetadata = metadata[i];
	            if (paramMetadata instanceof Type) {
	                token = paramMetadata;
	            }
	            else if (paramMetadata instanceof Inject) {
	                token = paramMetadata.token;
	            }
	            else if (paramMetadata instanceof Optional) {
	                optional = true;
	            }
	            else if (paramMetadata instanceof Self) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof Host) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof SkipSelf) {
	                lowerBoundVisibility = paramMetadata;
	            }
	        }
	        token = resolveForwardRef(token);
	        if (isPresent(token)) {
	            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	        }
	        else {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	    }
	    function _createDependency(token /** TODO #9100 */, optional /** TODO #9100 */, lowerBoundVisibility /** TODO #9100 */, upperBoundVisibility /** TODO #9100 */, depProps /** TODO #9100 */) {
	        return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	    }

	    // avoid unused import when Type union types are erased
	    // Threshold for the dynamic version
	    var _MAX_CONSTRUCTION_COUNTER = 10;
	    var UNDEFINED = new Object();
	    var ReflectiveProtoInjectorInlineStrategy = (function () {
	        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
	            this.provider0 = null;
	            this.provider1 = null;
	            this.provider2 = null;
	            this.provider3 = null;
	            this.provider4 = null;
	            this.provider5 = null;
	            this.provider6 = null;
	            this.provider7 = null;
	            this.provider8 = null;
	            this.provider9 = null;
	            this.keyId0 = null;
	            this.keyId1 = null;
	            this.keyId2 = null;
	            this.keyId3 = null;
	            this.keyId4 = null;
	            this.keyId5 = null;
	            this.keyId6 = null;
	            this.keyId7 = null;
	            this.keyId8 = null;
	            this.keyId9 = null;
	            var length = providers.length;
	            if (length > 0) {
	                this.provider0 = providers[0];
	                this.keyId0 = providers[0].key.id;
	            }
	            if (length > 1) {
	                this.provider1 = providers[1];
	                this.keyId1 = providers[1].key.id;
	            }
	            if (length > 2) {
	                this.provider2 = providers[2];
	                this.keyId2 = providers[2].key.id;
	            }
	            if (length > 3) {
	                this.provider3 = providers[3];
	                this.keyId3 = providers[3].key.id;
	            }
	            if (length > 4) {
	                this.provider4 = providers[4];
	                this.keyId4 = providers[4].key.id;
	            }
	            if (length > 5) {
	                this.provider5 = providers[5];
	                this.keyId5 = providers[5].key.id;
	            }
	            if (length > 6) {
	                this.provider6 = providers[6];
	                this.keyId6 = providers[6].key.id;
	            }
	            if (length > 7) {
	                this.provider7 = providers[7];
	                this.keyId7 = providers[7].key.id;
	            }
	            if (length > 8) {
	                this.provider8 = providers[8];
	                this.keyId8 = providers[8].key.id;
	            }
	            if (length > 9) {
	                this.provider9 = providers[9];
	                this.keyId9 = providers[9].key.id;
	            }
	        }
	        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index == 0)
	                return this.provider0;
	            if (index == 1)
	                return this.provider1;
	            if (index == 2)
	                return this.provider2;
	            if (index == 3)
	                return this.provider3;
	            if (index == 4)
	                return this.provider4;
	            if (index == 5)
	                return this.provider5;
	            if (index == 6)
	                return this.provider6;
	            if (index == 7)
	                return this.provider7;
	            if (index == 8)
	                return this.provider8;
	            if (index == 9)
	                return this.provider9;
	            throw new OutOfBoundsError(index);
	        };
	        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	            return new ReflectiveInjectorInlineStrategy(injector, this);
	        };
	        return ReflectiveProtoInjectorInlineStrategy;
	    }());
	    var ReflectiveProtoInjectorDynamicStrategy = (function () {
	        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
	            this.providers = providers;
	            var len = providers.length;
	            this.keyIds = ListWrapper.createFixedSize(len);
	            for (var i = 0; i < len; i++) {
	                this.keyIds[i] = providers[i].key.id;
	            }
	        }
	        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index < 0 || index >= this.providers.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.providers[index];
	        };
	        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	            return new ReflectiveInjectorDynamicStrategy(this, ei);
	        };
	        return ReflectiveProtoInjectorDynamicStrategy;
	    }());
	    var ReflectiveProtoInjector = (function () {
	        function ReflectiveProtoInjector(providers) {
	            this.numberOfProviders = providers.length;
	            this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ?
	                new ReflectiveProtoInjectorDynamicStrategy(this, providers) :
	                new ReflectiveProtoInjectorInlineStrategy(this, providers);
	        }
	        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
	            return new ReflectiveProtoInjector(providers);
	        };
	        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
	            return this._strategy.getProviderAtIndex(index);
	        };
	        return ReflectiveProtoInjector;
	    }());
	    var ReflectiveInjectorInlineStrategy = (function () {
	        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
	            this.injector = injector;
	            this.protoStrategy = protoStrategy;
	            this.obj0 = UNDEFINED;
	            this.obj1 = UNDEFINED;
	            this.obj2 = UNDEFINED;
	            this.obj3 = UNDEFINED;
	            this.obj4 = UNDEFINED;
	            this.obj5 = UNDEFINED;
	            this.obj6 = UNDEFINED;
	            this.obj7 = UNDEFINED;
	            this.obj8 = UNDEFINED;
	            this.obj9 = UNDEFINED;
	        }
	        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
	            var p = this.protoStrategy;
	            var inj = this.injector;
	            if (p.keyId0 === keyId) {
	                if (this.obj0 === UNDEFINED) {
	                    this.obj0 = inj._new(p.provider0);
	                }
	                return this.obj0;
	            }
	            if (p.keyId1 === keyId) {
	                if (this.obj1 === UNDEFINED) {
	                    this.obj1 = inj._new(p.provider1);
	                }
	                return this.obj1;
	            }
	            if (p.keyId2 === keyId) {
	                if (this.obj2 === UNDEFINED) {
	                    this.obj2 = inj._new(p.provider2);
	                }
	                return this.obj2;
	            }
	            if (p.keyId3 === keyId) {
	                if (this.obj3 === UNDEFINED) {
	                    this.obj3 = inj._new(p.provider3);
	                }
	                return this.obj3;
	            }
	            if (p.keyId4 === keyId) {
	                if (this.obj4 === UNDEFINED) {
	                    this.obj4 = inj._new(p.provider4);
	                }
	                return this.obj4;
	            }
	            if (p.keyId5 === keyId) {
	                if (this.obj5 === UNDEFINED) {
	                    this.obj5 = inj._new(p.provider5);
	                }
	                return this.obj5;
	            }
	            if (p.keyId6 === keyId) {
	                if (this.obj6 === UNDEFINED) {
	                    this.obj6 = inj._new(p.provider6);
	                }
	                return this.obj6;
	            }
	            if (p.keyId7 === keyId) {
	                if (this.obj7 === UNDEFINED) {
	                    this.obj7 = inj._new(p.provider7);
	                }
	                return this.obj7;
	            }
	            if (p.keyId8 === keyId) {
	                if (this.obj8 === UNDEFINED) {
	                    this.obj8 = inj._new(p.provider8);
	                }
	                return this.obj8;
	            }
	            if (p.keyId9 === keyId) {
	                if (this.obj9 === UNDEFINED) {
	                    this.obj9 = inj._new(p.provider9);
	                }
	                return this.obj9;
	            }
	            return UNDEFINED;
	        };
	        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	            if (index == 0)
	                return this.obj0;
	            if (index == 1)
	                return this.obj1;
	            if (index == 2)
	                return this.obj2;
	            if (index == 3)
	                return this.obj3;
	            if (index == 4)
	                return this.obj4;
	            if (index == 5)
	                return this.obj5;
	            if (index == 6)
	                return this.obj6;
	            if (index == 7)
	                return this.obj7;
	            if (index == 8)
	                return this.obj8;
	            if (index == 9)
	                return this.obj9;
	            throw new OutOfBoundsError(index);
	        };
	        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	        return ReflectiveInjectorInlineStrategy;
	    }());
	    var ReflectiveInjectorDynamicStrategy = (function () {
	        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
	            this.protoStrategy = protoStrategy;
	            this.injector = injector;
	            this.objs = ListWrapper.createFixedSize(protoStrategy.providers.length);
	            ListWrapper.fill(this.objs, UNDEFINED);
	        }
	        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
	            var p = this.protoStrategy;
	            for (var i = 0; i < p.keyIds.length; i++) {
	                if (p.keyIds[i] === keyId) {
	                    if (this.objs[i] === UNDEFINED) {
	                        this.objs[i] = this.injector._new(p.providers[i]);
	                    }
	                    return this.objs[i];
	                }
	            }
	            return UNDEFINED;
	        };
	        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	            if (index < 0 || index >= this.objs.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.objs[index];
	        };
	        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	        return ReflectiveInjectorDynamicStrategy;
	    }());
	    /**
	     * A ReflectiveDependency injection container used for instantiating objects and resolving
	     * dependencies.
	     *
	     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	     * constructor dependencies.
	     *
	     * In typical use, application code asks for the dependencies in the constructor and they are
	     * resolved by the `Injector`.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	     *
	     * The following example creates an `Injector` configured to create `Engine` and `Car`.
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * var car = injector.get(Car);
	     * expect(car instanceof Car).toBe(true);
	     * expect(car.engine instanceof Engine).toBe(true);
	     * ```
	     *
	     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	     * resolve all of the object's dependencies automatically.
	     *
	     * @stable
	     */
	    var ReflectiveInjector = (function () {
	        function ReflectiveInjector() {
	        }
	        /**
	         * Turns an array of provider definitions into an array of resolved providers.
	         *
	         * A resolution is a process of flattening multiple nested arrays and converting individual
	         * providers into an array of {@link ResolvedReflectiveProvider}s.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	         *
	         * expect(providers.length).toEqual(2);
	         *
	         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	         * expect(providers[0].key.displayName).toBe("Car");
	         * expect(providers[0].dependencies.length).toEqual(1);
	         * expect(providers[0].factory).toBeDefined();
	         *
	         * expect(providers[1].key.displayName).toBe("Engine");
	         * });
	         * ```
	         *
	         * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
	         */
	        ReflectiveInjector.resolve = function (providers) {
	            return resolveReflectiveProviders(providers);
	        };
	        /**
	         * Resolves an array of providers and creates an injector from those providers.
	         *
	         * The passed-in providers can be an array of `Type`, {@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         *
	         * This function is slower than the corresponding `fromResolvedProviders`
	         * because it needs to resolve the passed-in providers first.
	         * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
	         */
	        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	        };
	        /**
	         * Creates an injector from previously resolved providers.
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, Engine]);
	         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         * @experimental
	         */
	        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
	        };
	        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
	            /**
	             * Parent of this injector.
	             *
	             * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	             * -->
	             *
	             * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	             *
	             * ```typescript
	             * var parent = ReflectiveInjector.resolveAndCreate([]);
	             * var child = parent.resolveAndCreateChild([]);
	             * expect(child.parent).toBe(parent);
	             * ```
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Resolves an array of providers and creates a child injector from those providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * The passed-in providers can be an array of `Type`, {@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	         * var child = parent.resolveAndCreateChild([ChildProvider]);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         *
	         * This function is slower than the corresponding `createChildFromResolved`
	         * because it needs to resolve the passed-in providers first.
	         * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
	         */
	        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented(); };
	        /**
	         * Creates a child injector from previously resolved providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	         *
	         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	         * var child = parent.createChildFromResolved(childProviders);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         */
	        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
	            return unimplemented();
	        };
	        /**
	         * Resolves a provider and instantiates an object in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         *
	         * var car = injector.resolveAndInstantiate(Car);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	         * ```
	         */
	        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented(); };
	        /**
	         * Instantiates an object using a resolved provider in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         * var carProvider = ReflectiveInjector.resolve([Car])[0];
	         * var car = injector.instantiateResolved(carProvider);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	         * ```
	         */
	        ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented(); };
	        return ReflectiveInjector;
	    }());
	    var ReflectiveInjector_ = (function () {
	        /**
	         * Private
	         */
	        function ReflectiveInjector_(_proto /* ProtoInjector */, _parent) {
	            if (_parent === void 0) { _parent = null; }
	            /** @internal */
	            this._constructionCounter = 0;
	            this._proto = _proto;
	            this._parent = _parent;
	            this._strategy = _proto._strategy.createInjectorStrategy(this);
	        }
	        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
	        };
	        ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
	            /**
	             * @internal
	             * Internal. Do not use.
	             * We return `any` not to export the InjectorStrategy type.
	             */
	            get: function () { return this._strategy; },
	            enumerable: true,
	            configurable: true
	        });
	        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return this.createChildFromResolved(ResolvedReflectiveProviders);
	        };
	        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	            var proto = new ReflectiveProtoInjector(providers);
	            var inj = new ReflectiveInjector_(proto);
	            inj._parent = this;
	            return inj;
	        };
	        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	        };
	        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	            return this._instantiateProvider(provider);
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._new = function (provider) {
	            if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	                throw new CyclicDependencyError(this, provider.key);
	            }
	            return this._instantiateProvider(provider);
	        };
	        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	            if (provider.multiProvider) {
	                var res = ListWrapper.createFixedSize(provider.resolvedFactories.length);
	                for (var i = 0; i < provider.resolvedFactories.length; ++i) {
	                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	                }
	                return res;
	            }
	            else {
	                return this._instantiate(provider, provider.resolvedFactories[0]);
	            }
	        };
	        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
	            var factory = ResolvedReflectiveFactory.factory;
	            var deps = ResolvedReflectiveFactory.dependencies;
	            var length = deps.length;
	            var d0;
	            var d1;
	            var d2;
	            var d3;
	            var d4;
	            var d5;
	            var d6;
	            var d7;
	            var d8;
	            var d9;
	            var d10;
	            var d11;
	            var d12;
	            var d13;
	            var d14;
	            var d15;
	            var d16;
	            var d17;
	            var d18;
	            var d19;
	            try {
	                d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
	                d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
	                d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
	                d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
	                d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
	                d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
	                d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
	                d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
	                d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
	                d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
	                d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
	                d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
	                d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
	                d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
	                d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
	                d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
	                d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
	                d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
	                d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
	                d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
	            }
	            catch (e) {
	                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
	                    e.addKey(this, provider.key);
	                }
	                throw e;
	            }
	            var obj;
	            try {
	                switch (length) {
	                    case 0:
	                        obj = factory();
	                        break;
	                    case 1:
	                        obj = factory(d0);
	                        break;
	                    case 2:
	                        obj = factory(d0, d1);
	                        break;
	                    case 3:
	                        obj = factory(d0, d1, d2);
	                        break;
	                    case 4:
	                        obj = factory(d0, d1, d2, d3);
	                        break;
	                    case 5:
	                        obj = factory(d0, d1, d2, d3, d4);
	                        break;
	                    case 6:
	                        obj = factory(d0, d1, d2, d3, d4, d5);
	                        break;
	                    case 7:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                        break;
	                    case 8:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                        break;
	                    case 9:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                        break;
	                    case 10:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                        break;
	                    case 11:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                        break;
	                    case 12:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                        break;
	                    case 13:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                        break;
	                    case 14:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                        break;
	                    case 15:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                        break;
	                    case 16:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                        break;
	                    case 17:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                        break;
	                    case 18:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                        break;
	                    case 19:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                        break;
	                    case 20:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                        break;
	                    default:
	                        throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
	                }
	            }
	            catch (e) {
	                throw new InstantiationError(this, e, e.stack, provider.key);
	            }
	            return obj;
	        };
	        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
	            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	        };
	        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
	            if (key === INJECTOR_KEY) {
	                return this;
	            }
	            if (upperBoundVisibility instanceof Self) {
	                return this._getByKeySelf(key, notFoundValue);
	            }
	            else {
	                return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
	            }
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	            if (notFoundValue !== THROW_IF_NOT_FOUND) {
	                return notFoundValue;
	            }
	            else {
	                throw new NoProviderError(this, key);
	            }
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	            var obj = this._strategy.getObjByKeyId(key.id);
	            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
	            var inj;
	            if (lowerBoundVisibility instanceof SkipSelf) {
	                inj = this._parent;
	            }
	            else {
	                inj = this;
	            }
	            while (inj instanceof ReflectiveInjector_) {
	                var inj_ = inj;
	                var obj = inj_._strategy.getObjByKeyId(key.id);
	                if (obj !== UNDEFINED)
	                    return obj;
	                inj = inj_._parent;
	            }
	            if (inj !== null) {
	                return inj.get(key.token, notFoundValue);
	            }
	            else {
	                return this._throwOrNull(key, notFoundValue);
	            }
	        };
	        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	            get: function () {
	                var providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                    .join(', ');
	                return "ReflectiveInjector(providers: [" + providers + "])";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	        return ReflectiveInjector_;
	    }());
	    var INJECTOR_KEY = ReflectiveKey.get(Injector);
	    function _mapProviders(injector, fn) {
	        var res = new Array(injector._proto.numberOfProviders);
	        for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
	            res[i] = fn(injector._proto.getProviderAtIndex(i));
	        }
	        return res;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Provides a hook for centralized exception handling.
	     *
	     * The default implementation of `ErrorHandler` prints error messages to the `Console`. To
	     * intercept error handling,
	     * write a custom exception handler that replaces this default as appropriate for your app.
	     *
	     * ### Example
	     *
	     * ```javascript
	     *
	     * class MyErrorHandler implements ErrorHandler {
	     *   call(error, stackTrace = null, reason = null) {
	     *     // do something with the exception
	     *   }
	     * }
	     *
	     * @NgModule({
	     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	     * })
	     * class MyModule {}
	     * ```
	     * @stable
	     */
	    var ErrorHandler = (function () {
	        function ErrorHandler(rethrowError) {
	            if (rethrowError === void 0) { rethrowError = true; }
	            /**
	             * @internal
	             */
	            this._console = console;
	            this.rethrowError = rethrowError;
	        }
	        ErrorHandler.prototype.handleError = function (error) {
	            var originalError = this._findOriginalError(error);
	            var originalStack = this._findOriginalStack(error);
	            var context = this._findContext(error);
	            this._console.error("EXCEPTION: " + this._extractMessage(error));
	            if (originalError) {
	                this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
	            }
	            if (originalStack) {
	                this._console.error('ORIGINAL STACKTRACE:');
	                this._console.error(originalStack);
	            }
	            if (context) {
	                this._console.error('ERROR CONTEXT:');
	                this._console.error(context);
	            }
	            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	            // when an error happens. If we do not rethrow, bootstrap will always succeed.
	            if (this.rethrowError)
	                throw error;
	        };
	        /** @internal */
	        ErrorHandler.prototype._extractMessage = function (error) {
	            return error instanceof Error ? error.message : error.toString();
	        };
	        /** @internal */
	        ErrorHandler.prototype._findContext = function (error) {
	            if (error) {
	                return error.context ? error.context :
	                    this._findContext(error.originalError);
	            }
	            else {
	                return null;
	            }
	        };
	        /** @internal */
	        ErrorHandler.prototype._findOriginalError = function (error) {
	            var e = error.originalError;
	            while (e && e.originalError) {
	                e = e.originalError;
	            }
	            return e;
	        };
	        /** @internal */
	        ErrorHandler.prototype._findOriginalStack = function (error) {
	            if (!(error instanceof Error))
	                return null;
	            var e = error;
	            var stack = e.stack;
	            while (e instanceof Error && e.originalError) {
	                e = e.originalError;
	                if (e instanceof Error && e.stack) {
	                    stack = e.stack;
	                }
	            }
	            return stack;
	        };
	        return ErrorHandler;
	    }());

	    /**
	     * A function that will be executed when an application is initialized.
	     * @experimental
	     */
	    var APP_INITIALIZER = new OpaqueToken('Application Initializer');
	    /**
	     * A class that reflects the state of running {@link APP_INITIALIZER}s.
	     *
	     * @experimental
	     */
	    var ApplicationInitStatus = (function () {
	        function ApplicationInitStatus(appInits) {
	            var _this = this;
	            this._done = false;
	            var asyncInitPromises = [];
	            if (appInits) {
	                for (var i = 0; i < appInits.length; i++) {
	                    var initResult = appInits[i]();
	                    if (isPromise(initResult)) {
	                        asyncInitPromises.push(initResult);
	                    }
	                }
	            }
	            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	            if (asyncInitPromises.length === 0) {
	                this._done = true;
	            }
	        }
	        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	            get: function () { return this._done; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	            get: function () { return this._donePromise; },
	            enumerable: true,
	            configurable: true
	        });
	        ApplicationInitStatus.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationInitStatus.ctorParameters = [
	            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	        ];
	        return ApplicationInitStatus;
	    }());

	    /**
	     * A DI Token representing a unique string id assigned to the application by Angular and used
	     * primarily for prefixing application attributes and CSS styles when
	     * {@link ViewEncapsulation#Emulated} is being used.
	     *
	     * If you need to avoid randomly generated value to be used as an application id, you can provide
	     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	     * using this token.
	     * @experimental
	     */
	    var APP_ID = new OpaqueToken('AppId');
	    function _appIdRandomProviderFactory() {
	        return "" + _randomChar() + _randomChar() + _randomChar();
	    }
	    /**
	     * Providers that will generate a random APP_ID_TOKEN.
	     * @experimental
	     */
	    var APP_ID_RANDOM_PROVIDER = {
	        provide: APP_ID,
	        useFactory: _appIdRandomProviderFactory,
	        deps: []
	    };
	    function _randomChar() {
	        return StringWrapper.fromCharCode(97 + Math.floor(Math.random() * 25));
	    }
	    /**
	     * A function that will be executed when a platform is initialized.
	     * @experimental
	     */
	    var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
	    /**
	     * All callbacks provided via this token will be called for every component that is bootstrapped.
	     * Signature of the callback:
	     *
	     * `(componentRef: ComponentRef) => void`.
	     *
	     * @experimental
	     */
	    var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
	    /**
	     * A token which indicates the root directory of the application
	     * @experimental
	     */
	    var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');

	    var Console = (function () {
	        function Console() {
	        }
	        Console.prototype.log = function (message) { print(message); };
	        // Note: for reporting errors use `DOM.logError()` as it is platform specific
	        Console.prototype.warn = function (message) { warn(message); };
	        Console.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Console.ctorParameters = [];
	        return Console;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a component is still being loaded in a synchronous compile.
	     *
	     * @stable
	     */
	    var ComponentStillLoadingError = (function (_super) {
	        __extends$4(ComponentStillLoadingError, _super);
	        function ComponentStillLoadingError(compType) {
	            _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	            this.compType = compType;
	        }
	        return ComponentStillLoadingError;
	    }(BaseError));
	    /**
	     * Combination of NgModuleFactory and ComponentFactorys.
	     *
	     * @experimental
	     */
	    var ModuleWithComponentFactories = (function () {
	        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	            this.ngModuleFactory = ngModuleFactory;
	            this.componentFactories = componentFactories;
	        }
	        return ModuleWithComponentFactories;
	    }());
	    function _throwError() {
	        throw new Error("Runtime compiler is not loaded");
	    }
	    /**
	     * Low-level service for running the angular compiler during runtime
	     * to create {@link ComponentFactory}s, which
	     * can later be used to create and render a Component instance.
	     *
	     * Each `@NgModule` provides an own `Compiler` to its injector,
	     * that will use the directives/pipes of the ng module for compilation
	     * of components.
	     * @stable
	     */
	    var Compiler = (function () {
	        function Compiler() {
	        }
	        /**
	         * Compiles the given NgModule and all of its components. All templates of the components listed
	         * in `entryComponents`
	         * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.
	         */
	        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	        /**
	         * Compiles the given NgModule and all of its components
	         */
	        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	        /**
	         * Same as {@link compileModuleSync} but also creates ComponentFactories for all components.
	         */
	        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.
	         */
	        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Clears all caches.
	         */
	        Compiler.prototype.clearCache = function () { };
	        /**
	         * Clears the cache for the given component/ngModule.
	         */
	        Compiler.prototype.clearCacheFor = function (type) { };
	        return Compiler;
	    }());
	    /**
	     * Token to provide CompilerOptions in the platform injector.
	     *
	     * @experimental
	     */
	    var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
	    /**
	     * A factory for creating a Compiler
	     *
	     * @experimental
	     */
	    var CompilerFactory = (function () {
	        function CompilerFactory() {
	        }
	        return CompilerFactory;
	    }());

	    var DefaultIterableDifferFactory = (function () {
	        function DefaultIterableDifferFactory() {
	        }
	        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
	            return new DefaultIterableDiffer(trackByFn);
	        };
	        return DefaultIterableDifferFactory;
	    }());
	    var trackByIdentity = function (index, item) { return item; };
	    /**
	     * @stable
	     */
	    var DefaultIterableDiffer = (function () {
	        function DefaultIterableDiffer(_trackByFn) {
	            this._trackByFn = _trackByFn;
	            this._length = null;
	            this._collection = null;
	            // Keeps track of the used records at any point in time (during & across `_check()` calls)
	            this._linkedRecords = null;
	            // Keeps track of the removed records at any point in time during `_check()` calls.
	            this._unlinkedRecords = null;
	            this._previousItHead = null;
	            this._itHead = null;
	            this._itTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._movesHead = null;
	            this._movesTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	            // Keeps track of records where custom track by is the same, but item identity has changed
	            this._identityChangesHead = null;
	            this._identityChangesTail = null;
	            this._trackByFn = isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
	        }
	        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	            get: function () { return this._collection; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	            get: function () { return this._length; },
	            enumerable: true,
	            configurable: true
	        });
	        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	            var record;
	            for (record = this._itHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	            var nextIt = this._itHead;
	            var nextRemove = this._removalsHead;
	            var addRemoveOffset = 0;
	            var moveOffsets = null;
	            while (nextIt || nextRemove) {
	                // Figure out which is the next record to process
	                // Order: remove, add, move
	                var record = !nextRemove ||
	                    nextIt &&
	                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                    nextIt :
	                    nextRemove;
	                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	                var currentIndex = record.currentIndex;
	                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	                if (record === nextRemove) {
	                    addRemoveOffset--;
	                    nextRemove = nextRemove._nextRemoved;
	                }
	                else {
	                    nextIt = nextIt._next;
	                    if (record.previousIndex == null) {
	                        addRemoveOffset++;
	                    }
	                    else {
	                        // INVARIANT:  currentIndex < previousIndex
	                        if (!moveOffsets)
	                            moveOffsets = [];
	                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                        var localCurrentIndex = currentIndex - addRemoveOffset;
	                        if (localMovePreviousIndex != localCurrentIndex) {
	                            for (var i = 0; i < localMovePreviousIndex; i++) {
	                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                                var index = offset + i;
	                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                    moveOffsets[i] = offset + 1;
	                                }
	                            }
	                            var previousIndex = record.previousIndex;
	                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                        }
	                    }
	                }
	                if (adjPreviousIndex !== currentIndex) {
	                    fn(record, adjPreviousIndex, currentIndex);
	                }
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	            var record;
	            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	            var record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	            var record;
	            for (record = this._movesHead; record !== null; record = record._nextMoved) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	            var record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	            var record;
	            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.diff = function (collection) {
	            if (isBlank(collection))
	                collection = [];
	            if (!isListLikeIterable(collection)) {
	                throw new Error("Error trying to diff '" + collection + "'");
	            }
	            if (this.check(collection)) {
	                return this;
	            }
	            else {
	                return null;
	            }
	        };
	        DefaultIterableDiffer.prototype.onDestroy = function () { };
	        // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	        DefaultIterableDiffer.prototype.check = function (collection) {
	            var _this = this;
	            this._reset();
	            var record = this._itHead;
	            var mayBeDirty = false;
	            var index;
	            var item;
	            var itemTrackBy;
	            if (isArray(collection)) {
	                var list = collection;
	                this._length = collection.length;
	                for (index = 0; index < this._length; index++) {
	                    item = list[index];
	                    itemTrackBy = this._trackByFn(index, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = this._mismatch(record, item, itemTrackBy, index);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = this._verifyReinsertion(record, item, itemTrackBy, index);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                }
	            }
	            else {
	                index = 0;
	                iterateListLike(collection, function (item /** TODO #9100 */) {
	                    itemTrackBy = _this._trackByFn(index, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = _this._mismatch(record, item, itemTrackBy, index);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            _this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                    index++;
	                });
	                this._length = index;
	            }
	            this._truncate(record);
	            this._collection = collection;
	            return this.isDirty;
	        };
	        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
	             * changes.
	             */
	            get: function () {
	                return this._additionsHead !== null || this._movesHead !== null ||
	                    this._removalsHead !== null || this._identityChangesHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Reset the state of the change objects to show no changes. This means set previousKey to
	         * currentKey, and clear all of the queues (additions, moves, removals).
	         * Set the previousIndexes of moved and added items to their currentIndexes
	         * Reset the list of additions, moves and removals
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var record;
	                var nextRecord;
	                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                    record.previousIndex = record.currentIndex;
	                }
	                this._additionsHead = this._additionsTail = null;
	                for (record = this._movesHead; record !== null; record = nextRecord) {
	                    record.previousIndex = record.currentIndex;
	                    nextRecord = record._nextMoved;
	                }
	                this._movesHead = this._movesTail = null;
	                this._removalsHead = this._removalsTail = null;
	                this._identityChangesHead = this._identityChangesTail = null;
	            }
	        };
	        /**
	         * This is the core function which handles differences between collections.
	         *
	         * - `record` is the record which we saw at this position last time. If null then it is a new
	         *   item.
	         * - `item` is the current item in the collection
	         * - `index` is the position of the item in the collection
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	            // The previous record after which we will append the current one.
	            var previousRecord;
	            if (record === null) {
	                previousRecord = this._itTail;
	            }
	            else {
	                previousRecord = record._prev;
	                // Remove the record from the collection since we know it does not match the item.
	                this._remove(record);
	            }
	            // Attempt to see if we have seen the item before.
	            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	            if (record !== null) {
	                // We have seen this before, we need to move it forward in the collection.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._moveAfter(record, previousRecord, index);
	            }
	            else {
	                // Never seen it, check evicted list.
	                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	                if (record !== null) {
	                    // It is an item which we have evicted earlier: reinsert it back into the list.
	                    // But first we need to check if identity changed, so we can update in view if necessary
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                    this._reinsertAfter(record, previousRecord, index);
	                }
	                else {
	                    // It is a new item: add it.
	                    record =
	                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
	                }
	            }
	            return record;
	        };
	        /**
	         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	         *
	         * Use case: `[a, a]` => `[b, a, a]`
	         *
	         * If we did not have this check then the insertion of `b` would:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) leave `a` at index `1` as is. <-- this is wrong!
	         *   3) reinsert `a` at index 2. <-- this is wrong!
	         *
	         * The correct behavior is:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) reinsert `a` at index 1.
	         *   3) move `a` at from `1` to `2`.
	         *
	         *
	         * Double check that we have not evicted a duplicate item. We need to check if the item type may
	         * have already been removed:
	         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	         * at the end.
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (reinsertRecord !== null) {
	                record = this._reinsertAfter(reinsertRecord, record._prev, index);
	            }
	            else if (record.currentIndex != index) {
	                record.currentIndex = index;
	                this._addToMoves(record, index);
	            }
	            return record;
	        };
	        /**
	         * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	         *
	         * - `record` The first excess {@link CollectionChangeRecord}.
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._truncate = function (record) {
	            // Anything after that needs to be removed;
	            while (record !== null) {
	                var nextRecord = record._next;
	                this._addToRemovals(this._unlink(record));
	                record = nextRecord;
	            }
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.clear();
	            }
	            if (this._additionsTail !== null) {
	                this._additionsTail._nextAdded = null;
	            }
	            if (this._movesTail !== null) {
	                this._movesTail._nextMoved = null;
	            }
	            if (this._itTail !== null) {
	                this._itTail._next = null;
	            }
	            if (this._removalsTail !== null) {
	                this._removalsTail._nextRemoved = null;
	            }
	            if (this._identityChangesTail !== null) {
	                this._identityChangesTail._nextIdentityChange = null;
	            }
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.remove(record);
	            }
	            var prev = record._prevRemoved;
	            var next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	            this._unlink(record);
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	            this._insertAfter(record, prevRecord, index);
	            if (this._additionsTail === null) {
	                // todo(vicb)
	                // assert(this._additionsHead === null);
	                this._additionsTail = this._additionsHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_additionsTail._nextAdded === null);
	                // assert(record._nextAdded === null);
	                this._additionsTail = this._additionsTail._nextAdded = record;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	            // todo(vicb)
	            // assert(record != prevRecord);
	            // assert(record._next === null);
	            // assert(record._prev === null);
	            var next = prevRecord === null ? this._itHead : prevRecord._next;
	            // todo(vicb)
	            // assert(next != record);
	            // assert(prevRecord != record);
	            record._next = next;
	            record._prev = prevRecord;
	            if (next === null) {
	                this._itTail = record;
	            }
	            else {
	                next._prev = record;
	            }
	            if (prevRecord === null) {
	                this._itHead = record;
	            }
	            else {
	                prevRecord._next = record;
	            }
	            if (this._linkedRecords === null) {
	                this._linkedRecords = new _DuplicateMap();
	            }
	            this._linkedRecords.put(record);
	            record.currentIndex = index;
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._remove = function (record) {
	            return this._addToRemovals(this._unlink(record));
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._unlink = function (record) {
	            if (this._linkedRecords !== null) {
	                this._linkedRecords.remove(record);
	            }
	            var prev = record._prev;
	            var next = record._next;
	            // todo(vicb)
	            // assert((record._prev = null) === null);
	            // assert((record._next = null) === null);
	            if (prev === null) {
	                this._itHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            if (next === null) {
	                this._itTail = prev;
	            }
	            else {
	                next._prev = prev;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	            // todo(vicb)
	            // assert(record._nextMoved === null);
	            if (record.previousIndex === toIndex) {
	                return record;
	            }
	            if (this._movesTail === null) {
	                // todo(vicb)
	                // assert(_movesHead === null);
	                this._movesTail = this._movesHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_movesTail._nextMoved === null);
	                this._movesTail = this._movesTail._nextMoved = record;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	            if (this._unlinkedRecords === null) {
	                this._unlinkedRecords = new _DuplicateMap();
	            }
	            this._unlinkedRecords.put(record);
	            record.currentIndex = null;
	            record._nextRemoved = null;
	            if (this._removalsTail === null) {
	                // todo(vicb)
	                // assert(_removalsHead === null);
	                this._removalsTail = this._removalsHead = record;
	                record._prevRemoved = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(_removalsTail._nextRemoved === null);
	                // assert(record._nextRemoved === null);
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = this._removalsTail._nextRemoved = record;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	            record.item = item;
	            if (this._identityChangesTail === null) {
	                this._identityChangesTail = this._identityChangesHead = record;
	            }
	            else {
	                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	            }
	            return record;
	        };
	        DefaultIterableDiffer.prototype.toString = function () {
	            var list = [];
	            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
	            var previous = [];
	            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
	            var additions = [];
	            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
	            var moves = [];
	            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
	            var removals = [];
	            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
	            var identityChanges = [];
	            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
	            return 'collection: ' + list.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'moves: ' + moves.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n' +
	                'identityChanges: ' + identityChanges.join(', ') + '\n';
	        };
	        return DefaultIterableDiffer;
	    }());
	    /**
	     * @stable
	     */
	    var CollectionChangeRecord = (function () {
	        function CollectionChangeRecord(item, trackById) {
	            this.item = item;
	            this.trackById = trackById;
	            this.currentIndex = null;
	            this.previousIndex = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._prev = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._prevDup = null;
	            /** @internal */
	            this._nextDup = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextMoved = null;
	            /** @internal */
	            this._nextIdentityChange = null;
	        }
	        CollectionChangeRecord.prototype.toString = function () {
	            return this.previousIndex === this.currentIndex ? stringify(this.item) :
	                stringify(this.item) + '[' +
	                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	        };
	        return CollectionChangeRecord;
	    }());
	    // A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	    var _DuplicateItemRecordList = (function () {
	        function _DuplicateItemRecordList() {
	            /** @internal */
	            this._head = null;
	            /** @internal */
	            this._tail = null;
	        }
	        /**
	         * Append the record to the list of duplicates.
	         *
	         * Note: by design all records in the list of duplicates hold the same value in record.item.
	         */
	        _DuplicateItemRecordList.prototype.add = function (record) {
	            if (this._head === null) {
	                this._head = this._tail = record;
	                record._nextDup = null;
	                record._prevDup = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(record.item ==  _head.item ||
	                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	                this._tail._nextDup = record;
	                record._prevDup = this._tail;
	                record._nextDup = null;
	                this._tail = record;
	            }
	        };
	        // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and
	        // CollectionChangeRecord.currentIndex >= afterIndex
	        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	            var record;
	            for (record = this._head; record !== null; record = record._nextDup) {
	                if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                    looseIdentical(record.trackById, trackById)) {
	                    return record;
	                }
	            }
	            return null;
	        };
	        /**
	         * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * Returns whether the list of duplicates is empty.
	         */
	        _DuplicateItemRecordList.prototype.remove = function (record) {
	            // todo(vicb)
	            // assert(() {
	            //  // verify that the record being removed is in the list.
	            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	            //    if (identical(cursor, record)) return true;
	            //  }
	            //  return false;
	            //});
	            var prev = record._prevDup;
	            var next = record._nextDup;
	            if (prev === null) {
	                this._head = next;
	            }
	            else {
	                prev._nextDup = next;
	            }
	            if (next === null) {
	                this._tail = prev;
	            }
	            else {
	                next._prevDup = prev;
	            }
	            return this._head === null;
	        };
	        return _DuplicateItemRecordList;
	    }());
	    var _DuplicateMap = (function () {
	        function _DuplicateMap() {
	            this.map = new Map();
	        }
	        _DuplicateMap.prototype.put = function (record) {
	            // todo(vicb) handle corner cases
	            var key = getMapKey(record.trackById);
	            var duplicates = this.map.get(key);
	            if (!isPresent(duplicates)) {
	                duplicates = new _DuplicateItemRecordList();
	                this.map.set(key, duplicates);
	            }
	            duplicates.add(record);
	        };
	        /**
	         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
	         * have already iterated over, we use the afterIndex to pretend it is not there.
	         *
	         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	         * have any more `a`s needs to return the last `a` not the first or second.
	         */
	        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	            if (afterIndex === void 0) { afterIndex = null; }
	            var key = getMapKey(trackById);
	            var recordList = this.map.get(key);
	            return isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
	        };
	        /**
	         * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * The list of duplicates also is removed from the map if it gets empty.
	         */
	        _DuplicateMap.prototype.remove = function (record) {
	            var key = getMapKey(record.trackById);
	            // todo(vicb)
	            // assert(this.map.containsKey(key));
	            var recordList = this.map.get(key);
	            // Remove the list of duplicates when it gets empty
	            if (recordList.remove(record)) {
	                this.map.delete(key);
	            }
	            return record;
	        };
	        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	            get: function () { return this.map.size === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	        return _DuplicateMap;
	    }());
	    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	        var previousIndex = item.previousIndex;
	        if (previousIndex === null)
	            return previousIndex;
	        var moveOffset = 0;
	        if (moveOffsets && previousIndex < moveOffsets.length) {
	            moveOffset = moveOffsets[previousIndex];
	        }
	        return previousIndex + addRemoveOffset + moveOffset;
	    }

	    var DefaultKeyValueDifferFactory = (function () {
	        function DefaultKeyValueDifferFactory() {
	        }
	        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	        return DefaultKeyValueDifferFactory;
	    }());
	    var DefaultKeyValueDiffer = (function () {
	        function DefaultKeyValueDiffer() {
	            this._records = new Map();
	            this._mapHead = null;
	            this._previousMapHead = null;
	            this._changesHead = null;
	            this._changesTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	        }
	        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	            get: function () {
	                return this._additionsHead !== null || this._changesHead !== null ||
	                    this._removalsHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	            var record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	            var record;
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	            var record;
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	            var record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	            var record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.diff = function (map) {
	            if (!map) {
	                map = new Map();
	            }
	            else if (!(map instanceof Map || isJsObject(map))) {
	                throw new Error("Error trying to diff '" + map + "'");
	            }
	            return this.check(map) ? this : null;
	        };
	        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	        DefaultKeyValueDiffer.prototype.check = function (map) {
	            var _this = this;
	            this._reset();
	            var records = this._records;
	            var oldSeqRecord = this._mapHead;
	            var lastOldSeqRecord = null;
	            var lastNewSeqRecord = null;
	            var seqChanged = false;
	            this._forEach(map, function (value, key) {
	                var newSeqRecord;
	                if (oldSeqRecord && key === oldSeqRecord.key) {
	                    newSeqRecord = oldSeqRecord;
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    seqChanged = true;
	                    if (oldSeqRecord !== null) {
	                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                        _this._addToRemovals(oldSeqRecord);
	                    }
	                    if (records.has(key)) {
	                        newSeqRecord = records.get(key);
	                        _this._maybeAddToChanges(newSeqRecord, value);
	                    }
	                    else {
	                        newSeqRecord = new KeyValueChangeRecord(key);
	                        records.set(key, newSeqRecord);
	                        newSeqRecord.currentValue = value;
	                        _this._addToAdditions(newSeqRecord);
	                    }
	                }
	                if (seqChanged) {
	                    if (_this._isInRemovals(newSeqRecord)) {
	                        _this._removeFromRemovals(newSeqRecord);
	                    }
	                    if (lastNewSeqRecord == null) {
	                        _this._mapHead = newSeqRecord;
	                    }
	                    else {
	                        lastNewSeqRecord._next = newSeqRecord;
	                    }
	                }
	                lastOldSeqRecord = oldSeqRecord;
	                lastNewSeqRecord = newSeqRecord;
	                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	            });
	            this._truncate(lastOldSeqRecord, oldSeqRecord);
	            return this.isDirty;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var record = void 0;
	                // Record the state of the mapping
	                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                    record.previousValue = record.currentValue;
	                }
	                for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                    record.previousValue = record.currentValue;
	                }
	                this._changesHead = this._changesTail = null;
	                this._additionsHead = this._additionsTail = null;
	                this._removalsHead = this._removalsTail = null;
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	            while (record !== null) {
	                if (lastRecord === null) {
	                    this._mapHead = null;
	                }
	                else {
	                    lastRecord._next = null;
	                }
	                var nextRecord = record._next;
	                this._addToRemovals(record);
	                lastRecord = record;
	                record = nextRecord;
	            }
	            for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	                rec.previousValue = rec.currentValue;
	                rec.currentValue = null;
	                this._records.delete(rec.key);
	            }
	        };
	        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	            if (!looseIdentical(newValue, record.currentValue)) {
	                record.previousValue = record.currentValue;
	                record.currentValue = newValue;
	                this._addToChanges(record);
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	            return record === this._removalsHead || record._nextRemoved !== null ||
	                record._prevRemoved !== null;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	            if (this._removalsHead === null) {
	                this._removalsHead = this._removalsTail = record;
	            }
	            else {
	                this._removalsTail._nextRemoved = record;
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = record;
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	            var next = record._next;
	            if (prev === null) {
	                this._mapHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            record._next = null;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	            var prev = record._prevRemoved;
	            var next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            record._prevRemoved = record._nextRemoved = null;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	            if (this._additionsHead === null) {
	                this._additionsHead = this._additionsTail = record;
	            }
	            else {
	                this._additionsTail._nextAdded = record;
	                this._additionsTail = record;
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	            if (this._changesHead === null) {
	                this._changesHead = this._changesTail = record;
	            }
	            else {
	                this._changesTail._nextChanged = record;
	                this._changesTail = record;
	            }
	        };
	        DefaultKeyValueDiffer.prototype.toString = function () {
	            var items = [];
	            var previous = [];
	            var changes = [];
	            var additions = [];
	            var removals = [];
	            var record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                items.push(stringify(record));
	            }
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                previous.push(stringify(record));
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                changes.push(stringify(record));
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                additions.push(stringify(record));
	            }
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                removals.push(stringify(record));
	            }
	            return 'map: ' + items.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'changes: ' + changes.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n';
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	            if (obj instanceof Map) {
	                obj.forEach(fn);
	            }
	            else {
	                StringMapWrapper.forEach(obj, fn);
	            }
	        };
	        return DefaultKeyValueDiffer;
	    }());
	    /**
	     * @stable
	     */
	    var KeyValueChangeRecord = (function () {
	        function KeyValueChangeRecord(key) {
	            this.key = key;
	            this.previousValue = null;
	            this.currentValue = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextChanged = null;
	        }
	        KeyValueChangeRecord.prototype.toString = function () {
	            return looseIdentical(this.previousValue, this.currentValue) ?
	                stringify(this.key) :
	                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                    stringify(this.currentValue) + ']');
	        };
	        return KeyValueChangeRecord;
	    }());

	    /**
	     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	     * @stable
	     */
	    var IterableDiffers = (function () {
	        function IterableDiffers(factories) {
	            this.factories = factories;
	        }
	        IterableDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var copied = ListWrapper.clone(parent.factories);
	                factories = factories.concat(copied);
	                return new IterableDiffers(factories);
	            }
	            else {
	                return new IterableDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	         * inherited {@link IterableDiffers} instance with the provided factories and return a new
	         * {@link IterableDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	               * which will only be applied to the injector for this component and its children.
	               * This step is all that's required to make a new {@link IterableDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * @Component({
	         *   viewProviders: [
	         *     IterableDiffers.extend([new ImmutableListDiffer()])
	         *   ]
	         * })
	         * ```
	         */
	        IterableDiffers.extend = function (factories) {
	            return {
	                provide: IterableDiffers,
	                useFactory: function (parent) {
	                    if (isBlank(parent)) {
	                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend IterableDiffers without a parent injector');
	                    }
	                    return IterableDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        IterableDiffers.prototype.find = function (iterable) {
	            var factory = this.factories.find(function (f) { return f.supports(iterable); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	            }
	        };
	        return IterableDiffers;
	    }());

	    /**
	     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	     * @stable
	     */
	    var KeyValueDiffers = (function () {
	        function KeyValueDiffers(factories) {
	            this.factories = factories;
	        }
	        KeyValueDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var copied = ListWrapper.clone(parent.factories);
	                factories = factories.concat(copied);
	                return new KeyValueDiffers(factories);
	            }
	            else {
	                return new KeyValueDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	         * {@link KeyValueDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	               * which will only be applied to the injector for this component and its children.
	               * This step is all that's required to make a new {@link KeyValueDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * @Component({
	         *   viewProviders: [
	         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	         *   ]
	         * })
	         * ```
	         */
	        KeyValueDiffers.extend = function (factories) {
	            return {
	                provide: KeyValueDiffers,
	                useFactory: function (parent) {
	                    if (isBlank(parent)) {
	                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                    }
	                    return KeyValueDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        KeyValueDiffers.prototype.find = function (kv) {
	            var factory = this.factories.find(function (f) { return f.supports(kv); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + kv + "'");
	            }
	        };
	        return KeyValueDiffers;
	    }());

	    var UNINITIALIZED = {
	        toString: function () { return 'CD_INIT_VALUE'; }
	    };
	    function devModeEqual(a, b) {
	        if (isListLikeIterable(a) && isListLikeIterable(b)) {
	            return areIterablesEqual(a, b, devModeEqual);
	        }
	        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	    /**
	     * Indicates that the result of a {@link Pipe} transformation has changed even though the
	     * reference
	     * has not changed.
	     *
	     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	     *
	     * Example:
	     *
	     * ```
	     * if (this._latestValue === this._latestReturnedValue) {
	     *    return this._latestReturnedValue;
	     *  } else {
	     *    this._latestReturnedValue = this._latestValue;
	     *    return WrappedValue.wrap(this._latestValue); // this will force update
	     *  }
	     * ```
	     * @stable
	     */
	    var WrappedValue = (function () {
	        function WrappedValue(wrapped) {
	            this.wrapped = wrapped;
	        }
	        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	        return WrappedValue;
	    }());
	    /**
	     * Helper class for unwrapping WrappedValue s
	     */
	    var ValueUnwrapper = (function () {
	        function ValueUnwrapper() {
	            this.hasWrappedValue = false;
	        }
	        ValueUnwrapper.prototype.unwrap = function (value) {
	            if (value instanceof WrappedValue) {
	                this.hasWrappedValue = true;
	                return value.wrapped;
	            }
	            return value;
	        };
	        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	        return ValueUnwrapper;
	    }());
	    /**
	     * Represents a basic change from a previous to a new value.
	     * @stable
	     */
	    var SimpleChange = (function () {
	        function SimpleChange(previousValue, currentValue) {
	            this.previousValue = previousValue;
	            this.currentValue = currentValue;
	        }
	        /**
	         * Check whether the new value is the first value assigned.
	         */
	        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
	        return SimpleChange;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @stable
	     */
	    var ChangeDetectorRef = (function () {
	        function ChangeDetectorRef() {
	        }
	        return ChangeDetectorRef;
	    }());

	    /**
	     * Structural diffing for `Object`s and `Map`s.
	     */
	    var keyValDiff = [new DefaultKeyValueDifferFactory()];
	    /**
	     * Structural diffing for `Iterable` types such as `Array`s.
	     */
	    var iterableDiff = [new DefaultIterableDifferFactory()];
	    var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

	    /**
	     * @experimental
	     */
	    // TODO (matsko): add typing for the animation function
	    var RenderComponentType = (function () {
	        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	            this.id = id;
	            this.templateUrl = templateUrl;
	            this.slotCount = slotCount;
	            this.encapsulation = encapsulation;
	            this.styles = styles;
	            this.animations = animations;
	        }
	        return RenderComponentType;
	    }());
	    var RenderDebugInfo = (function () {
	        function RenderDebugInfo() {
	        }
	        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "component", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "references", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "context", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "source", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return RenderDebugInfo;
	    }());
	    /**
	     * @experimental
	     */
	    var Renderer = (function () {
	        function Renderer() {
	        }
	        return Renderer;
	    }());
	    /**
	     * Injectable service that provides a low-level interface for modifying the UI.
	     *
	     * Use this service to bypass Angular's templating and make custom UI changes that can't be
	     * expressed declaratively. For example if you need to set a property or an attribute whose name is
	     * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
	     * respectively.
	     *
	     * If you are implementing a custom renderer, you must implement this interface.
	     *
	     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	     * @experimental
	     */
	    var RootRenderer = (function () {
	        function RootRenderer() {
	        }
	        return RootRenderer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
	     * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
	     * handled.
	     *
	     * See DomSanitizer for more details on security in Angular applications.
	     *
	     * @stable
	     */
	    exports.SecurityContext;
	    (function (SecurityContext) {
	        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
	        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
	        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
	        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
	        SecurityContext[SecurityContext["URL"] = 4] = "URL";
	        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
	    })(exports.SecurityContext || (exports.SecurityContext = {}));
	    /**
	     * Sanitizer is used by the views to sanitize potentially dangerous values.
	     *
	     * @stable
	     */
	    var Sanitizer = (function () {
	        function Sanitizer() {
	        }
	        return Sanitizer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A wrapper around a native element inside of a View.
	     *
	     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	     * element.
	     *
	     * @security Permitting direct access to the DOM can make your application more vulnerable to
	     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
	     * [Security Guide](http://g.co/ng/security).
	     *
	     * @stable
	     */
	    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
	    // i.e. users have to ask for what they need. With that, we can build better analysis tools
	    // and could do better codegen in the future.
	    var ElementRef = (function () {
	        function ElementRef(nativeElement) {
	            this.nativeElement = nativeElement;
	        }
	        return ElementRef;
	    }());

	    var trace;
	    var events;
	    function detectWTF() {
	        var wtf = global$1['wtf'];
	        if (wtf) {
	            trace = wtf['trace'];
	            if (trace) {
	                events = trace['events'];
	                return true;
	            }
	        }
	        return false;
	    }
	    function createScope(signature, flags) {
	        if (flags === void 0) { flags = null; }
	        return events.createScope(signature, flags);
	    }
	    function leave(scope, returnValue) {
	        trace.leaveScope(scope, returnValue);
	        return returnValue;
	    }
	    function startTimeRange(rangeType, action) {
	        return trace.beginTimeRange(rangeType, action);
	    }
	    function endTimeRange(range) {
	        trace.endTimeRange(range);
	    }

	    /**
	     * True if WTF is enabled.
	     */
	    var wtfEnabled = detectWTF();
	    function noopScope(arg0, arg1) {
	        return null;
	    }
	    /**
	     * Create trace scope.
	     *
	     * Scopes must be strictly nested and are analogous to stack frames, but
	     * do not have to follow the stack frames. Instead it is recommended that they follow logical
	     * nesting. You may want to use
	     * [Event
	     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	     * as they are defined in WTF.
	     *
	     * Used to mark scope entry. The return value is used to leave the scope.
	     *
	     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	     *
	     *     someMethod() {
	     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	     *        // DO SOME WORK HERE
	     *        return wtfLeave(s, 123); // Return value 123
	     *     }
	     *
	     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	     * negatively impact the performance of your application. For this reason we recommend that
	     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	     * exception, will produce incorrect trace, but presence of exception signifies logic error which
	     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	     * an exception is expected during normal execution while profiling.
	     *
	     * @experimental
	     */
	    var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
	    /**
	     * Used to mark end of Scope.
	     *
	     * - `scope` to end.
	     * - `returnValue` (optional) to be passed to the WTF.
	     *
	     * Returns the `returnValue for easy chaining.
	     * @experimental
	     */
	    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	    /**
	     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	     * enabled.
	     *
	     *     someMethod() {
	     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	     *        var future = new Future.delay(5).then((_) {
	     *          wtfEndTimeRange(s);
	     *        });
	     *     }
	     * @experimental
	     */
	    var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	    /**
	     * Ends a async time range operation.
	     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	     * enabled.
	     * @experimental
	     */
	    var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

	    /**
	     * Represents a container where one or more Views can be attached.
	     *
	     * The container can contain two kinds of Views. Host Views, created by instantiating a
	     * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
	     * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
	     *
	     * The location of the View Container within the containing View is specified by the Anchor
	     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	     * have a single View Container.
	     *
	     * Root elements of Views attached to this container become siblings of the Anchor Element in
	     * the Rendered View.
	     *
	     * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
	     * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
	     * @stable
	     */
	    var ViewContainerRef = (function () {
	        function ViewContainerRef() {
	        }
	        Object.defineProperty(ViewContainerRef.prototype, "element", {
	            /**
	             * Anchor element that specifies the location of this container in the containing View.
	             * <!-- TODO: rename to anchorElement -->
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "injector", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "length", {
	            /**
	             * Returns the number of Views currently attached to this container.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return ViewContainerRef;
	    }());
	    var ViewContainerRef_ = (function () {
	        function ViewContainerRef_(_element) {
	            this._element = _element;
	            /** @internal */
	            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
	            /** @internal */
	            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
	            /** @internal */
	            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
	            /** @internal */
	            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
	        }
	        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
	        Object.defineProperty(ViewContainerRef_.prototype, "length", {
	            get: function () {
	                var views = this._element.nestedViews;
	                return isPresent(views) ? views.length : 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "element", {
	            get: function () { return this._element.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	            get: function () { return this._element.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	            get: function () { return this._element.parentInjector; },
	            enumerable: true,
	            configurable: true
	        });
	        // TODO(rado): profile and decide whether bounds checks should be added
	        // to the methods below.
	        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	            if (context === void 0) { context = null; }
	            if (index === void 0) { index = -1; }
	            var viewRef = templateRef.createEmbeddedView(context);
	            this.insert(viewRef, index);
	            return viewRef;
	        };
	        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
	            if (index === void 0) { index = -1; }
	            if (injector === void 0) { injector = null; }
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            var s = this._createComponentInContainerScope();
	            var contextInjector = isPresent(injector) ? injector : this._element.parentInjector;
	            var componentRef = componentFactory.create(contextInjector, projectableNodes);
	            this.insert(componentRef.hostView, index);
	            return wtfLeave(s, componentRef);
	        };
	        // TODO(i): refactor insert+remove into move
	        ViewContainerRef_.prototype.insert = function (viewRef, index) {
	            if (index === void 0) { index = -1; }
	            var s = this._insertScope();
	            if (index == -1)
	                index = this.length;
	            var viewRef_ = viewRef;
	            this._element.attachView(viewRef_.internalView, index);
	            return wtfLeave(s, viewRef_);
	        };
	        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	            var s = this._insertScope();
	            if (currentIndex == -1)
	                return;
	            var viewRef_ = viewRef;
	            this._element.moveView(viewRef_.internalView, currentIndex);
	            return wtfLeave(s, viewRef_);
	        };
	        ViewContainerRef_.prototype.indexOf = function (viewRef) {
	            return ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
	        };
	        // TODO(i): rename to destroy
	        ViewContainerRef_.prototype.remove = function (index) {
	            if (index === void 0) { index = -1; }
	            var s = this._removeScope();
	            if (index == -1)
	                index = this.length - 1;
	            var view = this._element.detachView(index);
	            view.destroy();
	            // view is intentionally not returned to the client.
	            wtfLeave(s);
	        };
	        // TODO(i): refactor insert+remove into move
	        ViewContainerRef_.prototype.detach = function (index) {
	            if (index === void 0) { index = -1; }
	            var s = this._detachScope();
	            if (index == -1)
	                index = this.length - 1;
	            var view = this._element.detachView(index);
	            return wtfLeave(s, view.ref);
	        };
	        ViewContainerRef_.prototype.clear = function () {
	            for (var i = this.length - 1; i >= 0; i--) {
	                this.remove(i);
	            }
	        };
	        return ViewContainerRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewType;
	    (function (ViewType) {
	        // A view that contains the host element with bound component directive.
	        // Contains a COMPONENT view
	        ViewType[ViewType["HOST"] = 0] = "HOST";
	        // The view of the component
	        // Can contain 0 to n EMBEDDED views
	        ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
	        // A view that is embedded into another View via a <template> element
	        // inside of a COMPONENT view
	        ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
	    })(ViewType || (ViewType = {}));

	    /**
	     * An AppElement is created for elements that have a ViewContainerRef,
	     * a nested component or a <template> element to keep data around
	     * that is needed for later instantiations.
	     */
	    var AppElement = (function () {
	        function AppElement(index, parentIndex, parentView, nativeElement) {
	            this.index = index;
	            this.parentIndex = parentIndex;
	            this.parentView = parentView;
	            this.nativeElement = nativeElement;
	            this.nestedViews = null;
	            this.componentView = null;
	        }
	        Object.defineProperty(AppElement.prototype, "elementRef", {
	            get: function () { return new ElementRef(this.nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppElement.prototype, "vcRef", {
	            get: function () { return new ViewContainerRef_(this); },
	            enumerable: true,
	            configurable: true
	        });
	        AppElement.prototype.initComponent = function (component, componentConstructorViewQueries, view) {
	            this.component = component;
	            this.componentConstructorViewQueries = componentConstructorViewQueries;
	            this.componentView = view;
	        };
	        Object.defineProperty(AppElement.prototype, "parentInjector", {
	            get: function () { return this.parentView.injector(this.parentIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppElement.prototype, "injector", {
	            get: function () { return this.parentView.injector(this.index); },
	            enumerable: true,
	            configurable: true
	        });
	        AppElement.prototype.mapNestedViews = function (nestedViewClass, callback) {
	            var result = [];
	            if (isPresent(this.nestedViews)) {
	                this.nestedViews.forEach(function (nestedView) {
	                    if (nestedView.clazz === nestedViewClass) {
	                        result.push(callback(nestedView));
	                    }
	                });
	            }
	            return result;
	        };
	        AppElement.prototype.moveView = function (view, currentIndex) {
	            var previousIndex = this.nestedViews.indexOf(view);
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            ListWrapper.removeAt(nestedViews, previousIndex);
	            ListWrapper.insert(nestedViews, currentIndex, view);
	            var refRenderNode;
	            if (currentIndex > 0) {
	                var prevView = nestedViews[currentIndex - 1];
	                refRenderNode = prevView.lastRootNode;
	            }
	            else {
	                refRenderNode = this.nativeElement;
	            }
	            if (isPresent(refRenderNode)) {
	                view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
	            }
	            view.markContentChildAsMoved(this);
	        };
	        AppElement.prototype.attachView = function (view, viewIndex) {
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            ListWrapper.insert(nestedViews, viewIndex, view);
	            var refRenderNode;
	            if (viewIndex > 0) {
	                var prevView = nestedViews[viewIndex - 1];
	                refRenderNode = prevView.lastRootNode;
	            }
	            else {
	                refRenderNode = this.nativeElement;
	            }
	            if (isPresent(refRenderNode)) {
	                view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
	            }
	            view.addToContentChildren(this);
	        };
	        AppElement.prototype.detachView = function (viewIndex) {
	            var view = ListWrapper.removeAt(this.nestedViews, viewIndex);
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            view.detach();
	            view.removeFromContentChildren(this);
	            return view;
	        };
	        return AppElement;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An error thrown if application changes model breaking the top-down data flow.
	     *
	     * This exception is only thrown in dev mode.
	     *
	     * <!-- TODO: Add a link once the dev mode option is configurable -->
	     *
	     * ### Example
	     *
	     * ```typescript
	     * @Component({
	     *   selector: 'parent',
	     *   template: `
	     *     <child [prop]="parentProp"></child>
	     *   `,
	     *   directives: [forwardRef(() => Child)]
	     * })
	     * class Parent {
	     *   parentProp = "init";
	     * }
	     *
	     * @Directive({selector: 'child', inputs: ['prop']})
	     * class Child {
	     *   constructor(public parent: Parent) {}
	     *
	     *   set prop(v) {
	     *     // this updates the parent property, which is disallowed during change detection
	     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError
	     *     this.parent.parentProp = "updated";
	     *   }
	     * }
	     * ```
	     * @stable
	     */
	    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
	        __extends$6(ExpressionChangedAfterItHasBeenCheckedError, _super);
	        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
	            var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	            if (oldValue === UNINITIALIZED) {
	                msg +=
	                    " It seems like the view has been created after its parent and its children have been dirty checked." +
	                        " Has it been created in a change detection hook ?";
	            }
	            _super.call(this, msg);
	        }
	        return ExpressionChangedAfterItHasBeenCheckedError;
	    }(BaseError));
	    /**
	     * Thrown when an exception was raised during view creation, change detection or destruction.
	     *
	     * This error wraps the original exception to attach additional contextual information that can
	     * be useful for debugging.
	     * @stable
	     */
	    var ViewWrappedError = (function (_super) {
	        __extends$6(ViewWrappedError, _super);
	        function ViewWrappedError(originalError, context) {
	            _super.call(this, "Error in " + context.source, originalError);
	            this.context = context;
	        }
	        return ViewWrappedError;
	    }(WrappedError));
	    /**
	     * Thrown when a destroyed view is used.
	     *
	     * This error indicates a bug in the framework.
	     *
	     * This is an internal Angular error.
	     * @stable
	     */
	    var ViewDestroyedError = (function (_super) {
	        __extends$6(ViewDestroyedError, _super);
	        function ViewDestroyedError(details) {
	            _super.call(this, "Attempt to use a destroyed view: " + details);
	        }
	        return ViewDestroyedError;
	    }(BaseError));

	    var ViewUtils = (function () {
	        function ViewUtils(_renderer, _appId, sanitizer) {
	            this._renderer = _renderer;
	            this._appId = _appId;
	            this._nextCompTypeId = 0;
	            this.sanitizer = sanitizer;
	        }
	        /**
	         * Used by the generated code
	         */
	        // TODO (matsko): add typing for the animation function
	        ViewUtils.prototype.createRenderComponentType = function (templateUrl, slotCount, encapsulation, styles, animations) {
	            return new RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
	        };
	        /** @internal */
	        ViewUtils.prototype.renderComponent = function (renderComponentType) {
	            return this._renderer.renderComponent(renderComponentType);
	        };
	        ViewUtils.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ViewUtils.ctorParameters = [
	            { type: RootRenderer, },
	            { type: undefined, decorators: [{ type: Inject, args: [APP_ID,] },] },
	            { type: Sanitizer, },
	        ];
	        return ViewUtils;
	    }());
	    function flattenNestedViewRenderNodes(nodes) {
	        return _flattenNestedViewRenderNodes(nodes, []);
	    }
	    function _flattenNestedViewRenderNodes(nodes, renderNodes) {
	        for (var i = 0; i < nodes.length; i++) {
	            var node = nodes[i];
	            if (node instanceof AppElement) {
	                var appEl = node;
	                renderNodes.push(appEl.nativeElement);
	                if (isPresent(appEl.nestedViews)) {
	                    for (var k = 0; k < appEl.nestedViews.length; k++) {
	                        _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
	                    }
	                }
	            }
	            else {
	                renderNodes.push(node);
	            }
	        }
	        return renderNodes;
	    }
	    var EMPTY_ARR = [];
	    function ensureSlotCount(projectableNodes, expectedSlotCount) {
	        var res;
	        if (isBlank(projectableNodes)) {
	            res = EMPTY_ARR;
	        }
	        else if (projectableNodes.length < expectedSlotCount) {
	            var givenSlotCount = projectableNodes.length;
	            res = ListWrapper.createFixedSize(expectedSlotCount);
	            for (var i = 0; i < expectedSlotCount; i++) {
	                res[i] = (i < givenSlotCount) ? projectableNodes[i] : EMPTY_ARR;
	            }
	        }
	        else {
	            res = projectableNodes;
	        }
	        return res;
	    }
	    var MAX_INTERPOLATION_VALUES = 9;
	    function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	        switch (valueCount) {
	            case 1:
	                return c0 + _toStringWithNull(a1) + c1;
	            case 2:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	            case 3:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3;
	            case 4:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4;
	            case 5:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	            case 6:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	            case 7:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7;
	            case 8:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	            case 9:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	            default:
	                throw new Error("Does not support more than 9 expressions");
	        }
	    }
	    function _toStringWithNull(v) {
	        return v != null ? v.toString() : '';
	    }
	    function checkBinding(throwOnChange, oldValue, newValue) {
	        if (throwOnChange) {
	            if (!devModeEqual(oldValue, newValue)) {
	                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
	            }
	            return false;
	        }
	        else {
	            return !looseIdentical(oldValue, newValue);
	        }
	    }
	    function castByValue(input, value) {
	        return input;
	    }
	    var EMPTY_ARRAY = [];
	    var EMPTY_MAP = {};
	    function pureProxy1(fn) {
	        var result;
	        var v0 = UNINITIALIZED;
	        return function (p0) {
	            if (!looseIdentical(v0, p0)) {
	                v0 = p0;
	                result = fn(p0);
	            }
	            return result;
	        };
	    }
	    function pureProxy2(fn) {
	        var result;
	        var v0 = UNINITIALIZED;
	        var v1 = UNINITIALIZED;
	        return function (p0, p1) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
	                v0 = p0;
	                v1 = p1;
	                result = fn(p0, p1);
	            }
	            return result;
	        };
	    }
	    function pureProxy3(fn) {
	        var result;
	        var v0 = UNINITIALIZED;
	        var v1 = UNINITIALIZED;
	        var v2 = UNINITIALIZED;
	        return function (p0, p1, p2) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                result = fn(p0, p1, p2);
	            }
	            return result;
	        };
	    }
	    function pureProxy4(fn) {
	        var result;
	        var v0, v1, v2, v3;
	        v0 = v1 = v2 = v3 = UNINITIALIZED;
	        return function (p0, p1, p2, p3) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                result = fn(p0, p1, p2, p3);
	            }
	            return result;
	        };
	    }
	    function pureProxy5(fn) {
	        var result;
	        var v0, v1, v2, v3, v4;
	        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                result = fn(p0, p1, p2, p3, p4);
	            }
	            return result;
	        };
	    }
	    function pureProxy6(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5;
	        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                result = fn(p0, p1, p2, p3, p4, p5);
	            }
	            return result;
	        };
	    }
	    function pureProxy7(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                result = fn(p0, p1, p2, p3, p4, p5, p6);
	            }
	            return result;
	        };
	    }
	    function pureProxy8(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6, v7;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
	            }
	            return result;
	        };
	    }
	    function pureProxy9(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6, v7, v8;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	            }
	            return result;
	        };
	    }
	    function pureProxy10(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
	                !looseIdentical(v9, p9)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                v9 = p9;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	            }
	            return result;
	        };
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of a Component created via a {@link ComponentFactory}.
	     *
	     * `ComponentRef` provides access to the Component Instance as well other objects related to this
	     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
	     * method.
	     * @stable
	     */
	    var ComponentRef = (function () {
	        function ComponentRef() {
	        }
	        Object.defineProperty(ComponentRef.prototype, "location", {
	            /**
	             * Location of the Host Element of this Component Instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "injector", {
	            /**
	             * The injector on which the component instance exists.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "instance", {
	            /**
	             * The instance of the Component.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "hostView", {
	            /**
	             * The {@link ViewRef} of the Host View of this Component instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
	            /**
	             * The {@link ChangeDetectorRef} of the Component instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "componentType", {
	            /**
	             * The component type.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return ComponentRef;
	    }());
	    var ComponentRef_ = (function (_super) {
	        __extends$5(ComponentRef_, _super);
	        function ComponentRef_(_hostElement, _componentType) {
	            _super.call(this);
	            this._hostElement = _hostElement;
	            this._componentType = _componentType;
	        }
	        Object.defineProperty(ComponentRef_.prototype, "location", {
	            get: function () { return this._hostElement.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "injector", {
	            get: function () { return this._hostElement.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "instance", {
	            get: function () { return this._hostElement.component; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "hostView", {
	            get: function () { return this._hostElement.parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	            get: function () { return this._hostElement.parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "componentType", {
	            get: function () { return this._componentType; },
	            enumerable: true,
	            configurable: true
	        });
	        ComponentRef_.prototype.destroy = function () { this._hostElement.parentView.destroy(); };
	        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
	        return ComponentRef_;
	    }(ComponentRef));
	    /**
	     * @experimental
	     */
	    var EMPTY_CONTEXT = new Object();
	    /**
	     * @stable
	     */
	    var ComponentFactory = (function () {
	        function ComponentFactory(selector, _viewFactory, _componentType) {
	            this.selector = selector;
	            this._viewFactory = _viewFactory;
	            this._componentType = _componentType;
	        }
	        Object.defineProperty(ComponentFactory.prototype, "componentType", {
	            get: function () { return this._componentType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Creates a new component.
	         */
	        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
	            var vu = injector.get(ViewUtils);
	            if (isBlank(projectableNodes)) {
	                projectableNodes = [];
	            }
	            // Note: Host views don't need a declarationAppElement!
	            var hostView = this._viewFactory(vu, injector, null);
	            var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
	            return new ComponentRef_(hostElement, this._componentType);
	        };
	        return ComponentFactory;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var NoComponentFactoryError = (function (_super) {
	        __extends$7(NoComponentFactoryError, _super);
	        function NoComponentFactoryError(component) {
	            _super.call(this, "No component factory found for " + stringify(component));
	            this.component = component;
	        }
	        return NoComponentFactoryError;
	    }(BaseError));
	    var _NullComponentFactoryResolver = (function () {
	        function _NullComponentFactoryResolver() {
	        }
	        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            throw new NoComponentFactoryError(component);
	        };
	        return _NullComponentFactoryResolver;
	    }());
	    /**
	     * @stable
	     */
	    var ComponentFactoryResolver = (function () {
	        function ComponentFactoryResolver() {
	        }
	        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	        return ComponentFactoryResolver;
	    }());
	    var CodegenComponentFactoryResolver = (function () {
	        function CodegenComponentFactoryResolver(factories, _parent) {
	            this._parent = _parent;
	            this._factories = new Map();
	            for (var i = 0; i < factories.length; i++) {
	                var factory = factories[i];
	                this._factories.set(factory.componentType, factory);
	            }
	        }
	        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            var result = this._factories.get(component);
	            if (!result) {
	                result = this._parent.resolveComponentFactory(component);
	            }
	            return result;
	        };
	        return CodegenComponentFactoryResolver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * @Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   @Output() open: EventEmitter<any> = new EventEmitter();
	     *   @Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * @stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$8(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var schedulerFn;
	            var errorFn = function (err) { return null; };
	            var completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {
	                    setTimeout(function () { return generatorOrNext(value); });
	                } : function (value /** TODO #9100 */) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var NgZoneImpl = (function () {
	        function NgZoneImpl(_a) {
	            var _this = this;
	            var trace = _a.trace, onEnter = _a.onEnter, onLeave = _a.onLeave, setMicrotask = _a.setMicrotask, setMacrotask = _a.setMacrotask, onError = _a.onError;
	            this.onEnter = onEnter;
	            this.onLeave = onLeave;
	            this.setMicrotask = setMicrotask;
	            this.setMacrotask = setMacrotask;
	            this.onError = onError;
	            if (typeof Zone == 'undefined') {
	                throw new Error('Angular requires Zone.js prolyfill.');
	            }
	            Zone.assertZonePatched();
	            this.outer = this.inner = Zone.current;
	            if (Zone['wtfZoneSpec']) {
	                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	            }
	            if (trace && Zone['longStackTraceZoneSpec']) {
	                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	            }
	            this.inner = this.inner.fork({
	                name: 'angular',
	                properties: { 'isAngularZone': true },
	                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invokeTask(target, task, applyThis, applyArgs);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onHasTask: function (delegate, current, target, hasTaskState) {
	                    delegate.hasTask(target, hasTaskState);
	                    if (current === target) {
	                        // We are only interested in hasTask events which originate from our zone
	                        // (A child hasTask event is not interesting to us)
	                        if (hasTaskState.change == 'microTask') {
	                            _this.setMicrotask(hasTaskState.microTask);
	                        }
	                        else if (hasTaskState.change == 'macroTask') {
	                            _this.setMacrotask(hasTaskState.macroTask);
	                        }
	                    }
	                },
	                onHandleError: function (delegate, current, target, error) {
	                    delegate.handleError(target, error);
	                    _this.onError(error);
	                    return false;
	                }
	            });
	        }
	        NgZoneImpl.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	        NgZoneImpl.prototype.runInner = function (fn) { return this.inner.run(fn); };
	        ;
	        NgZoneImpl.prototype.runInnerGuarded = function (fn) { return this.inner.runGuarded(fn); };
	        ;
	        NgZoneImpl.prototype.runOuter = function (fn) { return this.outer.run(fn); };
	        ;
	        return NgZoneImpl;
	    }());

	    /**
	     * An injectable service for executing work inside or outside of the Angular zone.
	     *
	     * The most common use of this service is to optimize performance when starting a work consisting of
	     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	     * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
	     * can reenter the Angular zone via {@link #run}.
	     *
	     * <!-- TODO: add/fix links to:
	     *   - docs explaining zones and the use of zones in Angular and change-detection
	     *   - link to runOutsideAngular/run (throughout this file!)
	     *   -->
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview))
	     * ```
	     * import {Component, View, NgZone} from '@angular/core';
	     * import {NgIf} from '@angular/common';
	     *
	     * @Component({
	     *   selector: 'ng-zone-demo'.
	     *   template: `
	     *     <h2>Demo: NgZone</h2>
	     *
	     *     <p>Progress: {{progress}}%</p>
	     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	     *
	     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	     *   `,
	     *   directives: [NgIf]
	     * })
	     * export class NgZoneDemo {
	     *   progress: number = 0;
	     *   label: string;
	     *
	     *   constructor(private _ngZone: NgZone) {}
	     *
	     *   // Loop inside the Angular zone
	     *   // so the UI DOES refresh after each setTimeout cycle
	     *   processWithinAngularZone() {
	     *     this.label = 'inside';
	     *     this.progress = 0;
	     *     this._increaseProgress(() => console.log('Inside Done!'));
	     *   }
	     *
	     *   // Loop outside of the Angular zone
	     *   // so the UI DOES NOT refresh after each setTimeout cycle
	     *   processOutsideOfAngularZone() {
	     *     this.label = 'outside';
	     *     this.progress = 0;
	     *     this._ngZone.runOutsideAngular(() => {
	     *       this._increaseProgress(() => {
	     *       // reenter the Angular zone and display done
	     *       this._ngZone.run(() => {console.log('Outside Done!') });
	     *     }}));
	     *   }
	     *
	     *
	     *   _increaseProgress(doneCallback: () => void) {
	     *     this.progress += 1;
	     *     console.log(`Current progress: ${this.progress}%`);
	     *
	     *     if (this.progress < 100) {
	     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	     *     } else {
	     *       doneCallback();
	     *     }
	     *   }
	     * }
	     * ```
	     * @experimental
	     */
	    var NgZone = (function () {
	        function NgZone(_a) {
	            var _this = this;
	            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	            this._hasPendingMicrotasks = false;
	            this._hasPendingMacrotasks = false;
	            /** @internal */
	            this._isStable = true;
	            /** @internal */
	            this._nesting = 0;
	            /** @internal */
	            this._onUnstable = new EventEmitter(false);
	            /** @internal */
	            this._onMicrotaskEmpty = new EventEmitter(false);
	            /** @internal */
	            this._onStable = new EventEmitter(false);
	            /** @internal */
	            this._onErrorEvents = new EventEmitter(false);
	            this._zoneImpl = new NgZoneImpl({
	                trace: enableLongStackTrace,
	                onEnter: function () {
	                    // console.log('ZONE.enter', this._nesting, this._isStable);
	                    _this._nesting++;
	                    if (_this._isStable) {
	                        _this._isStable = false;
	                        _this._onUnstable.emit(null);
	                    }
	                },
	                onLeave: function () {
	                    _this._nesting--;
	                    // console.log('ZONE.leave', this._nesting, this._isStable);
	                    _this._checkStable();
	                },
	                setMicrotask: function (hasMicrotasks) {
	                    _this._hasPendingMicrotasks = hasMicrotasks;
	                    _this._checkStable();
	                },
	                setMacrotask: function (hasMacrotasks) { _this._hasPendingMacrotasks = hasMacrotasks; },
	                onError: function (error) { return _this._onErrorEvents.emit(error); }
	            });
	        }
	        NgZone.isInAngularZone = function () { return NgZoneImpl.isInAngularZone(); };
	        NgZone.assertInAngularZone = function () {
	            if (!NgZoneImpl.isInAngularZone()) {
	                throw new Error('Expected to be in Angular Zone, but it is not!');
	            }
	        };
	        NgZone.assertNotInAngularZone = function () {
	            if (NgZoneImpl.isInAngularZone()) {
	                throw new Error('Expected to not be in Angular Zone, but it is!');
	            }
	        };
	        NgZone.prototype._checkStable = function () {
	            var _this = this;
	            if (this._nesting == 0) {
	                if (!this._hasPendingMicrotasks && !this._isStable) {
	                    try {
	                        // console.log('ZONE.microtaskEmpty');
	                        this._nesting++;
	                        this._onMicrotaskEmpty.emit(null);
	                    }
	                    finally {
	                        this._nesting--;
	                        if (!this._hasPendingMicrotasks) {
	                            try {
	                                // console.log('ZONE.stable', this._nesting, this._isStable);
	                                this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                            }
	                            finally {
	                                this._isStable = true;
	                            }
	                        }
	                    }
	                }
	            }
	        };
	        ;
	        Object.defineProperty(NgZone.prototype, "onUnstable", {
	            /**
	             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	             */
	            get: function () { return this._onUnstable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	            /**
	             * Notifies when there is no more microtasks enqueue in the current VM Turn.
	             * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	             * For this reason this event can fire multiple times per VM Turn.
	             */
	            get: function () { return this._onMicrotaskEmpty; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onStable", {
	            /**
	             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	             * implies we are about to relinquish VM turn.
	             * This event gets called just once.
	             */
	            get: function () { return this._onStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onError", {
	            /**
	             * Notify that an error has been delivered.
	             */
	            get: function () { return this._onErrorEvents; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "isStable", {
	            /**
	             * Whether there are no outstanding microtasks or microtasks.
	             */
	            get: function () { return this._isStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	            /**
	             * Whether there are any outstanding microtasks.
	             */
	            get: function () { return this._hasPendingMicrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	            /**
	             * Whether there are any outstanding microtasks.
	             */
	            get: function () { return this._hasPendingMacrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	         * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * within the Angular zone.
	         *
	         * If a synchronous error happens it will be rethrown and not reported via `onError`.
	         */
	        NgZone.prototype.run = function (fn) { return this._zoneImpl.runInner(fn); };
	        /**
	         * Same as #run, except that synchronous errors are caught and forwarded
	         * via `onError` and not rethrown.
	         */
	        NgZone.prototype.runGuarded = function (fn) { return this._zoneImpl.runInnerGuarded(fn); };
	        /**
	         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * outside of the Angular zone.
	         *
	         * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
	         */
	        NgZone.prototype.runOutsideAngular = function (fn) { return this._zoneImpl.runOuter(fn); };
	        return NgZone;
	    }());

	    /**
	     * The Testability service provides testing hooks that can be accessed from
	     * the browser and by services such as Protractor. Each bootstrapped Angular
	     * application on the page will have an instance of Testability.
	     * @experimental
	     */
	    var Testability = (function () {
	        function Testability(_ngZone) {
	            this._ngZone = _ngZone;
	            /** @internal */
	            this._pendingCount = 0;
	            /** @internal */
	            this._isZoneStable = true;
	            /**
	             * Whether any work was done since the last 'whenStable' callback. This is
	             * useful to detect if this could have potentially destabilized another
	             * component while it is stabilizing.
	             * @internal
	             */
	            this._didWork = false;
	            /** @internal */
	            this._callbacks = [];
	            this._watchAngularEvents();
	        }
	        /** @internal */
	        Testability.prototype._watchAngularEvents = function () {
	            var _this = this;
	            this._ngZone.onUnstable.subscribe({
	                next: function () {
	                    _this._didWork = true;
	                    _this._isZoneStable = false;
	                }
	            });
	            this._ngZone.runOutsideAngular(function () {
	                _this._ngZone.onStable.subscribe({
	                    next: function () {
	                        NgZone.assertNotInAngularZone();
	                        scheduleMicroTask(function () {
	                            _this._isZoneStable = true;
	                            _this._runCallbacksIfReady();
	                        });
	                    }
	                });
	            });
	        };
	        Testability.prototype.increasePendingRequestCount = function () {
	            this._pendingCount += 1;
	            this._didWork = true;
	            return this._pendingCount;
	        };
	        Testability.prototype.decreasePendingRequestCount = function () {
	            this._pendingCount -= 1;
	            if (this._pendingCount < 0) {
	                throw new Error('pending async requests below zero');
	            }
	            this._runCallbacksIfReady();
	            return this._pendingCount;
	        };
	        Testability.prototype.isStable = function () {
	            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	        };
	        /** @internal */
	        Testability.prototype._runCallbacksIfReady = function () {
	            var _this = this;
	            if (this.isStable()) {
	                // Schedules the call backs in a new frame so that it is always async.
	                scheduleMicroTask(function () {
	                    while (_this._callbacks.length !== 0) {
	                        (_this._callbacks.pop())(_this._didWork);
	                    }
	                    _this._didWork = false;
	                });
	            }
	            else {
	                // Not Ready
	                this._didWork = true;
	            }
	        };
	        Testability.prototype.whenStable = function (callback) {
	            this._callbacks.push(callback);
	            this._runCallbacksIfReady();
	        };
	        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	        Testability.prototype.findBindings = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.prototype.findProviders = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Testability.ctorParameters = [
	            { type: NgZone, },
	        ];
	        return Testability;
	    }());
	    /**
	     * A global registry of {@link Testability} instances for specific elements.
	     * @experimental
	     */
	    var TestabilityRegistry = (function () {
	        function TestabilityRegistry() {
	            /** @internal */
	            this._applications = new Map$1();
	            _testabilityGetter.addToWindow(this);
	        }
	        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	            this._applications.set(token, testability);
	        };
	        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	        TestabilityRegistry.prototype.getAllTestabilities = function () { return MapWrapper.values(this._applications); };
	        TestabilityRegistry.prototype.getAllRootElements = function () { return MapWrapper.keys(this._applications); };
	        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	        };
	        TestabilityRegistry.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        TestabilityRegistry.ctorParameters = [];
	        return TestabilityRegistry;
	    }());
	    var _NoopGetTestability = (function () {
	        function _NoopGetTestability() {
	        }
	        _NoopGetTestability.prototype.addToWindow = function (registry) { };
	        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            return null;
	        };
	        return _NoopGetTestability;
	    }());
	    /**
	     * Set the {@link GetTestability} implementation used by the Angular testing framework.
	     * @experimental
	     */
	    function setTestabilityGetter(getter) {
	        _testabilityGetter = getter;
	    }
	    var _testabilityGetter = new _NoopGetTestability();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _devMode = true;
	    var _runModeLocked = false;
	    var _platform;
	    /**
	     * Disable Angular's development mode, which turns off assertions and other
	     * checks within the framework.
	     *
	     * One important assertion this disables verifies that a change detection pass
	     * does not result in additional changes to any bindings (also known as
	     * unidirectional data flow).
	     *
	     * @stable
	     */
	    function enableProdMode() {
	        if (_runModeLocked) {
	            throw new Error('Cannot enable prod mode after platform setup.');
	        }
	        _devMode = false;
	    }
	    /**
	     * Returns whether Angular is in development mode. After called once,
	     * the value is locked and won't change any more.
	     *
	     * By default, this is true, unless a user calls `enableProdMode` before calling this.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function isDevMode() {
	        _runModeLocked = true;
	        return _devMode;
	    }
	    /**
	     * Creates a platform.
	     * Platforms have to be eagerly created via this function.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function createPlatform(injector) {
	        if (isPresent(_platform) && !_platform.destroyed) {
	            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	        }
	        _platform = injector.get(PlatformRef);
	        var inits = injector.get(PLATFORM_INITIALIZER, null);
	        if (isPresent(inits))
	            inits.forEach(function (init) { return init(); });
	        return _platform;
	    }
	    /**
	     * Creates a factory for a platform
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function createPlatformFactory(parentPlaformFactory, name, providers) {
	        if (providers === void 0) { providers = []; }
	        var marker = new OpaqueToken("Platform: " + name);
	        return function (extraProviders) {
	            if (extraProviders === void 0) { extraProviders = []; }
	            if (!getPlatform()) {
	                if (parentPlaformFactory) {
	                    parentPlaformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	                }
	                else {
	                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	                }
	            }
	            return assertPlatform(marker);
	        };
	    }
	    /**
	     * Checks that there currently is a platform
	     * which contains the given token as a provider.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function assertPlatform(requiredToken) {
	        var platform = getPlatform();
	        if (isBlank(platform)) {
	            throw new Error('No platform exists!');
	        }
	        if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null))) {
	            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	        }
	        return platform;
	    }
	    /**
	     * Destroy the existing platform.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function destroyPlatform() {
	        if (isPresent(_platform) && !_platform.destroyed) {
	            _platform.destroy();
	        }
	    }
	    /**
	     * Returns the current platform.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function getPlatform() {
	        return isPresent(_platform) && !_platform.destroyed ? _platform : null;
	    }
	    /**
	     * The Angular platform is the entry point for Angular on a web page. Each page
	     * has exactly one platform, and services (such as reflection) which are common
	     * to every Angular application running on the page are bound in its scope.
	     *
	     * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
	     * explicitly by calling {@link createPlatform}().
	     *
	     * @stable
	     */
	    var PlatformRef = (function () {
	        function PlatformRef() {
	        }
	        /**
	         * Creates an instance of an `@NgModule` for the given platform
	         * for offline compilation.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * my_module.ts:
	         *
	         * @NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * main.ts:
	         * import {MyModuleNgFactory} from './my_module.ngfactory';
	         * import {platformBrowser} from '@angular/platform-browser';
	         *
	         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	         * ```
	         *
	         * @experimental APIs related to application bootstrap are currently under review.
	         */
	        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            throw unimplemented();
	        };
	        /**
	         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * @NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	         * ```
	         * @stable
	         */
	        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            throw unimplemented();
	        };
	        Object.defineProperty(PlatformRef.prototype, "injector", {
	            /**
	             * Retrieve the platform {@link Injector}, which is the parent injector for
	             * every Angular application on the page and provides singleton providers.
	             */
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(PlatformRef.prototype, "destroyed", {
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return PlatformRef;
	    }());
	    function _callAndReportToErrorHandler(errorHandler, callback) {
	        try {
	            var result = callback();
	            if (isPromise(result)) {
	                return result.catch(function (e) {
	                    errorHandler.handleError(e);
	                    // rethrow as the exception handler might not do it
	                    throw e;
	                });
	            }
	            else {
	                return result;
	            }
	        }
	        catch (e) {
	            errorHandler.handleError(e);
	            // rethrow as the exception handler might not do it
	            throw e;
	        }
	    }
	    var PlatformRef_ = (function (_super) {
	        __extends$3(PlatformRef_, _super);
	        function PlatformRef_(_injector) {
	            _super.call(this);
	            this._injector = _injector;
	            this._modules = [];
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        Object.defineProperty(PlatformRef_.prototype, "injector", {
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	            get: function () { return this._destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        PlatformRef_.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error('The platform has already been destroyed!');
	            }
	            ListWrapper.clone(this._modules).forEach(function (app) { return app.destroy(); });
	            this._destroyListeners.forEach(function (dispose) { return dispose(); });
	            this._destroyed = true;
	        };
	        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	        };
	        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	            var _this = this;
	            // Note: We need to create the NgZone _before_ we instantiate the module,
	            // as instantiating the module creates some providers eagerly.
	            // So we create a mini parent injector that just contains the new NgZone and
	            // pass that as parent to the NgModuleFactory.
	            if (!ngZone)
	                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	            // Attention: Don't use ApplicationRef.run here,
	            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	            return ngZone.run(function () {
	                var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	                var moduleRef = moduleFactory.create(ngZoneInjector);
	                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	                if (!exceptionHandler) {
	                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	                }
	                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
	                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	                return _callAndReportToErrorHandler(exceptionHandler, function () {
	                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                    return initStatus.donePromise.then(function () {
	                        _this._moduleDoBootstrap(moduleRef);
	                        return moduleRef;
	                    });
	                });
	            });
	        };
	        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	        };
	        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
	            var _this = this;
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            var compilerFactory = this.injector.get(CompilerFactory);
	            var compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);
	            // ugly internal api hack: generate host component factories for all declared components and
	            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
	            // factories.
	            if (componentFactoryCallback) {
	                return compiler.compileModuleAndAllComponentsAsync(moduleType)
	                    .then(function (_a) {
	                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
	                    componentFactoryCallback(componentFactories);
	                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
	                });
	            }
	            return compiler.compileModuleAsync(moduleType)
	                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	        };
	        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	            var appRef = moduleRef.injector.get(ApplicationRef);
	            if (moduleRef.bootstrapFactories.length > 0) {
	                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
	            }
	            else if (moduleRef.instance.ngDoBootstrap) {
	                moduleRef.instance.ngDoBootstrap(appRef);
	            }
	            else {
	                throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
	                    "Please define one of these.");
	            }
	        };
	        PlatformRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        PlatformRef_.ctorParameters = [
	            { type: Injector, },
	        ];
	        return PlatformRef_;
	    }(PlatformRef));
	    /**
	     * A reference to an Angular application running on a page.
	     *
	     * For more about Angular applications, see the documentation for {@link bootstrap}.
	     *
	     * @stable
	     */
	    var ApplicationRef = (function () {
	        function ApplicationRef() {
	        }
	        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	            /**
	             * Get a list of component types registered to this application.
	             * This list is populated even before the component is created.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ApplicationRef.prototype, "components", {
	            /**
	             * Get a list of components registered to this application.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return ApplicationRef;
	    }());
	    var ApplicationRef_ = (function (_super) {
	        __extends$3(ApplicationRef_, _super);
	        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
	            var _this = this;
	            _super.call(this);
	            this._zone = _zone;
	            this._console = _console;
	            this._injector = _injector;
	            this._exceptionHandler = _exceptionHandler;
	            this._componentFactoryResolver = _componentFactoryResolver;
	            this._initStatus = _initStatus;
	            this._testabilityRegistry = _testabilityRegistry;
	            this._testability = _testability;
	            this._bootstrapListeners = [];
	            this._rootComponents = [];
	            this._rootComponentTypes = [];
	            this._changeDetectorRefs = [];
	            this._runningTick = false;
	            this._enforceNoNewChanges = false;
	            this._enforceNoNewChanges = isDevMode();
	            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        }
	        ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
	            this._changeDetectorRefs.push(changeDetector);
	        };
	        ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
	            ListWrapper.remove(this._changeDetectorRefs, changeDetector);
	        };
	        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	            var _this = this;
	            if (!this._initStatus.done) {
	                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	            }
	            var componentFactory;
	            if (componentOrFactory instanceof ComponentFactory) {
	                componentFactory = componentOrFactory;
	            }
	            else {
	                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	            }
	            this._rootComponentTypes.push(componentFactory.componentType);
	            var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
	            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	            var testability = compRef.injector.get(Testability, null);
	            if (isPresent(testability)) {
	                compRef.injector.get(TestabilityRegistry)
	                    .registerApplication(compRef.location.nativeElement, testability);
	            }
	            this._loadComponent(compRef);
	            if (isDevMode()) {
	                this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
	            }
	            return compRef;
	        };
	        /** @internal */
	        ApplicationRef_.prototype._loadComponent = function (componentRef) {
	            this._changeDetectorRefs.push(componentRef.changeDetectorRef);
	            this.tick();
	            this._rootComponents.push(componentRef);
	            // Get the listeners lazily to prevent DI cycles.
	            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, [])
	                .concat(this._bootstrapListeners);
	            listeners.forEach(function (listener) { return listener(componentRef); });
	        };
	        /** @internal */
	        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	            if (!ListWrapper.contains(this._rootComponents, componentRef)) {
	                return;
	            }
	            this.unregisterChangeDetector(componentRef.changeDetectorRef);
	            ListWrapper.remove(this._rootComponents, componentRef);
	        };
	        ApplicationRef_.prototype.tick = function () {
	            if (this._runningTick) {
	                throw new Error('ApplicationRef.tick is called recursively');
	            }
	            var s = ApplicationRef_._tickScope();
	            try {
	                this._runningTick = true;
	                this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });
	                if (this._enforceNoNewChanges) {
	                    this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });
	                }
	            }
	            finally {
	                this._runningTick = false;
	                wtfLeave(s);
	            }
	        };
	        ApplicationRef_.prototype.ngOnDestroy = function () {
	            // TODO(alxhub): Dispose of the NgZone.
	            ListWrapper.clone(this._rootComponents).forEach(function (ref) { return ref.destroy(); });
	        };
	        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	            get: function () { return this._rootComponentTypes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "components", {
	            get: function () { return this._rootComponents; },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	        ApplicationRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationRef_.ctorParameters = [
	            { type: NgZone, },
	            { type: Console, },
	            { type: Injector, },
	            { type: ErrorHandler, },
	            { type: ComponentFactoryResolver, },
	            { type: ApplicationInitStatus, },
	            { type: TestabilityRegistry, decorators: [{ type: Optional },] },
	            { type: Testability, decorators: [{ type: Optional },] },
	        ];
	        return ApplicationRef_;
	    }(ApplicationRef));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.
	     *
	     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	     * NgModule Instance.
	     *
	     * @stable
	     */
	    var NgModuleRef = (function () {
	        function NgModuleRef() {
	        }
	        Object.defineProperty(NgModuleRef.prototype, "injector", {
	            /**
	             * The injector that contains all of the providers of the NgModule.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
	            /**
	             * The ComponentFactoryResolver to get hold of the ComponentFactories
	             * declared in the `entryComponents` property of the module.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "instance", {
	            /**
	             * The NgModule instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return NgModuleRef;
	    }());
	    /**
	     * @experimental
	     */
	    var NgModuleFactory = (function () {
	        function NgModuleFactory(_injectorClass, _moduleType) {
	            this._injectorClass = _injectorClass;
	            this._moduleType = _moduleType;
	        }
	        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	            get: function () { return this._moduleType; },
	            enumerable: true,
	            configurable: true
	        });
	        NgModuleFactory.prototype.create = function (parentInjector) {
	            if (!parentInjector) {
	                parentInjector = Injector.NULL;
	            }
	            var instance = new this._injectorClass(parentInjector);
	            instance.create();
	            return instance;
	        };
	        return NgModuleFactory;
	    }());
	    var _UNDEFINED = new Object();
	    var NgModuleInjector = (function (_super) {
	        __extends$9(NgModuleInjector, _super);
	        function NgModuleInjector(parent, factories, bootstrapFactories) {
	            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
	            this.parent = parent;
	            this.bootstrapFactories = bootstrapFactories;
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	        NgModuleInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            if (token === Injector || token === ComponentFactoryResolver) {
	                return this;
	            }
	            var result = this.getInternal(token, _UNDEFINED);
	            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	        };
	        Object.defineProperty(NgModuleInjector.prototype, "injector", {
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        NgModuleInjector.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	            }
	            this._destroyed = true;
	            this.destroyInternal();
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	        };
	        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        return NgModuleInjector;
	    }(CodegenComponentFactoryResolver));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Used to load ng module factories.
	     * @stable
	     */
	    var NgModuleFactoryLoader = (function () {
	        function NgModuleFactoryLoader() {
	        }
	        return NgModuleFactoryLoader;
	    }());
	    var moduleFactories = new Map();
	    /**
	     * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	     * @experimental
	     */
	    function registerModuleFactory(id, factory) {
	        var existing = moduleFactories.get(id);
	        if (existing) {
	            throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	        }
	        moduleFactories.set(id, factory);
	    }
	    /**
	     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	     * cannot be found.
	     * @experimental
	     */
	    function getModuleFactory(id) {
	        var factory = moduleFactories.get(id);
	        if (!factory)
	            throw new Error("No module with ID " + id + " loaded");
	        return factory;
	    }

	    /**
	     * An unmodifiable list of items that Angular keeps up to date when the state
	     * of the application changes.
	     *
	     * The type of object that {@link Query} and {@link ViewQueryMetadata} provide.
	     *
	     * Implements an iterable interface, therefore it can be used in both ES6
	     * javascript `for (var i of items)` loops as well as in Angular templates with
	     * `*ngFor="let i of myList"`.
	     *
	     * Changes can be observed by subscribing to the changes `Observable`.
	     *
	     * NOTE: In the future this class will implement an `Observable` interface.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	     * ```typescript
	     * @Component({...})
	     * class Container {
	     *   @ViewChildren(Item) items:QueryList<Item>;
	     * }
	     * ```
	     * @stable
	     */
	    var QueryList = (function () {
	        function QueryList() {
	            this._dirty = true;
	            this._results = [];
	            this._emitter = new EventEmitter();
	        }
	        Object.defineProperty(QueryList.prototype, "changes", {
	            get: function () { return this._emitter; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "length", {
	            get: function () { return this._results.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "first", {
	            get: function () { return this._results[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "last", {
	            get: function () { return this._results[this.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * See
	         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	         */
	        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	        /**
	         * See
	         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	         */
	        QueryList.prototype.filter = function (fn) {
	            return this._results.filter(fn);
	        };
	        /**
	         * See
	         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	         */
	        QueryList.prototype.reduce = function (fn, init) {
	            return this._results.reduce(fn, init);
	        };
	        /**
	         * See
	         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	         */
	        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	        /**
	         * See
	         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	         */
	        QueryList.prototype.some = function (fn) {
	            return this._results.some(fn);
	        };
	        QueryList.prototype.toArray = function () { return this._results.slice(); };
	        QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()](); };
	        QueryList.prototype.toString = function () { return this._results.toString(); };
	        QueryList.prototype.reset = function (res) {
	            this._results = ListWrapper.flatten(res);
	            this._dirty = false;
	        };
	        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	        /** internal */
	        QueryList.prototype.setDirty = function () { this._dirty = true; };
	        Object.defineProperty(QueryList.prototype, "dirty", {
	            /** internal */
	            get: function () { return this._dirty; },
	            enumerable: true,
	            configurable: true
	        });
	        return QueryList;
	    }());

	    var _SEPARATOR = '#';
	    var FACTORY_CLASS_SUFFIX = 'NgFactory';
	    /**
	     * Configuration for SystemJsNgModuleLoader.
	     * token.
	     *
	     * @experimental
	     */
	    var SystemJsNgModuleLoaderConfig = (function () {
	        function SystemJsNgModuleLoaderConfig() {
	        }
	        return SystemJsNgModuleLoaderConfig;
	    }());
	    var DEFAULT_CONFIG = {
	        factoryPathPrefix: '',
	        factoryPathSuffix: '.ngfactory',
	    };
	    /**
	     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	     * @experimental
	     */
	    var SystemJsNgModuleLoader = (function () {
	        function SystemJsNgModuleLoader(_compiler, config) {
	            this._compiler = _compiler;
	            this._config = config || DEFAULT_CONFIG;
	        }
	        SystemJsNgModuleLoader.prototype.load = function (path) {
	            var offlineMode = this._compiler instanceof Compiler;
	            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	        };
	        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	            var _this = this;
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            if (exportName === undefined)
	                exportName = 'default';
	            return System.import(module)
	                .then(function (module) { return module[exportName]; })
	                .then(function (type) { return checkNotEmpty(type, module, exportName); })
	                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	        };
	        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	            if (exportName === undefined) {
	                exportName = 'default';
	                factoryClassSuffix = '';
	            }
	            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	                .then(function (module) { return module[exportName + factoryClassSuffix]; })
	                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	        };
	        SystemJsNgModuleLoader.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        SystemJsNgModuleLoader.ctorParameters = [
	            { type: Compiler, },
	            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	        ];
	        return SystemJsNgModuleLoader;
	    }());
	    function checkNotEmpty(value, modulePath, exportName) {
	        if (!value) {
	            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	        }
	        return value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an Embedded Template that can be used to instantiate Embedded Views.
	     *
	     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	     * `TemplateRef` from a Component or a Directive via {@link Query}.
	     *
	     * To instantiate Embedded Views based on a Template, use
	     * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	     * View Container.
	     * @stable
	     */
	    var TemplateRef = (function () {
	        function TemplateRef() {
	        }
	        Object.defineProperty(TemplateRef.prototype, "elementRef", {
	            /**
	             * The location in the View where the Embedded View logically belongs to.
	             *
	             * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`
	             * inherit from the contexts of this location.
	             *
	             * Typically new Embedded Views are attached to the View Container of this location, but in
	             * advanced use-cases, the View can be attached to a different container while keeping the
	             * data-binding and injection context from the original location.
	             *
	             */
	            // TODO(i): rename to anchor or location
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef;
	    }());
	    var TemplateRef_ = (function (_super) {
	        __extends$10(TemplateRef_, _super);
	        function TemplateRef_(_appElement, _viewFactory) {
	            _super.call(this);
	            this._appElement = _appElement;
	            this._viewFactory = _viewFactory;
	        }
	        TemplateRef_.prototype.createEmbeddedView = function (context) {
	            var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
	            view.create(context || {}, null, null);
	            return view.ref;
	        };
	        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	            get: function () { return this._appElement.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef_;
	    }(TemplateRef));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var _queuedAnimations = [];
	    /** @internal */
	    function queueAnimation(player) {
	        _queuedAnimations.push(player);
	    }
	    /** @internal */
	    function triggerQueuedAnimations() {
	        for (var i = 0; i < _queuedAnimations.length; i++) {
	            var player = _queuedAnimations[i];
	            player.play();
	        }
	        _queuedAnimations = [];
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var ViewRef = (function () {
	        function ViewRef() {
	        }
	        Object.defineProperty(ViewRef.prototype, "destroyed", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return ViewRef;
	    }());
	    /**
	     * Represents an Angular View.
	     *
	     * <!-- TODO: move the next two paragraphs to the dev guide -->
	     * A View is a fundamental building block of the application UI. It is the smallest grouping of
	     * Elements which are created and destroyed together.
	     *
	     * Properties of elements in a View can change, but the structure (number and order) of elements in
	     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	     * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
	     * <!-- /TODO -->
	     *
	     * ### Example
	     *
	     * Given this template...
	     *
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <li *ngFor="let  item of items">{{item}}</li>
	     * </ul>
	     * ```
	     *
	     * We have two {@link TemplateRef}s:
	     *
	     * Outer {@link TemplateRef}:
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <template ngFor let-item [ngForOf]="items"></template>
	     * </ul>
	     * ```
	     *
	     * Inner {@link TemplateRef}:
	     * ```
	     *   <li>{{item}}</li>
	     * ```
	     *
	     * Notice that the original template is broken down into two separate {@link TemplateRef}s.
	     *
	     * The outer/inner {@link TemplateRef}s are then assembled into views like so:
	     *
	     * ```
	     * <!-- ViewRef: outer-0 -->
	     * Count: 2
	     * <ul>
	     *   <template view-container-ref></template>
	     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	     * </ul>
	     * <!-- /ViewRef: outer-0 -->
	     * ```
	     * @experimental
	     */
	    var EmbeddedViewRef = (function (_super) {
	        __extends$11(EmbeddedViewRef, _super);
	        function EmbeddedViewRef() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return EmbeddedViewRef;
	    }(ViewRef));
	    var ViewRef_ = (function () {
	        function ViewRef_(_view) {
	            this._view = _view;
	            this._view = _view;
	            this._originalMode = this._view.cdMode;
	        }
	        Object.defineProperty(ViewRef_.prototype, "internalView", {
	            get: function () { return this._view; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	            get: function () { return this._view.flatRootNodes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "context", {
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "destroyed", {
	            get: function () { return this._view.destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
	        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
	        ViewRef_.prototype.detectChanges = function () {
	            this._view.detectChanges(false);
	            triggerQueuedAnimations();
	        };
	        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
	        ViewRef_.prototype.reattach = function () {
	            this._view.cdMode = this._originalMode;
	            this.markForCheck();
	        };
	        ViewRef_.prototype.onDestroy = function (callback) { this._view.disposables.push(callback); };
	        ViewRef_.prototype.destroy = function () { this._view.destroy(); };
	        return ViewRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var EventListener = (function () {
	        function EventListener(name, callback) {
	            this.name = name;
	            this.callback = callback;
	        }
	        ;
	        return EventListener;
	    }());
	    /**
	     * @experimental All debugging apis are currently experimental.
	     */
	    var DebugNode = (function () {
	        function DebugNode(nativeNode, parent, _debugInfo) {
	            this._debugInfo = _debugInfo;
	            this.nativeNode = nativeNode;
	            if (isPresent(parent) && parent instanceof DebugElement) {
	                parent.addChild(this);
	            }
	            else {
	                this.parent = null;
	            }
	            this.listeners = [];
	        }
	        Object.defineProperty(DebugNode.prototype, "injector", {
	            get: function () { return isPresent(this._debugInfo) ? this._debugInfo.injector : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "componentInstance", {
	            get: function () {
	                return isPresent(this._debugInfo) ? this._debugInfo.component : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "context", {
	            get: function () { return isPresent(this._debugInfo) ? this._debugInfo.context : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "references", {
	            get: function () {
	                return isPresent(this._debugInfo) ? this._debugInfo.references : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "providerTokens", {
	            get: function () {
	                return isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "source", {
	            get: function () { return isPresent(this._debugInfo) ? this._debugInfo.source : null; },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugNode;
	    }());
	    /**
	     * @experimental All debugging apis are currently experimental.
	     */
	    var DebugElement = (function (_super) {
	        __extends$12(DebugElement, _super);
	        function DebugElement(nativeNode, parent, _debugInfo) {
	            _super.call(this, nativeNode, parent, _debugInfo);
	            this.properties = {};
	            this.attributes = {};
	            this.classes = {};
	            this.styles = {};
	            this.childNodes = [];
	            this.nativeElement = nativeNode;
	        }
	        DebugElement.prototype.addChild = function (child) {
	            if (isPresent(child)) {
	                this.childNodes.push(child);
	                child.parent = this;
	            }
	        };
	        DebugElement.prototype.removeChild = function (child) {
	            var childIndex = this.childNodes.indexOf(child);
	            if (childIndex !== -1) {
	                child.parent = null;
	                this.childNodes.splice(childIndex, 1);
	            }
	        };
	        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	            var siblingIndex = this.childNodes.indexOf(child);
	            if (siblingIndex !== -1) {
	                var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
	                var nextChildren = this.childNodes.slice(siblingIndex + 1);
	                this.childNodes =
	                    ListWrapper.concat(ListWrapper.concat(previousChildren, newChildren), nextChildren);
	                for (var i = 0; i < newChildren.length; ++i) {
	                    var newChild = newChildren[i];
	                    if (isPresent(newChild.parent)) {
	                        newChild.parent.removeChild(newChild);
	                    }
	                    newChild.parent = this;
	                }
	            }
	        };
	        DebugElement.prototype.query = function (predicate) {
	            var results = this.queryAll(predicate);
	            return results.length > 0 ? results[0] : null;
	        };
	        DebugElement.prototype.queryAll = function (predicate) {
	            var matches = [];
	            _queryElementChildren(this, predicate, matches);
	            return matches;
	        };
	        DebugElement.prototype.queryAllNodes = function (predicate) {
	            var matches = [];
	            _queryNodeChildren(this, predicate, matches);
	            return matches;
	        };
	        Object.defineProperty(DebugElement.prototype, "children", {
	            get: function () {
	                var children = [];
	                this.childNodes.forEach(function (node) {
	                    if (node instanceof DebugElement) {
	                        children.push(node);
	                    }
	                });
	                return children;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	            this.listeners.forEach(function (listener) {
	                if (listener.name == eventName) {
	                    listener.callback(eventObj);
	                }
	            });
	        };
	        return DebugElement;
	    }(DebugNode));
	    /**
	     * @experimental
	     */
	    function asNativeElements(debugEls) {
	        return debugEls.map(function (el) { return el.nativeElement; });
	    }
	    function _queryElementChildren(element, predicate, matches) {
	        element.childNodes.forEach(function (node) {
	            if (node instanceof DebugElement) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                _queryElementChildren(node, predicate, matches);
	            }
	        });
	    }
	    function _queryNodeChildren(parentNode, predicate, matches) {
	        if (parentNode instanceof DebugElement) {
	            parentNode.childNodes.forEach(function (node) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                if (node instanceof DebugElement) {
	                    _queryNodeChildren(node, predicate, matches);
	                }
	            });
	        }
	    }
	    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
	    var _nativeNodeToDebugNode = new Map();
	    /**
	     * @experimental
	     */
	    function getDebugNode(nativeNode) {
	        return _nativeNodeToDebugNode.get(nativeNode);
	    }
	    function indexDebugNode(node) {
	        _nativeNodeToDebugNode.set(node.nativeNode, node);
	    }
	    function removeDebugNodeFromIndex(node) {
	        _nativeNodeToDebugNode.delete(node.nativeNode);
	    }

	    function _reflector() {
	        return reflector;
	    }
	    var _CORE_PLATFORM_PROVIDERS = [
	        PlatformRef_, { provide: PlatformRef, useExisting: PlatformRef_ },
	        { provide: Reflector, useFactory: _reflector, deps: [] },
	        { provide: ReflectorReader, useExisting: Reflector }, TestabilityRegistry, Console
	    ];
	    /**
	     * This platform has to be included in any other platform
	     *
	     * @experimental
	     */
	    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

	    /**
	     * @experimental i18n support is experimental.
	     */
	    var LOCALE_ID = new OpaqueToken('LocaleId');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var TRANSLATIONS = new OpaqueToken('Translations');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');

	    function _iterableDiffersFactory() {
	        return defaultIterableDiffers;
	    }
	    function _keyValueDiffersFactory() {
	        return defaultKeyValueDiffers;
	    }
	    /**
	     * This module includes the providers of @angular/core that are needed
	     * to bootstrap components via `ApplicationRef`.
	     *
	     * @experimental
	     */
	    var ApplicationModule = (function () {
	        function ApplicationModule() {
	        }
	        ApplicationModule.decorators = [
	            { type: NgModule, args: [{
	                        providers: [
	                            ApplicationRef_,
	                            { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                            ApplicationInitStatus,
	                            Compiler,
	                            APP_ID_RANDOM_PROVIDER,
	                            ViewUtils,
	                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                            { provide: LOCALE_ID, useValue: 'en-US' },
	                        ]
	                    },] },
	        ];
	        /** @nocollapse */
	        ApplicationModule.ctorParameters = [];
	        return ApplicationModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
	    var ANY_STATE = '*';
	    var DEFAULT_STATE = '*';
	    var EMPTY_STATE = 'void';

	    var Math$1 = global$1.Math;

	    var AnimationGroupPlayer = (function () {
	        function AnimationGroupPlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this.parentPlayer = null;
	            var count = 0;
	            var total = this._players.length;
	            if (total == 0) {
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else {
	                this._players.forEach(function (player) {
	                    player.parentPlayer = _this;
	                    player.onDone(function () {
	                        if (++count >= total) {
	                            _this._onFinish();
	                        }
	                    });
	                });
	            }
	        }
	        AnimationGroupPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                if (!isPresent(this.parentPlayer)) {
	                    this.destroy();
	                }
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
	        AnimationGroupPlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._players.forEach(function (player) { return player.play(); });
	        };
	        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
	        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
	        AnimationGroupPlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        AnimationGroupPlayer.prototype.destroy = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.destroy(); });
	        };
	        AnimationGroupPlayer.prototype.reset = function () { this._players.forEach(function (player) { return player.reset(); }); };
	        AnimationGroupPlayer.prototype.setPosition = function (p /** TODO #9100 */) {
	            this._players.forEach(function (player) { player.setPosition(p); });
	        };
	        AnimationGroupPlayer.prototype.getPosition = function () {
	            var min = 0;
	            this._players.forEach(function (player) {
	                var p = player.getPosition();
	                min = Math$1.min(p, min);
	            });
	            return min;
	        };
	        return AnimationGroupPlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationKeyframe = (function () {
	        function AnimationKeyframe(offset, styles) {
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return AnimationKeyframe;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationOutput = (function () {
	        function AnimationOutput(name, phase, fullPropertyName) {
	            this.name = name;
	            this.phase = phase;
	            this.fullPropertyName = fullPropertyName;
	        }
	        return AnimationOutput;
	    }());

	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationPlayer = (function () {
	        function AnimationPlayer() {
	        }
	        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationPlayer;
	    }());
	    var NoOpAnimationPlayer = (function () {
	        function NoOpAnimationPlayer() {
	            var _this = this;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._started = false;
	            this.parentPlayer = null;
	            scheduleMicroTask(function () { return _this._onFinish(); });
	        }
	        /** @internal */
	        NoOpAnimationPlayer.prototype._onFinish = function () {
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        };
	        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
	        NoOpAnimationPlayer.prototype.init = function () { };
	        NoOpAnimationPlayer.prototype.play = function () {
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	            }
	            this._started = true;
	        };
	        NoOpAnimationPlayer.prototype.pause = function () { };
	        NoOpAnimationPlayer.prototype.restart = function () { };
	        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
	        NoOpAnimationPlayer.prototype.destroy = function () { };
	        NoOpAnimationPlayer.prototype.reset = function () { };
	        NoOpAnimationPlayer.prototype.setPosition = function (p /** TODO #9100 */) { };
	        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
	        return NoOpAnimationPlayer;
	    }());

	    var AnimationSequencePlayer = (function () {
	        function AnimationSequencePlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._currentIndex = 0;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this.parentPlayer = null;
	            this._players.forEach(function (player) { player.parentPlayer = _this; });
	            this._onNext(false);
	        }
	        AnimationSequencePlayer.prototype._onNext = function (start) {
	            var _this = this;
	            if (this._finished)
	                return;
	            if (this._players.length == 0) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else if (this._currentIndex >= this._players.length) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                this._onFinish();
	            }
	            else {
	                var player = this._players[this._currentIndex++];
	                player.onDone(function () { return _this._onNext(true); });
	                this._activePlayer = player;
	                if (start) {
	                    player.play();
	                }
	            }
	        };
	        AnimationSequencePlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                if (!isPresent(this.parentPlayer)) {
	                    this.destroy();
	                }
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
	        AnimationSequencePlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._activePlayer.play();
	        };
	        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
	        AnimationSequencePlayer.prototype.restart = function () {
	            if (this._players.length > 0) {
	                this.reset();
	                this._players[0].restart();
	            }
	        };
	        AnimationSequencePlayer.prototype.reset = function () { this._players.forEach(function (player) { return player.reset(); }); };
	        AnimationSequencePlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        AnimationSequencePlayer.prototype.destroy = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.destroy(); });
	        };
	        AnimationSequencePlayer.prototype.setPosition = function (p /** TODO #9100 */) { this._players[0].setPosition(p); };
	        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
	        return AnimationSequencePlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AUTO_STYLE = '*';
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link trigger trigger
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationEntryMetadata = (function () {
	        function AnimationEntryMetadata(name, definitions) {
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return AnimationEntryMetadata;
	    }());
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStateMetadata = (function () {
	        function AnimationStateMetadata() {
	        }
	        return AnimationStateMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link state state animation
	     * function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStateDeclarationMetadata = (function (_super) {
	        __extends$13(AnimationStateDeclarationMetadata, _super);
	        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return AnimationStateDeclarationMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the
	     * {@link transition transition animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStateTransitionMetadata = (function (_super) {
	        __extends$13(AnimationStateTransitionMetadata, _super);
	        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return AnimationStateTransitionMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationMetadata = (function () {
	        function AnimationMetadata() {
	        }
	        return AnimationMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$13(AnimationKeyframesSequenceMetadata, _super);
	        function AnimationKeyframesSequenceMetadata(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationKeyframesSequenceMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link style style animation
	     * function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStyleMetadata = (function (_super) {
	        __extends$13(AnimationStyleMetadata, _super);
	        function AnimationStyleMetadata(styles, offset) {
	            if (offset === void 0) { offset = null; }
	            _super.call(this);
	            this.styles = styles;
	            this.offset = offset;
	        }
	        return AnimationStyleMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link animate animate
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationAnimateMetadata = (function (_super) {
	        __extends$13(AnimationAnimateMetadata, _super);
	        function AnimationAnimateMetadata(timings, styles) {
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return AnimationAnimateMetadata;
	    }(AnimationMetadata));
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationWithStepsMetadata = (function (_super) {
	        __extends$13(AnimationWithStepsMetadata, _super);
	        function AnimationWithStepsMetadata() {
	            _super.call(this);
	        }
	        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationWithStepsMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link sequence sequence
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationSequenceMetadata = (function (_super) {
	        __extends$13(AnimationSequenceMetadata, _super);
	        function AnimationSequenceMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequenceMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link group group animation
	     * function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationGroupMetadata = (function (_super) {
	        __extends$13(AnimationGroupMetadata, _super);
	        function AnimationGroupMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * `animate` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `animate` specifies an animation step that will apply the provided `styles` data for a given
	     * amount of
	     * time based on the provided `timing` expression value. Calls to `animate` are expected to be
	     * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition
	     * transition}.
	     *
	     * ### Usage
	     *
	     * The `animate` function accepts two input parameters: `timing` and `styles`:
	     *
	     * - `timing` is a string based value that can be a combination of a duration with optional
	     * delay and easing values. The format for the expression breaks down to `duration delay easing`
	     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	     * delay=100, easing=ease-out`.
	     * If a numeric value is provided then that will be used as the `duration` value in millisecond
	     * form.
	     * - `styles` is the style input data which can either be a call to {@link style style} or {@link
	     * keyframes keyframes}.
	     * If left empty then the styles from the destination state will be collected and used (this is
	     * useful when
	     * describing an animation step that will complete an animation by {@link
	     * transition#the-final-animate-call animating to the final state}).
	     *
	     * ```typescript
	     * // various functions for specifying timing data
	     * animate(500, style(...))
	     * animate("1s", style(...))
	     * animate("100ms 0.5s", style(...))
	     * animate("5s ease", style(...))
	     * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	     *
	     * // either style() of keyframes() can be used
	     * animate(500, style({ background: "red" }))
	     * animate(500, keyframes([
	     *   style({ background: "blue" })),
	     *   style({ background: "red" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function animate(timing, styles) {
	        if (styles === void 0) { styles = null; }
	        var stylesEntry = styles;
	        if (!isPresent(stylesEntry)) {
	            var EMPTY_STYLE = {};
	            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
	        }
	        return new AnimationAnimateMetadata(timing, stylesEntry);
	    }
	    /**
	     * `group` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
	     * are useful when a series of styles must be animated/closed off
	     * at different statrting/ending times.
	     *
	     * The `group` function can either be used within a {@link sequence sequence} or a {@link transition
	     * transition}
	     * and it will only continue to the next instruction once all of the inner animation steps
	     * have completed.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `group` animation function can either consist
	     * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or
	     * `animate()`
	     * within a group will be executed instantly (use {@link keyframes keyframes} or a
	     * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later
	     * time).
	     *
	     * ```typescript
	     * group([
	     *   animate("1s", { background: "black" }))
	     *   animate("2s", { color: "white" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function group(steps) {
	        return new AnimationGroupMetadata(steps);
	    }
	    /**
	     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
	     * by default when an array is passed as animation data into {@link transition transition}.)
	     *
	     * The `sequence` function can either be used within a {@link group group} or a {@link transition
	     * transition}
	     * and it will only continue to the next instruction once each of the inner animation steps
	     * have completed.
	     *
	     * To perform animation styling in parallel with other animation steps then
	     * have a look at the {@link group group} animation function.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `sequence` animation function can either consist
	     * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply
	     * the
	     * provided styling data immediately while a call to `animate()` will apply its styling
	     * data over a given time depending on its timing data.
	     *
	     * ```typescript
	     * sequence([
	     *   style({ opacity: 0 })),
	     *   animate("1s", { opacity: 1 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function sequence(steps) {
	        return new AnimationSequenceMetadata(steps);
	    }
	    /**
	     * `style` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `style` declares a key/value object containing CSS properties/styles that can then
	     * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as
	     * styling data for both {@link animate animate} and {@link keyframes keyframes}.
	     *
	     * ### Usage
	     *
	     * `style` takes in a key/value string map as data and expects one or more CSS property/value
	     * pairs to be defined.
	     *
	     * ```typescript
	     * // string values are used for css properties
	     * style({ background: "red", color: "blue" })
	     *
	     * // numerical (pixel) values are also supported
	     * style({ width: 100, height: 0 })
	     * ```
	     *
	     * #### Auto-styles (using `*`)
	     *
	     * When an asterix (`*`) character is used as a value then it will be detected from the element
	     * being animated
	     * and applied as animation data when the animation starts.
	     *
	     * This feature proves useful for a state depending on layout and/or environment factors; in such
	     * cases
	     * the styles are calculated just before the animation starts.
	     *
	     * ```typescript
	     * // the steps below will animate from 0 to the
	     * // actual height of the element
	     * style({ height: 0 }),
	     * animate("1s", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function style(tokens) {
	        var input;
	        var offset = null;
	        if (isString(tokens)) {
	            input = [tokens];
	        }
	        else {
	            if (isArray(tokens)) {
	                input = tokens;
	            }
	            else {
	                input = [tokens];
	            }
	            input.forEach(function (entry) {
	                var entryOffset = entry['offset'];
	                if (isPresent(entryOffset)) {
	                    offset = offset == null ? parseFloat(entryOffset) : offset;
	                }
	            });
	        }
	        return new AnimationStyleMetadata(input, offset);
	    }
	    /**
	     * `state` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `state` declares an animation state within the given trigger. When a state is
	     * active within a component then its associated styles will persist on
	     * the element that the trigger is attached to (even when the animation ends).
	     *
	     * To animate between states, have a look at the animation {@link transition transition}
	     * DSL function. To register states to an animation trigger please have a look
	     * at the {@link trigger trigger} function.
	     *
	     * #### The `void` state
	     *
	     * The `void` state value is a reserved word that angular uses to determine when the element is not
	     * apart
	     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	     * associated element
	     * is void).
	     *
	     * #### The `*` (default) state
	     *
	     * The `*` state (when styled) is a fallback state that will be used if
	     * the state that is being animated is not declared within the trigger.
	     *
	     * ### Usage
	     *
	     * `state` will declare an animation state with its associated styles
	     * within the given trigger.
	     *
	     * - `stateNameExpr` can be one or more state names separated by commas.
	     * - `styles` refers to the {@link style styling data} that will be persisted on the element once
	     * the state
	     * has been reached.
	     *
	     * ```typescript
	     * // "void" is a reserved name for a state and is used to represent
	     * // the state in which an element is detached from from the application.
	     * state("void", style({ height: 0 }))
	     *
	     * // user-defined states
	     * state("closed", style({ height: 0 }))
	     * state("open, visible", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function state(stateNameExpr, styles) {
	        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
	    }
	    /**
	     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `keyframes` specifies a collection of {@link style style} entries each optionally characterized
	     * by an `offset` value.
	     *
	     * ### Usage
	     *
	     * The `keyframes` animation function is designed to be used alongside the {@link animate animate}
	     * animation function. Instead of applying animations from where they are
	     * currently to their destination, keyframes can describe how each style entry is applied
	     * and at what point within the animation arc (much like CSS Keyframe Animations do).
	     *
	     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
	     * what percentage of the animate time the styles will be applied.
	     *
	     * ```typescript
	     * // the provided offset values describe when each backgroundColor value is applied.
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red", offset: 0 }),
	     *   style({ backgroundColor: "blue", offset: 0.2 }),
	     *   style({ backgroundColor: "orange", offset: 0.3 }),
	     *   style({ backgroundColor: "black", offset: 1 })
	     * ]))
	     * ```
	     *
	     * Alternatively, if there are no `offset` values used within the style entries then the offsets
	     * will
	     * be calculated automatically.
	     *
	     * ```typescript
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red" }) // offset = 0
	     *   style({ backgroundColor: "blue" }) // offset = 0.33
	     *   style({ backgroundColor: "orange" }) // offset = 0.66
	     *   style({ backgroundColor: "black" }) // offset = 1
	     * ]))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function keyframes(steps) {
	        return new AnimationKeyframesSequenceMetadata(steps);
	    }
	    /**
	     * `transition` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
	     * provided
	     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
	     * which consists
	     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
	     *
	     * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
	     * to animate to
	     * a state value and persist its styles then one or more {@link state animation states} is expected
	     * to be defined.
	     *
	     * ### Usage
	     *
	     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	     * what the
	     * previous state is and what the current state has become. In other words, if a transition is
	     * defined that
	     * matches the old/current state criteria then the associated animation will be triggered.
	     *
	     * ```typescript
	     * // all transition/state changes are defined within an animation trigger
	     * trigger("myAnimationTrigger", [
	     *   // if a state is defined then its styles will be persisted when the
	     *   // animation has fully completed itself
	     *   state("on", style({ background: "green" })),
	     *   state("off", style({ background: "grey" })),
	     *
	     *   // a transition animation that will be kicked off when the state value
	     *   // bound to "myAnimationTrigger" changes from "on" to "off"
	     *   transition("on => off", animate(500)),
	     *
	     *   // it is also possible to do run the same animation for both directions
	     *   transition("on <=> off", animate(500)),
	     *
	     *   // or to define multiple states pairs separated by commas
	     *   transition("on => off, off => void", animate(500)),
	     *
	     *   // this is a catch-all state change for when an element is inserted into
	     *   // the page and the destination state is unknown
	     *   transition("void => *", [
	     *     style({ opacity: 0 }),
	     *     animate(500)
	     *   ]),
	     *
	     *   // this will capture a state change between any states
	     *   transition("* => *", animate("1s 0s")),
	     * ])
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * #### The final `animate` call
	     *
	     * If the final step within the transition steps is a call to `animate()` that **only**
	     * uses a timing value with **no style data** then it will be automatically used as the final
	     * animation
	     * arc for the element to animate itself to the final state. This involves an automatic mix of
	     * adding/removing CSS styles so that the element will be in the exact state it should be for the
	     * applied state to be presented correctly.
	     *
	     * ```
	     * // start off by hiding the element, but make sure that it animates properly to whatever state
	     * // is currently active for "myAnimationTrigger"
	     * transition("void => *", [
	     *   style({ opacity: 0 }),
	     *   animate(500)
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function transition(stateChangeExpr, steps) {
	        var animationData = isArray(steps) ? new AnimationSequenceMetadata(steps) :
	            steps;
	        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
	    }
	    /**
	     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link
	     * transition transition}
	     * entries that will be evaluated when the expression bound to the trigger changes.
	     *
	     * Triggers are registered within the component annotation data under the
	     * {@link Component#animations-anchor animations section}. An animation trigger can
	     * be placed on an element within a template by referencing the name of the
	     * trigger followed by the expression value that the trigger is bound to
	     * (in the form of `[@triggerName]="expression"`.
	     *
	     * ### Usage
	     *
	     * `trigger` will create an animation trigger reference based on the provided `name` value.
	     * The provided `animation` value is expected to be an array consisting of {@link state state} and
	     * {@link transition transition}
	     * declarations.
	     *
	     * ```typescript
	     * @Component({
	     *   selector: 'my-component',
	     *   templateUrl: 'my-component-tpl.html',
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *       state(...),
	     *       state(...),
	     *       transition(...),
	     *       transition(...)
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   myStatusExp = "something";
	     * }
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function trigger(name, animation) {
	        return new AnimationEntryMetadata(name, animation);
	    }

	    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
	        if (nullValue === void 0) { nullValue = null; }
	        var finalStyles = {};
	        StringMapWrapper.forEach(newStyles, function (value, prop) {
	            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
	        });
	        StringMapWrapper.forEach(previousStyles, function (value, prop) {
	            if (!isPresent(finalStyles[prop])) {
	                finalStyles[prop] = nullValue;
	            }
	        });
	        return finalStyles;
	    }
	    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
	        var limit = keyframes.length - 1;
	        var firstKeyframe = keyframes[0];
	        // phase 1: copy all the styles from the first keyframe into the lookup map
	        var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
	        var extraFirstKeyframeStyles = {};
	        var hasExtraFirstStyles = false;
	        StringMapWrapper.forEach(collectedStyles, function (value, prop) {
	            // if the style is already defined in the first keyframe then
	            // we do not replace it.
	            if (!flatenedFirstKeyframeStyles[prop]) {
	                flatenedFirstKeyframeStyles[prop] = value;
	                extraFirstKeyframeStyles[prop] = value;
	                hasExtraFirstStyles = true;
	            }
	        });
	        var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
	        // phase 2: normalize the final keyframe
	        var finalKeyframe = keyframes[limit];
	        ListWrapper.insert(finalKeyframe.styles.styles, 0, finalStateStyles);
	        var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
	        var extraFinalKeyframeStyles = {};
	        var hasExtraFinalStyles = false;
	        StringMapWrapper.forEach(keyframeCollectedStyles, function (value, prop) {
	            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
	                extraFinalKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFinalStyles = true;
	            }
	        });
	        if (hasExtraFinalStyles) {
	            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
	        }
	        StringMapWrapper.forEach(flatenedFinalKeyframeStyles, function (value, prop) {
	            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
	                extraFirstKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFirstStyles = true;
	            }
	        });
	        if (hasExtraFirstStyles) {
	            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
	        }
	        return keyframes;
	    }
	    function clearStyles(styles) {
	        var finalStyles = {};
	        StringMapWrapper.keys(styles).forEach(function (key) { finalStyles[key] = null; });
	        return finalStyles;
	    }
	    function collectAndResolveStyles(collection, styles) {
	        return styles.map(function (entry) {
	            var stylesObj = {};
	            StringMapWrapper.forEach(entry, function (value, prop) {
	                if (value == FILL_STYLE_FLAG) {
	                    value = collection[prop];
	                    if (!isPresent(value)) {
	                        value = AUTO_STYLE;
	                    }
	                }
	                collection[prop] = value;
	                stylesObj[prop] = value;
	            });
	            return stylesObj;
	        });
	    }
	    function renderStyles(element, renderer, styles) {
	        StringMapWrapper.forEach(styles, function (value, prop) { renderer.setElementStyle(element, prop, value); });
	    }
	    function flattenStyles(styles) {
	        var finalStyles = {};
	        styles.forEach(function (entry) {
	            StringMapWrapper.forEach(entry, function (value, prop) { finalStyles[prop] = value; });
	        });
	        return finalStyles;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationStyles = (function () {
	        function AnimationStyles(styles) {
	            this.styles = styles;
	        }
	        return AnimationStyles;
	    }());

	    var DebugDomRootRenderer = (function () {
	        function DebugDomRootRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
	            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
	        };
	        return DebugDomRootRenderer;
	    }());
	    var DebugDomRenderer = (function () {
	        function DebugDomRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
	            var debugEl = new DebugElement(nativeEl, null, debugInfo);
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
	            var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
	            var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
	        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
	            var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return comment;
	        };
	        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var text = this._delegate.createText(parentElement, value, debugInfo);
	            var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return text;
	        };
	        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            var debugParent = getDebugNode(parentElement);
	            if (isPresent(debugParent) && debugParent instanceof DebugElement) {
	                var debugElement_1 = debugParent;
	                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });
	            }
	            this._delegate.projectNodes(parentElement, nodes);
	        };
	        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	            var debugNode = getDebugNode(node);
	            if (isPresent(debugNode)) {
	                var debugParent = debugNode.parent;
	                if (viewRootNodes.length > 0 && isPresent(debugParent)) {
	                    var debugViewRootNodes = [];
	                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes.push(getDebugNode(rootNode)); });
	                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
	                }
	            }
	            this._delegate.attachViewAfter(node, viewRootNodes);
	        };
	        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
	            viewRootNodes.forEach(function (node) {
	                var debugNode = getDebugNode(node);
	                if (isPresent(debugNode) && isPresent(debugNode.parent)) {
	                    debugNode.parent.removeChild(debugNode);
	                }
	            });
	            this._delegate.detachView(viewRootNodes);
	        };
	        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });
	            this._delegate.destroyView(hostElement, viewAllNodes);
	        };
	        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl)) {
	                debugEl.listeners.push(new EventListener(name, callback));
	            }
	            return this._delegate.listen(renderElement, name, callback);
	        };
	        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._delegate.listenGlobal(target, name, callback);
	        };
	        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.properties[propertyName] = propertyValue;
	            }
	            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
	        };
	        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.attributes[attributeName] = attributeValue;
	            }
	            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
	        };
	        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
	        };
	        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.classes[className] = isAdd;
	            }
	            this._delegate.setElementClass(renderElement, className, isAdd);
	        };
	        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.styles[styleName] = styleValue;
	            }
	            this._delegate.setElementStyle(renderElement, styleName, styleValue);
	        };
	        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            this._delegate.invokeElementMethod(renderElement, methodName, args);
	        };
	        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
	        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
	            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);
	        };
	        return DebugDomRenderer;
	    }());

	    var StaticNodeDebugInfo = (function () {
	        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
	            this.providerTokens = providerTokens;
	            this.componentToken = componentToken;
	            this.refTokens = refTokens;
	        }
	        return StaticNodeDebugInfo;
	    }());
	    var DebugContext = (function () {
	        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	            this._tplRow = _tplRow;
	            this._tplCol = _tplCol;
	        }
	        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
	            get: function () {
	                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "context", {
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "component", {
	            get: function () {
	                var staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
	                    return this.injector.get(staticNodeInfo.componentToken);
	                }
	                return null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
	            get: function () {
	                var componentView = this._view;
	                while (isPresent(componentView.declarationAppElement) &&
	                    componentView.type !== ViewType.COMPONENT) {
	                    componentView = componentView.declarationAppElement.parentView;
	                }
	                return isPresent(componentView.declarationAppElement) ?
	                    componentView.declarationAppElement.nativeElement :
	                    null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "injector", {
	            get: function () { return this._view.injector(this._nodeIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "renderNode", {
	            get: function () {
	                if (isPresent(this._nodeIndex) && this._view.allNodes) {
	                    return this._view.allNodes[this._nodeIndex];
	                }
	                else {
	                    return null;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "providerTokens", {
	            get: function () {
	                var staticNodeInfo = this._staticNodeInfo;
	                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "source", {
	            get: function () {
	                return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "references", {
	            get: function () {
	                var _this = this;
	                var varValues = {};
	                var staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo)) {
	                    var refs = staticNodeInfo.refTokens;
	                    StringMapWrapper.forEach(refs, function (refToken, refName) {
	                        var varValue;
	                        if (isBlank(refToken)) {
	                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
	                        }
	                        else {
	                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
	                        }
	                        varValues[refName] = varValue;
	                    });
	                }
	                return varValues;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugContext;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * An instance of this class is returned as an event parameter when an animation
	     * callback is captured for an animation either during the start or done phase.
	     *
	     * ```typescript
	     * @Component({
	     *   host: {
	     *     '[@myAnimationTrigger]': 'someExpression',
	     *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',
	     *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',
	     *   },
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *        // ...
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   someExpression: any = false;
	     *   captureStartEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     *
	     *   captureDoneEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     * }
	     * ```
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationTransitionEvent = (function () {
	        function AnimationTransitionEvent(_a) {
	            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime;
	            this.fromState = fromState;
	            this.toState = toState;
	            this.totalTime = totalTime;
	        }
	        return AnimationTransitionEvent;
	    }());

	    var ViewAnimationMap = (function () {
	        function ViewAnimationMap() {
	            this._map = new Map$1();
	            this._allPlayers = [];
	        }
	        Object.defineProperty(ViewAnimationMap.prototype, "length", {
	            get: function () { return this.getAllPlayers().length; },
	            enumerable: true,
	            configurable: true
	        });
	        ViewAnimationMap.prototype.find = function (element, animationName) {
	            var playersByAnimation = this._map.get(element);
	            if (isPresent(playersByAnimation)) {
	                return playersByAnimation[animationName];
	            }
	        };
	        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
	            var el = this._map.get(element);
	            return el ? StringMapWrapper.values(el) : [];
	        };
	        ViewAnimationMap.prototype.set = function (element, animationName, player) {
	            var playersByAnimation = this._map.get(element);
	            if (!isPresent(playersByAnimation)) {
	                playersByAnimation = {};
	            }
	            var existingEntry = playersByAnimation[animationName];
	            if (isPresent(existingEntry)) {
	                this.remove(element, animationName);
	            }
	            playersByAnimation[animationName] = player;
	            this._allPlayers.push(player);
	            this._map.set(element, playersByAnimation);
	        };
	        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
	        ViewAnimationMap.prototype.remove = function (element, animationName) {
	            var playersByAnimation = this._map.get(element);
	            if (isPresent(playersByAnimation)) {
	                var player = playersByAnimation[animationName];
	                delete playersByAnimation[animationName];
	                var index = this._allPlayers.indexOf(player);
	                ListWrapper.removeAt(this._allPlayers, index);
	                if (StringMapWrapper.isEmpty(playersByAnimation)) {
	                    this._map.delete(element);
	                }
	            }
	        };
	        return ViewAnimationMap;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _UNDEFINED$1 = new Object();
	    var ElementInjector = (function (_super) {
	        __extends$15(ElementInjector, _super);
	        function ElementInjector(_view, _nodeIndex) {
	            _super.call(this);
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	        }
	        ElementInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            var result = _UNDEFINED$1;
	            if (result === _UNDEFINED$1) {
	                result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED$1);
	            }
	            if (result === _UNDEFINED$1) {
	                result = this._view.parentInjector.get(token, notFoundValue);
	            }
	            return result;
	        };
	        return ElementInjector;
	    }(Injector));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _scope_check = wtfCreateScope("AppView#check(ascii id)");
	    /**
	     * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	     *
	     */
	    var AppView = (function () {
	        function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
	            this.clazz = clazz;
	            this.componentType = componentType;
	            this.type = type;
	            this.viewUtils = viewUtils;
	            this.parentInjector = parentInjector;
	            this.declarationAppElement = declarationAppElement;
	            this.cdMode = cdMode;
	            this.contentChildren = [];
	            this.viewChildren = [];
	            this.viewContainerElement = null;
	            this.numberOfChecks = 0;
	            this.animationPlayers = new ViewAnimationMap();
	            this._animationListeners = new Map();
	            this.ref = new ViewRef_(this);
	            if (type === ViewType.COMPONENT || type === ViewType.HOST) {
	                this.renderer = viewUtils.renderComponent(componentType);
	            }
	            else {
	                this.renderer = declarationAppElement.parentView.renderer;
	            }
	        }
	        Object.defineProperty(AppView.prototype, "destroyed", {
	            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        AppView.prototype.cancelActiveAnimation = function (element, animationName, removeAllAnimations) {
	            if (removeAllAnimations === void 0) { removeAllAnimations = false; }
	            if (removeAllAnimations) {
	                this.animationPlayers.findAllPlayersByElement(element).forEach(function (player) { return player.destroy(); });
	            }
	            else {
	                var player = this.animationPlayers.find(element, animationName);
	                if (isPresent(player)) {
	                    player.destroy();
	                }
	            }
	        };
	        AppView.prototype.queueAnimation = function (element, animationName, player, totalTime, fromState, toState) {
	            var _this = this;
	            queueAnimation(player);
	            var event = new AnimationTransitionEvent({ 'fromState': fromState, 'toState': toState, 'totalTime': totalTime });
	            this.animationPlayers.set(element, animationName, player);
	            player.onDone(function () {
	                // TODO: make this into a datastructure for done|start
	                _this.triggerAnimationOutput(element, animationName, 'done', event);
	                _this.animationPlayers.remove(element, animationName);
	            });
	            player.onStart(function () { _this.triggerAnimationOutput(element, animationName, 'start', event); });
	        };
	        AppView.prototype.triggerAnimationOutput = function (element, animationName, phase, event) {
	            var listeners = this._animationListeners.get(element);
	            if (isPresent(listeners) && listeners.length) {
	                for (var i = 0; i < listeners.length; i++) {
	                    var listener = listeners[i];
	                    // we check for both the name in addition to the phase in the event
	                    // that there may be more than one @trigger on the same element
	                    if (listener.output.name == animationName && listener.output.phase == phase) {
	                        listener.handler(event);
	                        break;
	                    }
	                }
	            }
	        };
	        AppView.prototype.registerAnimationOutput = function (element, outputEvent, eventHandler) {
	            var entry = new _AnimationOutputWithHandler(outputEvent, eventHandler);
	            var animations = this._animationListeners.get(element);
	            if (!isPresent(animations)) {
	                this._animationListeners.set(element, animations = []);
	            }
	            animations.push(entry);
	        };
	        AppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {
	            this.context = context;
	            var projectableNodes;
	            switch (this.type) {
	                case ViewType.COMPONENT:
	                    projectableNodes = ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
	                    break;
	                case ViewType.EMBEDDED:
	                    projectableNodes = this.declarationAppElement.parentView.projectableNodes;
	                    break;
	                case ViewType.HOST:
	                    // Note: Don't ensure the slot count for the projectableNodes as we store
	                    // them only for the contained component view (which will later check the slot count...)
	                    projectableNodes = givenProjectableNodes;
	                    break;
	            }
	            this._hasExternalHostElement = isPresent(rootSelectorOrNode);
	            this.projectableNodes = projectableNodes;
	            return this.createInternal(rootSelectorOrNode);
	        };
	        /**
	         * Overwritten by implementations.
	         * Returns the AppElement for the host element for ViewType.HOST.
	         */
	        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
	        AppView.prototype.init = function (rootNodesOrAppElements, allNodes, disposables, subscriptions) {
	            this.rootNodesOrAppElements = rootNodesOrAppElements;
	            this.allNodes = allNodes;
	            this.disposables = disposables;
	            this.subscriptions = subscriptions;
	            if (this.type === ViewType.COMPONENT) {
	                // Note: the render nodes have been attached to their host element
	                // in the ViewFactory already.
	                this.declarationAppElement.parentView.viewChildren.push(this);
	                this.dirtyParentQueriesInternal();
	            }
	        };
	        AppView.prototype.selectOrCreateHostElement = function (elementName, rootSelectorOrNode, debugInfo) {
	            var hostElement;
	            if (isPresent(rootSelectorOrNode)) {
	                hostElement = this.renderer.selectRootElement(rootSelectorOrNode, debugInfo);
	            }
	            else {
	                hostElement = this.renderer.createElement(null, elementName, debugInfo);
	            }
	            return hostElement;
	        };
	        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	            return this.injectorGetInternal(token, nodeIndex, notFoundResult);
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	            return notFoundResult;
	        };
	        AppView.prototype.injector = function (nodeIndex) {
	            if (isPresent(nodeIndex)) {
	                return new ElementInjector(this, nodeIndex);
	            }
	            else {
	                return this.parentInjector;
	            }
	        };
	        AppView.prototype.destroy = function () {
	            if (this._hasExternalHostElement) {
	                this.renderer.detachView(this.flatRootNodes);
	            }
	            else if (isPresent(this.viewContainerElement)) {
	                this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
	            }
	            this._destroyRecurse();
	        };
	        AppView.prototype._destroyRecurse = function () {
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                return;
	            }
	            var children = this.contentChildren;
	            for (var i = 0; i < children.length; i++) {
	                children[i]._destroyRecurse();
	            }
	            children = this.viewChildren;
	            for (var i = 0; i < children.length; i++) {
	                children[i]._destroyRecurse();
	            }
	            this.destroyLocal();
	            this.cdMode = ChangeDetectorStatus.Destroyed;
	        };
	        AppView.prototype.destroyLocal = function () {
	            var _this = this;
	            var hostElement = this.type === ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;
	            for (var i = 0; i < this.disposables.length; i++) {
	                this.disposables[i]();
	            }
	            for (var i = 0; i < this.subscriptions.length; i++) {
	                this.subscriptions[i].unsubscribe();
	            }
	            this.destroyInternal();
	            this.dirtyParentQueriesInternal();
	            if (this.animationPlayers.length == 0) {
	                this.renderer.destroyView(hostElement, this.allNodes);
	            }
	            else {
	                var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
	                player.onDone(function () { _this.renderer.destroyView(hostElement, _this.allNodes); });
	            }
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.destroyInternal = function () { };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.detachInternal = function () { };
	        AppView.prototype.detach = function () {
	            var _this = this;
	            this.detachInternal();
	            if (this.animationPlayers.length == 0) {
	                this.renderer.detachView(this.flatRootNodes);
	            }
	            else {
	                var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
	                player.onDone(function () { _this.renderer.detachView(_this.flatRootNodes); });
	            }
	        };
	        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	            get: function () { return this.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "parent", {
	            get: function () {
	                return isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "flatRootNodes", {
	            get: function () { return flattenNestedViewRenderNodes(this.rootNodesOrAppElements); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "lastRootNode", {
	            get: function () {
	                var lastNode = this.rootNodesOrAppElements.length > 0 ?
	                    this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] :
	                    null;
	                return _findLastRenderNode(lastNode);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.dirtyParentQueriesInternal = function () { };
	        AppView.prototype.detectChanges = function (throwOnChange) {
	            var s = _scope_check(this.clazz);
	            if (this.cdMode === ChangeDetectorStatus.Checked ||
	                this.cdMode === ChangeDetectorStatus.Errored)
	                return;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                this.throwDestroyedError('detectChanges');
	            }
	            this.detectChangesInternal(throwOnChange);
	            if (this.cdMode === ChangeDetectorStatus.CheckOnce)
	                this.cdMode = ChangeDetectorStatus.Checked;
	            this.numberOfChecks++;
	            wtfLeave(s);
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.detectChangesInternal = function (throwOnChange) {
	            this.detectContentChildrenChanges(throwOnChange);
	            this.detectViewChildrenChanges(throwOnChange);
	        };
	        AppView.prototype.detectContentChildrenChanges = function (throwOnChange) {
	            for (var i = 0; i < this.contentChildren.length; ++i) {
	                var child = this.contentChildren[i];
	                if (child.cdMode === ChangeDetectorStatus.Detached)
	                    continue;
	                child.detectChanges(throwOnChange);
	            }
	        };
	        AppView.prototype.detectViewChildrenChanges = function (throwOnChange) {
	            for (var i = 0; i < this.viewChildren.length; ++i) {
	                var child = this.viewChildren[i];
	                if (child.cdMode === ChangeDetectorStatus.Detached)
	                    continue;
	                child.detectChanges(throwOnChange);
	            }
	        };
	        AppView.prototype.markContentChildAsMoved = function (renderAppElement) { this.dirtyParentQueriesInternal(); };
	        AppView.prototype.addToContentChildren = function (renderAppElement) {
	            renderAppElement.parentView.contentChildren.push(this);
	            this.viewContainerElement = renderAppElement;
	            this.dirtyParentQueriesInternal();
	        };
	        AppView.prototype.removeFromContentChildren = function (renderAppElement) {
	            ListWrapper.remove(renderAppElement.parentView.contentChildren, this);
	            this.dirtyParentQueriesInternal();
	            this.viewContainerElement = null;
	        };
	        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
	        AppView.prototype.markPathToRootAsCheckOnce = function () {
	            var c = this;
	            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
	                if (c.cdMode === ChangeDetectorStatus.Checked) {
	                    c.cdMode = ChangeDetectorStatus.CheckOnce;
	                }
	                var parentEl = c.type === ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
	                c = isPresent(parentEl) ? parentEl.parentView : null;
	            }
	        };
	        AppView.prototype.eventHandler = function (cb) { return cb; };
	        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
	        return AppView;
	    }());
	    var DebugAppView = (function (_super) {
	        __extends$14(DebugAppView, _super);
	        function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
	            _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);
	            this.staticNodeDebugInfos = staticNodeDebugInfos;
	            this._currentDebugContext = null;
	        }
	        DebugAppView.prototype.create = function (context, givenProjectableNodes, rootSelectorOrNode) {
	            this._resetDebug();
	            try {
	                return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	            this._resetDebug();
	            try {
	                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.detach = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.detach.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.destroyLocal = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.destroyLocal.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.detectChanges = function (throwOnChange) {
	            this._resetDebug();
	            try {
	                _super.prototype.detectChanges.call(this, throwOnChange);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
	        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
	            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
	        };
	        DebugAppView.prototype._rethrowWithContext = function (e) {
	            if (!(e instanceof ViewWrappedError)) {
	                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
	                    this.cdMode = ChangeDetectorStatus.Errored;
	                }
	                if (isPresent(this._currentDebugContext)) {
	                    throw new ViewWrappedError(e, this._currentDebugContext);
	                }
	            }
	        };
	        DebugAppView.prototype.eventHandler = function (cb) {
	            var _this = this;
	            var superHandler = _super.prototype.eventHandler.call(this, cb);
	            return function (event) {
	                _this._resetDebug();
	                try {
	                    return superHandler(event);
	                }
	                catch (e) {
	                    _this._rethrowWithContext(e);
	                    throw e;
	                }
	            };
	        };
	        return DebugAppView;
	    }(AppView));
	    function _findLastRenderNode(node) {
	        var lastNode;
	        if (node instanceof AppElement) {
	            var appEl = node;
	            lastNode = appEl.nativeElement;
	            if (isPresent(appEl.nestedViews)) {
	                // Note: Views might have no root nodes at all!
	                for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
	                    var nestedView = appEl.nestedViews[i];
	                    if (nestedView.rootNodesOrAppElements.length > 0) {
	                        lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
	                    }
	                }
	            }
	        }
	        else {
	            lastNode = node;
	        }
	        return lastNode;
	    }
	    var _AnimationOutputWithHandler = (function () {
	        function _AnimationOutputWithHandler(output, handler) {
	            this.output = output;
	            this.handler = handler;
	        }
	        return _AnimationOutputWithHandler;
	    }());

	    var __core_private__ = {
	        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
	        ChangeDetectorStatus: ChangeDetectorStatus,
	        CHANGE_DETECTION_STRATEGY_VALUES: CHANGE_DETECTION_STRATEGY_VALUES,
	        constructDependencies: constructDependencies,
	        LifecycleHooks: LifecycleHooks,
	        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
	        ReflectorReader: ReflectorReader,
	        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
	        AppElement: AppElement,
	        AppView: AppView,
	        DebugAppView: DebugAppView,
	        NgModuleInjector: NgModuleInjector,
	        registerModuleFactory: registerModuleFactory,
	        ViewType: ViewType,
	        MAX_INTERPOLATION_VALUES: MAX_INTERPOLATION_VALUES,
	        checkBinding: checkBinding,
	        flattenNestedViewRenderNodes: flattenNestedViewRenderNodes,
	        interpolate: interpolate,
	        ViewUtils: ViewUtils,
	        VIEW_ENCAPSULATION_VALUES: VIEW_ENCAPSULATION_VALUES,
	        ViewMetadata: ViewMetadata,
	        DebugContext: DebugContext,
	        StaticNodeDebugInfo: StaticNodeDebugInfo,
	        devModeEqual: devModeEqual,
	        UNINITIALIZED: UNINITIALIZED,
	        ValueUnwrapper: ValueUnwrapper,
	        RenderDebugInfo: RenderDebugInfo,
	        TemplateRef_: TemplateRef_,
	        ReflectionCapabilities: ReflectionCapabilities,
	        makeDecorator: makeDecorator,
	        DebugDomRootRenderer: DebugDomRootRenderer,
	        EMPTY_ARRAY: EMPTY_ARRAY,
	        EMPTY_MAP: EMPTY_MAP,
	        pureProxy1: pureProxy1,
	        pureProxy2: pureProxy2,
	        pureProxy3: pureProxy3,
	        pureProxy4: pureProxy4,
	        pureProxy5: pureProxy5,
	        pureProxy6: pureProxy6,
	        pureProxy7: pureProxy7,
	        pureProxy8: pureProxy8,
	        pureProxy9: pureProxy9,
	        pureProxy10: pureProxy10,
	        castByValue: castByValue,
	        Console: Console,
	        reflector: reflector,
	        Reflector: Reflector,
	        NoOpAnimationPlayer: NoOpAnimationPlayer,
	        AnimationPlayer: AnimationPlayer,
	        AnimationSequencePlayer: AnimationSequencePlayer,
	        AnimationGroupPlayer: AnimationGroupPlayer,
	        AnimationKeyframe: AnimationKeyframe,
	        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
	        balanceAnimationKeyframes: balanceAnimationKeyframes,
	        flattenStyles: flattenStyles,
	        clearStyles: clearStyles,
	        renderStyles: renderStyles,
	        collectAndResolveStyles: collectAndResolveStyles,
	        AnimationStyles: AnimationStyles,
	        AnimationOutput: AnimationOutput,
	        ANY_STATE: ANY_STATE,
	        DEFAULT_STATE: DEFAULT_STATE,
	        EMPTY_STATE: EMPTY_STATE,
	        FILL_STYLE_FLAG: FILL_STYLE_FLAG,
	        ComponentStillLoadingError: ComponentStillLoadingError
	    };

	    exports.createPlatform = createPlatform;
	    exports.assertPlatform = assertPlatform;
	    exports.destroyPlatform = destroyPlatform;
	    exports.getPlatform = getPlatform;
	    exports.PlatformRef = PlatformRef;
	    exports.ApplicationRef = ApplicationRef;
	    exports.enableProdMode = enableProdMode;
	    exports.isDevMode = isDevMode;
	    exports.createPlatformFactory = createPlatformFactory;
	    exports.APP_ID = APP_ID;
	    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	    exports.APP_INITIALIZER = APP_INITIALIZER;
	    exports.ApplicationInitStatus = ApplicationInitStatus;
	    exports.DebugElement = DebugElement;
	    exports.DebugNode = DebugNode;
	    exports.asNativeElements = asNativeElements;
	    exports.getDebugNode = getDebugNode;
	    exports.Testability = Testability;
	    exports.TestabilityRegistry = TestabilityRegistry;
	    exports.setTestabilityGetter = setTestabilityGetter;
	    exports.TRANSLATIONS = TRANSLATIONS;
	    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	    exports.LOCALE_ID = LOCALE_ID;
	    exports.ApplicationModule = ApplicationModule;
	    exports.wtfCreateScope = wtfCreateScope;
	    exports.wtfLeave = wtfLeave;
	    exports.wtfStartTimeRange = wtfStartTimeRange;
	    exports.wtfEndTimeRange = wtfEndTimeRange;
	    exports.Type = Type;
	    exports.EventEmitter = EventEmitter;
	    exports.ErrorHandler = ErrorHandler;
	    exports.AnimationTransitionEvent = AnimationTransitionEvent;
	    exports.AnimationPlayer = AnimationPlayer;
	    exports.Sanitizer = Sanitizer;
	    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	    exports.Attribute = Attribute;
	    exports.ContentChild = ContentChild;
	    exports.ContentChildren = ContentChildren;
	    exports.Query = Query;
	    exports.ViewChild = ViewChild;
	    exports.ViewChildren = ViewChildren;
	    exports.Component = Component;
	    exports.Directive = Directive;
	    exports.HostBinding = HostBinding;
	    exports.HostListener = HostListener;
	    exports.Input = Input;
	    exports.Output = Output;
	    exports.Pipe = Pipe;
	    exports.AfterContentChecked = AfterContentChecked;
	    exports.AfterContentInit = AfterContentInit;
	    exports.AfterViewChecked = AfterViewChecked;
	    exports.AfterViewInit = AfterViewInit;
	    exports.DoCheck = DoCheck;
	    exports.OnChanges = OnChanges;
	    exports.OnDestroy = OnDestroy;
	    exports.OnInit = OnInit;
	    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	    exports.NgModule = NgModule;
	    exports.Class = Class;
	    exports.forwardRef = forwardRef;
	    exports.resolveForwardRef = resolveForwardRef;
	    exports.Injector = Injector;
	    exports.ReflectiveInjector = ReflectiveInjector;
	    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	    exports.ReflectiveKey = ReflectiveKey;
	    exports.OpaqueToken = OpaqueToken;
	    exports.Inject = Inject;
	    exports.Optional = Optional;
	    exports.Injectable = Injectable;
	    exports.Self = Self;
	    exports.SkipSelf = SkipSelf;
	    exports.Host = Host;
	    exports.NgZone = NgZone;
	    exports.RenderComponentType = RenderComponentType;
	    exports.Renderer = Renderer;
	    exports.RootRenderer = RootRenderer;
	    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	    exports.Compiler = Compiler;
	    exports.CompilerFactory = CompilerFactory;
	    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	    exports.ComponentFactory = ComponentFactory;
	    exports.ComponentRef = ComponentRef;
	    exports.ComponentFactoryResolver = ComponentFactoryResolver;
	    exports.ElementRef = ElementRef;
	    exports.NgModuleFactory = NgModuleFactory;
	    exports.NgModuleRef = NgModuleRef;
	    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	    exports.getModuleFactory = getModuleFactory;
	    exports.QueryList = QueryList;
	    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	    exports.TemplateRef = TemplateRef;
	    exports.ViewContainerRef = ViewContainerRef;
	    exports.EmbeddedViewRef = EmbeddedViewRef;
	    exports.ViewRef = ViewRef;
	    exports.ChangeDetectorRef = ChangeDetectorRef;
	    exports.CollectionChangeRecord = CollectionChangeRecord;
	    exports.DefaultIterableDiffer = DefaultIterableDiffer;
	    exports.IterableDiffers = IterableDiffers;
	    exports.KeyValueChangeRecord = KeyValueChangeRecord;
	    exports.KeyValueDiffers = KeyValueDiffers;
	    exports.SimpleChange = SimpleChange;
	    exports.WrappedValue = WrappedValue;
	    exports.platformCore = platformCore;
	    exports.__core_private__ = __core_private__;
	    exports.AUTO_STYLE = AUTO_STYLE;
	    exports.AnimationEntryMetadata = AnimationEntryMetadata;
	    exports.AnimationStateMetadata = AnimationStateMetadata;
	    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
	    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
	    exports.AnimationMetadata = AnimationMetadata;
	    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
	    exports.AnimationStyleMetadata = AnimationStyleMetadata;
	    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
	    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
	    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
	    exports.AnimationGroupMetadata = AnimationGroupMetadata;
	    exports.animate = animate;
	    exports.group = group;
	    exports.sequence = sequence;
	    exports.style = style;
	    exports.state = state;
	    exports.keyframes = keyframes;
	    exports.transition = transition;
	    exports.trigger = trigger;

	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(9);
	var Subscriber_1 = __webpack_require__(12);
	var Subscription_1 = __webpack_require__(14);
	var ObjectUnsubscribedError_1 = __webpack_require__(23);
	var SubjectSubscription_1 = __webpack_require__(24);
	var rxSubscriber_1 = __webpack_require__(21);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(10);
	var toSubscriber_1 = __webpack_require__(11);
	var observable_1 = __webpack_require__(22);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    /**
	     * Registers handlers for handling emitted values, error and completions from the observable, and
	     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
	     * @method subscribe
	     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
	     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
	     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
	     *  the error will be thrown as unhandled
	     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
	     * @return {ISubscription} a subscription reference to the registered handlers
	     */
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this);
	        }
	        else {
	            sink.add(this._subscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 10 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	};
	exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
	var freeGlobal = objectTypes[typeof global] && global;
	if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    exports.root = freeGlobal;
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(12);
	var rxSubscriber_1 = __webpack_require__(21);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber();
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(13);
	var Subscription_1 = __webpack_require__(14);
	var Observer_1 = __webpack_require__(20);
	var rxSubscriber_1 = __webpack_require__(21);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(15);
	var isObject_1 = __webpack_require__(16);
	var isFunction_1 = __webpack_require__(13);
	var tryCatch_1 = __webpack_require__(17);
	var errorObject_1 = __webpack_require__(18);
	var UnsubscriptionError_1 = __webpack_require__(19);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                (errors = errors || []).push(errorObject_1.errorObject.e);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(err.errors);
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.closed || typeof sub.unsubscribe !== 'function') {
	                    break;
	                }
	                else if (this.closed) {
	                    sub.unsubscribe();
	                }
	                else {
	                    (this._subscriptions || (this._subscriptions = [])).push(sub);
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        return sub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 16 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(18);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 19 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(10);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(10);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 23 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(14);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.0.0
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(26), __webpack_require__(7)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, function (exports,_angular_common,_angular_core) { 'use strict';

	    var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;
	    var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;

	    var _NoOpAnimationDriver = (function () {
	        function _NoOpAnimationDriver() {
	        }
	        _NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
	            return new NoOpAnimationPlayer();
	        };
	        return _NoOpAnimationDriver;
	    }());
	    /**
	     * @experimental
	     */
	    var AnimationDriver = (function () {
	        function AnimationDriver() {
	        }
	        AnimationDriver.NOOP = new _NoOpAnimationDriver();
	        return AnimationDriver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var global$1 = globalScope;
	    var Date = global$1.Date;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj !== undefined && obj !== null;
	    }
	    function isBlank(obj) {
	        return obj === undefined || obj === null;
	    }
	    function isNumber(obj) {
	        return typeof obj === 'number';
	    }
	    function isString(obj) {
	        return typeof obj === 'string';
	    }
	    function isFunction(obj) {
	        return typeof obj === 'function';
	    }
	    function isArray(obj) {
	        return Array.isArray(obj);
	    }
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token === undefined || token === null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return token.overriddenName;
	        }
	        if (token.name) {
	            return token.name;
	        }
	        var res = token.toString();
	        var newLineIndex = res.indexOf('\n');
	        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	    }
	    var StringWrapper = (function () {
	        function StringWrapper() {
	        }
	        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	        StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	        StringWrapper.equals = function (s, s2) { return s === s2; };
	        StringWrapper.stripLeft = function (s, charVal) {
	            if (s && s.length) {
	                var pos = 0;
	                for (var i = 0; i < s.length; i++) {
	                    if (s[i] != charVal)
	                        break;
	                    pos++;
	                }
	                s = s.substring(pos);
	            }
	            return s;
	        };
	        StringWrapper.stripRight = function (s, charVal) {
	            if (s && s.length) {
	                var pos = s.length;
	                for (var i = s.length - 1; i >= 0; i--) {
	                    if (s[i] != charVal)
	                        break;
	                    pos--;
	                }
	                s = s.substring(0, pos);
	            }
	            return s;
	        };
	        StringWrapper.replace = function (s, from, replace) {
	            return s.replace(from, replace);
	        };
	        StringWrapper.replaceAll = function (s, from, replace) {
	            return s.replace(from, replace);
	        };
	        StringWrapper.slice = function (s, from, to) {
	            if (from === void 0) { from = 0; }
	            if (to === void 0) { to = null; }
	            return s.slice(from, to === null ? undefined : to);
	        };
	        StringWrapper.replaceAllMapped = function (s, from, cb) {
	            return s.replace(from, function () {
	                var matches = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    matches[_i - 0] = arguments[_i];
	                }
	                // Remove offset & string from the result array
	                matches.splice(-2, 2);
	                // The callback receives match, p1, ..., pn
	                return cb(matches);
	            });
	        };
	        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	        StringWrapper.compare = function (a, b) {
	            if (a < b) {
	                return -1;
	            }
	            else if (a > b) {
	                return 1;
	            }
	            else {
	                return 0;
	            }
	        };
	        return StringWrapper;
	    }());
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	        NumberWrapper.equal = function (a, b) { return a === b; };
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        NumberWrapper.parseInt = function (text, radix) {
	            if (radix == 10) {
	                if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else if (radix == 16) {
	                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else {
	                var result = parseInt(text, radix);
	                if (!isNaN(result)) {
	                    return result;
	                }
	            }
	            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	        };
	        Object.defineProperty(NumberWrapper, "NaN", {
	            get: function () { return NaN; },
	            enumerable: true,
	            configurable: true
	        });
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        NumberWrapper.isNaN = function (value) { return isNaN(value); };
	        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	        return NumberWrapper;
	    }());
	    // Can't be all uppercase as our transpiler would think it is a special directive...
	    var Json = (function () {
	        function Json() {
	        }
	        Json.parse = function (s) { return global$1.JSON.parse(s); };
	        Json.stringify = function (data) {
	            // Dart doesn't take 3 arguments
	            return global$1.JSON.stringify(data, null, 2);
	        };
	        return Json;
	    }());
	    var DateWrapper = (function () {
	        function DateWrapper() {
	        }
	        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	            if (month === void 0) { month = 1; }
	            if (day === void 0) { day = 1; }
	            if (hour === void 0) { hour = 0; }
	            if (minutes === void 0) { minutes = 0; }
	            if (seconds === void 0) { seconds = 0; }
	            if (milliseconds === void 0) { milliseconds = 0; }
	            return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	        };
	        DateWrapper.fromISOString = function (str) { return new Date(str); };
	        DateWrapper.fromMillis = function (ms) { return new Date(ms); };
	        DateWrapper.toMillis = function (date) { return date.getTime(); };
	        DateWrapper.now = function () { return new Date(); };
	        DateWrapper.toJson = function (date) { return date.toJSON(); };
	        return DateWrapper;
	    }());
	    function setValueOnPath(global, path, value) {
	        var parts = path.split('.');
	        var obj = global;
	        while (parts.length > 1) {
	            var name = parts.shift();
	            if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
	                obj = obj[name];
	            }
	            else {
	                obj = obj[name] = {};
	            }
	        }
	        if (obj === undefined || obj === null) {
	            obj = {};
	        }
	        obj[parts.shift()] = value;
	    }

	    var Map$1 = global$1.Map;
	    var Set$1 = global$1.Set;
	    // Safari and Internet Explorer do not support the iterable parameter to the
	    // Map constructor.  We work around that by manually adding the items.
	    var createMapFromPairs = (function () {
	        try {
	            if (new Map$1([[1, 2]]).size === 1) {
	                return function createMapFromPairs(pairs) { return new Map$1(pairs); };
	            }
	        }
	        catch (e) {
	        }
	        return function createMapAndPopulateFromPairs(pairs) {
	            var map = new Map$1();
	            for (var i = 0; i < pairs.length; i++) {
	                var pair = pairs[i];
	                map.set(pair[0], pair[1]);
	            }
	            return map;
	        };
	    })();
	    var createMapFromMap = (function () {
	        try {
	            if (new Map$1(new Map$1())) {
	                return function createMapFromMap(m) { return new Map$1(m); };
	            }
	        }
	        catch (e) {
	        }
	        return function createMapAndPopulateFromMap(m) {
	            var map = new Map$1();
	            m.forEach(function (v, k) { map.set(k, v); });
	            return map;
	        };
	    })();
	    var _clearValues = (function () {
	        if ((new Map$1()).keys().next) {
	            return function _clearValues(m) {
	                var keyIterator = m.keys();
	                var k;
	                while (!((k = keyIterator.next()).done)) {
	                    m.set(k.value, null);
	                }
	            };
	        }
	        else {
	            return function _clearValuesWithForeEach(m) {
	                m.forEach(function (v, k) { m.set(k, null); });
	            };
	        }
	    })();
	    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	    var _arrayFromMap = (function () {
	        try {
	            if ((new Map$1()).values().next) {
	                return function createArrayFromMap(m, getValues) {
	                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
	                };
	            }
	        }
	        catch (e) {
	        }
	        return function createArrayFromMapWithForeach(m, getValues) {
	            var res = ListWrapper.createFixedSize(m.size), i = 0;
	            m.forEach(function (v, k) {
	                res[i] = getValues ? v : k;
	                i++;
	            });
	            return res;
	        };
	    })();
	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        StringMapWrapper.create = function () {
	            // Note: We are not using Object.create(null) here due to
	            // performance!
	            // http://jsperf.com/ng2-object-create-null
	            return {};
	        };
	        StringMapWrapper.contains = function (map, key) {
	            return map.hasOwnProperty(key);
	        };
	        StringMapWrapper.get = function (map, key) {
	            return map.hasOwnProperty(key) ? map[key] : undefined;
	        };
	        StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	        StringMapWrapper.keys = function (map) { return Object.keys(map); };
	        StringMapWrapper.values = function (map) {
	            return Object.keys(map).map(function (k) { return map[k]; });
	        };
	        StringMapWrapper.isEmpty = function (map) {
	            for (var prop in map) {
	                return false;
	            }
	            return true;
	        };
	        StringMapWrapper.delete = function (map, key) { delete map[key]; };
	        StringMapWrapper.forEach = function (map, callback) {
	            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
	                var k = _a[_i];
	                callback(map[k], k);
	            }
	        };
	        StringMapWrapper.merge = function (m1, m2) {
	            var m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        StringMapWrapper.equals = function (m1, m2) {
	            var k1 = Object.keys(m1);
	            var k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var i = 0; i < k1.length; i++) {
	                var key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        // JS has no way to express a statically fixed size list, but dart does so we
	        // keep both methods.
	        ListWrapper.createFixedSize = function (size) { return new Array(size); };
	        ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	        ListWrapper.clone = function (array) { return array.slice(0); };
	        ListWrapper.forEachWithIndex = function (array, fn) {
	            for (var i = 0; i < array.length; i++) {
	                fn(array[i], i);
	            }
	        };
	        ListWrapper.first = function (array) {
	            if (!array)
	                return null;
	            return array[0];
	        };
	        ListWrapper.last = function (array) {
	            if (!array || array.length == 0)
	                return null;
	            return array[array.length - 1];
	        };
	        ListWrapper.indexOf = function (array, value, startIndex) {
	            if (startIndex === void 0) { startIndex = 0; }
	            return array.indexOf(value, startIndex);
	        };
	        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	        ListWrapper.reversed = function (array) {
	            var a = ListWrapper.clone(array);
	            return a.reverse();
	        };
	        ListWrapper.concat = function (a, b) { return a.concat(b); };
	        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	        ListWrapper.removeAt = function (list, index) {
	            var res = list[index];
	            list.splice(index, 1);
	            return res;
	        };
	        ListWrapper.removeAll = function (list, items) {
	            for (var i = 0; i < items.length; ++i) {
	                var index = list.indexOf(items[i]);
	                list.splice(index, 1);
	            }
	        };
	        ListWrapper.remove = function (list, el) {
	            var index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        ListWrapper.clear = function (list) { list.length = 0; };
	        ListWrapper.isEmpty = function (list) { return list.length == 0; };
	        ListWrapper.fill = function (list, value, start, end) {
	            if (start === void 0) { start = 0; }
	            if (end === void 0) { end = null; }
	            list.fill(value, start, end === null ? list.length : end);
	        };
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        ListWrapper.slice = function (l, from, to) {
	            if (from === void 0) { from = 0; }
	            if (to === void 0) { to = null; }
	            return l.slice(from, to === null ? undefined : to);
	        };
	        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	        ListWrapper.sort = function (l, compareFn) {
	            if (isPresent(compareFn)) {
	                l.sort(compareFn);
	            }
	            else {
	                l.sort();
	            }
	        };
	        ListWrapper.toString = function (l) { return l.toString(); };
	        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	        ListWrapper.maximum = function (list, predicate) {
	            if (list.length == 0) {
	                return null;
	            }
	            var solution = null;
	            var maxValue = -Infinity;
	            for (var index = 0; index < list.length; index++) {
	                var candidate = list[index];
	                if (isBlank(candidate)) {
	                    continue;
	                }
	                var candidateValue = predicate(candidate);
	                if (candidateValue > maxValue) {
	                    solution = candidate;
	                    maxValue = candidateValue;
	                }
	            }
	            return solution;
	        };
	        ListWrapper.flatten = function (list) {
	            var target = [];
	            _flattenArray(list, target);
	            return target;
	        };
	        ListWrapper.addAll = function (list, source) {
	            for (var i = 0; i < source.length; i++) {
	                list.push(source[i]);
	            }
	        };
	        return ListWrapper;
	    }());
	    function _flattenArray(source, target) {
	        if (isPresent(source)) {
	            for (var i = 0; i < source.length; i++) {
	                var item = source[i];
	                if (isArray(item)) {
	                    _flattenArray(item, target);
	                }
	                else {
	                    target.push(item);
	                }
	            }
	        }
	        return target;
	    }
	    // Safari and Internet Explorer do not support the iterable parameter to the
	    // Set constructor.  We work around that by manually adding the items.
	    var createSetFromList = (function () {
	        var test = new Set$1([1, 2, 3]);
	        if (test.size === 3) {
	            return function createSetFromList(lst) { return new Set$1(lst); };
	        }
	        else {
	            return function createSetAndPopulateFromList(lst) {
	                var res = new Set$1(lst);
	                if (res.size !== lst.length) {
	                    for (var i = 0; i < lst.length; i++) {
	                        res.add(lst[i]);
	                    }
	                }
	                return res;
	            };
	        }
	    })();

	    var CAMEL_CASE_REGEXP = /([A-Z])/g;
	    var DASH_CASE_REGEXP = /-([a-z])/g;
	    function camelCaseToDashCase(input) {
	        return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m /** TODO #9100 */) { return '-' + m[1].toLowerCase(); });
	    }
	    function dashCaseToCamelCase(input) {
	        return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m /** TODO #9100 */) { return m[1].toUpperCase(); });
	    }

	    var _DOM = null;
	    function getDOM() {
	        return _DOM;
	    }
	    function setRootDomAdapter(adapter) {
	        if (isBlank(_DOM)) {
	            _DOM = adapter;
	        }
	    }
	    /* tslint:disable:requireParameterType */
	    /**
	     * Provides DOM operations in an environment-agnostic way.
	     *
	     * @security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     */
	    var DomAdapter = (function () {
	        function DomAdapter() {
	            this.resourceLoaderType = null;
	        }
	        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	            /**
	             * Maps attribute names to their corresponding property names for cases
	             * where attribute name doesn't match property name.
	             */
	            get: function () { return this._attrToPropMap; },
	            set: function (value) { this._attrToPropMap = value; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        ;
	        return DomAdapter;
	    }());

	    var WebAnimationsPlayer = (function () {
	        function WebAnimationsPlayer(element, keyframes, options) {
	            this.element = element;
	            this.keyframes = keyframes;
	            this.options = options;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._initialized = false;
	            this._started = false;
	            this.parentPlayer = null;
	            this._duration = options['duration'];
	        }
	        WebAnimationsPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                if (!isPresent(this.parentPlayer)) {
	                    this.destroy();
	                }
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        WebAnimationsPlayer.prototype.init = function () {
	            var _this = this;
	            if (this._initialized)
	                return;
	            this._initialized = true;
	            var keyframes = this.keyframes.map(function (styles) {
	                var formattedKeyframe = {};
	                StringMapWrapper.forEach(styles, function (value, prop) {
	                    formattedKeyframe[prop] = value == _angular_core.AUTO_STYLE ? _computeStyle(_this.element, prop) : value;
	                });
	                return formattedKeyframe;
	            });
	            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
	            // this is required so that the player doesn't start to animate right away
	            this.reset();
	            this._player.onfinish = function () { return _this._onFinish(); };
	        };
	        /** @internal */
	        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
	            return element.animate(keyframes, options);
	        };
	        WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        WebAnimationsPlayer.prototype.play = function () {
	            this.init();
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._player.play();
	        };
	        WebAnimationsPlayer.prototype.pause = function () {
	            this.init();
	            this._player.pause();
	        };
	        WebAnimationsPlayer.prototype.finish = function () {
	            this.init();
	            this._onFinish();
	            this._player.finish();
	        };
	        WebAnimationsPlayer.prototype.reset = function () { this._player.cancel(); };
	        WebAnimationsPlayer.prototype.restart = function () {
	            this.reset();
	            this.play();
	        };
	        WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
	        WebAnimationsPlayer.prototype.destroy = function () {
	            this.reset();
	            this._onFinish();
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
	            get: function () { return this._duration; },
	            enumerable: true,
	            configurable: true
	        });
	        WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
	        WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
	        return WebAnimationsPlayer;
	    }());
	    function _computeStyle(element, prop) {
	        return getDOM().getComputedStyle(element)[prop];
	    }

	    var WebAnimationsDriver = (function () {
	        function WebAnimationsDriver() {
	        }
	        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
	            var formattedSteps = [];
	            var startingStyleLookup = {};
	            if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
	                startingStyleLookup = _populateStyles(element, startingStyles, {});
	                startingStyleLookup['offset'] = 0;
	                formattedSteps.push(startingStyleLookup);
	            }
	            keyframes.forEach(function (keyframe) {
	                var data = _populateStyles(element, keyframe.styles, startingStyleLookup);
	                data['offset'] = keyframe.offset;
	                formattedSteps.push(data);
	            });
	            // this is a special case when only styles are applied as an
	            // animation. When this occurs we want to animate from start to
	            // end with the same values. Removing the offset and having only
	            // start/end values is suitable enough for the web-animations API
	            if (formattedSteps.length == 1) {
	                var start = formattedSteps[0];
	                start['offset'] = null;
	                formattedSteps = [start, start];
	            }
	            var playerOptions = {
	                'duration': duration,
	                'delay': delay,
	                'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
	            };
	            // we check for this to avoid having a null|undefined value be present
	            // for the easing (which results in an error for certain browsers #9752)
	            if (easing) {
	                playerOptions['easing'] = easing;
	            }
	            return new WebAnimationsPlayer(element, formattedSteps, playerOptions);
	        };
	        return WebAnimationsDriver;
	    }());
	    function _populateStyles(element, styles, defaultStyles) {
	        var data = {};
	        styles.styles.forEach(function (entry) {
	            StringMapWrapper.forEach(entry, function (val, prop) {
	                var formattedProp = dashCaseToCamelCase(prop);
	                data[formattedProp] =
	                    val == _angular_core.AUTO_STYLE ? val : val.toString() + _resolveStyleUnit(val, prop, formattedProp);
	            });
	        });
	        StringMapWrapper.forEach(defaultStyles, function (value, prop) {
	            if (!isPresent(data[prop])) {
	                data[prop] = value;
	            }
	        });
	        return data;
	    }
	    function _resolveStyleUnit(val, userProvidedProp, formattedProp) {
	        var unit = '';
	        if (_isPixelDimensionStyle(formattedProp) && val != 0 && val != '0') {
	            if (isNumber(val)) {
	                unit = 'px';
	            }
	            else if (_findDimensionalSuffix(val.toString()).length == 0) {
	                throw new Error('Please provide a CSS unit value for ' + userProvidedProp + ':' + val);
	            }
	        }
	        return unit;
	    }
	    var _$0 = 48;
	    var _$9 = 57;
	    var _$PERIOD = 46;
	    function _findDimensionalSuffix(value) {
	        for (var i = 0; i < value.length; i++) {
	            var c = StringWrapper.charCodeAt(value, i);
	            if ((c >= _$0 && c <= _$9) || c == _$PERIOD)
	                continue;
	            return value.substring(i, value.length);
	        }
	        return '';
	    }
	    function _isPixelDimensionStyle(prop) {
	        switch (prop) {
	            case 'width':
	            case 'height':
	            case 'minWidth':
	            case 'minHeight':
	            case 'maxWidth':
	            case 'maxHeight':
	            case 'left':
	            case 'top':
	            case 'bottom':
	            case 'right':
	            case 'fontSize':
	            case 'outlineWidth':
	            case 'outlineOffset':
	            case 'paddingTop':
	            case 'paddingLeft':
	            case 'paddingBottom':
	            case 'paddingRight':
	            case 'marginTop':
	            case 'marginLeft':
	            case 'marginBottom':
	            case 'marginRight':
	            case 'borderRadius':
	            case 'borderWidth':
	            case 'borderTopWidth':
	            case 'borderLeftWidth':
	            case 'borderRightWidth':
	            case 'borderBottomWidth':
	            case 'textIndent':
	                return true;
	            default:
	                return false;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides DOM operations in any browser environment.
	     *
	     * @security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     */
	    var GenericBrowserDomAdapter = (function (_super) {
	        __extends$1(GenericBrowserDomAdapter, _super);
	        function GenericBrowserDomAdapter() {
	            var _this = this;
	            _super.call(this);
	            this._animationPrefix = null;
	            this._transitionEnd = null;
	            try {
	                var element = this.createElement('div', this.defaultDoc());
	                if (isPresent(this.getStyle(element, 'animationName'))) {
	                    this._animationPrefix = '';
	                }
	                else {
	                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                    for (var i = 0; i < domPrefixes.length; i++) {
	                        if (isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
	                            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                            break;
	                        }
	                    }
	                }
	                var transEndEventNames = {
	                    WebkitTransition: 'webkitTransitionEnd',
	                    MozTransition: 'transitionend',
	                    OTransition: 'oTransitionEnd otransitionend',
	                    transition: 'transitionend'
	                };
	                StringMapWrapper.forEach(transEndEventNames, function (value, key) {
	                    if (isPresent(_this.getStyle(element, key))) {
	                        _this._transitionEnd = value;
	                    }
	                });
	            }
	            catch (e) {
	                this._animationPrefix = null;
	                this._transitionEnd = null;
	            }
	        }
	        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
	        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	        };
	        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	            return isFunction(this.defaultDoc().body.createShadowRoot);
	        };
	        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () {
	            return isPresent(this._animationPrefix) ? this._animationPrefix : '';
	        };
	        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return isPresent(this._transitionEnd) ? this._transitionEnd : ''; };
	        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	            return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
	        };
	        return GenericBrowserDomAdapter;
	    }(DomAdapter));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _attrToPropMap = {
	        'class': 'className',
	        'innerHtml': 'innerHTML',
	        'readonly': 'readOnly',
	        'tabindex': 'tabIndex'
	    };
	    var DOM_KEY_LOCATION_NUMPAD = 3;
	    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	    var _keyMap = {
	        // The following values are here for cross-browser compatibility and to match the W3C standard
	        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	        '\b': 'Backspace',
	        '\t': 'Tab',
	        '\x7F': 'Delete',
	        '\x1B': 'Escape',
	        'Del': 'Delete',
	        'Esc': 'Escape',
	        'Left': 'ArrowLeft',
	        'Right': 'ArrowRight',
	        'Up': 'ArrowUp',
	        'Down': 'ArrowDown',
	        'Menu': 'ContextMenu',
	        'Scroll': 'ScrollLock',
	        'Win': 'OS'
	    };
	    // There is a bug in Chrome for numeric keypad keys:
	    // https://code.google.com/p/chromium/issues/detail?id=155654
	    // 1, 2, 3 ... are reported as A, B, C ...
	    var _chromeNumKeyPadMap = {
	        'A': '1',
	        'B': '2',
	        'C': '3',
	        'D': '4',
	        'E': '5',
	        'F': '6',
	        'G': '7',
	        'H': '8',
	        'I': '9',
	        'J': '*',
	        'K': '+',
	        'M': '-',
	        'N': '.',
	        'O': '/',
	        '\x60': '0',
	        '\x90': 'NumLock'
	    };
	    /**
	     * A `DomAdapter` powered by full browser DOM APIs.
	     *
	     * @security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     */
	    /* tslint:disable:requireParameterType */
	    var BrowserDomAdapter = (function (_super) {
	        __extends(BrowserDomAdapter, _super);
	        function BrowserDomAdapter() {
	            _super.apply(this, arguments);
	        }
	        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	        BrowserDomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { return name in element; };
	        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
	        BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
	        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) {
	            el[methodName].apply(el, args);
	        };
	        // TODO(tbosch): move this into a separate environment class once we have it
	        BrowserDomAdapter.prototype.logError = function (error /** TODO #9100 */) {
	            if (window.console.error) {
	                window.console.error(error);
	            }
	            else {
	                window.console.log(error);
	            }
	        };
	        BrowserDomAdapter.prototype.log = function (error /** TODO #9100 */) { window.console.log(error); };
	        BrowserDomAdapter.prototype.logGroup = function (error /** TODO #9100 */) {
	            if (window.console.group) {
	                window.console.group(error);
	                this.logError(error);
	            }
	            else {
	                window.console.log(error);
	            }
	        };
	        BrowserDomAdapter.prototype.logGroupEnd = function () {
	            if (window.console.groupEnd) {
	                window.console.groupEnd();
	            }
	        };
	        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	            get: function () { return _attrToPropMap; },
	            enumerable: true,
	            configurable: true
	        });
	        BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	        BrowserDomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) {
	            return el.querySelector(selector);
	        };
	        BrowserDomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) {
	            return el.querySelectorAll(selector);
	        };
	        BrowserDomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {
	            el.addEventListener(evt, listener, false);
	        };
	        BrowserDomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener /** TODO #9100 */) {
	            el.addEventListener(evt, listener, false);
	            // Needed to follow Dart's subscription semantic, until fix of
	            // https://code.google.com/p/dart/issues/detail?id=17406
	            return function () { el.removeEventListener(evt, listener, false); };
	        };
	        BrowserDomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt /** TODO #9100 */) { el.dispatchEvent(evt); };
	        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	            var evt = document.createEvent('MouseEvent');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        BrowserDomAdapter.prototype.createEvent = function (eventType /** TODO #9100 */) {
	            var evt = document.createEvent('Event');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        BrowserDomAdapter.prototype.preventDefault = function (evt) {
	            evt.preventDefault();
	            evt.returnValue = false;
	        };
	        BrowserDomAdapter.prototype.isPrevented = function (evt) {
	            return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
	        };
	        BrowserDomAdapter.prototype.getInnerHTML = function (el /** TODO #9100 */) { return el.innerHTML; };
	        BrowserDomAdapter.prototype.getTemplateContent = function (el /** TODO #9100 */) {
	            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	        };
	        BrowserDomAdapter.prototype.getOuterHTML = function (el /** TODO #9100 */) { return el.outerHTML; };
	        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	        BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	        BrowserDomAdapter.prototype.content = function (node) {
	            if (this.hasProperty(node, 'content')) {
	                return node.content;
	            }
	            else {
	                return node;
	            }
	        };
	        BrowserDomAdapter.prototype.firstChild = function (el /** TODO #9100 */) { return el.firstChild; };
	        BrowserDomAdapter.prototype.nextSibling = function (el /** TODO #9100 */) { return el.nextSibling; };
	        BrowserDomAdapter.prototype.parentElement = function (el /** TODO #9100 */) { return el.parentNode; };
	        BrowserDomAdapter.prototype.childNodes = function (el /** TODO #9100 */) { return el.childNodes; };
	        BrowserDomAdapter.prototype.childNodesAsList = function (el /** TODO #9100 */) {
	            var childNodes = el.childNodes;
	            var res = ListWrapper.createFixedSize(childNodes.length);
	            for (var i = 0; i < childNodes.length; i++) {
	                res[i] = childNodes[i];
	            }
	            return res;
	        };
	        BrowserDomAdapter.prototype.clearNodes = function (el /** TODO #9100 */) {
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	        };
	        BrowserDomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node /** TODO #9100 */) { el.appendChild(node); };
	        BrowserDomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node /** TODO #9100 */) { el.removeChild(node); };
	        BrowserDomAdapter.prototype.replaceChild = function (el, newChild /** TODO #9100 */, oldChild /** TODO #9100 */) {
	            el.replaceChild(newChild, oldChild);
	        };
	        BrowserDomAdapter.prototype.remove = function (node /** TODO #9100 */) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	            return node;
	        };
	        BrowserDomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node /** TODO #9100 */) {
	            el.parentNode.insertBefore(node, el);
	        };
	        BrowserDomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes /** TODO #9100 */) {
	            nodes.forEach(function (n /** TODO #9100 */) { return el.parentNode.insertBefore(n, el); });
	        };
	        BrowserDomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node /** TODO #9100 */) {
	            el.parentNode.insertBefore(node, el.nextSibling);
	        };
	        BrowserDomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value /** TODO #9100 */) { el.innerHTML = value; };
	        BrowserDomAdapter.prototype.getText = function (el /** TODO #9100 */) { return el.textContent; };
	        // TODO(vicb): removed Element type because it does not support StyleElement
	        BrowserDomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { el.textContent = value; };
	        BrowserDomAdapter.prototype.getValue = function (el /** TODO #9100 */) { return el.value; };
	        BrowserDomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { el.value = value; };
	        BrowserDomAdapter.prototype.getChecked = function (el /** TODO #9100 */) { return el.checked; };
	        BrowserDomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { el.checked = value; };
	        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	        BrowserDomAdapter.prototype.createTemplate = function (html /** TODO #9100 */) {
	            var t = document.createElement('template');
	            t.innerHTML = html;
	            return t;
	        };
	        BrowserDomAdapter.prototype.createElement = function (tagName /* TODO #9100 */, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElement(tagName);
	        };
	        BrowserDomAdapter.prototype.createElementNS = function (ns /* TODO #9100 */, tagName /* TODO #9100 */, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElementNS(ns, tagName);
	        };
	        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createTextNode(text);
	        };
	        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	            if (doc === void 0) { doc = document; }
	            var el = doc.createElement('SCRIPT');
	            el.setAttribute(attrName, attrValue);
	            return el;
	        };
	        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	            if (doc === void 0) { doc = document; }
	            var style = doc.createElement('style');
	            this.appendChild(style, this.createTextNode(css));
	            return style;
	        };
	        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
	        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
	        BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
	        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	        BrowserDomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) {
	            return element.getElementsByClassName(name);
	        };
	        BrowserDomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) {
	            return element.getElementsByTagName(name);
	        };
	        BrowserDomAdapter.prototype.classList = function (element /** TODO #9100 */) {
	            return Array.prototype.slice.call(element.classList, 0);
	        };
	        BrowserDomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { element.classList.add(className); };
	        BrowserDomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) {
	            element.classList.remove(className);
	        };
	        BrowserDomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) {
	            return element.classList.contains(className);
	        };
	        BrowserDomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) {
	            element.style[styleName] = styleValue;
	        };
	        BrowserDomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, stylename) {
	            element.style[stylename] = null;
	        };
	        BrowserDomAdapter.prototype.getStyle = function (element /** TODO #9100 */, stylename) {
	            return element.style[stylename];
	        };
	        BrowserDomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) {
	            if (styleValue === void 0) { styleValue = null; }
	            var value = this.getStyle(element, styleName) || '';
	            return styleValue ? value == styleValue : value.length > 0;
	        };
	        BrowserDomAdapter.prototype.tagName = function (element /** TODO #9100 */) { return element.tagName; };
	        BrowserDomAdapter.prototype.attributeMap = function (element /** TODO #9100 */) {
	            var res = new Map();
	            var elAttrs = element.attributes;
	            for (var i = 0; i < elAttrs.length; i++) {
	                var attrib = elAttrs[i];
	                res.set(attrib.name, attrib.value);
	            }
	            return res;
	        };
	        BrowserDomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) {
	            return element.hasAttribute(attribute);
	        };
	        BrowserDomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) {
	            return element.hasAttributeNS(ns, attribute);
	        };
	        BrowserDomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) {
	            return element.getAttribute(attribute);
	        };
	        BrowserDomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, name) {
	            return element.getAttributeNS(ns, name);
	        };
	        BrowserDomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) {
	            element.setAttribute(name, value);
	        };
	        BrowserDomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) {
	            element.setAttributeNS(ns, name, value);
	        };
	        BrowserDomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) {
	            element.removeAttribute(attribute);
	        };
	        BrowserDomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, name) {
	            element.removeAttributeNS(ns, name);
	        };
	        BrowserDomAdapter.prototype.templateAwareRoot = function (el /** TODO #9100 */) {
	            return this.isTemplateElement(el) ? this.content(el) : el;
	        };
	        BrowserDomAdapter.prototype.createHtmlDocument = function () {
	            return document.implementation.createHTMLDocument('fakeTitle');
	        };
	        BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	        BrowserDomAdapter.prototype.getBoundingClientRect = function (el /** TODO #9100 */) {
	            try {
	                return el.getBoundingClientRect();
	            }
	            catch (e) {
	                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	            }
	        };
	        BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	        BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	        BrowserDomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) {
	            var matches = false;
	            if (n instanceof HTMLElement) {
	                if (n.matches) {
	                    matches = n.matches(selector);
	                }
	                else if (n.msMatchesSelector) {
	                    matches = n.msMatchesSelector(selector);
	                }
	                else if (n.webkitMatchesSelector) {
	                    matches = n.webkitMatchesSelector(selector);
	                }
	            }
	            return matches;
	        };
	        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	        };
	        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	        BrowserDomAdapter.prototype.hasShadowRoot = function (node /** TODO #9100 */) {
	            return isPresent(node.shadowRoot) && node instanceof HTMLElement;
	        };
	        BrowserDomAdapter.prototype.isShadowRoot = function (node /** TODO #9100 */) { return node instanceof DocumentFragment; };
	        BrowserDomAdapter.prototype.importIntoDoc = function (node) {
	            var toImport = node;
	            if (this.isTemplateElement(node)) {
	                toImport = this.content(node);
	            }
	            return document.importNode(toImport, true);
	        };
	        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	        BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
	        BrowserDomAdapter.prototype.getEventKey = function (event /** TODO #9100 */) {
	            var key = event.key;
	            if (isBlank(key)) {
	                key = event.keyIdentifier;
	                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	                // Safari
	                // cf
	                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	                if (isBlank(key)) {
	                    return 'Unidentified';
	                }
	                if (key.startsWith('U+')) {
	                    key = String.fromCharCode(parseInt(key.substring(2), 16));
	                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                        // There is a bug in Chrome for numeric keypad keys:
	                        // https://code.google.com/p/chromium/issues/detail?id=155654
	                        // 1, 2, 3 ... are reported as A, B, C ...
	                        key = _chromeNumKeyPadMap[key];
	                    }
	                }
	            }
	            if (_keyMap.hasOwnProperty(key)) {
	                key = _keyMap[key];
	            }
	            return key;
	        };
	        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	            if (target == 'window') {
	                return window;
	            }
	            else if (target == 'document') {
	                return document;
	            }
	            else if (target == 'body') {
	                return document.body;
	            }
	        };
	        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	        BrowserDomAdapter.prototype.getBaseHref = function () {
	            var href = getBaseElementHref();
	            if (isBlank(href)) {
	                return null;
	            }
	            return relativePath(href);
	        };
	        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	        BrowserDomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) {
	            this.setAttribute(element, 'data-' + name, value);
	        };
	        BrowserDomAdapter.prototype.getData = function (element /** TODO #9100 */, name) {
	            return this.getAttribute(element, 'data-' + name);
	        };
	        BrowserDomAdapter.prototype.getComputedStyle = function (element /** TODO #9100 */) { return getComputedStyle(element); };
	        // TODO(tbosch): move this into a separate environment class once we have it
	        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value); };
	        BrowserDomAdapter.prototype.supportsWebAnimation = function () { return isFunction(Element.prototype['animate']); };
	        BrowserDomAdapter.prototype.performanceNow = function () {
	            // performance.now() is not available in all browsers, see
	            // http://caniuse.com/#search=performance.now
	            if (isPresent(window.performance) && isPresent(window.performance.now)) {
	                return window.performance.now();
	            }
	            else {
	                return DateWrapper.toMillis(DateWrapper.now());
	            }
	        };
	        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	        BrowserDomAdapter.prototype.setCookie = function (name, value) {
	            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	            // not clear other cookies.
	            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	        };
	        return BrowserDomAdapter;
	    }(GenericBrowserDomAdapter));
	    var baseElement = null;
	    function getBaseElementHref() {
	        if (isBlank(baseElement)) {
	            baseElement = document.querySelector('base');
	            if (isBlank(baseElement)) {
	                return null;
	            }
	        }
	        return baseElement.getAttribute('href');
	    }
	    // based on urlUtils.js in AngularJS 1
	    var urlParsingNode = null;
	    function relativePath(url /** TODO #9100 */) {
	        if (isBlank(urlParsingNode)) {
	            urlParsingNode = document.createElement('a');
	        }
	        urlParsingNode.setAttribute('href', url);
	        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname;
	    }
	    function parseCookieValue(cookieStr, name) {
	        name = encodeURIComponent(name);
	        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	            var cookie = _a[_i];
	            var eqIndex = cookie.indexOf('=');
	            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	            if (cookieName.trim() === name) {
	                return decodeURIComponent(cookieValue);
	            }
	        }
	        return null;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function supportsState() {
	        return !!window.history.pushState;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	     * This class should not be used directly by an application developer. Instead, use
	     * {@link Location}.
	     */
	    var BrowserPlatformLocation = (function (_super) {
	        __extends$2(BrowserPlatformLocation, _super);
	        function BrowserPlatformLocation() {
	            _super.call(this);
	            this._init();
	        }
	        // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
	        /** @internal */
	        BrowserPlatformLocation.prototype._init = function () {
	            this._location = getDOM().getLocation();
	            this._history = getDOM().getHistory();
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	            get: function () { return this._location; },
	            enumerable: true,
	            configurable: true
	        });
	        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
	        BrowserPlatformLocation.prototype.onPopState = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	        };
	        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	            get: function () { return this._location.pathname; },
	            set: function (newPath) { this._location.pathname = newPath; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	            get: function () { return this._location.search; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	            get: function () { return this._location.hash; },
	            enumerable: true,
	            configurable: true
	        });
	        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.pushState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.replaceState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	        BrowserPlatformLocation.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserPlatformLocation.ctorParameters = [];
	        return BrowserPlatformLocation;
	    }(_angular_common.PlatformLocation));

	    var BrowserGetTestability = (function () {
	        function BrowserGetTestability() {
	        }
	        BrowserGetTestability.init = function () { _angular_core.setTestabilityGetter(new BrowserGetTestability()); };
	        BrowserGetTestability.prototype.addToWindow = function (registry) {
	            global$1.getAngularTestability = function (elem, findInAncestors) {
	                if (findInAncestors === void 0) { findInAncestors = true; }
	                var testability = registry.findTestabilityInTree(elem, findInAncestors);
	                if (testability == null) {
	                    throw new Error('Could not find testability for element.');
	                }
	                return testability;
	            };
	            global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
	            global$1.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
	            var whenAllStable = function (callback /** TODO #9100 */) {
	                var testabilities = global$1.getAllAngularTestabilities();
	                var count = testabilities.length;
	                var didWork = false;
	                var decrement = function (didWork_ /** TODO #9100 */) {
	                    didWork = didWork || didWork_;
	                    count--;
	                    if (count == 0) {
	                        callback(didWork);
	                    }
	                };
	                testabilities.forEach(function (testability /** TODO #9100 */) {
	                    testability.whenStable(decrement);
	                });
	            };
	            if (!global$1['frameworkStabilizers']) {
	                global$1['frameworkStabilizers'] = ListWrapper.createGrowableSize(0);
	            }
	            global$1['frameworkStabilizers'].push(whenAllStable);
	        };
	        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            if (elem == null) {
	                return null;
	            }
	            var t = registry.getTestability(elem);
	            if (isPresent(t)) {
	                return t;
	            }
	            else if (!findInAncestors) {
	                return null;
	            }
	            if (getDOM().isShadowRoot(elem)) {
	                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	            }
	            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	        };
	        return BrowserGetTestability;
	    }());

	    /**
	     * A service that can be used to get and set the title of a current HTML document.
	     *
	     * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	     * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	     * title value.
	     *
	     * @experimental
	     */
	    var Title = (function () {
	        function Title() {
	        }
	        /**
	         * Get the title of the current HTML document.
	         * @returns {string}
	         */
	        Title.prototype.getTitle = function () { return getDOM().getTitle(); };
	        /**
	         * Set the title of the current HTML document.
	         * @param newTitle
	         */
	        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
	        return Title;
	    }());

	    /**
	     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	     *
	     * Note: Document might not be available in the Application Context when Application and Rendering
	     * Contexts are not the same (e.g. when running the application into a Web Worker).
	     *
	     * @stable
	     */
	    var DOCUMENT = new _angular_core.OpaqueToken('DocumentToken');

	    /**
	     * @stable
	     */
	    var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken('EventManagerPlugins');
	    /**
	     * @stable
	     */
	    var EventManager = (function () {
	        function EventManager(plugins, _zone) {
	            var _this = this;
	            this._zone = _zone;
	            plugins.forEach(function (p) { return p.manager = _this; });
	            this._plugins = plugins.slice().reverse();
	        }
	        EventManager.prototype.addEventListener = function (element, eventName, handler) {
	            var plugin = this._findPluginFor(eventName);
	            return plugin.addEventListener(element, eventName, handler);
	        };
	        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	            var plugin = this._findPluginFor(eventName);
	            return plugin.addGlobalEventListener(target, eventName, handler);
	        };
	        EventManager.prototype.getZone = function () { return this._zone; };
	        /** @internal */
	        EventManager.prototype._findPluginFor = function (eventName) {
	            var plugins = this._plugins;
	            for (var i = 0; i < plugins.length; i++) {
	                var plugin = plugins[i];
	                if (plugin.supports(eventName)) {
	                    return plugin;
	                }
	            }
	            throw new Error("No event manager plugin found for event " + eventName);
	        };
	        EventManager.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        EventManager.ctorParameters = [
	            { type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	            { type: _angular_core.NgZone, },
	        ];
	        return EventManager;
	    }());
	    var EventManagerPlugin = (function () {
	        function EventManagerPlugin() {
	        }
	        // That is equivalent to having supporting $event.target
	        EventManagerPlugin.prototype.supports = function (eventName) { return false; };
	        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            throw 'not implemented';
	        };
	        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	            throw 'not implemented';
	        };
	        return EventManagerPlugin;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var SharedStylesHost = (function () {
	        function SharedStylesHost() {
	            /** @internal */
	            this._styles = [];
	            /** @internal */
	            this._stylesSet = new Set();
	        }
	        SharedStylesHost.prototype.addStyles = function (styles) {
	            var _this = this;
	            var additions = [];
	            styles.forEach(function (style) {
	                if (!_this._stylesSet.has(style)) {
	                    _this._stylesSet.add(style);
	                    _this._styles.push(style);
	                    additions.push(style);
	                }
	            });
	            this.onStylesAdded(additions);
	        };
	        SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	        SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	        SharedStylesHost.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        SharedStylesHost.ctorParameters = [];
	        return SharedStylesHost;
	    }());
	    var DomSharedStylesHost = (function (_super) {
	        __extends$4(DomSharedStylesHost, _super);
	        function DomSharedStylesHost(doc) {
	            _super.call(this);
	            this._hostNodes = new Set();
	            this._hostNodes.add(doc.head);
	        }
	        /** @internal */
	        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	            for (var i = 0; i < styles.length; i++) {
	                var style = styles[i];
	                getDOM().appendChild(host, getDOM().createStyleElement(style));
	            }
	        };
	        DomSharedStylesHost.prototype.addHost = function (hostNode) {
	            this._addStylesToHost(this._styles, hostNode);
	            this._hostNodes.add(hostNode);
	        };
	        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	            var _this = this;
	            this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	        };
	        DomSharedStylesHost.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSharedStylesHost.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	        ];
	        return DomSharedStylesHost;
	    }(SharedStylesHost));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var NAMESPACE_URIS = {
	        'xlink': 'http://www.w3.org/1999/xlink',
	        'svg': 'http://www.w3.org/2000/svg',
	        'xhtml': 'http://www.w3.org/1999/xhtml'
	    };
	    var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	    var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	    var DomRootRenderer = (function () {
	        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {
	            this.document = document;
	            this.eventManager = eventManager;
	            this.sharedStylesHost = sharedStylesHost;
	            this.animationDriver = animationDriver;
	            this.registeredComponents = new Map();
	        }
	        DomRootRenderer.prototype.renderComponent = function (componentProto) {
	            var renderer = this.registeredComponents.get(componentProto.id);
	            if (isBlank(renderer)) {
	                renderer = new DomRenderer(this, componentProto, this.animationDriver);
	                this.registeredComponents.set(componentProto.id, renderer);
	            }
	            return renderer;
	        };
	        return DomRootRenderer;
	    }());
	    var DomRootRenderer_ = (function (_super) {
	        __extends$3(DomRootRenderer_, _super);
	        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {
	            _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);
	        }
	        DomRootRenderer_.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomRootRenderer_.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	            { type: EventManager, },
	            { type: DomSharedStylesHost, },
	            { type: AnimationDriver, },
	        ];
	        return DomRootRenderer_;
	    }(DomRootRenderer));
	    var DomRenderer = (function () {
	        function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
	            this._rootRenderer = _rootRenderer;
	            this.componentProto = componentProto;
	            this._animationDriver = _animationDriver;
	            this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
	            if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {
	                this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	            }
	            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {
	                this._contentAttr = _shimContentAttribute(componentProto.id);
	                this._hostAttr = _shimHostAttribute(componentProto.id);
	            }
	            else {
	                this._contentAttr = null;
	                this._hostAttr = null;
	            }
	        }
	        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var el;
	            if (isString(selectorOrNode)) {
	                el = getDOM().querySelector(this._rootRenderer.document, selectorOrNode);
	                if (isBlank(el)) {
	                    throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	                }
	            }
	            else {
	                el = selectorOrNode;
	            }
	            getDOM().clearNodes(el);
	            return el;
	        };
	        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
	            var nsAndName = splitNamespace(name);
	            var el = isPresent(nsAndName[0]) ?
	                getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) :
	                getDOM().createElement(nsAndName[1]);
	            if (isPresent(this._contentAttr)) {
	                getDOM().setAttribute(el, this._contentAttr, '');
	            }
	            if (isPresent(parent)) {
	                getDOM().appendChild(parent, el);
	            }
	            return el;
	        };
	        DomRenderer.prototype.createViewRoot = function (hostElement) {
	            var nodesParent;
	            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
	                nodesParent = getDOM().createShadowRoot(hostElement);
	                this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	                for (var i = 0; i < this._styles.length; i++) {
	                    getDOM().appendChild(nodesParent, getDOM().createStyleElement(this._styles[i]));
	                }
	            }
	            else {
	                if (isPresent(this._hostAttr)) {
	                    getDOM().setAttribute(hostElement, this._hostAttr, '');
	                }
	                nodesParent = hostElement;
	            }
	            return nodesParent;
	        };
	        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var comment = getDOM().createComment(TEMPLATE_COMMENT_TEXT);
	            if (isPresent(parentElement)) {
	                getDOM().appendChild(parentElement, comment);
	            }
	            return comment;
	        };
	        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var node = getDOM().createTextNode(value);
	            if (isPresent(parentElement)) {
	                getDOM().appendChild(parentElement, node);
	            }
	            return node;
	        };
	        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            if (isBlank(parentElement))
	                return;
	            appendNodes(parentElement, nodes);
	        };
	        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
	        DomRenderer.prototype.detachView = function (viewRootNodes) {
	            for (var i = 0; i < viewRootNodes.length; i++) {
	                getDOM().remove(viewRootNodes[i]);
	            }
	        };
	        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && isPresent(hostElement)) {
	                this._rootRenderer.sharedStylesHost.removeHost(getDOM().getShadowRoot(hostElement));
	            }
	        };
	        DomRenderer.prototype.listen = function (renderElement, name, callback) {
	            return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	        };
	        DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	        };
	        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            getDOM().setProperty(renderElement, propertyName, propertyValue);
	        };
	        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var attrNs;
	            var nsAndName = splitNamespace(attributeName);
	            if (isPresent(nsAndName[0])) {
	                attributeName = nsAndName[0] + ':' + nsAndName[1];
	                attrNs = NAMESPACE_URIS[nsAndName[0]];
	            }
	            if (isPresent(attributeValue)) {
	                if (isPresent(attrNs)) {
	                    getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
	                }
	                else {
	                    getDOM().setAttribute(renderElement, attributeName, attributeValue);
	                }
	            }
	            else {
	                if (isPresent(attrNs)) {
	                    getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);
	                }
	                else {
	                    getDOM().removeAttribute(renderElement, attributeName);
	                }
	            }
	        };
	        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            var dashCasedPropertyName = camelCaseToDashCase(propertyName);
	            if (getDOM().isCommentNode(renderElement)) {
	                var existingBindings = StringWrapper.replaceAll(getDOM().getText(renderElement), /\n/g, '')
	                    .match(TEMPLATE_BINDINGS_EXP);
	                var parsedBindings = Json.parse(existingBindings[1]);
	                parsedBindings[dashCasedPropertyName] = propertyValue;
	                getDOM().setText(renderElement, StringWrapper.replace(TEMPLATE_COMMENT_TEXT, '{}', Json.stringify(parsedBindings)));
	            }
	            else {
	                this.setElementAttribute(renderElement, propertyName, propertyValue);
	            }
	        };
	        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            if (isAdd) {
	                getDOM().addClass(renderElement, className);
	            }
	            else {
	                getDOM().removeClass(renderElement, className);
	            }
	        };
	        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            if (isPresent(styleValue)) {
	                getDOM().setStyle(renderElement, styleName, stringify(styleValue));
	            }
	            else {
	                getDOM().removeStyle(renderElement, styleName);
	            }
	        };
	        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            getDOM().invoke(renderElement, methodName, args);
	        };
	        DomRenderer.prototype.setText = function (renderNode, text) { getDOM().setText(renderNode, text); };
	        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing) {
	            return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
	        };
	        return DomRenderer;
	    }());
	    function moveNodesAfterSibling(sibling /** TODO #9100 */, nodes /** TODO #9100 */) {
	        var parent = getDOM().parentElement(sibling);
	        if (nodes.length > 0 && isPresent(parent)) {
	            var nextSibling = getDOM().nextSibling(sibling);
	            if (isPresent(nextSibling)) {
	                for (var i = 0; i < nodes.length; i++) {
	                    getDOM().insertBefore(nextSibling, nodes[i]);
	                }
	            }
	            else {
	                for (var i = 0; i < nodes.length; i++) {
	                    getDOM().appendChild(parent, nodes[i]);
	                }
	            }
	        }
	    }
	    function appendNodes(parent /** TODO #9100 */, nodes /** TODO #9100 */) {
	        for (var i = 0; i < nodes.length; i++) {
	            getDOM().appendChild(parent, nodes[i]);
	        }
	    }
	    function decoratePreventDefault(eventHandler) {
	        return function (event /** TODO #9100 */) {
	            var allowDefaultBehavior = eventHandler(event);
	            if (allowDefaultBehavior === false) {
	                // TODO(tbosch): move preventDefault into event plugins...
	                getDOM().preventDefault(event);
	            }
	        };
	    }
	    var COMPONENT_REGEX = /%COMP%/g;
	    var COMPONENT_VARIABLE = '%COMP%';
	    var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	    var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	    function _shimContentAttribute(componentShortId) {
	        return StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
	    }
	    function _shimHostAttribute(componentShortId) {
	        return StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentShortId);
	    }
	    function _flattenStyles(compId, styles, target) {
	        for (var i = 0; i < styles.length; i++) {
	            var style = styles[i];
	            if (isArray(style)) {
	                _flattenStyles(compId, style, target);
	            }
	            else {
	                style = StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
	                target.push(style);
	            }
	        }
	        return target;
	    }
	    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	    function splitNamespace(name) {
	        if (name[0] != ':') {
	            return [null, name];
	        }
	        var match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }

	    var CORE_TOKENS = {
	        'ApplicationRef': _angular_core.ApplicationRef,
	        'NgZone': _angular_core.NgZone
	    };
	    var INSPECT_GLOBAL_NAME = 'ng.probe';
	    var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	    /**
	     * Returns a {@link DebugElement} for the given native DOM element, or
	     * null if the given native element does not have an Angular view associated
	     * with it.
	     */
	    function inspectNativeElement(element /** TODO #9100 */) {
	        return _angular_core.getDebugNode(element);
	    }
	    /**
	     * @experimental
	     */
	    var NgProbeToken = (function () {
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    function _createConditionalRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {
	        if (_angular_core.isDevMode()) {
	            return _createRootRenderer(rootRenderer, extraTokens);
	        }
	        return rootRenderer;
	    }
	    function _createRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {
	        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
	        return new DebugDomRootRenderer(rootRenderer);
	    }
	    function _ngProbeTokensToMap(tokens) {
	        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	    }
	    /**
	     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	     */
	    var ELEMENT_PROBE_PROVIDERS = [{
	            provide: _angular_core.RootRenderer,
	            useFactory: _createConditionalRootRenderer,
	            deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
	        }];
	    var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
	            provide: _angular_core.RootRenderer,
	            useFactory: _createRootRenderer,
	            deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
	        }];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var DomEventsPlugin = (function (_super) {
	        __extends$5(DomEventsPlugin, _super);
	        function DomEventsPlugin() {
	            _super.apply(this, arguments);
	        }
	        // This plugin should come last in the list of plugins, because it accepts all
	        // events.
	        DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var zone = this.manager.getZone();
	            var outsideHandler = function (event /** TODO #9100 */) { return zone.runGuarded(function () { return handler(event); }); };
	            return this.manager.getZone().runOutsideAngular(function () { return getDOM().onAndCancel(element, eventName, outsideHandler); });
	        };
	        DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler) {
	            var element = getDOM().getGlobalEventTarget(target);
	            var zone = this.manager.getZone();
	            var outsideHandler = function (event /** TODO #9100 */) { return zone.runGuarded(function () { return handler(event); }); };
	            return this.manager.getZone().runOutsideAngular(function () { return getDOM().onAndCancel(element, eventName, outsideHandler); });
	        };
	        DomEventsPlugin.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomEventsPlugin.ctorParameters = [];
	        return DomEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _eventNames = {
	        // pan
	        'pan': true,
	        'panstart': true,
	        'panmove': true,
	        'panend': true,
	        'pancancel': true,
	        'panleft': true,
	        'panright': true,
	        'panup': true,
	        'pandown': true,
	        // pinch
	        'pinch': true,
	        'pinchstart': true,
	        'pinchmove': true,
	        'pinchend': true,
	        'pinchcancel': true,
	        'pinchin': true,
	        'pinchout': true,
	        // press
	        'press': true,
	        'pressup': true,
	        // rotate
	        'rotate': true,
	        'rotatestart': true,
	        'rotatemove': true,
	        'rotateend': true,
	        'rotatecancel': true,
	        // swipe
	        'swipe': true,
	        'swipeleft': true,
	        'swiperight': true,
	        'swipeup': true,
	        'swipedown': true,
	        // tap
	        'tap': true,
	    };
	    var HammerGesturesPluginCommon = (function (_super) {
	        __extends$7(HammerGesturesPluginCommon, _super);
	        function HammerGesturesPluginCommon() {
	            _super.call(this);
	        }
	        HammerGesturesPluginCommon.prototype.supports = function (eventName) {
	            eventName = eventName.toLowerCase();
	            return StringMapWrapper.contains(_eventNames, eventName);
	        };
	        return HammerGesturesPluginCommon;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
	     * Hammer gestures.
	     *
	     * @experimental
	     */
	    var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken('HammerGestureConfig');
	    /**
	     * @experimental
	     */
	    var HammerGestureConfig = (function () {
	        function HammerGestureConfig() {
	            this.events = [];
	            this.overrides = {};
	        }
	        HammerGestureConfig.prototype.buildHammer = function (element) {
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            for (var eventName in this.overrides) {
	                mc.get(eventName).set(this.overrides[eventName]);
	            }
	            return mc;
	        };
	        HammerGestureConfig.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGestureConfig.ctorParameters = [];
	        return HammerGestureConfig;
	    }());
	    var HammerGesturesPlugin = (function (_super) {
	        __extends$6(HammerGesturesPlugin, _super);
	        function HammerGesturesPlugin(_config) {
	            _super.call(this);
	            this._config = _config;
	        }
	        HammerGesturesPlugin.prototype.supports = function (eventName) {
	            if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName))
	                return false;
	            if (!isPresent(window['Hammer'])) {
	                throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	            }
	            return true;
	        };
	        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var _this = this;
	            var zone = this.manager.getZone();
	            eventName = eventName.toLowerCase();
	            return zone.runOutsideAngular(function () {
	                // Creating the manager bind events, must be done outside of angular
	                var mc = _this._config.buildHammer(element);
	                var callback = function (eventObj /** TODO #???? */) {
	                    zone.runGuarded(function () { handler(eventObj); });
	                };
	                mc.on(eventName, callback);
	                return function () { mc.off(eventName, callback); };
	            });
	        };
	        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	        HammerGesturesPlugin.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGesturesPlugin.ctorParameters = [
	            { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	        ];
	        return HammerGesturesPlugin;
	    }(HammerGesturesPluginCommon));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	    var modifierKeyGetters = {
	        'alt': function (event) { return event.altKey; },
	        'control': function (event) { return event.ctrlKey; },
	        'meta': function (event) { return event.metaKey; },
	        'shift': function (event) { return event.shiftKey; }
	    };
	    /**
	     * @experimental
	     */
	    var KeyEventsPlugin = (function (_super) {
	        __extends$8(KeyEventsPlugin, _super);
	        function KeyEventsPlugin() {
	            _super.call(this);
	        }
	        KeyEventsPlugin.prototype.supports = function (eventName) {
	            return isPresent(KeyEventsPlugin.parseEventName(eventName));
	        };
	        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	            var outsideHandler = KeyEventsPlugin.eventCallback(element, StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	            return this.manager.getZone().runOutsideAngular(function () {
	                return getDOM().onAndCancel(element, StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	            });
	        };
	        KeyEventsPlugin.parseEventName = function (eventName) {
	            var parts = eventName.toLowerCase().split('.');
	            var domEventName = parts.shift();
	            if ((parts.length === 0) ||
	                !(StringWrapper.equals(domEventName, 'keydown') ||
	                    StringWrapper.equals(domEventName, 'keyup'))) {
	                return null;
	            }
	            var key = KeyEventsPlugin._normalizeKey(parts.pop());
	            var fullKey = '';
	            modifierKeys.forEach(function (modifierName) {
	                if (ListWrapper.contains(parts, modifierName)) {
	                    ListWrapper.remove(parts, modifierName);
	                    fullKey += modifierName + '.';
	                }
	            });
	            fullKey += key;
	            if (parts.length != 0 || key.length === 0) {
	                // returning null instead of throwing to let another plugin process the event
	                return null;
	            }
	            var result = StringMapWrapper.create();
	            StringMapWrapper.set(result, 'domEventName', domEventName);
	            StringMapWrapper.set(result, 'fullKey', fullKey);
	            return result;
	        };
	        KeyEventsPlugin.getEventFullKey = function (event) {
	            var fullKey = '';
	            var key = getDOM().getEventKey(event);
	            key = key.toLowerCase();
	            if (StringWrapper.equals(key, ' ')) {
	                key = 'space'; // for readability
	            }
	            else if (StringWrapper.equals(key, '.')) {
	                key = 'dot'; // because '.' is used as a separator in event names
	            }
	            modifierKeys.forEach(function (modifierName) {
	                if (modifierName != key) {
	                    var modifierGetter = StringMapWrapper.get(modifierKeyGetters, modifierName);
	                    if (modifierGetter(event)) {
	                        fullKey += modifierName + '.';
	                    }
	                }
	            });
	            fullKey += key;
	            return fullKey;
	        };
	        KeyEventsPlugin.eventCallback = function (element, fullKey, handler, zone) {
	            return function (event /** TODO #9100 */) {
	                if (StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
	                    zone.runGuarded(function () { return handler(event); });
	                }
	            };
	        };
	        /** @internal */
	        KeyEventsPlugin._normalizeKey = function (keyName) {
	            // TODO: switch to a StringMap if the mapping grows too much
	            switch (keyName) {
	                case 'esc':
	                    return 'escape';
	                default:
	                    return keyName;
	            }
	        };
	        KeyEventsPlugin.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        KeyEventsPlugin.ctorParameters = [];
	        return KeyEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * A pattern that recognizes a commonly useful subset of URLs that are safe.
	     *
	     * This regular expression matches a subset of URLs that will not cause script
	     * execution if used in URL context within a HTML document. Specifically, this
	     * regular expression matches if (comment from here on and regex copied from
	     * Soy's EscapingConventions):
	     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	     * (2) or no protocol.  A protocol must be followed by a colon. The below
	     *     allows that by allowing colons only after one of the characters [/?#].
	     *     A colon after a hash (#) must be in the fragment.
	     *     Otherwise, a colon after a (?) must be in a query.
	     *     Otherwise, a colon after a single solidus (/) must be in a path.
	     *     Otherwise, a colon after a double solidus (//) must be in the authority
	     *     (before port).
	     *
	     * The pattern disallows &, used in HTML entity declarations before
	     * one of the characters in [/?#]. This disallows HTML entities used in the
	     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	     * It also disallows HTML entities in the first path part of a relative path,
	     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	     * that. More importantly, it disallows masking of a colon,
	     * e.g. "javascript&#58;...".
	     *
	     * This regular expression was taken from the Closure sanitization library.
	     */
	    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	    function sanitizeUrl(url) {
	        url = String(url);
	        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	            return url;
	        if (_angular_core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	        }
	        return 'unsafe:' + url;
	    }
	    function sanitizeSrcset(srcset) {
	        srcset = String(srcset);
	        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	    }

	    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	    var inertElement = null;
	    /** Lazily initialized to make sure the DOM adapter gets set before use. */
	    var DOM = null;
	    /** Returns an HTML element that is guaranteed to not execute code when creating elements in it. */
	    function getInertElement() {
	        if (inertElement)
	            return inertElement;
	        DOM = getDOM();
	        // Prefer using <template> element if supported.
	        var templateEl = DOM.createElement('template');
	        if ('content' in templateEl)
	            return templateEl;
	        var doc = DOM.createHtmlDocument();
	        inertElement = DOM.querySelector(doc, 'body');
	        if (inertElement == null) {
	            // usually there should be only one body element in the document, but IE doesn't have any, so we
	            // need to create one.
	            var html = DOM.createElement('html', doc);
	            inertElement = DOM.createElement('body', doc);
	            DOM.appendChild(html, inertElement);
	            DOM.appendChild(doc, html);
	        }
	        return inertElement;
	    }
	    function tagSet(tags) {
	        var res = {};
	        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	            var t = _a[_i];
	            res[t] = true;
	        }
	        return res;
	    }
	    function merge() {
	        var sets = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sets[_i - 0] = arguments[_i];
	        }
	        var res = {};
	        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	            var s = sets_1[_a];
	            for (var v in s) {
	                if (s.hasOwnProperty(v))
	                    res[v] = true;
	            }
	        }
	        return res;
	    }
	    // Good source of info about elements and attributes
	    // http://dev.w3.org/html5/spec/Overview.html#semantics
	    // http://simon.html5.org/html-elements
	    // Safe Void Elements - HTML5
	    // http://dev.w3.org/html5/spec/Overview.html#void-elements
	    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	    // Elements that you can, intentionally, leave open (and which close themselves)
	    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
	    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	    // Safe Block Elements - HTML5
	    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	    // Inline Elements - HTML5
	    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	    // Attributes that have href and hence need to be sanitized
	    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	    // Attributes that have special href set hence need to be sanitized
	    var SRCSET_ATTRS = tagSet('srcset');
	    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	        'valign,value,vspace,width');
	    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	    // innerHTML is required, SVG attributes should be added here.
	    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	    // can be sanitized, but they increase security surface area without a legitimate use case, so they
	    // are left out here.
	    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	    /**
	     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	     * attributes.
	     */
	    var SanitizingHtmlSerializer = (function () {
	        function SanitizingHtmlSerializer() {
	            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
	            // because characters were re-encoded.
	            this.sanitizedSomething = false;
	            this.buf = [];
	        }
	        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	            // However this code never accesses properties off of `document` before deleting its contents
	            // again, so it shouldn't be vulnerable to DOM clobbering.
	            var current = el.firstChild;
	            while (current) {
	                if (DOM.isElementNode(current)) {
	                    this.startElement(current);
	                }
	                else if (DOM.isTextNode(current)) {
	                    this.chars(DOM.nodeValue(current));
	                }
	                else {
	                    // Strip non-element, non-text nodes.
	                    this.sanitizedSomething = true;
	                }
	                if (DOM.firstChild(current)) {
	                    current = DOM.firstChild(current);
	                    continue;
	                }
	                while (current) {
	                    // Leaving the element. Walk up and to the right, closing tags as we go.
	                    if (DOM.isElementNode(current)) {
	                        this.endElement(current);
	                    }
	                    if (DOM.nextSibling(current)) {
	                        current = DOM.nextSibling(current);
	                        break;
	                    }
	                    current = DOM.parentElement(current);
	                }
	            }
	            return this.buf.join('');
	        };
	        SanitizingHtmlSerializer.prototype.startElement = function (element) {
	            var _this = this;
	            var tagName = DOM.nodeName(element).toLowerCase();
	            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.sanitizedSomething = true;
	                return;
	            }
	            this.buf.push('<');
	            this.buf.push(tagName);
	            DOM.attributeMap(element).forEach(function (value, attrName) {
	                var lower = attrName.toLowerCase();
	                if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                    _this.sanitizedSomething = true;
	                    return;
	                }
	                // TODO(martinprobst): Special case image URIs for data:image/...
	                if (URI_ATTRS[lower])
	                    value = sanitizeUrl(value);
	                if (SRCSET_ATTRS[lower])
	                    value = sanitizeSrcset(value);
	                _this.buf.push(' ');
	                _this.buf.push(attrName);
	                _this.buf.push('="');
	                _this.buf.push(encodeEntities(value));
	                _this.buf.push('"');
	            });
	            this.buf.push('>');
	        };
	        SanitizingHtmlSerializer.prototype.endElement = function (current) {
	            var tagName = DOM.nodeName(current).toLowerCase();
	            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.buf.push('</');
	                this.buf.push(tagName);
	                this.buf.push('>');
	            }
	        };
	        SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
	        return SanitizingHtmlSerializer;
	    }());
	    // Regular Expressions for parsing tags and attributes
	    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	    // ! to ~ is the ASCII range.
	    var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	    /**
	     * Escapes all potentially dangerous characters, so that the
	     * resulting string can be safely inserted into attribute or
	     * element text.
	     * @param value
	     * @returns {string} escaped text
	     */
	    function encodeEntities(value) {
	        return value.replace(/&/g, '&amp;')
	            .replace(SURROGATE_PAIR_REGEXP, function (match) {
	            var hi = match.charCodeAt(0);
	            var low = match.charCodeAt(1);
	            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	        })
	            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;');
	    }
	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	     *
	     * This is undesirable since we don't want to allow any of these custom attributes. This method
	     * strips them all.
	     */
	    function stripCustomNsAttrs(el) {
	        DOM.attributeMap(el).forEach(function (_, attrName) {
	            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	                DOM.removeAttribute(el, attrName);
	            }
	        });
	        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	            var n = _a[_i];
	            if (DOM.isElementNode(n))
	                stripCustomNsAttrs(n);
	        }
	    }
	    /**
	     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	     * the DOM in a browser environment.
	     */
	    function sanitizeHtml(unsafeHtmlInput) {
	        try {
	            var containerEl = getInertElement();
	            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	            var mXSSAttempts = 5;
	            var parsedHtml = unsafeHtml;
	            do {
	                if (mXSSAttempts === 0) {
	                    throw new Error('Failed to sanitize html because the input is unstable');
	                }
	                mXSSAttempts--;
	                unsafeHtml = parsedHtml;
	                DOM.setInnerHTML(containerEl, unsafeHtml);
	                if (DOM.defaultDoc().documentMode) {
	                    // strip custom-namespaced attributes on IE<=11
	                    stripCustomNsAttrs(containerEl);
	                }
	                parsedHtml = DOM.getInnerHTML(containerEl);
	            } while (unsafeHtml !== parsedHtml);
	            var sanitizer = new SanitizingHtmlSerializer();
	            var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	            // Clear out the body element.
	            var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
	            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
	                var child = _a[_i];
	                DOM.removeChild(parent_1, child);
	            }
	            if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
	                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	            }
	            return safeHtml;
	        }
	        catch (e) {
	            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	            inertElement = null;
	            throw e;
	        }
	    }

	    /**
	     * Regular expression for safe style values.
	     *
	     * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	     *
	     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	     * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	     * of XSS.
	     *
	     * The function expression checks only for XSS safety, not for CSS validity.
	     *
	     * This regular expression was taken from the Closure sanitization library, and augmented for
	     * transformation values.
	     */
	    var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	    var COLOR_FNS = '(?:rgb|hsl)a?';
	    var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
	    var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
	    /**
	     * Matches a `url(...)` value with an arbitrary argument as long as it does
	     * not contain parentheses.
	     *
	     * The URL value still needs to be sanitized separately.
	     *
	     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	     * by observing whether scroll bars are displayed, or character ranges used by a font face
	     * definition.
	     *
	     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	     * binding a URL value without further cooperation from the page will cause an information leak, and
	     * if so, it is just a leak, not a full blown XSS vulnerability.
	     *
	     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	     * code is permissive and allows URLs that sanitize otherwise.
	     */
	    var URL_RE = /^url\(([^)]+)\)$/;
	    /**
	     * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	     * that neither escape (\) nor any other character that could result in
	     * breaking out of a string parsing context are allowed;
	     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	     *
	     * This code was taken from the Closure sanitization library.
	     */
	    function hasBalancedQuotes(value) {
	        var outsideSingle = true;
	        var outsideDouble = true;
	        for (var i = 0; i < value.length; i++) {
	            var c = value.charAt(i);
	            if (c === '\'' && outsideDouble) {
	                outsideSingle = !outsideSingle;
	            }
	            else if (c === '"' && outsideSingle) {
	                outsideDouble = !outsideDouble;
	            }
	        }
	        return outsideSingle && outsideDouble;
	    }
	    /**
	     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	     * value) and returns a value that is safe to use in a browser environment.
	     */
	    function sanitizeStyle(value) {
	        value = String(value).trim(); // Make sure it's actually a string.
	        if (!value)
	            return '';
	        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	        // reasoning behind this.
	        var urlMatch = value.match(URL_RE);
	        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	            return value; // Safe style values.
	        }
	        if (_angular_core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	        }
	        return 'unsafe';
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	     * values to be safe to use in the different DOM contexts.
	     *
	     * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	     * the website.
	     *
	     * In specific situations, it might be necessary to disable sanitization, for example if the
	     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	     * methods, and then binding to that value from the template.
	     *
	     * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	     * Cross Site Scripting (XSS) security bug!
	     *
	     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	     * close as possible to the source of the value, to make it easy to verify no security bug is
	     * created by its use.
	     *
	     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	     * code. The sanitizer leaves safe values intact.
	     *
	     * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	     * sanitization for the value passed in. Carefully check and audit all values and code paths going
	     * into this call. Make sure any user data is appropriately escaped for this security context.
	     * For more detail, see the [Security Guide](http://g.co/ng/security).
	     *
	     * @stable
	     */
	    var DomSanitizer = (function () {
	        function DomSanitizer() {
	        }
	        return DomSanitizer;
	    }());
	    var DomSanitizerImpl = (function (_super) {
	        __extends$9(DomSanitizerImpl, _super);
	        function DomSanitizerImpl() {
	            _super.apply(this, arguments);
	        }
	        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	            if (value == null)
	                return null;
	            switch (ctx) {
	                case _angular_core.SecurityContext.NONE:
	                    return value;
	                case _angular_core.SecurityContext.HTML:
	                    if (value instanceof SafeHtmlImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'HTML');
	                    return sanitizeHtml(String(value));
	                case _angular_core.SecurityContext.STYLE:
	                    if (value instanceof SafeStyleImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Style');
	                    return sanitizeStyle(value);
	                case _angular_core.SecurityContext.SCRIPT:
	                    if (value instanceof SafeScriptImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Script');
	                    throw new Error('unsafe value used in a script context');
	                case _angular_core.SecurityContext.URL:
	                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                        // Allow resource URLs in URL contexts, they are strictly more trusted.
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'URL');
	                    return sanitizeUrl(String(value));
	                case _angular_core.SecurityContext.RESOURCE_URL:
	                    if (value instanceof SafeResourceUrlImpl) {
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'ResourceURL');
	                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	                default:
	                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	            }
	        };
	        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	            if (value instanceof SafeValueImpl) {
	                throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
	                    "(see http://g.co/ng/security#xss)");
	            }
	        };
	        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	            return new SafeResourceUrlImpl(value);
	        };
	        DomSanitizerImpl.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSanitizerImpl.ctorParameters = [];
	        return DomSanitizerImpl;
	    }(DomSanitizer));
	    var SafeValueImpl = (function () {
	        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	            // empty
	        }
	        SafeValueImpl.prototype.toString = function () {
	            return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
	                " (see http://g.co/ng/security#xss)";
	        };
	        return SafeValueImpl;
	    }());
	    var SafeHtmlImpl = (function (_super) {
	        __extends$9(SafeHtmlImpl, _super);
	        function SafeHtmlImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	        return SafeHtmlImpl;
	    }(SafeValueImpl));
	    var SafeStyleImpl = (function (_super) {
	        __extends$9(SafeStyleImpl, _super);
	        function SafeStyleImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	        return SafeStyleImpl;
	    }(SafeValueImpl));
	    var SafeScriptImpl = (function (_super) {
	        __extends$9(SafeScriptImpl, _super);
	        function SafeScriptImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	        return SafeScriptImpl;
	    }(SafeValueImpl));
	    var SafeUrlImpl = (function (_super) {
	        __extends$9(SafeUrlImpl, _super);
	        function SafeUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	        return SafeUrlImpl;
	    }(SafeValueImpl));
	    var SafeResourceUrlImpl = (function (_super) {
	        __extends$9(SafeResourceUrlImpl, _super);
	        function SafeResourceUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	        return SafeResourceUrlImpl;
	    }(SafeValueImpl));

	    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	        { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	        { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }
	    ];
	    /**
	     * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	     * Attacker-controlled data introduced by an unsanitized provider could expose your
	     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	     * @experimental
	     */
	    var BROWSER_SANITIZATION_PROVIDERS = [
	        { provide: _angular_core.Sanitizer, useExisting: DomSanitizer },
	        { provide: DomSanitizer, useClass: DomSanitizerImpl },
	    ];
	    /**
	     * @stable
	     */
	    var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	    function initDomAdapter() {
	        BrowserDomAdapter.makeCurrent();
	        BrowserGetTestability.init();
	    }
	    function errorHandler() {
	        return new _angular_core.ErrorHandler();
	    }
	    function _document() {
	        return getDOM().defaultDoc();
	    }
	    function _resolveDefaultAnimationDriver() {
	        if (getDOM().supportsWebAnimation()) {
	            return new WebAnimationsDriver();
	        }
	        return AnimationDriver.NOOP;
	    }
	    /**
	     * The ng module for the browser.
	     *
	     * @stable
	     */
	    var BrowserModule = (function () {
	        function BrowserModule(parentModule) {
	            if (parentModule) {
	                throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	            }
	        }
	        BrowserModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        providers: [
	                            BROWSER_SANITIZATION_PROVIDERS, { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                            { provide: DOCUMENT, useFactory: _document, deps: [] },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                            { provide: DomRootRenderer, useClass: DomRootRenderer_ },
	                            { provide: _angular_core.RootRenderer, useExisting: DomRootRenderer },
	                            { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                            { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
	                            _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
	                        ],
	                        exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
	                    },] },
	        ];
	        /** @nocollapse */
	        BrowserModule.ctorParameters = [
	            { type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },
	        ];
	        return BrowserModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * JS version of browser APIs. This library can only run in the browser.
	     */
	    var win = typeof window !== 'undefined' && window || {};

	    var ChangeDetectionPerfRecord = (function () {
	        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	            this.msPerTick = msPerTick;
	            this.numTicks = numTicks;
	        }
	        return ChangeDetectionPerfRecord;
	    }());
	    /**
	     * Entry point for all Angular debug tools. This object corresponds to the `ng`
	     * global variable accessible in the dev console.
	     */
	    var AngularTools = (function () {
	        function AngularTools(ref) {
	            this.profiler = new AngularProfiler(ref);
	        }
	        return AngularTools;
	    }());
	    /**
	     * Entry point for all Angular profiling-related debug tools. This object
	     * corresponds to the `ng.profiler` in the dev console.
	     */
	    var AngularProfiler = (function () {
	        function AngularProfiler(ref) {
	            this.appRef = ref.injector.get(_angular_core.ApplicationRef);
	        }
	        /**
	         * Exercises change detection in a loop and then prints the average amount of
	         * time in milliseconds how long a single round of change detection takes for
	         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	         * of 500 milliseconds.
	         *
	         * Optionally, a user may pass a `config` parameter containing a map of
	         * options. Supported options are:
	         *
	         * `record` (boolean) - causes the profiler to record a CPU profile while
	         * it exercises the change detector. Example:
	         *
	         * ```
	         * ng.profiler.timeChangeDetection({record: true})
	         * ```
	         */
	        AngularProfiler.prototype.timeChangeDetection = function (config) {
	            var record = isPresent(config) && config['record'];
	            var profileName = 'Change Detection';
	            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	            var isProfilerAvailable = isPresent(win.console.profile);
	            if (record && isProfilerAvailable) {
	                win.console.profile(profileName);
	            }
	            var start = getDOM().performanceNow();
	            var numTicks = 0;
	            while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	                this.appRef.tick();
	                numTicks++;
	            }
	            var end = getDOM().performanceNow();
	            if (record && isProfilerAvailable) {
	                // need to cast to <any> because type checker thinks there's no argument
	                // while in fact there is:
	                //
	                // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	                win.console.profileEnd(profileName);
	            }
	            var msPerTick = (end - start) / numTicks;
	            win.console.log("ran " + numTicks + " change detection cycles");
	            win.console.log(NumberWrapper.toFixed(msPerTick, 2) + " ms per check");
	            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	        };
	        return AngularProfiler;
	    }());

	    var context = global$1;
	    /**
	     * Enabled Angular 2 debug tools that are accessible via your browser's
	     * developer console.
	     *
	     * Usage:
	     *
	     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	     * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	     *    then hit Enter.
	     *
	     * @experimental All debugging apis are currently experimental.
	     */
	    function enableDebugTools(ref) {
	        context.ng = new AngularTools(ref);
	        return ref;
	    }
	    /**
	     * Disables Angular 2 tools.
	     *
	     * @experimental All debugging apis are currently experimental.
	     */
	    function disableDebugTools() {
	        delete context.ng;
	    }

	    /**
	     * Predicates for use with {@link DebugElement}'s query functions.
	     *
	     * @experimental All debugging apis are currently experimental.
	     */
	    var By = (function () {
	        function By() {
	        }
	        /**
	         * Match all elements.
	         *
	         * ## Example
	         *
	         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	         */
	        By.all = function () { return function (debugElement) { return true; }; };
	        /**
	         * Match elements by the given CSS selector.
	         *
	         * ## Example
	         *
	         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	         */
	        By.css = function (selector) {
	            return function (debugElement) {
	                return isPresent(debugElement.nativeElement) ?
	                    getDOM().elementMatches(debugElement.nativeElement, selector) :
	                    false;
	            };
	        };
	        /**
	         * Match elements that have the given directive present.
	         *
	         * ## Example
	         *
	         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	         */
	        By.directive = function (type) {
	            return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	        };
	        return By;
	    }());

	    var __platform_browser_private__ = {
	        BrowserPlatformLocation: BrowserPlatformLocation,
	        DomAdapter: DomAdapter,
	        BrowserDomAdapter: BrowserDomAdapter,
	        BrowserGetTestability: BrowserGetTestability,
	        getDOM: getDOM,
	        setRootDomAdapter: setRootDomAdapter,
	        DomRootRenderer_: DomRootRenderer_,
	        DomRootRenderer: DomRootRenderer,
	        DomSharedStylesHost: DomSharedStylesHost,
	        SharedStylesHost: SharedStylesHost,
	        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
	        DomEventsPlugin: DomEventsPlugin,
	        KeyEventsPlugin: KeyEventsPlugin,
	        HammerGesturesPlugin: HammerGesturesPlugin,
	        initDomAdapter: initDomAdapter,
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS
	    };

	    exports.BrowserModule = BrowserModule;
	    exports.platformBrowser = platformBrowser;
	    exports.Title = Title;
	    exports.disableDebugTools = disableDebugTools;
	    exports.enableDebugTools = enableDebugTools;
	    exports.AnimationDriver = AnimationDriver;
	    exports.By = By;
	    exports.NgProbeToken = NgProbeToken;
	    exports.DOCUMENT = DOCUMENT;
	    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	    exports.EventManager = EventManager;
	    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	    exports.HammerGestureConfig = HammerGestureConfig;
	    exports.DomSanitizer = DomSanitizer;
	    exports.__platform_browser_private__ = __platform_browser_private__;

	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.0.0
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(7)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * This class should not be used directly by an application developer. Instead, use
	     * {@link Location}.
	     *
	     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	     * agnostic.
	     * This means that we can have different implementation of `PlatformLocation` for the different
	     * platforms
	     * that angular supports. For example, the default `PlatformLocation` is {@link
	     * BrowserPlatformLocation},
	     * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
	     *
	     * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
	     * when
	     * they need to interact with the DOM apis like pushState, popState, etc...
	     *
	     * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
	     * by
	     * the {@link Router} in order to navigate between routes. Since all interactions between {@link
	     * Router} /
	     * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	     * class
	     * they are all platform independent.
	     *
	     * @stable
	     */
	    var PlatformLocation = (function () {
	        function PlatformLocation() {
	        }
	        Object.defineProperty(PlatformLocation.prototype, "pathname", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "search", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "hash", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return PlatformLocation;
	    }());

	    /**
	     * `LocationStrategy` is responsible for representing and reading route state
	     * from the browser's URL. Angular provides two strategies:
	     * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).
	     *
	     * This is used under the hood of the {@link Location} service.
	     *
	     * Applications should use the {@link Router} or {@link Location} services to
	     * interact with application route state.
	     *
	     * For instance, {@link HashLocationStrategy} produces URLs like
	     * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
	     * `http://example.com/foo` as an equivalent URL.
	     *
	     * See these two classes for more.
	     *
	     * @stable
	     */
	    var LocationStrategy = (function () {
	        function LocationStrategy() {
	        }
	        return LocationStrategy;
	    }());
	    /**
	     * The `APP_BASE_HREF` token represents the base href to be used with the
	     * {@link PathLocationStrategy}.
	     *
	     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	     * representing the URL prefix that should be preserved when generating and recognizing
	     * URLs.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {Component, NgModule} from '@angular/core';
	     * import {APP_BASE_HREF} from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var global$1 = globalScope;
	    function getTypeNameForDebugging(type) {
	        if (type['name']) {
	            return type['name'];
	        }
	        return typeof type;
	    }
	    var Date = global$1.Date;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj !== undefined && obj !== null;
	    }
	    function isBlank(obj) {
	        return obj === undefined || obj === null;
	    }
	    function isNumber(obj) {
	        return typeof obj === 'number';
	    }
	    function isString(obj) {
	        return typeof obj === 'string';
	    }
	    function isFunction(obj) {
	        return typeof obj === 'function';
	    }
	    function isStringMap(obj) {
	        return typeof obj === 'object' && obj !== null;
	    }
	    function isPromise(obj) {
	        // allow any Promise/A+ compliant thenable.
	        // It's up to the caller to ensure that obj.then conforms to the spec
	        return isPresent(obj) && isFunction(obj.then);
	    }
	    function isArray(obj) {
	        return Array.isArray(obj);
	    }
	    function isDate(obj) {
	        return obj instanceof Date && !isNaN(obj.valueOf());
	    }
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token === undefined || token === null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return token.overriddenName;
	        }
	        if (token.name) {
	            return token.name;
	        }
	        var res = token.toString();
	        var newLineIndex = res.indexOf('\n');
	        return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
	    }
	    var StringWrapper = (function () {
	        function StringWrapper() {
	        }
	        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };
	        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };
	        StringWrapper.split = function (s, regExp) { return s.split(regExp); };
	        StringWrapper.equals = function (s, s2) { return s === s2; };
	        StringWrapper.stripLeft = function (s, charVal) {
	            if (s && s.length) {
	                var pos = 0;
	                for (var i = 0; i < s.length; i++) {
	                    if (s[i] != charVal)
	                        break;
	                    pos++;
	                }
	                s = s.substring(pos);
	            }
	            return s;
	        };
	        StringWrapper.stripRight = function (s, charVal) {
	            if (s && s.length) {
	                var pos = s.length;
	                for (var i = s.length - 1; i >= 0; i--) {
	                    if (s[i] != charVal)
	                        break;
	                    pos--;
	                }
	                s = s.substring(0, pos);
	            }
	            return s;
	        };
	        StringWrapper.replace = function (s, from, replace) {
	            return s.replace(from, replace);
	        };
	        StringWrapper.replaceAll = function (s, from, replace) {
	            return s.replace(from, replace);
	        };
	        StringWrapper.slice = function (s, from, to) {
	            if (from === void 0) { from = 0; }
	            if (to === void 0) { to = null; }
	            return s.slice(from, to === null ? undefined : to);
	        };
	        StringWrapper.replaceAllMapped = function (s, from, cb) {
	            return s.replace(from, function () {
	                var matches = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    matches[_i - 0] = arguments[_i];
	                }
	                // Remove offset & string from the result array
	                matches.splice(-2, 2);
	                // The callback receives match, p1, ..., pn
	                return cb(matches);
	            });
	        };
	        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };
	        StringWrapper.compare = function (a, b) {
	            if (a < b) {
	                return -1;
	            }
	            else if (a > b) {
	                return 1;
	            }
	            else {
	                return 0;
	            }
	        };
	        return StringWrapper;
	    }());
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };
	        NumberWrapper.equal = function (a, b) { return a === b; };
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        NumberWrapper.parseInt = function (text, radix) {
	            if (radix == 10) {
	                if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else if (radix == 16) {
	                if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                    return parseInt(text, radix);
	                }
	            }
	            else {
	                var result = parseInt(text, radix);
	                if (!isNaN(result)) {
	                    return result;
	                }
	            }
	            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	        };
	        Object.defineProperty(NumberWrapper, "NaN", {
	            get: function () { return NaN; },
	            enumerable: true,
	            configurable: true
	        });
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        NumberWrapper.isNaN = function (value) { return isNaN(value); };
	        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };
	        return NumberWrapper;
	    }());
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    // Can't be all uppercase as our transpiler would think it is a special directive...
	    var Json = (function () {
	        function Json() {
	        }
	        Json.parse = function (s) { return global$1.JSON.parse(s); };
	        Json.stringify = function (data) {
	            // Dart doesn't take 3 arguments
	            return global$1.JSON.stringify(data, null, 2);
	        };
	        return Json;
	    }());
	    var DateWrapper = (function () {
	        function DateWrapper() {
	        }
	        DateWrapper.create = function (year, month, day, hour, minutes, seconds, milliseconds) {
	            if (month === void 0) { month = 1; }
	            if (day === void 0) { day = 1; }
	            if (hour === void 0) { hour = 0; }
	            if (minutes === void 0) { minutes = 0; }
	            if (seconds === void 0) { seconds = 0; }
	            if (milliseconds === void 0) { milliseconds = 0; }
	            return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
	        };
	        DateWrapper.fromISOString = function (str) { return new Date(str); };
	        DateWrapper.fromMillis = function (ms) { return new Date(ms); };
	        DateWrapper.toMillis = function (date) { return date.getTime(); };
	        DateWrapper.now = function () { return new Date(); };
	        DateWrapper.toJson = function (date) { return date.toJSON(); };
	        return DateWrapper;
	    }());
	    var _symbolIterator = null;
	    function getSymbolIterator() {
	        if (isBlank(_symbolIterator)) {
	            if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        Map.prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }

	    /**
	     * `Location` is a service that applications can use to interact with a browser's URL.
	     * Depending on which {@link LocationStrategy} is used, `Location` will either persist
	     * to the URL's path or the URL's hash segment.
	     *
	     * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
	     * `Location` only if you need to interact with or create normalized URLs outside of
	     * routing.
	     *
	     * `Location` is responsible for normalizing the URL against the application's base href.
	     * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	     * trailing slash:
	     * - `/my/app/user/123` is normalized
	     * - `my/app/user/123` **is not** normalized
	     * - `/my/app/user/123/` **is not** normalized
	     *
	     * ### Example
	     *
	     * ```
	     * import {Component} from '@angular/core';
	     * import {Location} from '@angular/common';
	     *
	     * @Component({selector: 'app-component'})
	     * class AppCmp {
	     *   constructor(location: Location) {
	     *     location.go('/foo');
	     *   }
	     * }
	     * ```
	     *
	     * @stable
	     */
	    var Location = (function () {
	        function Location(platformStrategy) {
	            var _this = this;
	            /** @internal */
	            this._subject = new _angular_core.EventEmitter();
	            this._platformStrategy = platformStrategy;
	            var browserBaseHref = this._platformStrategy.getBaseHref();
	            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	            this._platformStrategy.onPopState(function (ev) { _this._subject.emit({ 'url': _this.path(true), 'pop': true, 'type': ev.type }); });
	        }
	        /**
	         * Returns the normalized URL path.
	         */
	        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
	        // removed.
	        Location.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            return this.normalize(this._platformStrategy.path(includeHash));
	        };
	        /**
	         * Normalizes the given path and compares to the current normalized path.
	         */
	        Location.prototype.isCurrentPathEqualTo = function (path, query) {
	            if (query === void 0) { query = ''; }
	            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	        };
	        /**
	         * Given a string representing a URL, returns the normalized URL path without leading or
	         * trailing slashes.
	         */
	        Location.prototype.normalize = function (url) {
	            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	        };
	        /**
	         * Given a string representing a URL, returns the platform-specific external URL path.
	         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	         */
	        Location.prototype.prepareExternalUrl = function (url) {
	            if (url.length > 0 && !url.startsWith('/')) {
	                url = '/' + url;
	            }
	            return this._platformStrategy.prepareExternalUrl(url);
	        };
	        // TODO: rename this method to pushState
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and pushes a
	         * new item onto the platform's history.
	         */
	        Location.prototype.go = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.pushState(null, '', path, query);
	        };
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and replaces
	         * the top item on the platform's history stack.
	         */
	        Location.prototype.replaceState = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.replaceState(null, '', path, query);
	        };
	        /**
	         * Navigates forward in the platform's history.
	         */
	        Location.prototype.forward = function () { this._platformStrategy.forward(); };
	        /**
	         * Navigates back in the platform's history.
	         */
	        Location.prototype.back = function () { this._platformStrategy.back(); };
	        /**
	         * Subscribe to the platform's `popState` events.
	         */
	        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	            if (onThrow === void 0) { onThrow = null; }
	            if (onReturn === void 0) { onReturn = null; }
	            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	        };
	        /**
	         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	         * is.
	         */
	        Location.normalizeQueryParams = function (params) {
	            return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
	        };
	        /**
	         * Given 2 parts of a url, join them with a slash if needed.
	         */
	        Location.joinWithSlash = function (start, end) {
	            if (start.length == 0) {
	                return end;
	            }
	            if (end.length == 0) {
	                return start;
	            }
	            var slashes = 0;
	            if (start.endsWith('/')) {
	                slashes++;
	            }
	            if (end.startsWith('/')) {
	                slashes++;
	            }
	            if (slashes == 2) {
	                return start + end.substring(1);
	            }
	            if (slashes == 1) {
	                return start + end;
	            }
	            return start + '/' + end;
	        };
	        /**
	         * If url has a trailing slash, remove it, otherwise return url as is.
	         */
	        Location.stripTrailingSlash = function (url) {
	            if (/\/$/g.test(url)) {
	                url = url.substring(0, url.length - 1);
	            }
	            return url;
	        };
	        Location.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Location.ctorParameters = [
	            { type: LocationStrategy, },
	        ];
	        return Location;
	    }());
	    function _stripBaseHref(baseHref, url) {
	        if (baseHref.length > 0 && url.startsWith(baseHref)) {
	            return url.substring(baseHref.length);
	        }
	        return url;
	    }
	    function _stripIndexHtml(url) {
	        if (/\/index.html$/g.test(url)) {
	            // '/index.html'.length == 11
	            return url.substring(0, url.length - 11);
	        }
	        return url;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
	     * {@link Location} service to represent its state in the
	     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	     * of the browser's URL.
	     *
	     * For instance, if you call `location.go('/foo')`, the browser's URL will become
	     * `example.com#/foo`.
	     *
	     * ### Example
	     *
	     * ```
	     * import {Component, NgModule} from '@angular/core';
	     * import {
	     *   LocationStrategy,
	     *   HashLocationStrategy
	     * } from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var HashLocationStrategy = (function (_super) {
	        __extends(HashLocationStrategy, _super);
	        function HashLocationStrategy(_platformLocation, _baseHref) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            this._baseHref = '';
	            if (isPresent(_baseHref)) {
	                this._baseHref = _baseHref;
	            }
	        }
	        HashLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        HashLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            // the hash value is always prefixed with a `#`
	            // and if it is empty then it will stay empty
	            var path = this._platformLocation.hash;
	            if (!isPresent(path))
	                path = '#';
	            return path.length > 0 ? path.substring(1) : path;
	        };
	        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            var url = Location.joinWithSlash(this._baseHref, internal);
	            return url.length > 0 ? ('#' + url) : url;
	        };
	        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.pushState(state, title, url);
	        };
	        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.replaceState(state, title, url);
	        };
	        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        HashLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HashLocationStrategy.ctorParameters = [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ];
	        return HashLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
	     * {@link Location} service to represent its state in the
	     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	     * browser's URL.
	     *
	     * `PathLocationStrategy` is the default binding for {@link LocationStrategy}
	     * provided in {@link ROUTER_PROVIDERS}.
	     *
	     * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
	     * or add a base element to the document. This URL prefix that will be preserved
	     * when generating and recognizing URLs.
	     *
	     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * Similarly, if you add `<base href='/my/app'/>` to the document and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * @stable
	     */
	    var PathLocationStrategy = (function (_super) {
	        __extends$1(PathLocationStrategy, _super);
	        function PathLocationStrategy(_platformLocation, href) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            if (isBlank(href)) {
	                href = this._platformLocation.getBaseHrefFromDOM();
	            }
	            if (isBlank(href)) {
	                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	            }
	            this._baseHref = href;
	        }
	        PathLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            return Location.joinWithSlash(this._baseHref, internal);
	        };
	        PathLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            var pathname = this._platformLocation.pathname +
	                Location.normalizeQueryParams(this._platformLocation.search);
	            var hash = this._platformLocation.hash;
	            return hash && includeHash ? "" + pathname + hash : pathname;
	        };
	        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.pushState(state, title, externalUrl);
	        };
	        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.replaceState(state, title, externalUrl);
	        };
	        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        PathLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        PathLocationStrategy.ctorParameters = [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ];
	        return PathLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental
	     */
	    var NgLocalization = (function () {
	        function NgLocalization() {
	        }
	        return NgLocalization;
	    }());
	    /**
	     * Returns the plural category for a given value.
	     * - "=value" when the case exists,
	     * - the plural category otherwise
	     *
	     * @internal
	     */
	    function getPluralCategory(value, cases, ngLocalization) {
	        var nbCase = "=" + value;
	        return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
	    }
	    /**
	     * Returns the plural case based on the locale
	     *
	     * @experimental
	     */
	    var NgLocaleLocalization = (function (_super) {
	        __extends$2(NgLocaleLocalization, _super);
	        function NgLocaleLocalization(_locale) {
	            _super.call(this);
	            this._locale = _locale;
	        }
	        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	            var plural = getPluralCase(this._locale, value);
	            switch (plural) {
	                case Plural.Zero:
	                    return 'zero';
	                case Plural.One:
	                    return 'one';
	                case Plural.Two:
	                    return 'two';
	                case Plural.Few:
	                    return 'few';
	                case Plural.Many:
	                    return 'many';
	                default:
	                    return 'other';
	            }
	        };
	        NgLocaleLocalization.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        NgLocaleLocalization.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return NgLocaleLocalization;
	    }(NgLocalization));
	    // This is generated code DO NOT MODIFY
	    // see angular2/script/cldr/gen_plural_rules.js
	    /** @experimental */
	    var Plural;
	    (function (Plural) {
	        Plural[Plural["Zero"] = 0] = "Zero";
	        Plural[Plural["One"] = 1] = "One";
	        Plural[Plural["Two"] = 2] = "Two";
	        Plural[Plural["Few"] = 3] = "Few";
	        Plural[Plural["Many"] = 4] = "Many";
	        Plural[Plural["Other"] = 5] = "Other";
	    })(Plural || (Plural = {}));
	    /**
	     * Returns the plural case based on the locale
	     *
	     * @experimental
	     */
	    function getPluralCase(locale, nLike) {
	        // TODO(vicb): lazy compute
	        if (typeof nLike === 'string') {
	            nLike = parseInt(nLike, 10);
	        }
	        var n = nLike;
	        var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	        var i = Math.floor(Math.abs(n));
	        var v = nDecimal.length;
	        var f = parseInt(nDecimal, 10);
	        var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	        var lang = locale.split('-')[0].toLowerCase();
	        switch (lang) {
	            case 'af':
	            case 'asa':
	            case 'az':
	            case 'bem':
	            case 'bez':
	            case 'bg':
	            case 'brx':
	            case 'ce':
	            case 'cgg':
	            case 'chr':
	            case 'ckb':
	            case 'ee':
	            case 'el':
	            case 'eo':
	            case 'es':
	            case 'eu':
	            case 'fo':
	            case 'fur':
	            case 'gsw':
	            case 'ha':
	            case 'haw':
	            case 'hu':
	            case 'jgo':
	            case 'jmc':
	            case 'ka':
	            case 'kk':
	            case 'kkj':
	            case 'kl':
	            case 'ks':
	            case 'ksb':
	            case 'ky':
	            case 'lb':
	            case 'lg':
	            case 'mas':
	            case 'mgo':
	            case 'ml':
	            case 'mn':
	            case 'nb':
	            case 'nd':
	            case 'ne':
	            case 'nn':
	            case 'nnh':
	            case 'nyn':
	            case 'om':
	            case 'or':
	            case 'os':
	            case 'ps':
	            case 'rm':
	            case 'rof':
	            case 'rwk':
	            case 'saq':
	            case 'seh':
	            case 'sn':
	            case 'so':
	            case 'sq':
	            case 'ta':
	            case 'te':
	            case 'teo':
	            case 'tk':
	            case 'tr':
	            case 'ug':
	            case 'uz':
	            case 'vo':
	            case 'vun':
	            case 'wae':
	            case 'xog':
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'agq':
	            case 'bas':
	            case 'cu':
	            case 'dav':
	            case 'dje':
	            case 'dua':
	            case 'dyo':
	            case 'ebu':
	            case 'ewo':
	            case 'guz':
	            case 'kam':
	            case 'khq':
	            case 'ki':
	            case 'kln':
	            case 'kok':
	            case 'ksf':
	            case 'lrc':
	            case 'lu':
	            case 'luo':
	            case 'luy':
	            case 'mer':
	            case 'mfe':
	            case 'mgh':
	            case 'mua':
	            case 'mzn':
	            case 'nmg':
	            case 'nus':
	            case 'qu':
	            case 'rn':
	            case 'rw':
	            case 'sbp':
	            case 'twq':
	            case 'vai':
	            case 'yav':
	            case 'yue':
	            case 'zgh':
	            case 'ak':
	            case 'ln':
	            case 'mg':
	            case 'pa':
	            case 'ti':
	                if (n === Math.floor(n) && n >= 0 && n <= 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'am':
	            case 'as':
	            case 'bn':
	            case 'fa':
	            case 'gu':
	            case 'hi':
	            case 'kn':
	            case 'mr':
	            case 'zu':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'ar':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'ast':
	            case 'ca':
	            case 'de':
	            case 'en':
	            case 'et':
	            case 'fi':
	            case 'fy':
	            case 'gl':
	            case 'it':
	            case 'nl':
	            case 'sv':
	            case 'sw':
	            case 'ur':
	            case 'yi':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                return Plural.Other;
	            case 'be':
	                if (n % 10 === 1 && !(n % 100 === 11))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                    !(n % 100 >= 12 && n % 100 <= 14))
	                    return Plural.Few;
	                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'br':
	                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                    return Plural.One;
	                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                    return Plural.Two;
	                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                        n % 100 >= 90 && n % 100 <= 99))
	                    return Plural.Few;
	                if (!(n === 0) && n % 1e6 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'bs':
	            case 'hr':
	            case 'sr':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14) ||
	                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                        !(f % 100 >= 12 && f % 100 <= 14))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'cs':
	            case 'sk':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'cy':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === 3)
	                    return Plural.Few;
	                if (n === 6)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'da':
	                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                    return Plural.One;
	                return Plural.Other;
	            case 'dsb':
	            case 'hsb':
	                if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ff':
	            case 'fr':
	            case 'hy':
	            case 'kab':
	                if (i === 0 || i === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'fil':
	                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ga':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === Math.floor(n) && n >= 3 && n <= 6)
	                    return Plural.Few;
	                if (n === Math.floor(n) && n >= 7 && n <= 10)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'gd':
	                if (n === 1 || n === 11)
	                    return Plural.One;
	                if (n === 2 || n === 12)
	                    return Plural.Two;
	                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'gv':
	                if (v === 0 && i % 10 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 10 === 2)
	                    return Plural.Two;
	                if (v === 0 &&
	                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'he':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === 2 && v === 0)
	                    return Plural.Two;
	                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'is':
	                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ksh':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'kw':
	            case 'naq':
	            case 'se':
	            case 'smn':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                return Plural.Other;
	            case 'lag':
	                if (n === 0)
	                    return Plural.Zero;
	                if ((i === 0 || i === 1) && !(n === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'lt':
	                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                    !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.Few;
	                if (!(f === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'lv':
	            case 'prg':
	                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                    return Plural.Zero;
	                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                    !(v === 2) && f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mk':
	                if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mt':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pl':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pt':
	                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ro':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (!(v === 0) || n === 0 ||
	                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ru':
	            case 'uk':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && i % 10 === 0 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'shi':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                if (n === Math.floor(n) && n >= 2 && n <= 10)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'si':
	                if (n === 0 || n === 1 || i === 0 && f === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'sl':
	                if (v === 0 && i % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'tzm':
	                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                    return Plural.One;
	                return Plural.Other;
	            default:
	                return Plural.Other;
	        }
	    }

	    var Map$1 = global$1.Map;
	    var Set$1 = global$1.Set;
	    // Safari and Internet Explorer do not support the iterable parameter to the
	    // Map constructor.  We work around that by manually adding the items.
	    var createMapFromPairs = (function () {
	        try {
	            if (new Map$1([[1, 2]]).size === 1) {
	                return function createMapFromPairs(pairs) { return new Map$1(pairs); };
	            }
	        }
	        catch (e) {
	        }
	        return function createMapAndPopulateFromPairs(pairs) {
	            var map = new Map$1();
	            for (var i = 0; i < pairs.length; i++) {
	                var pair = pairs[i];
	                map.set(pair[0], pair[1]);
	            }
	            return map;
	        };
	    })();
	    var createMapFromMap = (function () {
	        try {
	            if (new Map$1(new Map$1())) {
	                return function createMapFromMap(m) { return new Map$1(m); };
	            }
	        }
	        catch (e) {
	        }
	        return function createMapAndPopulateFromMap(m) {
	            var map = new Map$1();
	            m.forEach(function (v, k) { map.set(k, v); });
	            return map;
	        };
	    })();
	    var _clearValues = (function () {
	        if ((new Map$1()).keys().next) {
	            return function _clearValues(m) {
	                var keyIterator = m.keys();
	                var k;
	                while (!((k = keyIterator.next()).done)) {
	                    m.set(k.value, null);
	                }
	            };
	        }
	        else {
	            return function _clearValuesWithForeEach(m) {
	                m.forEach(function (v, k) { m.set(k, null); });
	            };
	        }
	    })();
	    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from
	    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from
	    var _arrayFromMap = (function () {
	        try {
	            if ((new Map$1()).values().next) {
	                return function createArrayFromMap(m, getValues) {
	                    return getValues ? Array.from(m.values()) : Array.from(m.keys());
	                };
	            }
	        }
	        catch (e) {
	        }
	        return function createArrayFromMapWithForeach(m, getValues) {
	            var res = ListWrapper.createFixedSize(m.size), i = 0;
	            m.forEach(function (v, k) {
	                res[i] = getValues ? v : k;
	                i++;
	            });
	            return res;
	        };
	    })();
	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        StringMapWrapper.create = function () {
	            // Note: We are not using Object.create(null) here due to
	            // performance!
	            // http://jsperf.com/ng2-object-create-null
	            return {};
	        };
	        StringMapWrapper.contains = function (map, key) {
	            return map.hasOwnProperty(key);
	        };
	        StringMapWrapper.get = function (map, key) {
	            return map.hasOwnProperty(key) ? map[key] : undefined;
	        };
	        StringMapWrapper.set = function (map, key, value) { map[key] = value; };
	        StringMapWrapper.keys = function (map) { return Object.keys(map); };
	        StringMapWrapper.values = function (map) {
	            return Object.keys(map).map(function (k) { return map[k]; });
	        };
	        StringMapWrapper.isEmpty = function (map) {
	            for (var prop in map) {
	                return false;
	            }
	            return true;
	        };
	        StringMapWrapper.delete = function (map, key) { delete map[key]; };
	        StringMapWrapper.forEach = function (map, callback) {
	            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {
	                var k = _a[_i];
	                callback(map[k], k);
	            }
	        };
	        StringMapWrapper.merge = function (m1, m2) {
	            var m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        StringMapWrapper.equals = function (m1, m2) {
	            var k1 = Object.keys(m1);
	            var k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var i = 0; i < k1.length; i++) {
	                var key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        // JS has no way to express a statically fixed size list, but dart does so we
	        // keep both methods.
	        ListWrapper.createFixedSize = function (size) { return new Array(size); };
	        ListWrapper.createGrowableSize = function (size) { return new Array(size); };
	        ListWrapper.clone = function (array) { return array.slice(0); };
	        ListWrapper.forEachWithIndex = function (array, fn) {
	            for (var i = 0; i < array.length; i++) {
	                fn(array[i], i);
	            }
	        };
	        ListWrapper.first = function (array) {
	            if (!array)
	                return null;
	            return array[0];
	        };
	        ListWrapper.last = function (array) {
	            if (!array || array.length == 0)
	                return null;
	            return array[array.length - 1];
	        };
	        ListWrapper.indexOf = function (array, value, startIndex) {
	            if (startIndex === void 0) { startIndex = 0; }
	            return array.indexOf(value, startIndex);
	        };
	        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };
	        ListWrapper.reversed = function (array) {
	            var a = ListWrapper.clone(array);
	            return a.reverse();
	        };
	        ListWrapper.concat = function (a, b) { return a.concat(b); };
	        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };
	        ListWrapper.removeAt = function (list, index) {
	            var res = list[index];
	            list.splice(index, 1);
	            return res;
	        };
	        ListWrapper.removeAll = function (list, items) {
	            for (var i = 0; i < items.length; ++i) {
	                var index = list.indexOf(items[i]);
	                list.splice(index, 1);
	            }
	        };
	        ListWrapper.remove = function (list, el) {
	            var index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        ListWrapper.clear = function (list) { list.length = 0; };
	        ListWrapper.isEmpty = function (list) { return list.length == 0; };
	        ListWrapper.fill = function (list, value, start, end) {
	            if (start === void 0) { start = 0; }
	            if (end === void 0) { end = null; }
	            list.fill(value, start, end === null ? list.length : end);
	        };
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        ListWrapper.slice = function (l, from, to) {
	            if (from === void 0) { from = 0; }
	            if (to === void 0) { to = null; }
	            return l.slice(from, to === null ? undefined : to);
	        };
	        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };
	        ListWrapper.sort = function (l, compareFn) {
	            if (isPresent(compareFn)) {
	                l.sort(compareFn);
	            }
	            else {
	                l.sort();
	            }
	        };
	        ListWrapper.toString = function (l) { return l.toString(); };
	        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };
	        ListWrapper.maximum = function (list, predicate) {
	            if (list.length == 0) {
	                return null;
	            }
	            var solution = null;
	            var maxValue = -Infinity;
	            for (var index = 0; index < list.length; index++) {
	                var candidate = list[index];
	                if (isBlank(candidate)) {
	                    continue;
	                }
	                var candidateValue = predicate(candidate);
	                if (candidateValue > maxValue) {
	                    solution = candidate;
	                    maxValue = candidateValue;
	                }
	            }
	            return solution;
	        };
	        ListWrapper.flatten = function (list) {
	            var target = [];
	            _flattenArray(list, target);
	            return target;
	        };
	        ListWrapper.addAll = function (list, source) {
	            for (var i = 0; i < source.length; i++) {
	                list.push(source[i]);
	            }
	        };
	        return ListWrapper;
	    }());
	    function _flattenArray(source, target) {
	        if (isPresent(source)) {
	            for (var i = 0; i < source.length; i++) {
	                var item = source[i];
	                if (isArray(item)) {
	                    _flattenArray(item, target);
	                }
	                else {
	                    target.push(item);
	                }
	            }
	        }
	        return target;
	    }
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return isArray(obj) ||
	            (!(obj instanceof Map$1) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	    // Safari and Internet Explorer do not support the iterable parameter to the
	    // Set constructor.  We work around that by manually adding the items.
	    var createSetFromList = (function () {
	        var test = new Set$1([1, 2, 3]);
	        if (test.size === 3) {
	            return function createSetFromList(lst) { return new Set$1(lst); };
	        }
	        else {
	            return function createSetAndPopulateFromList(lst) {
	                var res = new Set$1(lst);
	                if (res.size !== lst.length) {
	                    for (var i = 0; i < lst.length; i++) {
	                        res.add(lst[i]);
	                    }
	                }
	                return res;
	            };
	        }
	    })();

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Adds and removes CSS classes on an HTML element.
	     *
	     * @howToUse
	     * ```
	     *     <some-element [ngClass]="'first second'">...</some-element>
	     *
	     *     <some-element [ngClass]="['first', 'second']">...</some-element>
	     *
	     *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	     *
	     *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	     * ```
	     *
	     * @description
	     *
	     * The CSS classes are updated as follow depending on the type of the expression evaluation:
	     * - `string` - the CSS classes listed in a string (space delimited) are added,
	     * - `Array` - the CSS classes (Array elements) are added,
	     * - `Object` - keys are CSS class names that get added when the expression given in the value
	     *              evaluates to a truthy value, otherwise class are removed.
	     *
	     * @stable
	     */
	    var NgClass = (function () {
	        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	            this._iterableDiffers = _iterableDiffers;
	            this._keyValueDiffers = _keyValueDiffers;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	            this._initialClasses = [];
	        }
	        Object.defineProperty(NgClass.prototype, "klass", {
	            set: function (v) {
	                this._applyInitialClasses(true);
	                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	                this._applyInitialClasses(false);
	                this._applyClasses(this._rawClass, false);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgClass.prototype, "ngClass", {
	            set: function (v) {
	                this._cleanupClasses(this._rawClass);
	                this._iterableDiffer = null;
	                this._keyValueDiffer = null;
	                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	                if (this._rawClass) {
	                    if (isListLikeIterable(this._rawClass)) {
	                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
	                    }
	                    else {
	                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
	                    }
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgClass.prototype.ngDoCheck = function () {
	            if (this._iterableDiffer) {
	                var changes = this._iterableDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyIterableChanges(changes);
	                }
	            }
	            else if (this._keyValueDiffer) {
	                var changes = this._keyValueDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        };
	        NgClass.prototype._cleanupClasses = function (rawClassVal) {
	            this._applyClasses(rawClassVal, true);
	            this._applyInitialClasses(false);
	        };
	        NgClass.prototype._applyKeyValueChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachRemovedItem(function (record) {
	                if (record.previousValue) {
	                    _this._toggleClass(record.key, false);
	                }
	            });
	        };
	        NgClass.prototype._applyIterableChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.item, true); });
	            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	        };
	        NgClass.prototype._applyInitialClasses = function (isCleanup) {
	            var _this = this;
	            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	        };
	        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	            var _this = this;
	            if (rawClassVal) {
	                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                    rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	                }
	                else {
	                    Object.keys(rawClassVal).forEach(function (klass) {
	                        if (isPresent(rawClassVal[klass]))
	                            _this._toggleClass(klass, !isCleanup);
	                    });
	                }
	            }
	        };
	        NgClass.prototype._toggleClass = function (klass, enabled) {
	            var _this = this;
	            klass = klass.trim();
	            if (klass) {
	                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
	            }
	        };
	        NgClass.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	        ];
	        /** @nocollapse */
	        NgClass.ctorParameters = [
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ];
	        NgClass.propDecorators = {
	            'klass': [{ type: _angular_core.Input, args: ['class',] },],
	            'ngClass': [{ type: _angular_core.Input },],
	        };
	        return NgClass;
	    }());

	    var NgForRow = (function () {
	        function NgForRow($implicit, index, count) {
	            this.$implicit = $implicit;
	            this.index = index;
	            this.count = count;
	        }
	        Object.defineProperty(NgForRow.prototype, "first", {
	            get: function () { return this.index === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "last", {
	            get: function () { return this.index === this.count - 1; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "even", {
	            get: function () { return this.index % 2 === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "odd", {
	            get: function () { return !this.even; },
	            enumerable: true,
	            configurable: true
	        });
	        return NgForRow;
	    }());
	    /**
	     * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	     * each instantiated template inherits from the outer context with the given loop variable set
	     * to the current item from the iterable.
	     *
	     * ### Local Variables
	     *
	     * `NgFor` provides several exported values that can be aliased to local variables:
	     *
	     * * `index` will be set to the current loop iteration for each template context.
	     * * `first` will be set to a boolean value indicating whether the item is the first one in the
	     *   iteration.
	     * * `last` will be set to a boolean value indicating whether the item is the last one in the
	     *   iteration.
	     * * `even` will be set to a boolean value indicating whether this item has an even index.
	     * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	     *
	     * ### Change Propagation
	     *
	     * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	     *
	     * * When an item is added, a new instance of the template is added to the DOM.
	     * * When an item is removed, its template instance is removed from the DOM.
	     * * When items are reordered, their respective templates are reordered in the DOM.
	     * * Otherwise, the DOM element for that item will remain the same.
	     *
	     * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	     * those changes in the DOM. This has important implications for animations and any stateful
	     * controls
	     * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	     * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	     * as user input.
	     *
	     * It is possible for the identities of elements in the iterator to change while the data does not.
	     * This can happen, for example, if the iterator produced from an RPC to the server, and that
	     * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	     * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	     * elements were deleted and all new elements inserted). This is an expensive operation and should
	     * be avoided if possible.
	     *
	     * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
	     * `trackBy` takes a function which has two arguments: `index` and `item`.
	     * If `trackBy` is given, Angular tracks changes by the return value of the function.
	     *
	     * ### Syntax
	     *
	     * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
	     * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
	     *
	     * With `<template>` element:
	     *
	     * ```
	     * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	     *   <li>...</li>
	     * </template>
	     * ```
	     *
	     * ### Example
	     *
	     * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	     * example.
	     *
	     * @stable
	     */
	    var NgFor = (function () {
	        function NgFor(_viewContainer, _template, _differs, _cdr) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._differs = _differs;
	            this._cdr = _cdr;
	            this._differ = null;
	        }
	        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	            set: function (value) {
	                if (value) {
	                    this._template = value;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgFor.prototype.ngOnChanges = function (changes) {
	            if ('ngForOf' in changes) {
	                // React on ngForOf changes only once all inputs have been initialized
	                var value = changes['ngForOf'].currentValue;
	                if (!this._differ && value) {
	                    try {
	                        this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
	                    }
	                    catch (e) {
	                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                    }
	                }
	            }
	        };
	        NgFor.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var changes = this._differ.diff(this.ngForOf);
	                if (changes)
	                    this._applyChanges(changes);
	            }
	        };
	        NgFor.prototype._applyChanges = function (changes) {
	            var _this = this;
	            var insertTuples = [];
	            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	                if (item.previousIndex == null) {
	                    var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
	                    var tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	                else if (currentIndex == null) {
	                    _this._viewContainer.remove(adjustedPreviousIndex);
	                }
	                else {
	                    var view = _this._viewContainer.get(adjustedPreviousIndex);
	                    _this._viewContainer.move(view, currentIndex);
	                    var tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	            });
	            for (var i = 0; i < insertTuples.length; i++) {
	                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	            for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
	                var viewRef = this._viewContainer.get(i);
	                viewRef.context.index = i;
	                viewRef.context.count = ilen;
	            }
	            changes.forEachIdentityChange(function (record) {
	                var viewRef = _this._viewContainer.get(record.currentIndex);
	                viewRef.context.$implicit = record.item;
	            });
	        };
	        NgFor.prototype._perViewChange = function (view, record) {
	            view.context.$implicit = record.item;
	        };
	        NgFor.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	        ];
	        /** @nocollapse */
	        NgFor.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.ChangeDetectorRef, },
	        ];
	        NgFor.propDecorators = {
	            'ngForOf': [{ type: _angular_core.Input },],
	            'ngForTrackBy': [{ type: _angular_core.Input },],
	            'ngForTemplate': [{ type: _angular_core.Input },],
	        };
	        return NgFor;
	    }());
	    var RecordViewTuple = (function () {
	        function RecordViewTuple(record, view) {
	            this.record = record;
	            this.view = view;
	        }
	        return RecordViewTuple;
	    }());

	    /**
	     * Removes or recreates a portion of the DOM tree based on an {expression}.
	     *
	     * If the expression assigned to `ngIf` evaluates to a false value then the element
	     * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	     *
	     * ```
	     * <div *ngIf="errorCount > 0" class="error">
	     *   <!-- Error message displayed when the errorCount property on the current context is greater
	     * than 0. -->
	     *   {{errorCount}} errors detected
	     * </div>
	     * ```
	     *
	     * ### Syntax
	     *
	     * - `<div *ngIf="condition">...</div>`
	     * - `<div template="ngIf condition">...</div>`
	     * - `<template [ngIf]="condition"><div>...</div></template>`
	     *
	     * @stable
	     */
	    var NgIf = (function () {
	        function NgIf(_viewContainer, _template) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._hasView = false;
	        }
	        Object.defineProperty(NgIf.prototype, "ngIf", {
	            set: function (condition) {
	                if (condition && !this._hasView) {
	                    this._hasView = true;
	                    this._viewContainer.createEmbeddedView(this._template);
	                }
	                else if (!condition && this._hasView) {
	                    this._hasView = false;
	                    this._viewContainer.clear();
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgIf.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	        ];
	        /** @nocollapse */
	        NgIf.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	        ];
	        NgIf.propDecorators = {
	            'ngIf': [{ type: _angular_core.Input },],
	        };
	        return NgIf;
	    }());

	    var _CASE_DEFAULT = new Object();
	    var SwitchView = (function () {
	        function SwitchView(_viewContainerRef, _templateRef) {
	            this._viewContainerRef = _viewContainerRef;
	            this._templateRef = _templateRef;
	        }
	        SwitchView.prototype.create = function () { this._viewContainerRef.createEmbeddedView(this._templateRef); };
	        SwitchView.prototype.destroy = function () { this._viewContainerRef.clear(); };
	        return SwitchView;
	    }());
	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	     *             expression.
	     *
	     * @howToUse
	     * ```
	     *     <container-element [ngSwitch]="switch_expression">
	     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	     *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	     *       <ng-container *ngSwitchCase="match_expression_3">
	     *         <!-- use a ng-container to group multiple root nodes -->
	     *         <inner-element></inner-element>
	     *         <inner-other-element></inner-other-element>
	     *       </ng-container>
	     *       <some-element *ngSwitchDefault>...</p>
	     *     </container-element>
	     * ```
	     * @description
	     *
	     * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	     * switch expression.
	     *
	     * In other words:
	     * - you define a container element (where you place the directive with a switch expression on the
	     * `[ngSwitch]="..."` attribute)
	     * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	     * root elements.
	     *
	     * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	     * be
	     * preserved at the location.
	     *
	     * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	     * expression is evaluated.
	     * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	     * stamped out.
	     *
	     * @stable
	     */
	    var NgSwitch = (function () {
	        function NgSwitch() {
	            this._useDefault = false;
	            this._valueViews = new Map();
	            this._activeViews = [];
	        }
	        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	            set: function (value) {
	                // Empty the currently active ViewContainers
	                this._emptyAllActiveViews();
	                // Add the ViewContainers matching the value (with a fallback to default)
	                this._useDefault = false;
	                var views = this._valueViews.get(value);
	                if (!views) {
	                    this._useDefault = true;
	                    views = this._valueViews.get(_CASE_DEFAULT) || null;
	                }
	                this._activateViews(views);
	                this._switchValue = value;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        NgSwitch.prototype._onCaseValueChanged = function (oldCase, newCase, view) {
	            this._deregisterView(oldCase, view);
	            this._registerView(newCase, view);
	            if (oldCase === this._switchValue) {
	                view.destroy();
	                ListWrapper.remove(this._activeViews, view);
	            }
	            else if (newCase === this._switchValue) {
	                if (this._useDefault) {
	                    this._useDefault = false;
	                    this._emptyAllActiveViews();
	                }
	                view.create();
	                this._activeViews.push(view);
	            }
	            // Switch to default when there is no more active ViewContainers
	            if (this._activeViews.length === 0 && !this._useDefault) {
	                this._useDefault = true;
	                this._activateViews(this._valueViews.get(_CASE_DEFAULT));
	            }
	        };
	        /** @internal */
	        NgSwitch.prototype._emptyAllActiveViews = function () {
	            var activeContainers = this._activeViews;
	            for (var i = 0; i < activeContainers.length; i++) {
	                activeContainers[i].destroy();
	            }
	            this._activeViews = [];
	        };
	        /** @internal */
	        NgSwitch.prototype._activateViews = function (views) {
	            // TODO(vicb): assert(this._activeViews.length === 0);
	            if (views) {
	                for (var i = 0; i < views.length; i++) {
	                    views[i].create();
	                }
	                this._activeViews = views;
	            }
	        };
	        /** @internal */
	        NgSwitch.prototype._registerView = function (value, view) {
	            var views = this._valueViews.get(value);
	            if (!views) {
	                views = [];
	                this._valueViews.set(value, views);
	            }
	            views.push(view);
	        };
	        /** @internal */
	        NgSwitch.prototype._deregisterView = function (value, view) {
	            // `_CASE_DEFAULT` is used a marker for non-registered cases
	            if (value === _CASE_DEFAULT)
	                return;
	            var views = this._valueViews.get(value);
	            if (views.length == 1) {
	                this._valueViews.delete(value);
	            }
	            else {
	                ListWrapper.remove(views, view);
	            }
	        };
	        NgSwitch.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitch.ctorParameters = [];
	        NgSwitch.propDecorators = {
	            'ngSwitch': [{ type: _angular_core.Input },],
	        };
	        return NgSwitch;
	    }());
	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Creates a view that will be added/removed from the parent {@link NgSwitch} when the
	     *             given expression evaluate to respectively the same/different value as the switch
	     *             expression.
	     *
	     * @howToUse
	     *     <container-element [ngSwitch]="switch_expression">
	     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *     </container-element>
	     *
	     * @description
	     *
	     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	     * expression.
	     *
	     * If multiple match expressions match the switch expression value, all of them are displayed.
	     *
	     * See {@link NgSwitch} for more details and example.
	     *
	     * @stable
	     */
	    var NgSwitchCase = (function () {
	        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	            // `_CASE_DEFAULT` is used as a marker for a not yet initialized value
	            /** @internal */
	            this._value = _CASE_DEFAULT;
	            this._switch = ngSwitch;
	            this._view = new SwitchView(viewContainer, templateRef);
	        }
	        Object.defineProperty(NgSwitchCase.prototype, "ngSwitchCase", {
	            set: function (value) {
	                this._switch._onCaseValueChanged(this._value, value, this._view);
	                this._value = value;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgSwitchCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchCase.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ];
	        NgSwitchCase.propDecorators = {
	            'ngSwitchCase': [{ type: _angular_core.Input },],
	        };
	        return NgSwitchCase;
	    }());
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Creates a view that is added to the parent {@link NgSwitch} when no case expressions
	     * match the
	     *             switch expression.
	     *
	     * @howToUse
	     *     <container-element [ngSwitch]="switch_expression">
	     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *       <some-other-element *ngSwitchDefault>...</some-other-element>
	     *     </container-element>
	     *
	     * @description
	     *
	     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	     * expression.
	     *
	     * See {@link NgSwitch} for more details and example.
	     *
	     * @stable
	     */
	    var NgSwitchDefault = (function () {
	        function NgSwitchDefault(viewContainer, templateRef, sswitch) {
	            sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));
	        }
	        NgSwitchDefault.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchDefault.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ];
	        return NgSwitchDefault;
	    }());

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	     *
	     * @howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <ng-container *ngPluralCase="'=0'">there is nothing</ng-container>
	     *   <ng-container *ngPluralCase="'=1'">there is one</ng-container>
	     *   <ng-container *ngPluralCase="'few'">there are a few</ng-container>
	     *   <ng-container *ngPluralCase="'other'">there are exactly #</ng-container>
	     * </some-element>
	     * ```
	     *
	     * @description
	     *
	     * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	     * that match the switch expression's pluralization category.
	     *
	     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	     * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	     * expression:
	     * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	     *   matches the switch expression exactly,
	     * - otherwise, the view will be treated as a "category match", and will only display if exact
	     *   value matches aren't found and the value maps to its category for the defined locale.
	     *
	     * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	     *
	     * @experimental
	     */
	    var NgPlural = (function () {
	        function NgPlural(_localization) {
	            this._localization = _localization;
	            this._caseViews = {};
	        }
	        Object.defineProperty(NgPlural.prototype, "ngPlural", {
	            set: function (value) {
	                this._switchValue = value;
	                this._updateView();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	        /** @internal */
	        NgPlural.prototype._updateView = function () {
	            this._clearViews();
	            var cases = Object.keys(this._caseViews);
	            var key = getPluralCategory(this._switchValue, cases, this._localization);
	            this._activateView(this._caseViews[key]);
	        };
	        /** @internal */
	        NgPlural.prototype._clearViews = function () {
	            if (this._activeView)
	                this._activeView.destroy();
	        };
	        /** @internal */
	        NgPlural.prototype._activateView = function (view) {
	            if (view) {
	                this._activeView = view;
	                this._activeView.create();
	            }
	        };
	        NgPlural.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	        ];
	        /** @nocollapse */
	        NgPlural.ctorParameters = [
	            { type: NgLocalization, },
	        ];
	        NgPlural.propDecorators = {
	            'ngPlural': [{ type: _angular_core.Input },],
	        };
	        return NgPlural;
	    }());
	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Creates a view that will be added/removed from the parent {@link NgPlural} when the
	     *             given expression matches the plural expression according to CLDR rules.
	     *
	     * @howToUse
	     *     <some-element [ngPlural]="value">
	     *       <ng-container *ngPluralCase="'=0'">...</ng-container>
	     *       <ng-container *ngPluralCase="'other'">...</ng-container>
	     *     </some-element>
	     *
	     * See {@link NgPlural} for more details and example.
	     *
	     * @experimental
	     */
	    var NgPluralCase = (function () {
	        function NgPluralCase(value, template, viewContainer, ngPlural) {
	            this.value = value;
	            ngPlural.addCase(value, new SwitchView(viewContainer, template));
	        }
	        NgPluralCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	        ];
	        /** @nocollapse */
	        NgPluralCase.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.ViewContainerRef, },
	            { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	        ];
	        return NgPluralCase;
	    }());

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Update an HTML element styles.
	     *
	     * @howToUse
	     * ```
	     * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="objExp">...</some-element>
	     * ```
	     *
	     * @description
	     *
	     * The styles are updated according to the value of the expression evaluation:
	     * - keys are style names with an option `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	     * - values are the values assigned to those properties (expressed in the given unit).
	     *
	     * @stable
	     */
	    var NgStyle = (function () {
	        function NgStyle(_differs, _ngEl, _renderer) {
	            this._differs = _differs;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	        }
	        Object.defineProperty(NgStyle.prototype, "ngStyle", {
	            set: function (v) {
	                this._ngStyle = v;
	                if (!this._differ && v) {
	                    this._differ = this._differs.find(v).create(null);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgStyle.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var changes = this._differ.diff(this._ngStyle);
	                if (changes) {
	                    this._applyChanges(changes);
	                }
	            }
	        };
	        NgStyle.prototype._applyChanges = function (changes) {
	            var _this = this;
	            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        };
	        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	            value = value !== null && value !== void (0) && unit ? "" + value + unit : value;
	            this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
	        };
	        NgStyle.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	        ];
	        /** @nocollapse */
	        NgStyle.ctorParameters = [
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ];
	        NgStyle.propDecorators = {
	            'ngStyle': [{ type: _angular_core.Input },],
	        };
	        return NgStyle;
	    }());

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	     *
	     * @howToUse
	     * ```
	     * <template [ngTemplateOutlet]="templateRefExpression"
	     *           [ngOutletContext]="objectExpression">
	     * </template>
	     * ```
	     *
	     * @description
	     *
	     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
	     * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
	     * available within the `TemplateRef`.
	     *
	     * Note: using the key `$implicit` in the context object will set it's value as default.
	     *
	     * @experimental
	     */
	    var NgTemplateOutlet = (function () {
	        function NgTemplateOutlet(_viewContainerRef) {
	            this._viewContainerRef = _viewContainerRef;
	        }
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	            set: function (context) { this._context = context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
	            set: function (templateRef) { this._templateRef = templateRef; },
	            enumerable: true,
	            configurable: true
	        });
	        NgTemplateOutlet.prototype.ngOnChanges = function () {
	            if (this._viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	            }
	            if (this._templateRef) {
	                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
	            }
	        };
	        NgTemplateOutlet.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	        ];
	        /** @nocollapse */
	        NgTemplateOutlet.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	        ];
	        NgTemplateOutlet.propDecorators = {
	            'ngOutletContext': [{ type: _angular_core.Input },],
	            'ngTemplateOutlet': [{ type: _angular_core.Input },],
	        };
	        return NgTemplateOutlet;
	    }());

	    /**
	     * A collection of Angular directives that are likely to be used in each and every Angular
	     * application.
	     */
	    var COMMON_DIRECTIVES = [
	        NgClass,
	        NgFor,
	        NgIf,
	        NgTemplateOutlet,
	        NgStyle,
	        NgSwitch,
	        NgSwitchCase,
	        NgSwitchDefault,
	        NgPlural,
	        NgPluralCase,
	    ];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var BaseError = (function (_super) {
	        __extends$4(BaseError, _super);
	        function BaseError(message) {
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            var nativeError = _super.call(this, message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            get: function () { return this._nativeError.message; },
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            get: function () { return this._nativeError.stack; },
	            set: function (value) { this._nativeError.stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * @stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$4(WrappedError, _super);
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            get: function () {
	                return (this.originalError instanceof Error ? this.originalError : this._nativeError)
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var InvalidPipeArgumentError = (function (_super) {
	        __extends$3(InvalidPipeArgumentError, _super);
	        function InvalidPipeArgumentError(type, value) {
	            _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
	        }
	        return InvalidPipeArgumentError;
	    }(BaseError));

	    var ObservableStrategy = (function () {
	        function ObservableStrategy() {
	        }
	        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	        };
	        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	        return ObservableStrategy;
	    }());
	    var PromiseStrategy = (function () {
	        function PromiseStrategy() {
	        }
	        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.then(updateLatestValue, function (e) { throw e; });
	        };
	        PromiseStrategy.prototype.dispose = function (subscription) { };
	        PromiseStrategy.prototype.onDestroy = function (subscription) { };
	        return PromiseStrategy;
	    }());
	    var _promiseStrategy = new PromiseStrategy();
	    var _observableStrategy = new ObservableStrategy();
	    // avoid unused import when Promise union types are erased
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Unwraps a value from an asynchronous primitive.
	     * @howToUse `observable_or_promise_expression | async`
	     * @description
	     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	     * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	     * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	     * potential memory leaks.
	     *
	     *
	     * ## Examples
	     *
	     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	     * promise.
	     *
	     * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	     *
	     * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	     * to the view. The Observable continuesly updates the view with the current time.
	     *
	     * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	     *
	     * @stable
	     */
	    var AsyncPipe = (function () {
	        function AsyncPipe(_ref) {
	            /** @internal */
	            this._latestValue = null;
	            /** @internal */
	            this._latestReturnedValue = null;
	            /** @internal */
	            this._subscription = null;
	            /** @internal */
	            this._obj = null;
	            this._strategy = null;
	            this._ref = _ref;
	        }
	        AsyncPipe.prototype.ngOnDestroy = function () {
	            if (isPresent(this._subscription)) {
	                this._dispose();
	            }
	        };
	        AsyncPipe.prototype.transform = function (obj) {
	            if (isBlank(this._obj)) {
	                if (isPresent(obj)) {
	                    this._subscribe(obj);
	                }
	                this._latestReturnedValue = this._latestValue;
	                return this._latestValue;
	            }
	            if (obj !== this._obj) {
	                this._dispose();
	                return this.transform(obj);
	            }
	            if (this._latestValue === this._latestReturnedValue) {
	                return this._latestReturnedValue;
	            }
	            else {
	                this._latestReturnedValue = this._latestValue;
	                return _angular_core.WrappedValue.wrap(this._latestValue);
	            }
	        };
	        /** @internal */
	        AsyncPipe.prototype._subscribe = function (obj) {
	            var _this = this;
	            this._obj = obj;
	            this._strategy = this._selectStrategy(obj);
	            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	        };
	        /** @internal */
	        AsyncPipe.prototype._selectStrategy = function (obj) {
	            if (isPromise(obj)) {
	                return _promiseStrategy;
	            }
	            else if (obj.subscribe) {
	                return _observableStrategy;
	            }
	            else {
	                throw new InvalidPipeArgumentError(AsyncPipe, obj);
	            }
	        };
	        /** @internal */
	        AsyncPipe.prototype._dispose = function () {
	            this._strategy.dispose(this._subscription);
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	        };
	        /** @internal */
	        AsyncPipe.prototype._updateLatestValue = function (async, value) {
	            if (async === this._obj) {
	                this._latestValue = value;
	                this._ref.markForCheck();
	            }
	        };
	        AsyncPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	        ];
	        /** @nocollapse */
	        AsyncPipe.ctorParameters = [
	            { type: _angular_core.ChangeDetectorRef, },
	        ];
	        return AsyncPipe;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var NumberFormatStyle;
	    (function (NumberFormatStyle) {
	        NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
	        NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
	        NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
	    })(NumberFormatStyle || (NumberFormatStyle = {}));
	    var NumberFormatter = (function () {
	        function NumberFormatter() {
	        }
	        NumberFormatter.format = function (num, locale, style, _a) {
	            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	            var options = {
	                minimumIntegerDigits: minimumIntegerDigits,
	                minimumFractionDigits: minimumFractionDigits,
	                maximumFractionDigits: maximumFractionDigits,
	                style: NumberFormatStyle[style].toLowerCase()
	            };
	            if (style == NumberFormatStyle.Currency) {
	                options.currency = currency;
	                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	            }
	            return new Intl.NumberFormat(locale, options).format(num);
	        };
	        return NumberFormatter;
	    }());
	    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	    var PATTERN_ALIASES = {
	        yMMMdjms: datePartGetterFactory(combine([
	            digitCondition('year', 1),
	            nameCondition('month', 3),
	            digitCondition('day', 1),
	            digitCondition('hour', 1),
	            digitCondition('minute', 1),
	            digitCondition('second', 1),
	        ])),
	        yMdjm: datePartGetterFactory(combine([
	            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	            digitCondition('hour', 1), digitCondition('minute', 1)
	        ])),
	        yMMMMEEEEd: datePartGetterFactory(combine([
	            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	            digitCondition('day', 1)
	        ])),
	        yMMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	        yMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	        yMd: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	        jms: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	        jm: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	    };
	    var DATE_FORMATS = {
	        yyyy: datePartGetterFactory(digitCondition('year', 4)),
	        yy: datePartGetterFactory(digitCondition('year', 2)),
	        y: datePartGetterFactory(digitCondition('year', 1)),
	        MMMM: datePartGetterFactory(nameCondition('month', 4)),
	        MMM: datePartGetterFactory(nameCondition('month', 3)),
	        MM: datePartGetterFactory(digitCondition('month', 2)),
	        M: datePartGetterFactory(digitCondition('month', 1)),
	        LLLL: datePartGetterFactory(nameCondition('month', 4)),
	        dd: datePartGetterFactory(digitCondition('day', 2)),
	        d: datePartGetterFactory(digitCondition('day', 1)),
	        HH: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	        H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	        hh: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	        h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        jj: datePartGetterFactory(digitCondition('hour', 2)),
	        j: datePartGetterFactory(digitCondition('hour', 1)),
	        mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	        m: datePartGetterFactory(digitCondition('minute', 1)),
	        ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	        s: datePartGetterFactory(digitCondition('second', 1)),
	        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	        // we can be just safely rely on using `sss` since we currently don't support single or two digit
	        // fractions
	        sss: datePartGetterFactory(digitCondition('second', 3)),
	        EEEE: datePartGetterFactory(nameCondition('weekday', 4)),
	        EEE: datePartGetterFactory(nameCondition('weekday', 3)),
	        EE: datePartGetterFactory(nameCondition('weekday', 2)),
	        E: datePartGetterFactory(nameCondition('weekday', 1)),
	        a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        Z: timeZoneGetter('short'),
	        z: timeZoneGetter('long'),
	        ww: datePartGetterFactory({}),
	        // first Thursday of the year. not support ?
	        w: datePartGetterFactory({}),
	        // of the year not support ?
	        G: datePartGetterFactory(nameCondition('era', 1)),
	        GG: datePartGetterFactory(nameCondition('era', 2)),
	        GGG: datePartGetterFactory(nameCondition('era', 3)),
	        GGGG: datePartGetterFactory(nameCondition('era', 4))
	    };
	    function digitModifier(inner) {
	        return function (date, locale) {
	            var result = inner(date, locale);
	            return result.length == 1 ? '0' + result : result;
	        };
	    }
	    function hourClockExtracter(inner) {
	        return function (date, locale) {
	            var result = inner(date, locale);
	            return result.split(' ')[1];
	        };
	    }
	    function hourExtracter(inner) {
	        return function (date, locale) {
	            var result = inner(date, locale);
	            return result.split(' ')[0];
	        };
	    }
	    function intlDateFormat(date, locale, options) {
	        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	    }
	    function timeZoneGetter(timezone) {
	        // To workaround `Intl` API restriction for single timezone let format with 24 hours
	        var options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	        return function (date, locale) {
	            var result = intlDateFormat(date, locale, options);
	            // Then extract first 3 letters that related to hours
	            return result ? result.substring(3) : '';
	        };
	    }
	    function hour12Modify(options, value) {
	        options.hour12 = value;
	        return options;
	    }
	    function digitCondition(prop, len) {
	        var result = {};
	        result[prop] = len == 2 ? '2-digit' : 'numeric';
	        return result;
	    }
	    function nameCondition(prop, len) {
	        var result = {};
	        result[prop] = len < 4 ? 'short' : 'long';
	        return result;
	    }
	    function combine(options) {
	        var result = {};
	        options.forEach(function (option) { Object.assign(result, option); });
	        return result;
	    }
	    function datePartGetterFactory(ret) {
	        return function (date, locale) { return intlDateFormat(date, locale, ret); };
	    }
	    var datePartsFormatterCache = new Map();
	    function dateFormatter(format, date, locale) {
	        var text = '';
	        var match;
	        var fn;
	        var parts = [];
	        if (PATTERN_ALIASES[format]) {
	            return PATTERN_ALIASES[format](date, locale);
	        }
	        if (datePartsFormatterCache.has(format)) {
	            parts = datePartsFormatterCache.get(format);
	        }
	        else {
	            var matches = DATE_FORMATS_SPLIT.exec(format);
	            while (format) {
	                match = DATE_FORMATS_SPLIT.exec(format);
	                if (match) {
	                    parts = concat(parts, match, 1);
	                    format = parts.pop();
	                }
	                else {
	                    parts.push(format);
	                    format = null;
	                }
	            }
	            datePartsFormatterCache.set(format, parts);
	        }
	        parts.forEach(function (part) {
	            fn = DATE_FORMATS[part];
	            text += fn ? fn(date, locale) :
	                part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	        });
	        return text;
	    }
	    var slice = [].slice;
	    function concat(array1 /** TODO #9100 */, array2 /** TODO #9100 */, index /** TODO #9100 */) {
	        return array1.concat(slice.call(array2, index));
	    }
	    var DateFormatter = (function () {
	        function DateFormatter() {
	        }
	        DateFormatter.format = function (date, locale, pattern) {
	            return dateFormatter(pattern, date, locale);
	        };
	        return DateFormatter;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a date according to locale rules.
	     * @howToUse `date_expression | date[:format]`
	     * @description
	     *
	     * Where:
	     * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	     * (https://www.w3.org/TR/NOTE-datetime).
	     * - `format` indicates which date/time components to include. The format can be predifined as
	     *   shown below or custom as shown in the table.
	     *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	     *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	     *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	     *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	     *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	     *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	     *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	     *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	     *
	     *
	     *  | Component | Symbol | Short Form   | Long Form         | Numeric   | 2-digit   |
	     *  |-----------|:------:|--------------|-------------------|-----------|-----------|
	     *  | era       |   G    | G (AD)       | GGGG (Anno Domini)| -         | -         |
	     *  | year      |   y    | -            | -                 | y (2015)  | yy (15)   |
	     *  | month     |   M    | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	     *  | day       |   d    | -            | -                 | d (3)     | dd (03)   |
	     *  | weekday   |   E    | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	     *  | hour      |   j    | -            | -                 | j (13)    | jj (13)   |
	     *  | hour12    |   h    | -            | -                 | h (1 PM)  | hh (01 PM)|
	     *  | hour24    |   H    | -            | -                 | H (13)    | HH (13)   |
	     *  | minute    |   m    | -            | -                 | m (5)     | mm (05)   |
	     *  | second    |   s    | -            | -                 | s (9)     | ss (09)   |
	     *  | timezone  |   z    | -            | z (Pacific Standard Time)| -  | -         |
	     *  | timezone  |   Z    | Z (GMT-8:00) | -                 | -         | -         |
	     *  | timezone  |   a    | a (PM)       | -                 | -         | -         |
	     *
	     * In javascript, only the components specified will be respected (not the ordering,
	     * punctuations, ...) and details of the formatting will be dependent on the locale.
	     *
	     * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	     *
	     * WARNINGS:
	     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	     *   Instead users should treat the date as an immutable object and change the reference when the
	     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	     *   which would be an expensive operation).
	     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	     *   browsers.
	     *
	     * ### Examples
	     *
	     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	     * in the _local_ time and locale is 'en-US':
	     *
	     * ```
	     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	     *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	     * ```
	     *
	     * {@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	     *
	     * @stable
	     */
	    var DatePipe = (function () {
	        function DatePipe(_locale) {
	            this._locale = _locale;
	        }
	        DatePipe.prototype.transform = function (value, pattern) {
	            if (pattern === void 0) { pattern = 'mediumDate'; }
	            if (isBlank(value))
	                return null;
	            if (!this.supports(value)) {
	                throw new InvalidPipeArgumentError(DatePipe, value);
	            }
	            if (NumberWrapper.isNumeric(value)) {
	                value = DateWrapper.fromMillis(parseFloat(value));
	            }
	            else if (isString(value)) {
	                value = DateWrapper.fromISOString(value);
	            }
	            if (StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
	                pattern = StringMapWrapper.get(DatePipe._ALIASES, pattern);
	            }
	            return DateFormatter.format(value, this._locale, pattern);
	        };
	        DatePipe.prototype.supports = function (obj) {
	            if (isDate(obj) || NumberWrapper.isNumeric(obj)) {
	                return true;
	            }
	            if (isString(obj) && isDate(DateWrapper.fromISOString(obj))) {
	                return true;
	            }
	            return false;
	        };
	        /** @internal */
	        DatePipe._ALIASES = {
	            'medium': 'yMMMdjms',
	            'short': 'yMdjm',
	            'fullDate': 'yMMMMEEEEd',
	            'longDate': 'yMMMMd',
	            'mediumDate': 'yMMMd',
	            'shortDate': 'yMd',
	            'mediumTime': 'jms',
	            'shortTime': 'jm'
	        };
	        DatePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	        ];
	        /** @nocollapse */
	        DatePipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return DatePipe;
	    }());

	    var _INTERPOLATION_REGEXP = /#/g;
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	     * @howToUse `expression | i18nPlural:mapping`
	     * @description
	     *
	     *  Where:
	     *  - `expression` is a number.
	     *  - `mapping` is an object that mimics the ICU format, see
	     *    http://userguide.icu-project.org/formatparse/messages
	     *
	     *  ## Example
	     *
	     * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	     *
	     * @experimental
	     */
	    var I18nPluralPipe = (function () {
	        function I18nPluralPipe(_localization) {
	            this._localization = _localization;
	        }
	        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	            if (isBlank(value))
	                return '';
	            if (!isStringMap(pluralMap)) {
	                throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
	            }
	            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	            return StringWrapper.replaceAll(pluralMap[key], _INTERPOLATION_REGEXP, value.toString());
	        };
	        I18nPluralPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nPluralPipe.ctorParameters = [
	            { type: NgLocalization, },
	        ];
	        return I18nPluralPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Generic selector that displays the string that matches the current value.
	     * @howToUse `expression | i18nSelect:mapping`
	     * @description
	     *
	     *  Where:
	     *  - `mapping`: is an object that indicates the text that should be displayed
	     *  for different values of the provided `expression`.
	     *
	     *  ## Example
	     *
	     * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	     *
	     *  @experimental
	     */
	    var I18nSelectPipe = (function () {
	        function I18nSelectPipe() {
	        }
	        I18nSelectPipe.prototype.transform = function (value, mapping) {
	            if (isBlank(value))
	                return '';
	            if (!isStringMap(mapping)) {
	                throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
	            }
	            return mapping.hasOwnProperty(value) ? mapping[value] : '';
	        };
	        I18nSelectPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nSelectPipe.ctorParameters = [];
	        return I18nSelectPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Converts value into JSON string.
	     * @howToUse `expression | json`
	     * @description
	     *
	     * Converts value into string using `JSON.stringify`. Useful for debugging.
	     *
	     * ### Example
	     * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	     *
	     * @stable
	     */
	    var JsonPipe = (function () {
	        function JsonPipe() {
	        }
	        JsonPipe.prototype.transform = function (value) { return Json.stringify(value); };
	        JsonPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	        ];
	        /** @nocollapse */
	        JsonPipe.ctorParameters = [];
	        return JsonPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Transforms string to lowercase.
	     * @howToUse `expression | lowercase`
	     * @description
	     *
	     * Converts value into lowercase string using `String.prototype.toLowerCase()`.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * @stable
	     */
	    var LowerCasePipe = (function () {
	        function LowerCasePipe() {
	        }
	        LowerCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (!isString(value)) {
	                throw new InvalidPipeArgumentError(LowerCasePipe, value);
	            }
	            return value.toLowerCase();
	        };
	        LowerCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	        ];
	        /** @nocollapse */
	        LowerCasePipe.ctorParameters = [];
	        return LowerCasePipe;
	    }());

	    var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
	    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (isBlank(value))
	            return null;
	        // Convert strings to numbers
	        value = isString(value) && NumberWrapper.isNumeric(value) ? +value : value;
	        if (!isNumber(value)) {
	            throw new InvalidPipeArgumentError(pipe, value);
	        }
	        var minInt;
	        var minFraction;
	        var maxFraction;
	        if (style !== NumberFormatStyle.Currency) {
	            // rely on Intl default for currency
	            minInt = 1;
	            minFraction = 0;
	            maxFraction = 3;
	        }
	        if (isPresent(digits)) {
	            var parts = digits.match(_NUMBER_FORMAT_REGEXP);
	            if (parts === null) {
	                throw new Error(digits + " is not a valid digit info for number pipes");
	            }
	            if (isPresent(parts[1])) {
	                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (isPresent(parts[3])) {
	                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (isPresent(parts[5])) {
	                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return NumberFormatter.format(value, locale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol
	        });
	    }
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a number according to locale rules.
	     * @howToUse `number_expression | number[:digitInfo]`
	     *
	     * Formats a number as text. Group sizing and separator and other locale-specific
	     * configurations are based on the active locale.
	     *
	     * where `expression` is a number:
	     *  - `digitInfo` is a `string` which has a following format: <br>
	     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	     *
	     * For more information on the acceptable range for each of these numbers and other
	     * details see your native internationalization library.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	     *
	     * @stable
	     */
	    var DecimalPipe = (function () {
	        function DecimalPipe(_locale) {
	            this._locale = _locale;
	        }
	        DecimalPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	        };
	        DecimalPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	        ];
	        /** @nocollapse */
	        DecimalPipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return DecimalPipe;
	    }());
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a number as a percentage according to locale rules.
	     * @howToUse `number_expression | percent[:digitInfo]`
	     *
	     * @description
	     *
	     * Formats a number as percentage.
	     *
	     * - `digitInfo` See {@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	     *
	     * @stable
	     */
	    var PercentPipe = (function () {
	        function PercentPipe(_locale) {
	            this._locale = _locale;
	        }
	        PercentPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	        };
	        PercentPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	        ];
	        /** @nocollapse */
	        PercentPipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return PercentPipe;
	    }());
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a number as currency using locale rules.
	     * @howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	     * @description
	     *
	     * Use `currency` to format a number as currency.
	     *
	     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	     *    as `USD` for the US dollar and `EUR` for the euro.
	     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	     *   - `true`: use symbol (e.g. `$`).
	     *   - `false`(default): use code (e.g. `USD`).
	     * - `digitInfo` See {@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	     *
	     * @stable
	     */
	    var CurrencyPipe = (function () {
	        function CurrencyPipe(_locale) {
	            this._locale = _locale;
	        }
	        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	            if (currencyCode === void 0) { currencyCode = 'USD'; }
	            if (symbolDisplay === void 0) { symbolDisplay = false; }
	            if (digits === void 0) { digits = null; }
	            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	        };
	        CurrencyPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	        ];
	        /** @nocollapse */
	        CurrencyPipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return CurrencyPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	     * @howToUse `array_or_string_expression | slice:start[:end]`
	     * @description
	     *
	     * Where the input expression is a `List` or `String`, and:
	     * - `start`: The starting index of the subset to return.
	     *   - **a positive integer**: return the item at `start` index and all items after
	     *     in the list or string expression.
	     *   - **a negative integer**: return the item at `start` index from the end and all items after
	     *     in the list or string expression.
	     *   - **if positive and greater than the size of the expression**: return an empty list or string.
	     *   - **if negative and greater than the size of the expression**: return entire list or string.
	     * - `end`: The ending index of the subset to return.
	     *   - **omitted**: return all items until the end.
	     *   - **if positive**: return all items before `end` index of the list or string.
	     *   - **if negative**: return all items before `end` index from the end of the list or string.
	     *
	     * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	     * and `String.prototype.slice()`.
	     *
	     * When operating on a [List], the returned list is always a copy even when all
	     * the elements are being returned.
	     *
	     * When operating on a blank value, the pipe returns the blank value.
	     *
	     * ## List Example
	     *
	     * This `ngFor` example:
	     *
	     * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	     *
	     * produces the following:
	     *
	     *     <li>b</li>
	     *     <li>c</li>
	     *
	     * ## String Examples
	     *
	     * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	     *
	     * @stable
	     */
	    var SlicePipe = (function () {
	        function SlicePipe() {
	        }
	        SlicePipe.prototype.transform = function (value, start, end) {
	            if (end === void 0) { end = null; }
	            if (isBlank(value))
	                return value;
	            if (!this.supports(value)) {
	                throw new InvalidPipeArgumentError(SlicePipe, value);
	            }
	            if (isString(value)) {
	                return StringWrapper.slice(value, start, end);
	            }
	            return ListWrapper.slice(value, start, end);
	        };
	        SlicePipe.prototype.supports = function (obj) { return isString(obj) || isArray(obj); };
	        SlicePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	        ];
	        /** @nocollapse */
	        SlicePipe.ctorParameters = [];
	        return SlicePipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Transforms string to uppercase.
	     * @howToUse `expression | uppercase`
	     * @description
	     *
	     * Converts value into lowercase string using `String.prototype.toUpperCase()`.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * @stable
	     */
	    var UpperCasePipe = (function () {
	        function UpperCasePipe() {
	        }
	        UpperCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (!isString(value)) {
	                throw new InvalidPipeArgumentError(UpperCasePipe, value);
	            }
	            return value.toUpperCase();
	        };
	        UpperCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	        ];
	        /** @nocollapse */
	        UpperCasePipe.ctorParameters = [];
	        return UpperCasePipe;
	    }());

	    /**
	     * A collection of Angular pipes that are likely to be used in each and every application.
	     */
	    var COMMON_PIPES = [
	        AsyncPipe,
	        UpperCasePipe,
	        LowerCasePipe,
	        JsonPipe,
	        SlicePipe,
	        DecimalPipe,
	        PercentPipe,
	        CurrencyPipe,
	        DatePipe,
	        I18nPluralPipe,
	        I18nSelectPipe,
	    ];

	    // Note: This does not contain the location providers,
	    // as they need some platform specific implementations to work.
	    /**
	     * The module that includes all the basic Angular directives like {@link NgIf}, {@link NgFor}, ...
	     *
	     * @stable
	     */
	    var CommonModule = (function () {
	        function CommonModule() {
	        }
	        CommonModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        providers: [
	                            { provide: NgLocalization, useClass: NgLocaleLocalization },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        CommonModule.ctorParameters = [];
	        return CommonModule;
	    }());

	    exports.NgLocalization = NgLocalization;
	    exports.CommonModule = CommonModule;
	    exports.NgClass = NgClass;
	    exports.NgFor = NgFor;
	    exports.NgIf = NgIf;
	    exports.NgPlural = NgPlural;
	    exports.NgPluralCase = NgPluralCase;
	    exports.NgStyle = NgStyle;
	    exports.NgSwitch = NgSwitch;
	    exports.NgSwitchCase = NgSwitchCase;
	    exports.NgSwitchDefault = NgSwitchDefault;
	    exports.NgTemplateOutlet = NgTemplateOutlet;
	    exports.AsyncPipe = AsyncPipe;
	    exports.DatePipe = DatePipe;
	    exports.I18nPluralPipe = I18nPluralPipe;
	    exports.I18nSelectPipe = I18nSelectPipe;
	    exports.JsonPipe = JsonPipe;
	    exports.LowerCasePipe = LowerCasePipe;
	    exports.CurrencyPipe = CurrencyPipe;
	    exports.DecimalPipe = DecimalPipe;
	    exports.PercentPipe = PercentPipe;
	    exports.SlicePipe = SlicePipe;
	    exports.UpperCasePipe = UpperCasePipe;
	    exports.PlatformLocation = PlatformLocation;
	    exports.LocationStrategy = LocationStrategy;
	    exports.APP_BASE_HREF = APP_BASE_HREF;
	    exports.HashLocationStrategy = HashLocationStrategy;
	    exports.PathLocationStrategy = PathLocationStrategy;
	    exports.Location = Location;

	}));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// app.module.ts
	var core_1 = __webpack_require__(7);
	var platform_browser_1 = __webpack_require__(25);
	var app_component_1 = __webpack_require__(28);
	var AppModule = (function () {
	    function AppModule() {
	    }
	    AppModule = __decorate([
	        core_1.NgModule({
	            declarations: [app_component_1.AppComponent],
	            imports: [platform_browser_1.BrowserModule],
	            bootstrap: [app_component_1.AppComponent]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], AppModule);
	    return AppModule;
	}());
	exports.AppModule = AppModule;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// app.component.ts
	var core_1 = __webpack_require__(7);
	var AppComponent = (function () {
	    function AppComponent() {
	    }
	    AppComponent = __decorate([
	        core_1.Component({
	            selector: 'hello-world',
	            templateUrl: 'src/app.component.html'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], AppComponent);
	    return AppComponent;
	}());
	exports.AppComponent = AppComponent;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {var webpack = __webpack_require__(30);
	var path = __webpack_require__(36);

	module.exports = {
	    entry: './src/main.ts',
	    output: {
	        filename: './bundle.js'
	    },

	    resolve: {
	        root: [ path.join(__dirname, 'src')],
	        extensions: ['', '.ts', '.js']
	    },

	    module: {
	        loaders: [
	            { test: /\.ts$/, loader: 'ts-loader'}
	        ]
	    }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Compiler = __webpack_require__(31);
	var WebEnvironmentPlugin = __webpack_require__(130);
	var WebpackOptionsApply = __webpack_require__(131);
	var WebpackOptionsDefaulter = __webpack_require__(396);

	function webpack(options, callback) {
		new WebpackOptionsDefaulter().process(options);

		var compiler = new Compiler();
		compiler.options = options;
		compiler.options = new WebpackOptionsApply().process(options, compiler);
		new WebEnvironmentPlugin(options.inputFileSystem, options.outputFileSystem).apply(compiler);
		if(callback) {
			compiler.run(callback);
		}
		return compiler;
	}
	module.exports = webpack;

	webpack.WebpackOptionsDefaulter = WebpackOptionsDefaulter;
	webpack.WebpackOptionsApply = WebpackOptionsApply;
	webpack.Compiler = Compiler;
	webpack.WebEnvironmentPlugin = WebEnvironmentPlugin;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);
	var Tapable = __webpack_require__(37);

	var Compilation = __webpack_require__(38);
	var Parser = __webpack_require__(106);
	var Resolver = __webpack_require__(109);

	var NormalModuleFactory = __webpack_require__(113);
	var ContextModuleFactory = __webpack_require__(126);

	function Watching(compiler, watchOptions, handler) {
		this.startTime = null;
		this.invalid = false;
		this.error = null;
		this.stats = null;
		this.handler = handler;
		if(typeof watchOptions === "number") {
			this.watchOptions = {
				aggregateTimeout: watchOptions
			};
		} else if(watchOptions && typeof watchOptions === "object") {
			this.watchOptions = Object.create(watchOptions);
		} else {
			this.watchOptions = {};
		}
		this.watchOptions.aggregateTimeout = this.watchOptions.aggregateTimeout || 200;
		this.compiler = compiler;
		this.running = true;
		this.compiler.readRecords(function(err) {
			if(err) return this._done(err);

			this._go();
		}.bind(this));
	}

	Watching.prototype._go = function() {
		this.startTime = new Date().getTime();
		this.running = true;
		this.invalid = false;
		this.compiler.applyPluginsAsync("watch-run", this, function(err) {
			if(err) return this._done(err);
			this.compiler.compile(function(err, compilation) {
				if(err) return this._done(err);
				if(this.invalid) return this._done();

				if(this.compiler.applyPluginsBailResult("should-emit", compilation) === false) {
					return this._done(null, compilation);
				}

				this.compiler.emitAssets(compilation, function(err) {
					if(err) return this._done(err);
					if(this.invalid) return this._done();

					this.compiler.emitRecords(function(err) {
						if(err) return this._done(err);

						return this._done(null, compilation);
					}.bind(this));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};

	Watching.prototype._done = function(err, compilation) {
		this.running = false;
		if(this.invalid) return this._go();
		this.error = err || null;
		this.stats = compilation ? compilation.getStats() : null;
		if(this.stats) {
			this.stats.startTime = this.startTime;
			this.stats.endTime = new Date().getTime();
		}
		if(this.stats)
			this.compiler.applyPlugins("done", this.stats);
		else
			this.compiler.applyPlugins("failed", this.error);
		this.handler(this.error, this.stats);
		if(!this.error)
			this.watch(compilation.fileDependencies, compilation.contextDependencies, compilation.missingDependencies);
	};

	Watching.prototype.watch = function(files, dirs, missing) {
		this.watcher = this.compiler.watchFileSystem.watch(files, dirs, missing, this.startTime, this.watchOptions, function(err, filesModified, contextModified, missingModified, fileTimestamps, contextTimestamps) {
			this.watcher = null;
			if(err) return this.handler(err);

			this.compiler.fileTimestamps = fileTimestamps;
			this.compiler.contextTimestamps = contextTimestamps;
			this.invalidate();
		}.bind(this), function() {
			this.compiler.applyPlugins("invalid");
		}.bind(this));
	};

	Watching.prototype.invalidate = function() {
		if(this.watcher) {
			this.watcher.pause();
			this.watcher = null;
		}
		if(this.running) {
			this.invalid = true;
			return false;
		} else {
			this._go();
		}
	};

	Watching.prototype.close = function(callback) {
		if(callback === undefined) callback = function() {};

		if(this.watcher) {
			this.watcher.close();
			this.watcher = null;
		}
		if(this.running) {
			this.invalid = true;
			this._done = function() {
				callback();
			};
		} else {
			callback();
		}
	};

	function Compiler() {
		Tapable.call(this);

		this.outputPath = "";
		this.outputFileSystem = null;
		this.inputFileSystem = null;

		this.recordsInputPath = null;
		this.recordsOutputPath = null;
		this.records = {};

		this.fileTimestamps = {};
		this.contextTimestamps = {};

		this.resolvers = {
			normal: new Resolver(null),
			loader: new Resolver(null),
			context: new Resolver(null)
		};
		this.parser = new Parser();

		this.options = {};
	}
	module.exports = Compiler;

	Compiler.prototype = Object.create(Tapable.prototype);
	Compiler.prototype.constructor = Compiler;

	Compiler.Watching = Watching;
	Compiler.prototype.watch = function(watchOptions, handler) {
		this.fileTimestamps = {};
		this.contextTimestamps = {};
		var watching = new Watching(this, watchOptions, handler);
		return watching;
	};

	Compiler.prototype.run = function(callback) {
		var startTime = new Date().getTime();
		this.applyPluginsAsync("run", this, function(err) {
			if(err) return callback(err);

			this.readRecords(function(err) {
				if(err) return callback(err);

				this.compile(function(err, compilation) {
					if(err) return callback(err);

					if(this.applyPluginsBailResult("should-emit", compilation) === false) {
						var stats = compilation.getStats();
						stats.startTime = startTime;
						stats.endTime = new Date().getTime();
						this.applyPlugins("done", stats);
						return callback(null, stats);
					}

					this.emitAssets(compilation, function(err) {
						if(err) return callback(err);

						this.emitRecords(function(err) {
							if(err) return callback(err);

							var stats = compilation.getStats();
							stats.startTime = startTime;
							stats.endTime = new Date().getTime();
							this.applyPlugins("done", stats);
							return callback(null, stats);
						}.bind(this));
					}.bind(this));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};

	Compiler.prototype.runAsChild = function(callback) {
		this.compile(function(err, compilation) {
			if(err) return callback(err);

			this.parentCompilation.children.push(compilation);
			Object.keys(compilation.assets).forEach(function(name) {
				this.parentCompilation.assets[name] = compilation.assets[name];
			}.bind(this));

			var entries = compilation.chunks.filter(function(chunk) {
				return chunk.entry;
			});
			return callback(null, entries, compilation);
		}.bind(this));
	};

	Compiler.prototype.purgeInputFileSystem = function() {
		if(this.inputFileSystem && this.inputFileSystem.purge)
			this.inputFileSystem.purge();
	};

	Compiler.prototype.emitAssets = function(compilation, callback) {
		var outputPath;

		this.applyPluginsAsync("emit", compilation, function(err) {
			if(err) return callback(err);
			outputPath = compilation.getPath(this.outputPath);
			this.outputFileSystem.mkdirp(outputPath, emitFiles.bind(this));
		}.bind(this));

		function emitFiles(err) {
			if(err) return callback(err);

			__webpack_require__(39).forEach(Object.keys(compilation.assets), function(file, callback) {

				var targetFile = file;
				var queryStringIdx = targetFile.indexOf("?");
				if(queryStringIdx >= 0) {
					targetFile = targetFile.substr(0, queryStringIdx);
				}

				if(targetFile.match(/\/|\\/)) {
					var dir = path.dirname(targetFile);
					this.outputFileSystem.mkdirp(this.outputFileSystem.join(outputPath, dir), writeOut.bind(this));
				} else writeOut.call(this);

				function writeOut(err) {
					if(err) return callback(err);
					var targetPath = this.outputFileSystem.join(outputPath, targetFile);
					var source = compilation.assets[file];
					if(source.existsAt === targetPath) {
						source.emitted = false;
						return callback();
					}
					var content = source.source();
					if(!Buffer.isBuffer(content))
						content = new Buffer(content, "utf-8");
					source.existsAt = targetPath;
					source.emitted = true;
					this.outputFileSystem.writeFile(targetPath, content, callback);
				}

			}.bind(this), function(err) {
				if(err) return callback(err);

				afterEmit.call(this);
			}.bind(this));
		}

		function afterEmit() {
			this.applyPluginsAsync("after-emit", compilation, function(err) {
				if(err) return callback(err);

				return callback();
			});
		}

	};

	Compiler.prototype.emitRecords = function emitRecords(callback) {
		if(!this.recordsOutputPath) return callback();
		var idx1 = this.recordsOutputPath.lastIndexOf("/");
		var idx2 = this.recordsOutputPath.lastIndexOf("\\");
		var recordsOutputPathDirectory = null;
		if(idx1 > idx2) recordsOutputPathDirectory = this.recordsOutputPath.substr(0, idx1);
		if(idx1 < idx2) recordsOutputPathDirectory = this.recordsOutputPath.substr(0, idx2);
		if(!recordsOutputPathDirectory) return writeFile.call(this);
		this.outputFileSystem.mkdirp(recordsOutputPathDirectory, function(err) {
			if(err) return callback(err);
			writeFile.call(this);
		}.bind(this));

		function writeFile() {
			this.outputFileSystem.writeFile(this.recordsOutputPath, JSON.stringify(this.records, undefined, 2), callback);
		}
	};

	Compiler.prototype.readRecords = function readRecords(callback) {
		if(!this.recordsInputPath) {
			this.records = {};
			return callback();
		}
		this.inputFileSystem.stat(this.recordsInputPath, function(err) {
			// It doesn't exist
			// We can ignore this.
			if(err) return callback();

			this.inputFileSystem.readFile(this.recordsInputPath, function(err, content) {
				if(err) return callback(err);

				try {
					this.records = JSON.parse(content);
				} catch(e) {
					e.message = "Cannot parse records: " + e.message;
					return callback(e);
				}

				return callback();
			}.bind(this));
		}.bind(this));
	};

	Compiler.prototype.createChildCompiler = function(compilation, compilerName, outputOptions) {
		var childCompiler = new Compiler();
		for(var name in this._plugins) {
			if(["make", "compile", "emit", "after-emit", "invalid", "done", "this-compilation"].indexOf(name) < 0)
				childCompiler._plugins[name] = this._plugins[name].slice();
		}
		childCompiler.name = compilerName;
		childCompiler.outputPath = this.outputPath;
		childCompiler.inputFileSystem = this.inputFileSystem;
		childCompiler.outputFileSystem = null;
		childCompiler.resolvers = this.resolvers;
		childCompiler.parser = this.parser;
		childCompiler.fileTimestamps = this.fileTimestamps;
		childCompiler.contextTimestamps = this.contextTimestamps;
		if(!this.records[compilerName]) this.records[compilerName] = [];
		this.records[compilerName].push(childCompiler.records = {});
		childCompiler.options = Object.create(this.options);
		childCompiler.options.output = Object.create(childCompiler.options.output);
		for(name in outputOptions) {
			childCompiler.options.output[name] = outputOptions[name];
		}
		childCompiler.parentCompilation = compilation;
		return childCompiler;
	};

	Compiler.prototype.isChild = function() {
		return !!this.parentCompilation;
	};

	Compiler.prototype.createCompilation = function() {
		return new Compilation(this);
	};

	Compiler.prototype.newCompilation = function(params) {
		var compilation = this.createCompilation();
		compilation.fileTimestamps = this.fileTimestamps;
		compilation.contextTimestamps = this.contextTimestamps;
		compilation.name = this.name;
		compilation.records = this.records;
		this.applyPlugins("this-compilation", compilation, params);
		this.applyPlugins("compilation", compilation, params);
		return compilation;
	};

	Compiler.prototype.createNormalModuleFactory = function() {
		var normalModuleFactory = new NormalModuleFactory(this.options.context, this.resolvers, this.parser, this.options.module || {});
		this.applyPlugins("normal-module-factory", normalModuleFactory);
		return normalModuleFactory;
	};

	Compiler.prototype.createContextModuleFactory = function() {
		var contextModuleFactory = new ContextModuleFactory(this.resolvers, this.inputFileSystem);
		this.applyPlugins("context-module-factory", contextModuleFactory);
		return contextModuleFactory;
	};

	Compiler.prototype.newCompilationParams = function() {
		var params = {
			normalModuleFactory: this.createNormalModuleFactory(),
			contextModuleFactory: this.createContextModuleFactory()
		};
		return params;
	};

	Compiler.prototype.compile = function(callback) {
		var params = this.newCompilationParams();
		this.applyPlugins("compile", params);

		var compilation = this.newCompilation(params);

		this.applyPluginsParallel("make", compilation, function(err) {
			if(err) return callback(err);

			compilation.seal(function(err) {
				if(err) return callback(err);

				this.applyPluginsAsync("after-compile", compilation, function(err) {
					if(err) return callback(err);

					return callback(null, compilation);
				});
			}.bind(this));
		}.bind(this));
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(33)
	var ieee754 = __webpack_require__(34)
	var isArray = __webpack_require__(35)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer, (function() { return this; }())))

/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return (b64.length * 3 / 4) - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr((len * 3 / 4) - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0; i < l; i += 4) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 34 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 35 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Tapable() {
		this._plugins = {};
	}
	module.exports = Tapable;

	function copyProperties(from, to) {
		for(var key in from)
			to[key] = from[key];
		return to;
	}

	Tapable.mixin = function mixinTapable(pt) {
		copyProperties(Tapable.prototype, pt);
	}

	Tapable.prototype.applyPlugins = function applyPlugins(name) {
		if(!this._plugins[name]) return;
		var args = Array.prototype.slice.call(arguments, 1);
		var plugins = this._plugins[name];
		var old = this._currentPluginApply;
		for(this._currentPluginApply = 0; this._currentPluginApply < plugins.length; this._currentPluginApply++)
			plugins[this._currentPluginApply].apply(this, args);
		this._currentPluginApply = old;
	};

	Tapable.prototype.applyPluginsWaterfall = function applyPlugins(name, init) {
		if(!this._plugins[name]) return init;
		var args = Array.prototype.slice.call(arguments, 2);
		var plugins = this._plugins[name];
		var current = init;
		var old = this._currentPluginApply;
		for(this._currentPluginApply = 0; this._currentPluginApply < plugins.length; this._currentPluginApply++)
			current = plugins[this._currentPluginApply].apply(this, [current].concat(args));
		this._currentPluginApply = old;
		return current;
	};

	Tapable.prototype.applyPluginsBailResult = function applyPluginsBailResult(name) {
		if(!this._plugins[name]) return;
		var args = Array.prototype.slice.call(arguments, 1);
		var plugins = this._plugins[name];
		var old = this._currentPluginApply
		for(this._currentPluginApply = 0; this._currentPluginApply < plugins.length; this._currentPluginApply++) {
			var result = plugins[this._currentPluginApply].apply(this, args);
			if(typeof result !== "undefined") {
				this._currentPluginApply = old;
				return result;
			}
		}
		this._currentPluginApply = old;
	};

	Tapable.prototype.applyPluginsAsyncSeries = Tapable.prototype.applyPluginsAsync = function applyPluginsAsync(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callback = args.pop();
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback();
		var plugins = this._plugins[name];
		var i = 0;
		args.push(copyProperties(callback, function next(err) {
			if(err) return callback(err);
			i++;
			if(i >= plugins.length) {
				return callback();
			}
			plugins[i].apply(this, args);
		}.bind(this)));
		plugins[0].apply(this, args);
	};

	Tapable.prototype.applyPluginsAsyncWaterfall = function applyPluginsAsyncWaterfall(name, init, callback) {
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback(null, init);
		var plugins = this._plugins[name];
		var i = 0;
		var next = copyProperties(callback, function(err, value) {
			if(err) return callback(err);
			i++;
			if(i >= plugins.length) {
				return callback(null, value);
			}
			plugins[i].call(this, value, next);
		}.bind(this));
		plugins[0].call(this, init, next);
	};

	Tapable.prototype.applyPluginsParallel = function applyPluginsParallel(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callback = args.pop();
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback();
		var plugins = this._plugins[name];
		var remaining = plugins.length;
		args.push(copyProperties(callback, function(err) {
			if(remaining < 0) return; // ignore
			if(err) {
				remaining = -1;
				return callback(err);
			}
			remaining--;
			if(remaining == 0) {
				return callback();
			}
		}));
		for(var i = 0; i < plugins.length; i++) {
			plugins[i].apply(this, args);
			if(remaining < 0) return;
		}
	};

	Tapable.prototype.applyPluginsParallelBailResult = function applyPluginsParallelBailResult(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callback = args[args.length-1];
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback();
		var plugins = this._plugins[name];
		var currentPos = plugins.length;
		var currentError, currentResult;
		var done = [];
		for(var i = 0; i < plugins.length; i++) {
			args[args.length-1] = (function(i) {
				return copyProperties(callback, function(err, result) {
					if(i >= currentPos) return; // ignore
					done.push(i);
					if(err || result) {
						currentPos = i + 1;
						done = done.filter(function(item) {
							return item <= i;
						});
						currentError = err;
						currentResult = result;
					}
					if(done.length == currentPos) {
						callback(currentError, currentResult);
						currentPos = 0;
					}
				});
			}(i));
			plugins[i].apply(this, args);
		}
	};


	Tapable.prototype.restartApplyPlugins = function restartApplyPlugins() {
		if(typeof this._currentPluginApply !== "number")
			throw new Error("Tapable.prototype.restartApplyPlugins can only be used inside of any sync plugins application");
		this._currentPluginApply = -1;
	};


	Tapable.prototype.plugin = function plugin(name, fn) {
		if(Array.isArray(name)) {
			name.forEach(function(name) {
				this.plugin(name, fn);
			}, this);
			return;
		}
		if(!this._plugins[name]) this._plugins[name] = [fn];
		else this._plugins[name].push(fn);
	};

	Tapable.prototype.apply = function apply() {
		for(var i = 0; i < arguments.length; i++) {
			arguments[i].apply(this);
		}
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(39);

	var Tapable = __webpack_require__(37);
	var EntryModuleNotFoundError = __webpack_require__(41);
	var ModuleNotFoundError = __webpack_require__(42);
	var CriticalDependenciesWarning = __webpack_require__(43);
	var Module = __webpack_require__(44);
	var ArrayMap = __webpack_require__(72);
	var Chunk = __webpack_require__(73);
	var Stats = __webpack_require__(74);
	var MainTemplate = __webpack_require__(77);
	var ChunkTemplate = __webpack_require__(82);
	var HotUpdateChunkTemplate = __webpack_require__(83);
	var ModuleTemplate = __webpack_require__(84);
	var Dependency = __webpack_require__(85);
	var ChunkRenderError = __webpack_require__(86);
	var CachedSource = __webpack_require__(87);

	function Compilation(compiler) {
		Tapable.call(this);
		this.compiler = compiler;
		this.resolvers = compiler.resolvers;
		this.inputFileSystem = compiler.inputFileSystem;

		var options = this.options = compiler.options;
		this.outputOptions = options && options.output;
		this.bail = options && options.bail;
		this.profile = options && options.profile;

		this.mainTemplate = new MainTemplate(this.outputOptions);
		this.chunkTemplate = new ChunkTemplate(this.outputOptions, this.mainTemplate);
		this.hotUpdateChunkTemplate = new HotUpdateChunkTemplate(this.outputOptions);
		this.moduleTemplate = new ModuleTemplate(this.outputOptions);

		this.entries = [];
		this.preparedChunks = [];
		this.chunks = [];
		this.namedChunks = {};
		this.modules = [];
		this._modules = {};
		this.cache = null;
		this.records = null;
		this.nextFreeModuleId = 1;
		this.nextFreeChunkId = 0;
		this.nextFreeModuleIndex = 0;
		this.nextFreeModuleIndex2 = 0;
		this.additionalChunkAssets = [];
		this.assets = {};
		this.errors = [];
		this.warnings = [];
		this.children = [];
		this.dependencyFactories = new ArrayMap();
		this.dependencyTemplates = new ArrayMap();
	}
	module.exports = Compilation;

	Compilation.prototype = Object.create(Tapable.prototype);
	Compilation.prototype.constructor = Compilation;

	Compilation.prototype.templatesPlugin = function(name, fn) {
		this.mainTemplate.plugin(name, fn);
		this.chunkTemplate.plugin(name, fn);
	};

	Compilation.prototype.addModule = function(module, cacheGroup) {
		cacheGroup = cacheGroup || "m";
		var identifier = module.identifier();
		if(this._modules[identifier]) {
			return false;
		}
		if(this.cache && this.cache[cacheGroup + identifier]) {
			var cacheModule = this.cache[cacheGroup + identifier];

			var rebuild = true;
			if(!cacheModule.error && cacheModule.cacheable && this.fileTimestamps && this.contextTimestamps) {
				rebuild = cacheModule.needRebuild(this.fileTimestamps, this.contextTimestamps);
			}

			if(!rebuild) {
				cacheModule.disconnect();
				this._modules[identifier] = cacheModule;
				this.modules.push(cacheModule);
				cacheModule.errors.forEach(function(err) {
					this.errors.push(err);
				}, this);
				cacheModule.warnings.forEach(function(err) {
					this.warnings.push(err);
				}, this);
				return cacheModule;
			} else {
				module.lastId = cacheModule.id;
			}
		}
		this._modules[identifier] = module;
		if(this.cache) {
			this.cache[cacheGroup + identifier] = module;
		}
		this.modules.push(module);
		return true;
	};

	Compilation.prototype.getModule = function(module) {
		var identifier = module.identifier();
		return this._modules[identifier];
	};

	Compilation.prototype.findModule = function(identifier) {
		return this._modules[identifier];
	};

	Compilation.prototype.buildModule = function(module, thisCallback) {
		this.applyPlugins("build-module", module);
		if(module.building) return module.building.push(thisCallback);
		var building = module.building = [thisCallback];

		function callback(err) {
			module.building = undefined;
			building.forEach(function(cb) {
				cb(err);
			});
		}
		module.build(this.options, this, this.resolvers.normal, this.inputFileSystem, function(err) {
			module.errors.forEach(function(err) {
				this.errors.push(err);
			}, this);
			module.warnings.forEach(function(err) {
				this.warnings.push(err);
			}, this);
			module.dependencies.sort(Dependency.compare);
			if(err) {
				module.error = err;
				this.applyPlugins("failed-module", module);
				return callback(err);
			}
			this.applyPlugins("succeed-module", module);
			return callback();
		}.bind(this));
	};

	Compilation.prototype.processModuleDependencies = function(module, callback) {
		var dependencies = [];

		function addDependency(dep) {
			for(var i = 0; i < dependencies.length; i++) {
				if(dep.isEqualResource(dependencies[i][0])) {
					return dependencies[i].push(dep);
				}
			}
			dependencies.push([dep]);
		}

		function addDependenciesBlock(block) {
			if(block.dependencies) {
				block.dependencies.forEach(addDependency);
			}
			if(block.blocks) {
				block.blocks.forEach(addDependenciesBlock);
			}
			if(block.variables) {
				block.variables.forEach(function(v) {
					v.dependencies.forEach(addDependency);
				});
			}
		}
		addDependenciesBlock(module);
		this.addModuleDependencies(module, dependencies, this.bail, null, true, callback);
	};

	Compilation.prototype.addModuleDependencies = function(module, dependencies, bail, cacheGroup, recursive, callback) {
		var _this = this;
		var start = _this.profile && +new Date();

		var factories = [];
		for(var i = 0; i < dependencies.length; i++) {
			var factory = _this.dependencyFactories.get(dependencies[i][0].constructor);
			if(!factory) {
				return callback(new Error("No module factory available for dependency type: " + dependencies[i][0].constructor.name));
			}
			factories[i] = [factory, dependencies[i]];
		}
		async.forEach(factories, function(item, callback) {
			var dependencies = item[1];
			var criticalDependencies = dependencies.filter(function(d) {
				return !!d.critical;
			});
			if(criticalDependencies.length > 0) {
				_this.warnings.push(new CriticalDependenciesWarning(module, criticalDependencies));
			}

			var errorAndCallback = function errorAndCallback(err) {
				err.dependencies = dependencies;
				err.origin = module;
				module.dependenciesErrors.push(err);
				_this.errors.push(err);
				if(bail) {
					callback(err);
				} else {
					callback();
				}
			};
			var warningAndCallback = function warningAndCallback(err) {
				err.dependencies = dependencies;
				err.origin = module;
				module.dependenciesWarnings.push(err);
				_this.warnings.push(err);
				callback();
			};

			var factory = item[0];
			factory.create(module.context, dependencies[0], function(err, dependantModule) {
				function isOptional() {
					return dependencies.filter(function(d) {
						return !d.optional;
					}).length === 0;
				}

				function errorOrWarningAndCallback(err) {
					if(isOptional()) {
						return warningAndCallback(err);
					} else {
						return errorAndCallback(err);
					}
				}
				if(err) {
					return errorOrWarningAndCallback(new ModuleNotFoundError(module, err));
				}
				if(!dependantModule) {
					return process.nextTick(callback);
				}
				if(_this.profile) {
					if(!dependantModule.profile) {
						dependantModule.profile = {};
					}
					var afterFactory = +new Date();
					dependantModule.profile.factory = afterFactory - start;
				}

				dependantModule.issuer = module.identifier();
				var newModule = _this.addModule(dependantModule, cacheGroup);

				if(!newModule) { // from cache
					dependantModule = _this.getModule(dependantModule);

					if(dependantModule.optional) {
						dependantModule.optional = isOptional();
					}

					if(dependantModule.id === 0) {
						return errorOrWarningAndCallback(
							new ModuleNotFoundError(module, new Error("a dependency to an entry point is not allowed"))
						);
					}

					dependencies.forEach(function(dep) {
						dep.module = dependantModule;
						dependantModule.addReason(module, dep);
					});

					if(_this.profile) {
						if(!module.profile) {
							module.profile = {};
						}
						var time = +new Date() - start;
						if(!module.profile.dependencies || time > module.profile.dependencies) {
							module.profile.dependencies = time;
						}
					}

					return process.nextTick(callback);
				}

				if(newModule instanceof Module) {
					if(_this.profile) {
						newModule.profile = dependantModule.profile;
					}

					newModule.optional = isOptional();
					newModule.issuer = dependantModule.issuer;
					dependantModule = newModule;

					dependencies.forEach(function(dep) {
						dep.module = dependantModule;
						dependantModule.addReason(module, dep);
					});

					if(_this.profile) {
						var afterBuilding = +new Date();
						module.profile.building = afterBuilding - afterFactory;
					}

					if(recursive) {
						return process.nextTick(_this.processModuleDependencies.bind(_this, dependantModule, callback));
					} else {
						return process.nextTick(callback);
					}
				}

				dependantModule.optional = isOptional();

				dependencies.forEach(function(dep) {
					dep.module = dependantModule;
					dependantModule.addReason(module, dep);
				});

				_this.buildModule(dependantModule, function(err) {
					if(err) {
						return errorOrWarningAndCallback(err);
					}

					if(_this.profile) {
						var afterBuilding = +new Date();
						dependantModule.profile.building = afterBuilding - afterFactory;
					}

					if(recursive) {
						_this.processModuleDependencies(dependantModule, callback);
					} else {
						return callback();
					}
				});

			});
		}, function(err) {
			if(err) {
				return callback(err);
			}

			return callback();
		});
	};

	Compilation.prototype._addModuleChain = function process(context, dependency, onModule, callback) {
		var start = this.profile && +new Date();

		var errorAndCallback = this.bail ? function errorAndCallback(err) {
			callback(err);
		} : function errorAndCallback(err) {
			err.dependencies = [dependency];
			this.errors.push(err);
			callback();
		}.bind(this);

		if(typeof dependency !== "object" || dependency === null || !dependency.constructor) {
			throw new Error("Parameter 'dependency' must be a Dependency");
		}

		var moduleFactory = this.dependencyFactories.get(dependency.constructor);
		if(!moduleFactory) {
			throw new Error("No dependency factory available for this dependency type: " + dependency.constructor.name);
		}

		moduleFactory.create(context, dependency, function(err, module) {
			if(err) {
				return errorAndCallback(new EntryModuleNotFoundError(err));
			}

			if(this.profile) {
				if(!module.profile) {
					module.profile = {};
				}
				var afterFactory = +new Date();
				module.profile.factory = afterFactory - start;
			}

			var result = this.addModule(module);
			if(!result) {
				module = this.getModule(module);

				onModule(module);

				if(this.profile) {
					var afterBuilding = +new Date();
					module.profile.building = afterBuilding - afterFactory;
				}

				return callback(null, module);
			}

			if(result instanceof Module) {
				if(this.profile) {
					result.profile = module.profile;
				}

				module = result;

				onModule(module);

				moduleReady.call(this);
				return;
			}

			onModule(module);

			this.buildModule(module, function(err) {
				if(err) {
					return errorAndCallback(err);
				}

				if(this.profile) {
					var afterBuilding = +new Date();
					module.profile.building = afterBuilding - afterFactory;
				}

				moduleReady.call(this);
			}.bind(this));

			function moduleReady() {
				this.processModuleDependencies(module, function(err) {
					if(err) {
						return callback(err);
					}

					return callback(null, module);
				});
			}
		}.bind(this));
	};

	Compilation.prototype.addEntry = function process(context, entry, name, callback) {
		this._addModuleChain(context, entry, function(module) {

			entry.module = module;
			this.entries.push(module);
			module.issuer = null;
			module.id = 0;

		}.bind(this), function(err, module) {
			if(err) {
				return callback(err);
			}

			if(module) {
				if(module.reasons.length > 0) {
					return callback(new Error("module cannot be added as entry point, because it's already in the bundle"));
				}
				this.preparedChunks.push({
					name: name,
					module: module
				});
			}
			return callback();
		}.bind(this));
	};

	Compilation.prototype.prefetch = function process(context, dependency, callback) {
		this._addModuleChain(context, dependency, function(module) {

			module.prefetched = true;
			module.issuer = null;

		}, callback);
	};

	Compilation.prototype.rebuildModule = function(module, thisCallback) {
		if(module.variables.length || module.blocks.length)
			throw new Error("Cannot rebuild a complex module with variables or blocks");
		if(module.rebuilding) {
			return module.rebuilding.push(thisCallback);
		}
		var rebuilding = module.rebuilding = [thisCallback];

		function callback(err) {
			module.rebuilding = undefined;
			rebuilding.forEach(function(cb) {
				cb(err);
			});
		}
		var deps = module.dependencies.slice();
		this.buildModule(module, function(err) {
			if(err) return callback(err);

			this.processModuleDependencies(module, function(err) {
				if(err) return callback(err);
				deps.forEach(function(d) {
					if(d.module && d.module.removeReason(module, d)) {
						module.chunks.forEach(function(chunk) {
							if(!d.module.hasReasonForChunk(chunk)) {
								if(d.module.removeChunk(chunk)) {
									this.removeChunkFromDependencies(d.module, chunk);
								}
							}
						}, this);
					}
				}, this);
				callback();
			}.bind(this));

		}.bind(this));
	};

	Compilation.prototype.seal = function seal(callback) {
		this.applyPlugins("seal");
		this.preparedChunks.sort(function(a, b) {
			if(a.name < b.name) return -1;
			if(a.name > b.name) return 1;
			return 0;
		});
		this.preparedChunks.forEach(function(preparedChunk) {
			var module = preparedChunk.module;
			var chunk = this.addChunk(preparedChunk.name, module);
			chunk.initial = chunk.entry = true;
			chunk.addModule(module);
			module.addChunk(chunk);
			if(typeof module.index !== "number") {
				module.index = this.nextFreeModuleIndex++;
			}
			this.processDependenciesBlockForChunk(module, chunk);
			if(typeof module.index2 !== "number") {
				module.index2 = this.nextFreeModuleIndex2++;
			}
		}, this);
		this.sortModules(this.modules);
		this.applyPlugins("optimize");

		this.applyPlugins("optimize-modules", this.modules);
		this.applyPlugins("after-optimize-modules", this.modules);

		this.applyPlugins("optimize-chunks", this.chunks);
		this.applyPlugins("after-optimize-chunks", this.chunks);

		this.applyPluginsAsync("optimize-tree", this.chunks, this.modules, function(err) {
			if(err) {
				return callback(err);
			}

			this.applyPlugins("after-optimize-tree", this.chunks, this.modules);

			var shouldRecord = this.applyPluginsBailResult("should-record") !== false;

			this.applyPlugins("revive-modules", this.modules, this.records);
			this.applyPlugins("optimize-module-order", this.modules);
			this.applyPlugins("before-module-ids", this.modules);
			this.applyModuleIds();
			this.applyPlugins("optimize-module-ids", this.modules);
			this.applyPlugins("after-optimize-module-ids", this.modules);
			if(shouldRecord)
				this.applyPlugins("record-modules", this.modules, this.records);

			this.applyPlugins("revive-chunks", this.chunks, this.records);
			this.applyPlugins("optimize-chunk-order", this.chunks);
			this.applyPlugins("before-chunk-ids", this.chunks);
			this.applyChunkIds();
			this.applyPlugins("optimize-chunk-ids", this.chunks);
			this.applyPlugins("after-optimize-chunk-ids", this.chunks);
			if(shouldRecord)
				this.applyPlugins("record-chunks", this.chunks, this.records);

			this.sortItems();
			this.applyPlugins("before-hash");
			this.createHash();
			this.applyPlugins("after-hash");
			this.applyPlugins("before-chunk-assets");
			this.createChunkAssets();
			this.applyPlugins("additional-chunk-assets", this.chunks);
			this.summarizeDependencies();
			if(shouldRecord)
				this.applyPlugins("record", this, this.records);

			this.applyPluginsAsync("additional-assets", function(err) {
				if(err) {
					return callback(err);
				}
				this.applyPluginsAsync("optimize-chunk-assets", this.chunks, function(err) {
					if(err) {
						return callback(err);
					}
					this.applyPlugins("after-optimize-chunk-assets", this.chunks);
					this.applyPluginsAsync("optimize-assets", this.assets, function(err) {
						if(err) {
							return callback(err);
						}
						this.applyPlugins("after-optimize-assets", this.assets);
						return callback();
					}.bind(this));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};

	Compilation.prototype.sortModules = function sortModules(modules) {
		modules.sort(function(a, b) {
			if(a.index < b.index) return -1;
			if(a.index > b.index) return 1;
			return 0;
		});
	};

	Compilation.prototype.addChunk = function addChunk(name, module, loc) {
		var chunk;
		if(name) {
			if(Object.prototype.hasOwnProperty.call(this.namedChunks, name)) {
				chunk = this.namedChunks[name];
				if(module) {
					chunk.addOrigin(module, loc);
				}
				return chunk;
			}
		}
		chunk = new Chunk(name, module, loc);
		this.chunks.push(chunk);
		if(name) {
			this.namedChunks[name] = chunk;
		}
		return chunk;
	};

	Compilation.prototype.processDependenciesBlockForChunk = function processDependenciesBlockForChunk(block, chunk) {
		if(block.variables) {
			block.variables.forEach(function(v) {
				v.dependencies.forEach(iteratorDependency, this);
			}, this);
		}
		if(block.dependencies) {
			block.dependencies.forEach(iteratorDependency, this);
		}
		if(block.blocks) {
			block.blocks.forEach(function(b) {
				var c;
				if(!b.chunks) {
					c = this.addChunk(b.chunkName, b.module, b.loc);
					b.chunks = [c];
					c.addBlock(b);
				} else {
					c = b.chunks[0];
				}
				chunk.addChunk(c);
				c.addParent(chunk);
				this.processDependenciesBlockForChunk(b, c);
			}, this);
		}

		function iteratorDependency(d) {
			if(!d.module) {
				return;
			}
			if(typeof d.module.index !== "number") {
				d.module.index = this.nextFreeModuleIndex++;
			}
			if(d.weak) {
				return;
			}
			if(d.module.error) {
				d.module = null;
				return;
			}
			if(chunk.addModule(d.module)) {
				d.module.addChunk(chunk);
				this.processDependenciesBlockForChunk(d.module, chunk);
			}
			if(typeof d.module.index2 !== "number") {
				d.module.index2 = this.nextFreeModuleIndex2++;
			}
		}
	};

	Compilation.prototype.removeChunkFromDependencies = function removeChunkFromDependencies(block, chunk) {
		block.blocks.forEach(function(b) {
			b.chunks.forEach(function(c) {
				chunk.removeChunk(c);
				c.removeParent(chunk);
				this.removeChunkFromDependencies(b, c);
			}, this);
		}, this);

		function iteratorDependency(d) {
			if(!d.module) {
				return;
			}
			if(!d.module.hasReasonForChunk(chunk)) {
				if(d.module.removeChunk(chunk)) {
					this.removeChunkFromDependencies(d.module, chunk);
				}
			}
		}
		block.dependencies.forEach(iteratorDependency, this);
		block.variables.forEach(function(v) {
			v.dependencies.forEach(iteratorDependency, this);
		}, this);

	};

	Compilation.prototype.applyModuleIds = function applyModuleIds() {
		this.modules.forEach(function(module) {
			if(module.id === null) {
				module.id = this.nextFreeModuleId++;
			}
		}, this);
	};

	Compilation.prototype.applyChunkIds = function applyChunkIds() {
		this.chunks.forEach(function(chunk) {
			if(chunk.id === null) {
				chunk.id = this.nextFreeChunkId++;
			}
			if(!chunk.ids) {
				chunk.ids = [chunk.id];
			}
		}, this);
	};

	Compilation.prototype.sortItems = function sortItems() {
		function byId(a, b) {
			return a.id - b.id;
		}
		this.chunks.sort(byId);
		this.modules.sort(byId);
		this.modules.forEach(function(module) {
			module.chunks.sort(byId);
			module.reasons.sort(function(a, b) {
				return byId(a.module, b.module);
			});
		});
		this.chunks.forEach(function(chunk) {
			chunk.modules.sort(byId);
		});
	};

	Compilation.prototype.summarizeDependencies = function summarizeDependencies() {
		function filterDups(array) {
			var newArray = [];
			for(var i = 0; i < array.length; i++) {
				if(i === 0 || array[i - 1] !== array[i])
					newArray.push(array[i]);
			}
			return newArray;
		}
		this.fileDependencies = [];
		this.contextDependencies = [];
		this.missingDependencies = [];
		this.children.forEach(function(child) {
			this.fileDependencies = this.fileDependencies.concat(child.fileDependencies);
			this.contextDependencies = this.contextDependencies.concat(child.contextDependencies);
			this.missingDependencies = this.missingDependencies.concat(child.missingDependencies);
		}.bind(this));
		this.modules.forEach(function(module) {
			if(module.fileDependencies) {
				module.fileDependencies.forEach(function(item) {
					this.fileDependencies.push(item);
				}, this);
			}
			if(module.contextDependencies) {
				module.contextDependencies.forEach(function(item) {
					this.contextDependencies.push(item);
				}, this);
			}
		}, this);
		this.errors.forEach(function(error) {
			if(Array.isArray(error.missing)) {
				error.missing.forEach(function(item) {
					this.missingDependencies.push(item);
				}, this);
			}
		}, this);
		this.fileDependencies.sort();
		this.fileDependencies = filterDups(this.fileDependencies);
		this.contextDependencies.sort();
		this.contextDependencies = filterDups(this.contextDependencies);
		this.missingDependencies.sort();
		this.missingDependencies = filterDups(this.missingDependencies);
	};

	Compilation.prototype.createHash = function createHash() {
		var outputOptions = this.outputOptions;
		var hashFunction = outputOptions.hashFunction;
		var hashDigest = outputOptions.hashDigest;
		var hashDigestLength = outputOptions.hashDigestLength;
		var hash = __webpack_require__(88).createHash(hashFunction);
		this.mainTemplate.updateHash(hash);
		this.chunkTemplate.updateHash(hash);
		this.moduleTemplate.updateHash(hash);
		var i, chunk;
		var chunks = this.chunks.slice();
		chunks.sort(function(a, b) {
			if(a.entry && !b.entry) return 1;
			if(!a.entry && b.entry) return -1;
			return 0;
		});
		for(i = 0; i < chunks.length; i++) {
			chunk = chunks[i];
			var chunkHash = __webpack_require__(88).createHash(hashFunction);
			chunk.updateHash(chunkHash);
			if(chunk.entry) {
				this.mainTemplate.updateHashForChunk(chunkHash, chunk);
			} else {
				this.chunkTemplate.updateHashForChunk(chunkHash);
			}
			this.applyPlugins("chunk-hash", chunk, chunkHash);
			chunk.hash = chunkHash.digest(hashDigest);
			hash.update(chunk.hash);
			chunk.renderedHash = chunk.hash.substr(0, hashDigestLength);
		}
		this.fullHash = hash.digest(hashDigest);
		this.hash = this.fullHash.substr(0, hashDigestLength);
	};

	Compilation.prototype.modifyHash = function modifyHash(update) {
		var outputOptions = this.outputOptions;
		var hashFunction = outputOptions.hashFunction;
		var hashDigest = outputOptions.hashDigest;
		var hashDigestLength = outputOptions.hashDigestLength;
		var hash = __webpack_require__(88).createHash(hashFunction);
		hash.update(this.fullHash);
		hash.update(update);
		this.fullHash = hash.digest(hashDigest);
		this.hash = this.fullHash.substr(0, hashDigestLength);
	};

	Compilation.prototype.createChunkAssets = function createChunkAssets() {
		var outputOptions = this.outputOptions;
		var filename = outputOptions.filename || "bundle.js";
		var chunkFilename = outputOptions.chunkFilename || "[id]." + filename;
		var namedChunkFilename = outputOptions.namedChunkFilename || null;
		for(var i = 0; i < this.modules.length; i++) {
			var module = this.modules[i];
			if(module.assets) {
				Object.keys(module.assets).forEach(function(name) {
					var file = this.getPath(name);
					this.assets[file] = module.assets[name];
					this.applyPlugins("module-asset", module, file);
				}, this);
			}
		}
		for(i = 0; i < this.chunks.length; i++) {
			var chunk = this.chunks[i];
			chunk.files = [];
			var chunkHash = chunk.hash;
			var source;
			var file;
			var filenameTemplate = chunk.filenameTemplate ? chunk.filenameTemplate :
				chunk.initial ? filename :
				chunkFilename;
			try {
				var useChunkHash = !chunk.entry || (this.mainTemplate.useChunkHash && this.mainTemplate.useChunkHash(chunk));
				var usedHash = useChunkHash ? chunkHash : this.fullHash;
				if(this.cache && this.cache["c" + chunk.id] && this.cache["c" + chunk.id].hash === usedHash) {
					source = this.cache["c" + chunk.id].source;
				} else {
					if(chunk.entry) {
						source = this.mainTemplate.render(this.hash, chunk, this.moduleTemplate, this.dependencyTemplates);
					} else {
						source = this.chunkTemplate.render(chunk, this.moduleTemplate, this.dependencyTemplates);
					}
					if(this.cache) {
						this.cache["c" + chunk.id] = {
							hash: usedHash,
							source: source = (source instanceof CachedSource ? source : new CachedSource(source))
						};
					}
				}
				this.assets[
					file = this.getPath(filenameTemplate, {
						noChunkHash: !useChunkHash,
						chunk: chunk
					})
				] = source;
				chunk.files.push(file);
				this.applyPlugins("chunk-asset", chunk, file);
				file = undefined;
				if(chunk.id !== 0 && namedChunkFilename && chunk.name) {
					this.assets[
						file = this.getPath(namedChunkFilename, {
							noChunkHash: !useChunkHash,
							chunk: chunk
						})
					] = source;
					chunk.files.push(file);
					this.applyPlugins("chunk-asset", chunk, file);
				}
			} catch(err) {
				this.errors.push(new ChunkRenderError(chunk, file || filenameTemplate, err));
			}
		}
	};

	Compilation.prototype.getPath = function(filename, data) {
		data = data || {};
		data.hash = data.hash || this.hash;
		return this.mainTemplate.applyPluginsWaterfall("asset-path", filename, data);
	};

	Compilation.prototype.getStats = function() {
		return new Stats(this);
	};

	Compilation.prototype.createChildCompiler = function(name, outputOptions) {
		return this.compiler.createChildCompiler(this, name, outputOptions);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, setImmediate, process) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	(function () {

	    var async = {};
	    function noop() {}
	    function identity(v) {
	        return v;
	    }
	    function toBool(v) {
	        return !!v;
	    }
	    function notId(v) {
	        return !v;
	    }

	    // global on the server, window in the browser
	    var previous_async;

	    // Establish the root object, `window` (`self`) in the browser, `global`
	    // on the server, or `this` in some virtual machines. We use `self`
	    // instead of `window` for `WebWorker` support.
	    var root = typeof self === 'object' && self.self === self && self ||
	            typeof global === 'object' && global.global === global && global ||
	            this;

	    if (root != null) {
	        previous_async = root.async;
	    }

	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };

	    function only_once(fn) {
	        return function() {
	            if (fn === null) throw new Error("Callback was already called.");
	            fn.apply(this, arguments);
	            fn = null;
	        };
	    }

	    function _once(fn) {
	        return function() {
	            if (fn === null) return;
	            fn.apply(this, arguments);
	            fn = null;
	        };
	    }

	    //// cross-browser compatiblity functions ////

	    var _toString = Object.prototype.toString;

	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };

	    // Ported from underscore.js isObject
	    var _isObject = function(obj) {
	        var type = typeof obj;
	        return type === 'function' || type === 'object' && !!obj;
	    };

	    function _isArrayLike(arr) {
	        return _isArray(arr) || (
	            // has a positive integer length property
	            typeof arr.length === "number" &&
	            arr.length >= 0 &&
	            arr.length % 1 === 0
	        );
	    }

	    function _arrayEach(arr, iterator) {
	        var index = -1,
	            length = arr.length;

	        while (++index < length) {
	            iterator(arr[index], index, arr);
	        }
	    }

	    function _map(arr, iterator) {
	        var index = -1,
	            length = arr.length,
	            result = Array(length);

	        while (++index < length) {
	            result[index] = iterator(arr[index], index, arr);
	        }
	        return result;
	    }

	    function _range(count) {
	        return _map(Array(count), function (v, i) { return i; });
	    }

	    function _reduce(arr, iterator, memo) {
	        _arrayEach(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    }

	    function _forEachOf(object, iterator) {
	        _arrayEach(_keys(object), function (key) {
	            iterator(object[key], key);
	        });
	    }

	    function _indexOf(arr, item) {
	        for (var i = 0; i < arr.length; i++) {
	            if (arr[i] === item) return i;
	        }
	        return -1;
	    }

	    var _keys = Object.keys || function (obj) {
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };

	    function _keyIterator(coll) {
	        var i = -1;
	        var len;
	        var keys;
	        if (_isArrayLike(coll)) {
	            len = coll.length;
	            return function next() {
	                i++;
	                return i < len ? i : null;
	            };
	        } else {
	            keys = _keys(coll);
	            len = keys.length;
	            return function next() {
	                i++;
	                return i < len ? keys[i] : null;
	            };
	        }
	    }

	    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
	    // This accumulates the arguments passed into an array, after a given index.
	    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
	    function _restParam(func, startIndex) {
	        startIndex = startIndex == null ? func.length - 1 : +startIndex;
	        return function() {
	            var length = Math.max(arguments.length - startIndex, 0);
	            var rest = Array(length);
	            for (var index = 0; index < length; index++) {
	                rest[index] = arguments[index + startIndex];
	            }
	            switch (startIndex) {
	                case 0: return func.call(this, rest);
	                case 1: return func.call(this, arguments[0], rest);
	            }
	            // Currently unused but handle cases outside of the switch statement:
	            // var args = Array(startIndex + 1);
	            // for (index = 0; index < startIndex; index++) {
	            //     args[index] = arguments[index];
	            // }
	            // args[startIndex] = rest;
	            // return func.apply(this, args);
	        };
	    }

	    function _withoutIndex(iterator) {
	        return function (value, index, callback) {
	            return iterator(value, callback);
	        };
	    }

	    //// exported async module functions ////

	    //// nextTick implementation with browser-compatible fallback ////

	    // capture the global reference to guard against fakeTimer mocks
	    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

	    var _delay = _setImmediate ? function(fn) {
	        // not a direct alias for IE10 compatibility
	        _setImmediate(fn);
	    } : function(fn) {
	        setTimeout(fn, 0);
	    };

	    if (typeof process === 'object' && typeof process.nextTick === 'function') {
	        async.nextTick = process.nextTick;
	    } else {
	        async.nextTick = _delay;
	    }
	    async.setImmediate = _setImmediate ? _delay : async.nextTick;


	    async.forEach =
	    async.each = function (arr, iterator, callback) {
	        return async.eachOf(arr, _withoutIndex(iterator), callback);
	    };

	    async.forEachSeries =
	    async.eachSeries = function (arr, iterator, callback) {
	        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
	    };


	    async.forEachLimit =
	    async.eachLimit = function (arr, limit, iterator, callback) {
	        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
	    };

	    async.forEachOf =
	    async.eachOf = function (object, iterator, callback) {
	        callback = _once(callback || noop);
	        object = object || [];

	        var iter = _keyIterator(object);
	        var key, completed = 0;

	        while ((key = iter()) != null) {
	            completed += 1;
	            iterator(object[key], key, only_once(done));
	        }

	        if (completed === 0) callback(null);

	        function done(err) {
	            completed--;
	            if (err) {
	                callback(err);
	            }
	            // Check key is null in case iterator isn't exhausted
	            // and done resolved synchronously.
	            else if (key === null && completed <= 0) {
	                callback(null);
	            }
	        }
	    };

	    async.forEachOfSeries =
	    async.eachOfSeries = function (obj, iterator, callback) {
	        callback = _once(callback || noop);
	        obj = obj || [];
	        var nextKey = _keyIterator(obj);
	        var key = nextKey();
	        function iterate() {
	            var sync = true;
	            if (key === null) {
	                return callback(null);
	            }
	            iterator(obj[key], key, only_once(function (err) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    key = nextKey();
	                    if (key === null) {
	                        return callback(null);
	                    } else {
	                        if (sync) {
	                            async.setImmediate(iterate);
	                        } else {
	                            iterate();
	                        }
	                    }
	                }
	            }));
	            sync = false;
	        }
	        iterate();
	    };



	    async.forEachOfLimit =
	    async.eachOfLimit = function (obj, limit, iterator, callback) {
	        _eachOfLimit(limit)(obj, iterator, callback);
	    };

	    function _eachOfLimit(limit) {

	        return function (obj, iterator, callback) {
	            callback = _once(callback || noop);
	            obj = obj || [];
	            var nextKey = _keyIterator(obj);
	            if (limit <= 0) {
	                return callback(null);
	            }
	            var done = false;
	            var running = 0;
	            var errored = false;

	            (function replenish () {
	                if (done && running <= 0) {
	                    return callback(null);
	                }

	                while (running < limit && !errored) {
	                    var key = nextKey();
	                    if (key === null) {
	                        done = true;
	                        if (running <= 0) {
	                            callback(null);
	                        }
	                        return;
	                    }
	                    running += 1;
	                    iterator(obj[key], key, only_once(function (err) {
	                        running -= 1;
	                        if (err) {
	                            callback(err);
	                            errored = true;
	                        }
	                        else {
	                            replenish();
	                        }
	                    }));
	                }
	            })();
	        };
	    }


	    function doParallel(fn) {
	        return function (obj, iterator, callback) {
	            return fn(async.eachOf, obj, iterator, callback);
	        };
	    }
	    function doParallelLimit(fn) {
	        return function (obj, limit, iterator, callback) {
	            return fn(_eachOfLimit(limit), obj, iterator, callback);
	        };
	    }
	    function doSeries(fn) {
	        return function (obj, iterator, callback) {
	            return fn(async.eachOfSeries, obj, iterator, callback);
	        };
	    }

	    function _asyncMap(eachfn, arr, iterator, callback) {
	        callback = _once(callback || noop);
	        arr = arr || [];
	        var results = _isArrayLike(arr) ? [] : {};
	        eachfn(arr, function (value, index, callback) {
	            iterator(value, function (err, v) {
	                results[index] = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, results);
	        });
	    }

	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = doParallelLimit(_asyncMap);

	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.inject =
	    async.foldl =
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachOfSeries(arr, function (x, i, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };

	    async.foldr =
	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, identity).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };

	    async.transform = function (arr, memo, iterator, callback) {
	        if (arguments.length === 3) {
	            callback = iterator;
	            iterator = memo;
	            memo = _isArray(arr) ? [] : {};
	        }

	        async.eachOf(arr, function(v, k, cb) {
	            iterator(memo, v, k, cb);
	        }, function(err) {
	            callback(err, memo);
	        });
	    };

	    function _filter(eachfn, arr, iterator, callback) {
	        var results = [];
	        eachfn(arr, function (x, index, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    results.push({index: index, value: x});
	                }
	                callback();
	            });
	        }, function () {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    }

	    async.select =
	    async.filter = doParallel(_filter);

	    async.selectLimit =
	    async.filterLimit = doParallelLimit(_filter);

	    async.selectSeries =
	    async.filterSeries = doSeries(_filter);

	    function _reject(eachfn, arr, iterator, callback) {
	        _filter(eachfn, arr, function(value, cb) {
	            iterator(value, function(v) {
	                cb(!v);
	            });
	        }, callback);
	    }
	    async.reject = doParallel(_reject);
	    async.rejectLimit = doParallelLimit(_reject);
	    async.rejectSeries = doSeries(_reject);

	    function _createTester(eachfn, check, getResult) {
	        return function(arr, limit, iterator, cb) {
	            function done() {
	                if (cb) cb(getResult(false, void 0));
	            }
	            function iteratee(x, _, callback) {
	                if (!cb) return callback();
	                iterator(x, function (v) {
	                    if (cb && check(v)) {
	                        cb(getResult(true, x));
	                        cb = iterator = false;
	                    }
	                    callback();
	                });
	            }
	            if (arguments.length > 3) {
	                eachfn(arr, limit, iteratee, done);
	            } else {
	                cb = iterator;
	                iterator = limit;
	                eachfn(arr, iteratee, done);
	            }
	        };
	    }

	    async.any =
	    async.some = _createTester(async.eachOf, toBool, identity);

	    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

	    async.all =
	    async.every = _createTester(async.eachOf, notId, notId);

	    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

	    function _findGetResult(v, x) {
	        return x;
	    }
	    async.detect = _createTester(async.eachOf, identity, _findGetResult);
	    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
	    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                callback(null, _map(results.sort(comparator), function (x) {
	                    return x.value;
	                }));
	            }

	        });

	        function comparator(left, right) {
	            var a = left.criteria, b = right.criteria;
	            return a < b ? -1 : a > b ? 1 : 0;
	        }
	    };

	    async.auto = function (tasks, concurrency, callback) {
	        if (typeof arguments[1] === 'function') {
	            // concurrency is optional, shift the args.
	            callback = concurrency;
	            concurrency = null;
	        }
	        callback = _once(callback || noop);
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length;
	        if (!remainingTasks) {
	            return callback(null);
	        }
	        if (!concurrency) {
	            concurrency = remainingTasks;
	        }

	        var results = {};
	        var runningTasks = 0;

	        var hasError = false;

	        var listeners = [];
	        function addListener(fn) {
	            listeners.unshift(fn);
	        }
	        function removeListener(fn) {
	            var idx = _indexOf(listeners, fn);
	            if (idx >= 0) listeners.splice(idx, 1);
	        }
	        function taskComplete() {
	            remainingTasks--;
	            _arrayEach(listeners.slice(0), function (fn) {
	                fn();
	            });
	        }

	        addListener(function () {
	            if (!remainingTasks) {
	                callback(null, results);
	            }
	        });

	        _arrayEach(keys, function (k) {
	            if (hasError) return;
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = _restParam(function(err, args) {
	                runningTasks--;
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _forEachOf(results, function(val, rkey) {
	                        safeResults[rkey] = val;
	                    });
	                    safeResults[k] = args;
	                    hasError = true;

	                    callback(err, safeResults);
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            });
	            var requires = task.slice(0, task.length - 1);
	            // prevent dead-locks
	            var len = requires.length;
	            var dep;
	            while (len--) {
	                if (!(dep = tasks[requires[len]])) {
	                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
	                }
	                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
	                    throw new Error('Has cyclic dependencies');
	                }
	            }
	            function ready() {
	                return runningTasks < concurrency && _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            }
	            if (ready()) {
	                runningTasks++;
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                addListener(listener);
	            }
	            function listener() {
	                if (ready()) {
	                    runningTasks++;
	                    removeListener(listener);
	                    task[task.length - 1](taskCallback, results);
	                }
	            }
	        });
	    };



	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var DEFAULT_INTERVAL = 0;

	        var attempts = [];

	        var opts = {
	            times: DEFAULT_TIMES,
	            interval: DEFAULT_INTERVAL
	        };

	        function parseTimes(acc, t){
	            if(typeof t === 'number'){
	                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
	            } else if(typeof t === 'object'){
	                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
	                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
	            } else {
	                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
	            }
	        }

	        var length = arguments.length;
	        if (length < 1 || length > 3) {
	            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
	        } else if (length <= 2 && typeof times === 'function') {
	            callback = task;
	            task = times;
	        }
	        if (typeof times !== 'function') {
	            parseTimes(opts, times);
	        }
	        opts.callback = callback;
	        opts.task = task;

	        function wrappedTask(wrappedCallback, wrappedResults) {
	            function retryAttempt(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            }

	            function retryInterval(interval){
	                return function(seriesCallback){
	                    setTimeout(function(){
	                        seriesCallback(null);
	                    }, interval);
	                };
	            }

	            while (opts.times) {

	                var finalAttempt = !(opts.times-=1);
	                attempts.push(retryAttempt(opts.task, finalAttempt));
	                if(!finalAttempt && opts.interval > 0){
	                    attempts.push(retryInterval(opts.interval));
	                }
	            }

	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || opts.callback)(data.err, data.result);
	            });
	        }

	        // If a callback is passed, run this as a controll flow
	        return opts.callback ? wrappedTask() : wrappedTask;
	    };

	    async.waterfall = function (tasks, callback) {
	        callback = _once(callback || noop);
	        if (!_isArray(tasks)) {
	            var err = new Error('First argument to waterfall must be an array of functions');
	            return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        function wrapIterator(iterator) {
	            return _restParam(function (err, args) {
	                if (err) {
	                    callback.apply(null, [err].concat(args));
	                }
	                else {
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    ensureAsync(iterator).apply(null, args);
	                }
	            });
	        }
	        wrapIterator(async.iterator(tasks))();
	    };

	    function _parallel(eachfn, tasks, callback) {
	        callback = callback || noop;
	        var results = _isArrayLike(tasks) ? [] : {};

	        eachfn(tasks, function (task, key, callback) {
	            task(_restParam(function (err, args) {
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                results[key] = args;
	                callback(err);
	            }));
	        }, function (err) {
	            callback(err, results);
	        });
	    }

	    async.parallel = function (tasks, callback) {
	        _parallel(async.eachOf, tasks, callback);
	    };

	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel(_eachOfLimit(limit), tasks, callback);
	    };

	    async.series = function(tasks, callback) {
	        _parallel(async.eachOfSeries, tasks, callback);
	    };

	    async.iterator = function (tasks) {
	        function makeCallback(index) {
	            function fn() {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            }
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        }
	        return makeCallback(0);
	    };

	    async.apply = _restParam(function (fn, args) {
	        return _restParam(function (callArgs) {
	            return fn.apply(
	                null, args.concat(callArgs)
	            );
	        });
	    });

	    function _concat(eachfn, arr, fn, callback) {
	        var result = [];
	        eachfn(arr, function (x, index, cb) {
	            fn(x, function (err, y) {
	                result = result.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, result);
	        });
	    }
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);

	    async.whilst = function (test, iterator, callback) {
	        callback = callback || noop;
	        if (test()) {
	            var next = _restParam(function(err, args) {
	                if (err) {
	                    callback(err);
	                } else if (test.apply(this, args)) {
	                    iterator(next);
	                } else {
	                    callback.apply(null, [null].concat(args));
	                }
	            });
	            iterator(next);
	        } else {
	            callback(null);
	        }
	    };

	    async.doWhilst = function (iterator, test, callback) {
	        var calls = 0;
	        return async.whilst(function() {
	            return ++calls <= 1 || test.apply(this, arguments);
	        }, iterator, callback);
	    };

	    async.until = function (test, iterator, callback) {
	        return async.whilst(function() {
	            return !test.apply(this, arguments);
	        }, iterator, callback);
	    };

	    async.doUntil = function (iterator, test, callback) {
	        return async.doWhilst(iterator, function() {
	            return !test.apply(this, arguments);
	        }, callback);
	    };

	    async.during = function (test, iterator, callback) {
	        callback = callback || noop;

	        var next = _restParam(function(err, args) {
	            if (err) {
	                callback(err);
	            } else {
	                args.push(check);
	                test.apply(this, args);
	            }
	        });

	        var check = function(err, truth) {
	            if (err) {
	                callback(err);
	            } else if (truth) {
	                iterator(next);
	            } else {
	                callback(null);
	            }
	        };

	        test(check);
	    };

	    async.doDuring = function (iterator, test, callback) {
	        var calls = 0;
	        async.during(function(next) {
	            if (calls++ < 1) {
	                next(null, true);
	            } else {
	                test.apply(this, arguments);
	            }
	        }, iterator, callback);
	    };

	    function _queue(worker, concurrency, payload) {
	        if (concurrency == null) {
	            concurrency = 1;
	        }
	        else if(concurrency === 0) {
	            throw new Error('Concurrency must not be zero');
	        }
	        function _insert(q, data, pos, callback) {
	            if (callback != null && typeof callback !== "function") {
	                throw new Error("task callback must be a function");
	            }
	            q.started = true;
	            if (!_isArray(data)) {
	                data = [data];
	            }
	            if(data.length === 0 && q.idle()) {
	                // call drain immediately if there are no tasks
	                return async.setImmediate(function() {
	                    q.drain();
	                });
	            }
	            _arrayEach(data, function(task) {
	                var item = {
	                    data: task,
	                    callback: callback || noop
	                };

	                if (pos) {
	                    q.tasks.unshift(item);
	                } else {
	                    q.tasks.push(item);
	                }

	                if (q.tasks.length === q.concurrency) {
	                    q.saturated();
	                }
	            });
	            async.setImmediate(q.process);
	        }
	        function _next(q, tasks) {
	            return function(){
	                workers -= 1;

	                var removed = false;
	                var args = arguments;
	                _arrayEach(tasks, function (task) {
	                    _arrayEach(workersList, function (worker, index) {
	                        if (worker === task && !removed) {
	                            workersList.splice(index, 1);
	                            removed = true;
	                        }
	                    });

	                    task.callback.apply(task, args);
	                });
	                if (q.tasks.length + workers === 0) {
	                    q.drain();
	                }
	                q.process();
	            };
	        }

	        var workers = 0;
	        var workersList = [];
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            payload: payload,
	            saturated: noop,
	            empty: noop,
	            drain: noop,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	                _insert(q, data, false, callback);
	            },
	            kill: function () {
	                q.drain = noop;
	                q.tasks = [];
	            },
	            unshift: function (data, callback) {
	                _insert(q, data, true, callback);
	            },
	            process: function () {
	                while(!q.paused && workers < q.concurrency && q.tasks.length){

	                    var tasks = q.payload ?
	                        q.tasks.splice(0, q.payload) :
	                        q.tasks.splice(0, q.tasks.length);

	                    var data = _map(tasks, function (task) {
	                        return task.data;
	                    });

	                    if (q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    workersList.push(tasks[0]);
	                    var cb = only_once(_next(q, tasks));
	                    worker(data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            workersList: function () {
	                return workersList;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                var resumeCount = Math.min(q.concurrency, q.tasks.length);
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= resumeCount; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    }

	    async.queue = function (worker, concurrency) {
	        var q = _queue(function (items, cb) {
	            worker(items[0], cb);
	        }, concurrency, 1);

	        return q;
	    };

	    async.priorityQueue = function (worker, concurrency) {

	        function _compareTasks(a, b){
	            return a.priority - b.priority;
	        }

	        function _binarySearch(sequence, item, compare) {
	            var beg = -1,
	                end = sequence.length - 1;
	            while (beg < end) {
	                var mid = beg + ((end - beg + 1) >>> 1);
	                if (compare(item, sequence[mid]) >= 0) {
	                    beg = mid;
	                } else {
	                    end = mid - 1;
	                }
	            }
	            return beg;
	        }

	        function _insert(q, data, priority, callback) {
	            if (callback != null && typeof callback !== "function") {
	                throw new Error("task callback must be a function");
	            }
	            q.started = true;
	            if (!_isArray(data)) {
	                data = [data];
	            }
	            if(data.length === 0) {
	                // call drain immediately if there are no tasks
	                return async.setImmediate(function() {
	                    q.drain();
	                });
	            }
	            _arrayEach(data, function(task) {
	                var item = {
	                    data: task,
	                    priority: priority,
	                    callback: typeof callback === 'function' ? callback : noop
	                };

	                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

	                if (q.tasks.length === q.concurrency) {
	                    q.saturated();
	                }
	                async.setImmediate(q.process);
	            });
	        }

	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);

	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	            _insert(q, data, priority, callback);
	        };

	        // Remove unshift function
	        delete q.unshift;

	        return q;
	    };

	    async.cargo = function (worker, payload) {
	        return _queue(worker, 1, payload);
	    };

	    function _console_fn(name) {
	        return _restParam(function (fn, args) {
	            fn.apply(null, args.concat([_restParam(function (err, args) {
	                if (typeof console === 'object') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _arrayEach(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            })]));
	        });
	    }
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/

	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        var has = Object.prototype.hasOwnProperty;
	        hasher = hasher || identity;
	        var memoized = _restParam(function memoized(args) {
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (has.call(memo, key)) {   
	                async.setImmediate(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (has.call(queues, key)) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([_restParam(function (args) {
	                    memo[key] = args;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                        q[i].apply(null, args);
	                    }
	                })]));
	            }
	        });
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };

	    async.unmemoize = function (fn) {
	        return function () {
	            return (fn.unmemoized || fn).apply(null, arguments);
	        };
	    };

	    function _times(mapper) {
	        return function (count, iterator, callback) {
	            mapper(_range(count), iterator, callback);
	        };
	    }

	    async.times = _times(async.map);
	    async.timesSeries = _times(async.mapSeries);
	    async.timesLimit = function (count, limit, iterator, callback) {
	        return async.mapLimit(_range(count), limit, iterator, callback);
	    };

	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return _restParam(function (args) {
	            var that = this;

	            var callback = args[args.length - 1];
	            if (typeof callback == 'function') {
	                args.pop();
	            } else {
	                callback = noop;
	            }

	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
	                    cb(err, nextargs);
	                })]));
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        });
	    };

	    async.compose = function (/* functions... */) {
	        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };


	    function _applyEach(eachfn) {
	        return _restParam(function(fns, args) {
	            var go = _restParam(function(args) {
	                var that = this;
	                var callback = args.pop();
	                return eachfn(fns, function (fn, _, cb) {
	                    fn.apply(that, args.concat([cb]));
	                },
	                callback);
	            });
	            if (args.length) {
	                return go.apply(this, args);
	            }
	            else {
	                return go;
	            }
	        });
	    }

	    async.applyEach = _applyEach(async.eachOf);
	    async.applyEachSeries = _applyEach(async.eachOfSeries);


	    async.forever = function (fn, callback) {
	        var done = only_once(callback || noop);
	        var task = ensureAsync(fn);
	        function next(err) {
	            if (err) {
	                return done(err);
	            }
	            task(next);
	        }
	        next();
	    };

	    function ensureAsync(fn) {
	        return _restParam(function (args) {
	            var callback = args.pop();
	            args.push(function () {
	                var innerArgs = arguments;
	                if (sync) {
	                    async.setImmediate(function () {
	                        callback.apply(null, innerArgs);
	                    });
	                } else {
	                    callback.apply(null, innerArgs);
	                }
	            });
	            var sync = true;
	            fn.apply(this, args);
	            sync = false;
	        });
	    }

	    async.ensureAsync = ensureAsync;

	    async.constant = _restParam(function(values) {
	        var args = [null].concat(values);
	        return function (callback) {
	            return callback.apply(this, args);
	        };
	    });

	    async.wrapSync =
	    async.asyncify = function asyncify(func) {
	        return _restParam(function (args) {
	            var callback = args.pop();
	            var result;
	            try {
	                result = func.apply(this, args);
	            } catch (e) {
	                return callback(e);
	            }
	            // if result is Promise object
	            if (_isObject(result) && typeof result.then === "function") {
	                result.then(function(value) {
	                    callback(null, value);
	                })["catch"](function(err) {
	                    callback(err.message ? err : new Error(err));
	                });
	            } else {
	                callback(null, result);
	            }
	        });
	    };

	    // Node.js
	    if (typeof module === 'object' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }

	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(40).setImmediate, __webpack_require__(4)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(4).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40).setImmediate, __webpack_require__(40).clearImmediate))

/***/ },
/* 41 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function EntryModuleNotFoundError(err) {
		Error.call(this);
		Error.captureStackTrace(this, EntryModuleNotFoundError);
		this.name = "EntryModuleNotFoundError";
		this.message = "Entry module not found: " + err;
		this.details = err.details;
		this.error = err;
	}
	module.exports = EntryModuleNotFoundError;

	EntryModuleNotFoundError.prototype = Object.create(Error.prototype);


/***/ },
/* 42 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleNotFoundError(module, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleNotFoundError);
		this.name = "ModuleNotFoundError";
		this.message = "Module not found: " + err;
		this.details = err.details;
		this.missing = err.missing;
		this.module = module;
		this.error = err;
	}
	module.exports = ModuleNotFoundError;

	ModuleNotFoundError.prototype = Object.create(Error.prototype);


/***/ },
/* 43 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CriticalDependenciesWarning(module, dependencies) {
		Error.call(this);
		Error.captureStackTrace(this, CriticalDependenciesWarning);
		this.name = "CriticalDependenciesWarning";
		this.message = "Critical dependencies:";
		this.message += dependencies.filter(function(d) {
			return typeof d.critical === "string" || d.loc;
		}).map(function(dep) {
			var line = [];
			if(dep.loc) line.push(dep.loc.start.line + ":" + dep.loc.start.column + "-" +
				(dep.loc.start.line !== dep.loc.end.line ? dep.loc.end.line + ":" : "") + dep.loc.end.column);
			if(typeof dep.critical === "string") line.push(dep.critical);
			return "\n" + line.join(" ");
		}).join("");
		this.dependencies = dependencies;
		this.origin = this.module = module;
	}
	module.exports = CriticalDependenciesWarning;

	CriticalDependenciesWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DependenciesBlock = __webpack_require__(45);
	var ModuleReason = __webpack_require__(70);

	var debugId = 1000;

	function Module() {
		DependenciesBlock.call(this);
		this.context = null;
		this.reasons = [];
		this.debugId = debugId++;
		this.lastId = -1;
		this.id = null;
		this.index = null;
		this.index2 = null;
		this.chunks = [];
		this.warnings = [];
		this.dependenciesWarnings = [];
		this.errors = [];
		this.dependenciesErrors = [];
	}
	module.exports = Module;

	Module.prototype = Object.create(DependenciesBlock.prototype);

	Module.prototype.disconnect = function() {
		this.reasons.length = 0;
		this.lastId = this.id;
		this.id = null;
		this.index = null;
		this.index2 = null;
		this.chunks.length = 0;
		DependenciesBlock.prototype.disconnect.call(this);
	};

	Module.prototype.addChunk = function(chunk) {
		var idx = this.chunks.indexOf(chunk);
		if(idx < 0)
			this.chunks.push(chunk);
	};

	Module.prototype._removeAndDo = __webpack_require__(71);

	Module.prototype.removeChunk = function(chunk) {
		return this._removeAndDo("chunks", chunk, "removeModule");
	};

	Module.prototype.addReason = function(module, dependency) {
		this.reasons.push(new ModuleReason(module, dependency));
	};

	Module.prototype.removeReason = function(module, dependency) {
		for(var i = 0; i < this.reasons.length; i++) {
			var r = this.reasons[i];
			if(r.module === module && r.dependency === dependency) {
				this.reasons.splice(i, 1);
				return true;
			}
		}
		return false;
	};

	Module.prototype.hasReasonForChunk = function(chunk) {
		for(var i = 0; i < this.reasons.length; i++) {
			var r = this.reasons[i];
			if(r.chunks) {
				if(r.chunks.indexOf(chunk) >= 0)
					return true;
			} else if(r.module.chunks.indexOf(chunk) >= 0)
				return true;
		}
		return false;
	};

	function addToSet(set, items) {
		items.forEach(function(item) {
			if(set.indexOf(item) < 0)
				set.push(item);
		});
	}

	Module.prototype.rewriteChunkInReasons = function(oldChunk, newChunks) {
		this.reasons.forEach(function(r) {
			if(!r.chunks) {
				if(r.module.chunks.indexOf(oldChunk) < 0)
					return;
				r.chunks = r.module.chunks;
			}
			r.chunks = r.chunks.reduce(function(arr, c) {
				addToSet(arr, c !== oldChunk ? [c] : newChunks);
				return arr;
			}, []);
		});
	};

	Module.prototype.toString = function() {
		return "Module[" + (this.id || this.debugId) + "]";
	};

	Module.prototype.needRebuild = function( /* fileTimestamps, contextTimestamps */ ) {
		return true;
	};

	Module.prototype.updateHash = function(hash) {
		hash.update(this.id + "");
		DependenciesBlock.prototype.updateHash.call(this, hash);
	};

	Module.prototype.identifier = null;
	Module.prototype.readableIdentifier = null;
	Module.prototype.build = null;
	Module.prototype.source = null;
	Module.prototype.size = null;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DependenciesBlockVariable = __webpack_require__(46);

	function DependenciesBlock() {
		this.dependencies = [];
		this.blocks = [];
		this.variables = [];
	}
	module.exports = DependenciesBlock;

	DependenciesBlock.prototype.addBlock = function(block) {
		this.blocks.push(block);
		block.parent = this;
	};

	DependenciesBlock.prototype.addVariable = function(name, expression, dependencies) {
		for(var i = 0; i < this.variables.length; i++) {
			var v = this.variables[i];
			if(v.name === name && v.expression === expression) return;
		}
		this.variables.push(new DependenciesBlockVariable(name, expression, dependencies));
	};

	DependenciesBlock.prototype.addDependency = function(dependency) {
		this.dependencies.push(dependency);
	};

	DependenciesBlock.prototype.updateHash = function(hash) {
		this.dependencies.forEach(function(d) {
			d.updateHash(hash);
		});
		this.blocks.forEach(function(b) {
			b.updateHash(hash);
		});
		this.variables.forEach(function(v) {
			v.updateHash(hash);
		});
	};

	DependenciesBlock.prototype.disconnect = function() {
		function disconnect(i) {
			i.disconnect();
		}
		this.dependencies.forEach(disconnect);
		this.blocks.forEach(disconnect);
		this.variables.forEach(disconnect);
	};

	DependenciesBlock.prototype.hasDependencies = function() {
		return this.dependencies.length > 0 ||
			this.blocks.concat(this.variables).some(function(item) {
				return item.hasDependencies();
			});
	};


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ReplaceSource = __webpack_require__(47);
	var RawSource = __webpack_require__(69);

	function DependenciesBlockVariable(name, expression, dependencies) {
		this.name = name;
		this.expression = expression;
		this.dependencies = dependencies || [];
	}
	module.exports = DependenciesBlockVariable;

	DependenciesBlockVariable.prototype.updateHash = function(hash) {
		hash.update(this.name);
		hash.update(this.expression);
		this.dependencies.forEach(function(d) {
			d.updateHash(hash);
		});
	};

	DependenciesBlockVariable.prototype.expressionSource = function(dependencyTemplates, outputOptions, requestShortener) {
		var source = new ReplaceSource(new RawSource(this.expression));
		this.dependencies.forEach(function(dep) {
			var template = dependencyTemplates.get(dep.constructor);
			if(!template) throw new Error("No template for dependency: " + dep.constructor.name);
			template.apply(dep, source, outputOptions, requestShortener, dependencyTemplates);
		});
		return source;
	};

	DependenciesBlockVariable.prototype.disconnect = function() {
		this.dependencies.forEach(function(d) {
			d.disconnect();
		});
	};

	DependenciesBlockVariable.prototype.hasDependencies = function() {
		return this.dependencies.length > 0;
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(48);
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceListMap = __webpack_require__(60).SourceListMap;
	var fromStringWithSourceMap = __webpack_require__(60).fromStringWithSourceMap;
	var SourceMapConsumer = __webpack_require__(49).SourceMapConsumer;

	function ReplaceSource(source, name) {
		Source.call(this);
		this._source = source;
		this._name = name;
		this.replacements = [];
	}
	module.exports = ReplaceSource;

	ReplaceSource.prototype = Object.create(Source.prototype);
	ReplaceSource.prototype.constructor = ReplaceSource;

	ReplaceSource.prototype.replace = function(start, end, newValue) {
		this.replacements.push([start, end, newValue]);
	};

	ReplaceSource.prototype.insert = function(pos, newValue) {
		this.replacements.push([pos, pos-1, newValue]);
	};

	ReplaceSource.prototype.source = function(options) {
		return this._replaceString(this._source.source());
	};

	ReplaceSource.prototype._sortReplacements = function() {
		this.replacements.forEach(function(item, idx) {
			item[3] = idx;
		});
		this.replacements.sort(function(a, b) {
			var diff = b[1] - a[1];
			if(diff !== 0)
				return diff;
			return b[3] - a[3];
		});

	};

	ReplaceSource.prototype._replaceString = function(str) {
		this._sortReplacements();
		var result = [str];
		this.replacements.forEach(function(repl) {
			var remSource = result.pop();
			var splitted1 = this._splitString(remSource, Math.floor(repl[1]+1));
			var splitted2 = this._splitString(splitted1[0], Math.floor(repl[0]));
			result.push(splitted1[1], repl[2], splitted2[0]);
		}, this);
		result = result.reverse();
		return result.join("");
	};

	__webpack_require__(68)(ReplaceSource.prototype);

	ReplaceSource.prototype.node = function(options) {
		this._sortReplacements();
		var result = [this._source.node(options)];
		this.replacements.forEach(function(repl) {
			var remSource = result.pop();
			var splitted1 = this._splitSourceNode(remSource, Math.floor(repl[1]+1));
			if(Array.isArray(splitted1)) {
				var splitted2 = this._splitSourceNode(splitted1[0], Math.floor(repl[0]));
				if(Array.isArray(splitted2)) {
					result.push(splitted1[1], this._replacementToSourceNode(splitted2[1], repl[2]), splitted2[0]);
				} else {
					result.push(splitted1[1], this._replacementToSourceNode(splitted1[1], repl[2]), splitted1[0]);
				}
			} else {
				var splitted2 = this._splitSourceNode(remSource, Math.floor(repl[0]));
				if(Array.isArray(splitted2)) {
					result.push(this._replacementToSourceNode(splitted2[1], repl[2]), splitted2[0]);
				} else {
					result.push(repl[2], remSource);
				}
			}
		}, this);
		result = result.reverse();
		return new SourceNode(null, null, null, result);
	};

	ReplaceSource.prototype.listMap = function(options) {
		var map = this._source.listMap(options);
		if(map.children.length !== 1) {
			var code = map.toString();
			code = this._replaceString(code).split("\n");
			var currentIndex = 0;
			map.mapGeneratedCode(function(str) {
				var idx = -1;
				var count = -1;
				do {
					count++;
					idx = str.indexOf("\n", idx + 1);
				} while(idx >= 0);
				if(!count) return "";
				var result = code.slice(currentIndex, currentIndex + count).join("\n") + "\n";
				currentIndex += count;
				return result;
			});
			map.add(code.slice(currentIndex).join("\n"));
		} else {
			map.mapGeneratedCode(this._replaceString.bind(this));
		}
		return map;
	};

	ReplaceSource.prototype._replacementToSourceNode = function(oldNode, newString) {
		var map = oldNode.toStringWithSourceMap({ file: "?" }).map;
		var original = new SourceMapConsumer(map.toJSON()).originalPositionFor({ line: 1, column: 0 });
		if(original) {
			return new SourceNode(original.line, original.column, original.source, newString);
		} else {
			return newString;
		}
	};

	ReplaceSource.prototype._splitSourceNode = function(node, position) {
		if(typeof node === "string") {
			if(node.length <= position) return position - node.length;
			return [node.substr(0, position), node.substr(position)];
		} else {
			for(var i = 0; i < node.children.length; i++) {
				position = this._splitSourceNode(node.children[i], position);
				if(Array.isArray(position)) {
					var leftNode = new SourceNode(
						node.line,
						node.column,
						node.source,
						node.children.slice(0, i).concat([position[0]]),
						node.name
					);
					var rightNode = new SourceNode(
						node.line,
						node.column,
						node.source,
						[position[1]].concat(node.children.slice(i+1)),
						node.name
					);
					leftNode.sourceContents = node.sourceContents;
					return [leftNode, rightNode];
				}
			}
			return position;
		}
	};

	ReplaceSource.prototype._splitString = function(str, position) {
		return [str.substr(0, position), str.substr(position)];
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceMapConsumer = __webpack_require__(49).SourceMapConsumer;

	function Source() {}

	module.exports = Source;

	Source.prototype.source = null;

	Source.prototype.size = function() {
		return this.source().length;
	};

	Source.prototype.map = function(options) {
		return null;
	};

	Source.prototype.sourceAndMap = function(options) {
		return {
			source: this.source(),
			map: this.map()
		};
	};

	Source.prototype.node = null;

	Source.prototype.listNode = null;

	Source.prototype.updateHash = function(hash) {
		var source = this.source();
		hash.update(source || "");
	};


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(50).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(56).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(59).SourceNode;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var base64VLQ = __webpack_require__(51);
	  var util = __webpack_require__(53);
	  var ArraySet = __webpack_require__(54).ArraySet;
	  var MappingList = __webpack_require__(55).MappingList;

	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }

	  SourceMapGenerator.prototype._version = 3;

	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };

	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }

	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };

	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }

	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };

	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);

	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }

	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }

	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }

	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };

	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }

	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };

	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();

	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }

	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }

	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }

	      }, this);
	      this._sources = newSources;
	      this._names = newNames;

	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };

	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };

	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;

	      var mappings = this._mappings.toArray();
	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];

	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }

	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (mapping.source != null) {
	          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
	                                     - previousSource);
	          previousSource = this._sources.indexOf(mapping.source);

	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;

	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;

	          if (mapping.name != null) {
	            result += base64VLQ.encode(this._names.indexOf(mapping.name)
	                                       - previousName);
	            previousName = this._names.indexOf(mapping.name);
	          }
	        }
	      }

	      return result;
	    };

	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };

	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }

	      return map;
	    };

	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this.toJSON());
	    };

	  exports.SourceMapGenerator = SourceMapGenerator;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var base64 = __webpack_require__(52);

	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011

	  var VLQ_BASE_SHIFT = 5;

	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;

	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;

	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }

	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }

	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;

	    var vlq = toVLQSigned(aValue);

	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);

	    return encoded;
	  };

	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;

	    do {
	      if (aIndex >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }

	      digit = base64.decode(aStr.charCodeAt(aIndex++));
	      if (digit === -1) {
	        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	      }

	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);

	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aIndex;
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function (number) {
	    if (0 <= number && number < intToCharMap.length) {
	      return intToCharMap[number];
	    }
	    throw new TypeError("Must be between 0 and 63: " + aNumber);
	  };

	  /**
	   * Decode a single base 64 character code digit to an integer. Returns -1 on
	   * failure.
	   */
	  exports.decode = function (charCode) {
	    var bigA = 65;     // 'A'
	    var bigZ = 90;     // 'Z'

	    var littleA = 97;  // 'a'
	    var littleZ = 122; // 'z'

	    var zero = 48;     // '0'
	    var nine = 57;     // '9'

	    var plus = 43;     // '+'
	    var slash = 47;    // '/'

	    var littleOffset = 26;
	    var numberOffset = 52;

	    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	    if (bigA <= charCode && charCode <= bigZ) {
	      return (charCode - bigA);
	    }

	    // 26 - 51: abcdefghijklmnopqrstuvwxyz
	    if (littleA <= charCode && charCode <= littleZ) {
	      return (charCode - littleA + littleOffset);
	    }

	    // 52 - 61: 0123456789
	    if (zero <= charCode && charCode <= nine) {
	      return (charCode - zero + numberOffset);
	    }

	    // 62: +
	    if (charCode == plus) {
	      return 62;
	    }

	    // 63: /
	    if (charCode == slash) {
	      return 63;
	    }

	    // Invalid base64 digit.
	    return -1;
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;

	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;

	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;

	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;

	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = (path.charAt(0) === '/');

	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');

	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }

	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;

	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }

	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }

	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }

	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }

	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;

	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }

	    aRoot = aRoot.replace(/\/$/, '');

	    // It is possible for the path to be above the root. In this case, simply
	    // checking whether the root is a prefix of the path won't work. Instead, we
	    // need to remove components from the root one by one, until either we find
	    // a prefix that fits, or we run out of components to remove.
	    var level = 0;
	    while (aPath.indexOf(aRoot + '/') !== 0) {
	      var index = aRoot.lastIndexOf("/");
	      if (index < 0) {
	        return aPath;
	      }

	      // If the only part of the root that is left is the scheme (i.e. http://,
	      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	      // have exhausted all components, so the path is not relative to the root.
	      aRoot = aRoot.slice(0, index);
	      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	        return aPath;
	      }

	      ++level;
	    }

	    // Make sure we add a "../" for each component we removed from the root.
	    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	  }
	  exports.relative = relative;

	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;

	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;

	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0 || onlyCompareOriginal) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  };
	  exports.compareByOriginalPositions = compareByOriginalPositions;

	  /**
	   * Comparator between two mappings with deflated source and name indices where
	   * the generated positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0 || onlyCompareGenerated) {
	      return cmp;
	    }

	    cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  };
	  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	  function strcmp(aStr1, aStr2) {
	    if (aStr1 === aStr2) {
	      return 0;
	    }

	    if (aStr1 > aStr2) {
	      return 1;
	    }

	    return -1;
	  }

	  /**
	   * Comparator between two mappings with inflated source and name strings where
	   * the generated positions are compared.
	   */
	  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return strcmp(mappingA.name, mappingB.name);
	  };
	  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(53);

	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };

	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  ArraySet.prototype.size = function ArraySet_size() {
	    return Object.getOwnPropertyNames(this._set).length;
	  };

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var isDuplicate = this.has(aStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[util.toSetString(aStr)] = idx;
	    }
	  };

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    return Object.prototype.hasOwnProperty.call(this._set,
	                                                util.toSetString(aStr));
	  };

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    if (this.has(aStr)) {
	      return this._set[util.toSetString(aStr)];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };

	  exports.ArraySet = ArraySet;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(53);

	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	  }

	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }

	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };

	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    var mapping;
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };

	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  };

	  exports.MappingList = MappingList;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(53);
	  var binarySearch = __webpack_require__(57);
	  var ArraySet = __webpack_require__(54).ArraySet;
	  var base64VLQ = __webpack_require__(51);
	  var quickSort = __webpack_require__(58).quickSort;

	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    return sourceMap.sections != null
	      ? new IndexedSourceMapConsumer(sourceMap)
	      : new BasicSourceMapConsumer(sourceMap);
	  }

	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	  }

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;

	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.

	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__generatedMappings;
	    }
	  });

	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__originalMappings;
	    }
	  });

	  SourceMapConsumer.prototype._charIsMappingSeparator =
	    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	      var c = aStr.charAt(index);
	      return c === ";" || c === ",";
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };

	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;

	  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }

	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source === null ? null : this._sources.at(mapping.source);
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name === null ? null : this._names.at(mapping.name)
	        };
	      }, this).forEach(aCallback, context);
	    };

	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: Optional. the column number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var line = util.getArg(aArgs, 'line');

	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to 0, we thus find the last mapping for
	      // the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: line,
	        originalColumn: util.getArg(aArgs, 'column', 0)
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      if (!this._sources.has(needle.source)) {
	        return [];
	      }
	      needle.source = this._sources.indexOf(needle.source);

	      var mappings = [];

	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions,
	                                    binarySearch.LEAST_UPPER_BOUND);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (aArgs.column === undefined) {
	          var originalLine = mapping.originalLine;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we found. Since
	          // mappings are sorted, this is guaranteed to find all mappings for
	          // the line we found.
	          while (mapping && mapping.originalLine === originalLine) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        } else {
	          var originalColumn = mapping.originalColumn;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we were searching for.
	          // Since mappings are sorted, this is guaranteed to find all mappings for
	          // the line we are searching for.
	          while (mapping &&
	                 mapping.originalLine === line &&
	                 mapping.originalColumn == originalColumn) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        }
	      }

	      return mappings;
	    };

	  exports.SourceMapConsumer = SourceMapConsumer;

	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);

	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    sources = sources.map(util.normalize);

	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);

	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }

	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);

	      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;

	      // Because we are modifying the entries (by converting string sources and
	      // names to indices into the sources and names ArraySets), we have to make
	      // a copy of the entry or else bad things happen. Shared mutable state
	      // strikes again! See github issue #191.

	      var generatedMappings = aSourceMap._mappings.toArray().slice();
	      var destGeneratedMappings = smc.__generatedMappings = [];
	      var destOriginalMappings = smc.__originalMappings = [];

	      for (var i = 0, length = generatedMappings.length; i < length; i++) {
	        var srcMapping = generatedMappings[i];
	        var destMapping = new Mapping;
	        destMapping.generatedLine = srcMapping.generatedLine;
	        destMapping.generatedColumn = srcMapping.generatedColumn;

	        if (srcMapping.source) {
	          destMapping.source = sources.indexOf(srcMapping.source);
	          destMapping.originalLine = srcMapping.originalLine;
	          destMapping.originalColumn = srcMapping.originalColumn;

	          if (srcMapping.name) {
	            destMapping.name = names.indexOf(srcMapping.name);
	          }

	          destOriginalMappings.push(destMapping);
	        }

	        destGeneratedMappings.push(destMapping);
	      }

	      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

	      return smc;
	    };

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });

	  /**
	   * Provide the JIT with a nice shape / hidden class.
	   */
	  function Mapping() {
	    this.generatedLine = 0;
	    this.generatedColumn = 0;
	    this.source = null;
	    this.originalLine = null;
	    this.originalColumn = null;
	    this.name = null;
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var length = aStr.length;
	      var index = 0;
	      var cachedSegments = {};
	      var temp = {};
	      var originalMappings = [];
	      var generatedMappings = [];
	      var mapping, str, segment, end, value;

	      while (index < length) {
	        if (aStr.charAt(index) === ';') {
	          generatedLine++;
	          index++;
	          previousGeneratedColumn = 0;
	        }
	        else if (aStr.charAt(index) === ',') {
	          index++;
	        }
	        else {
	          mapping = new Mapping();
	          mapping.generatedLine = generatedLine;

	          // Because each offset is encoded relative to the previous one,
	          // many segments often have the same encoding. We can exploit this
	          // fact by caching the parsed variable length fields of each segment,
	          // allowing us to avoid a second parse if we encounter the same
	          // segment again.
	          for (end = index; end < length; end++) {
	            if (this._charIsMappingSeparator(aStr, end)) {
	              break;
	            }
	          }
	          str = aStr.slice(index, end);

	          segment = cachedSegments[str];
	          if (segment) {
	            index += str.length;
	          } else {
	            segment = [];
	            while (index < end) {
	              base64VLQ.decode(aStr, index, temp);
	              value = temp.value;
	              index = temp.rest;
	              segment.push(value);
	            }

	            if (segment.length === 2) {
	              throw new Error('Found a source, but no line and column');
	            }

	            if (segment.length === 3) {
	              throw new Error('Found a source and line, but no column');
	            }

	            cachedSegments[str] = segment;
	          }

	          // Generated column.
	          mapping.generatedColumn = previousGeneratedColumn + segment[0];
	          previousGeneratedColumn = mapping.generatedColumn;

	          if (segment.length > 1) {
	            // Original source.
	            mapping.source = previousSource + segment[1];
	            previousSource += segment[1];

	            // Original line.
	            mapping.originalLine = previousOriginalLine + segment[2];
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;

	            // Original column.
	            mapping.originalColumn = previousOriginalColumn + segment[3];
	            previousOriginalColumn = mapping.originalColumn;

	            if (segment.length > 4) {
	              // Original name.
	              mapping.name = previousName + segment[4];
	              previousName += segment[4];
	            }
	          }

	          generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            originalMappings.push(mapping);
	          }
	        }
	      }

	      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	      this.__generatedMappings = generatedMappings;

	      quickSort(originalMappings, util.compareByOriginalPositions);
	      this.__originalMappings = originalMappings;
	    };

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator, aBias) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.

	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }

	      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	    };

	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];

	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];

	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }

	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._generatedMappings,
	        "generatedLine",
	        "generatedColumn",
	        util.compareByGeneratedPositionsDeflated,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];

	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source !== null) {
	            source = this._sources.at(source);
	            if (this.sourceRoot != null) {
	              source = util.join(this.sourceRoot, source);
	            }
	          }
	          var name = util.getArg(mapping, 'name', null);
	          if (name !== null) {
	            name = this._names.at(name);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: name
	          };
	        }
	      }

	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function BasicSourceMapConsumer_hasContentsOfAllSources() {
	      if (!this.sourcesContent) {
	        return false;
	      }
	      return this.sourcesContent.length >= this._sources.size() &&
	        !this.sourcesContent.some(function (sc) { return sc == null; });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * availible.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }

	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }

	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }

	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }

	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }

	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var source = util.getArg(aArgs, 'source');
	      if (this.sourceRoot != null) {
	        source = util.relative(this.sourceRoot, source);
	      }
	      if (!this._sources.has(source)) {
	        return {
	          line: null,
	          column: null,
	          lastColumn: null
	        };
	      }
	      source = this._sources.indexOf(source);

	      var needle = {
	        source: source,
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._originalMappings,
	        "originalLine",
	        "originalColumn",
	        util.compareByOriginalPositions,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (mapping.source === needle.source) {
	          return {
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          };
	        }
	      }

	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };

	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');

	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    this._sources = new ArraySet();
	    this._names = new ArraySet();

	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');

	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;

	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }

	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      };
	      return sources;
	    }
	  });

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }

	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];

	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }

	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0),
	        bias: aArgs.bias
	      });
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	      return this._sections.every(function (s) {
	        return s.consumer.hasContentsOfAllSources();
	      });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }

	      return {
	        line: null,
	        column: null
	      };
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[i];

	          var source = section.consumer._sources.at(mapping.source);
	          if (section.consumer.sourceRoot !== null) {
	            source = util.join(section.consumer.sourceRoot, source);
	          }
	          this._sources.add(source);
	          source = this._sources.indexOf(source);

	          var name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);

	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.column +
	              (section.generatedOffset.generatedLine === mapping.generatedLine)
	              ? section.generatedOffset.generatedColumn - 1
	              : 0,
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: name
	          };

	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        };
	      };

	      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	      quickSort(this.__originalMappings, util.compareByOriginalPositions);
	    };

	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  exports.GREATEST_LOWER_BOUND = 1;
	  exports.LEAST_UPPER_BOUND = 2;

	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next-closest element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element than the one we are searching for, so we return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // Our needle is greater than aHaystack[mid].
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return aHigh < aHaystack.length ? aHigh : -1;
	      } else {
	        return mid;
	      }
	    }
	    else {
	      // Our needle is less than aHaystack[mid].
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return mid;
	      } else {
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	  }

	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of the closest element if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }

	    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	    if (index < 0) {
	      return -1;
	    }

	    // We have found either the exact element, or the next-closest element than
	    // the one we are searching for. However, there may be more than one such
	    // element. Make sure we always return the smallest of these.
	    while (index - 1 >= 0) {
	      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	        break;
	      }
	      --index;
	    }

	    return index;
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  // It turns out that some (most?) JavaScript engines don't self-host
	  // `Array.prototype.sort`. This makes sense because C++ will likely remain
	  // faster than JS when doing raw CPU-intensive sorting. However, when using a
	  // custom comparator function, calling back and forth between the VM's C++ and
	  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
	  // worse generated code for the comparator function than would be optimal. In
	  // fact, when sorting with a comparator, these costs outweigh the benefits of
	  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	  // a ~3500ms mean speed-up in `bench/bench.html`.

	  /**
	   * Swap the elements indexed by `x` and `y` in the array `ary`.
	   *
	   * @param {Array} ary
	   *        The array.
	   * @param {Number} x
	   *        The index of the first item.
	   * @param {Number} y
	   *        The index of the second item.
	   */
	  function swap(ary, x, y) {
	    var temp = ary[x];
	    ary[x] = ary[y];
	    ary[y] = temp;
	  }

	  /**
	   * Returns a random integer within the range `low .. high` inclusive.
	   *
	   * @param {Number} low
	   *        The lower bound on the range.
	   * @param {Number} high
	   *        The upper bound on the range.
	   */
	  function randomIntInRange(low, high) {
	    return Math.round(low + (Math.random() * (high - low)));
	  }

	  /**
	   * The Quick Sort algorithm.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   * @param {Number} p
	   *        Start index of the array
	   * @param {Number} r
	   *        End index of the array
	   */
	  function doQuickSort(ary, comparator, p, r) {
	    // If our lower bound is less than our upper bound, we (1) partition the
	    // array into two pieces and (2) recurse on each half. If it is not, this is
	    // the empty array and our base case.

	    if (p < r) {
	      // (1) Partitioning.
	      //
	      // The partitioning chooses a pivot between `p` and `r` and moves all
	      // elements that are less than or equal to the pivot to the before it, and
	      // all the elements that are greater than it after it. The effect is that
	      // once partition is done, the pivot is in the exact place it will be when
	      // the array is put in sorted order, and it will not need to be moved
	      // again. This runs in O(n) time.

	      // Always choose a random pivot so that an input array which is reverse
	      // sorted does not cause O(n^2) running time.
	      var pivotIndex = randomIntInRange(p, r);
	      var i = p - 1;

	      swap(ary, pivotIndex, r);
	      var pivot = ary[r];

	      // Immediately after `j` is incremented in this loop, the following hold
	      // true:
	      //
	      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	      //
	      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	      for (var j = p; j < r; j++) {
	        if (comparator(ary[j], pivot) <= 0) {
	          i += 1;
	          swap(ary, i, j);
	        }
	      }

	      swap(ary, i + 1, j);
	      var q = i + 1;

	      // (2) Recurse on each half.

	      doQuickSort(ary, comparator, p, q - 1);
	      doQuickSort(ary, comparator, q + 1, r);
	    }
	  }

	  /**
	   * Sort the given array in-place with the given comparator function.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   */
	  exports.quickSort = function (ary, comparator) {
	    doQuickSort(ary, comparator, 0, ary.length - 1);
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var SourceMapGenerator = __webpack_require__(50).SourceMapGenerator;
	  var util = __webpack_require__(53);

	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;

	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;

	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";

	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }

	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();

	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };

	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;

	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            var code = "";
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }

	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });

	      return node;

	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };

	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };

	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };

	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };

	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };

	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }

	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };

	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };

	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });

	    return { code: generated.code, map: map };
	  };

	  exports.SourceNode = SourceNode;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	exports.SourceListMap = __webpack_require__(61);
	exports.SourceNode = __webpack_require__(64);
	exports.CodeNode = __webpack_require__(62);
	exports.MappingsContext = __webpack_require__(66);
	exports.fromStringWithSourceMap = __webpack_require__(67);


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var CodeNode = __webpack_require__(62);
	var SourceNode = __webpack_require__(64);
	var MappingsContext = __webpack_require__(66);

	function SourceListMap(generatedCode, source, originalSource) {
		if(Array.isArray(generatedCode)) {
			this.children = generatedCode;
		} else {
			this.children = [];
			if(generatedCode || source)
				this.add(generatedCode, source, originalSource);
		}
	}
	module.exports = SourceListMap;

	SourceListMap.prototype.add = function(generatedCode, source, originalSource) {
		if(typeof generatedCode === "string") {
			if(source) {
				this.children.push(new SourceNode(generatedCode, source, originalSource));
			} else if(this.children.length > 0 && this.children[this.children.length - 1].addGeneratedCode) {
				this.children[this.children.length - 1].addGeneratedCode(generatedCode);
			} else {
				this.children.push(new CodeNode(generatedCode));
			}
		} else if(generatedCode.getMappings && generatedCode.getGeneratedCode) {
			this.children.push(generatedCode);
		} else if(generatedCode.children) {
			generatedCode.children.forEach(function(sln) {
				this.children.push(sln);
			}, this);
		} else {
			throw new Error("Invalid arguments to SourceListMap.prototype.add: Expected string, Node or SourceListMap");
		}
	};

	SourceListMap.prototype.preprend = function(source) {
		if(typeof generatedCode === "string") {
			if(source) {
				this.children.unshift(new SourceNode(generatedCode, source, originalSource));
			} else if(this.children.length > 0 && this.children[this.children.length - 1].preprendGeneratedCode) {
				this.children[this.children.length - 1].preprendGeneratedCode(generatedCode);
			} else {
				this.children.unshift(new CodeNode(generatedCode));
			}
		} else if(generatedCode.getMappings && generatedCode.getGeneratedCode) {
			this.children.unshift(generatedCode);
		} else if(generatedCode.children) {
			generatedCode.children.slice().reverse().forEach(function(sln) {
				this.children.unshift(sln);
			}, this);
		} else {
			throw new Error("Invalid arguments to SourceListMap.prototype.prerend: Expected string, Node or SourceListMap");
		}
	};

	SourceListMap.prototype.mapGeneratedCode = function(fn) {
		this.children.forEach(function(sln) {
			sln.mapGeneratedCode(fn);
		});
	};

	SourceListMap.prototype.toString = function() {
		return this.children.map(function(sln) {
			return sln.getGeneratedCode();
		}).join("");
	};

	SourceListMap.prototype.toStringWithSourceMap = function(options) {
		var mappingsContext = new MappingsContext();
		var source = this.children.map(function(sln) {
			return sln.generatedCode;
		}).join("");
		var mappings = this.children.map(function(sln) {
			return sln.getMappings(mappingsContext);
		}).join("");
		return {
			source: source,
			map: {
				version: 3,
				file: options && options.file,
				sources: mappingsContext.sources,
				sourcesContent: mappingsContext.hasSourceContent ? mappingsContext.sourcesContent : undefined,
				mappings: mappings
			}
		};
	}


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var getNumberOfLines = __webpack_require__(63).getNumberOfLines;

	function CodeNode(generatedCode) {
		this.generatedCode = generatedCode;
	}
	module.exports = CodeNode;

	CodeNode.prototype.clone = function() {
		return new CodeNode(this.generatedCode);
	}

	CodeNode.prototype.getGeneratedCode = function() {
		return this.generatedCode;
	};

	CodeNode.prototype.getMappings = function(mappingsContext) {
		var lines = getNumberOfLines(this.generatedCode);
		return Array(lines+1).join(";");
	};

	CodeNode.prototype.addGeneratedCode = function(generatedCode) {
		this.generatedCode += generatedCode;
	};

	CodeNode.prototype.mapGeneratedCode = function(fn) {
		this.generatedCode = fn(this.generatedCode);
	};


/***/ },
/* 63 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	exports.getNumberOfLines = function getNumberOfLines(str) {
		var nr = -1;
		var idx = -1;
		do {
			nr++
			idx = str.indexOf("\n", idx + 1);
		} while(idx >= 0);
		return nr;
	};


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var base64VLQ = __webpack_require__(65);
	var getNumberOfLines = __webpack_require__(63).getNumberOfLines;

	function SourceNode(generatedCode, source, originalSource, startingLine) {
		this.generatedCode = generatedCode;
		this.originalSource = originalSource;
		this.source = source;
		this.startingLine = startingLine || 1;
	}
	module.exports = SourceNode;

	SourceNode.prototype.clone = function() {
		return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);
	}

	var LINE_MAPPING = "AACA;";
	var LAST_LINE_MAPPING = "AACA";

	SourceNode.prototype.getGeneratedCode = function() {
		return this.generatedCode;
	};

	SourceNode.prototype.getMappings = function(mappingsContext) {
		var lines = getNumberOfLines(this.generatedCode);
		var sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);
		var mappings = "A"; // generated column 0
		mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index
		mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index
		mappings += "A"; // original column 0
		if(lines !== 0)
			mappings += ";"
		mappingsContext.currentSource = sourceIdx;
		mappingsContext.currentOriginalLine = (lines || 1) + this.startingLine - 1;
		mappings += Array(lines).join(LINE_MAPPING);
		if(lines !== 0 && this.generatedCode[this.generatedCode.length - 1] !== "\n") {
			mappings += LAST_LINE_MAPPING;
			mappingsContext.currentOriginalLine++;
		}
		return mappings;
	};

	SourceNode.prototype.mapGeneratedCode = function(fn) {
		this.generatedCode = fn(this.generatedCode);
	};


/***/ },
/* 65 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	/*eslint no-bitwise:0,quotes:0,global-strict:0*/

	var charToIntMap = {};
	var intToCharMap = {};

	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	  .split('')
	  .forEach(function (ch, index) {
	    charToIntMap[ch] = index;
	    intToCharMap[index] = ch;
	  });

	var base64 = {};
	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64.encode = function base64_encode(aNumber) {
	  if (aNumber in intToCharMap) {
	    return intToCharMap[aNumber];
	  }
	  throw new TypeError("Must be between 0 and 63: " + aNumber);
	};

	/**
	 * Decode a single base 64 digit to an integer.
	 */
	base64.decode = function base64_decode(aChar) {
	  if (aChar in charToIntMap) {
	    return charToIntMap[aChar];
	  }
	  throw new TypeError("Not a valid base 64 digit: " + aChar);
	};



	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT = 5;

	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	exports.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	exports.decode = function base64VLQ_decode(aStr, aOutParam) {
	  var i = 0;
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (i >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }
	    digit = base64.decode(aStr.charAt(i++));
	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aStr.slice(i);
	};


/***/ },
/* 66 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MappingsContext() {
		this.sources = [];
		this.sourcesContent = [];
		this.hasSourceContent = false;
		this.currentOriginalLine = 1;
		this.currentSource = 0;
	}
	module.exports = MappingsContext;

	MappingsContext.prototype.ensureSource = function(source, originalSource) {
		var idx = this.sources.indexOf(source);
		if(idx >= 0)
			return idx;
		idx = this.sources.length;
		this.sources.push(source);
		this.sourcesContent.push(originalSource);
		if(typeof originalSource === "string")
			this.hasSourceContent = true;
		return idx;
	};


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var base64VLQ = __webpack_require__(65);
	var SourceNode = __webpack_require__(64);
	var CodeNode = __webpack_require__(62);
	var SourceListMap = __webpack_require__(61);

	module.exports = function fromStringWithSourceMap(code, map) {
		var sources = map.sources;
		var sourcesContent = map.sourcesContent;
		var mappings = map.mappings.split(";");
		var lines = code.split("\n");
		var nodes = [];
		var currentNode = null;
		var currentLine = 1;
		var currentSourceIdx = 0;
		var currentSourceNodeLine;
		mappings.forEach(function(mapping, idx) {
			var line = lines[idx];
			if(typeof line === 'undefined') return;
			if(idx !== lines.length - 1) line += "\n";
			if(!mapping)
				return addCode(line);
			mapping = { value: 0, rest: mapping };
			var lineAdded = false;
			while(mapping.rest)
				lineAdded = processMapping(mapping, line, lineAdded) || lineAdded;
			if(!lineAdded)
				addCode(line);
		});
		if(mappings.length < lines.length) {
			var idx = mappings.length;
			while(!lines[idx].trim() && idx < lines.length-1) {
				addCode(lines[idx] + "\n");
				idx++;
			}
			addCode(lines.slice(idx).join("\n"));
		}
		return new SourceListMap(nodes);
		function processMapping(mapping, line, ignore) {
			if(mapping.rest && mapping.rest[0] !== ",") {
				base64VLQ.decode(mapping.rest, mapping);
			}
			if(!mapping.rest)
				return false;
			if(mapping.rest[0] === ",") {
				mapping.rest = mapping.rest.substr(1);
				return false;
			}

			base64VLQ.decode(mapping.rest, mapping);
			var sourceIdx = mapping.value + currentSourceIdx;
			currentSourceIdx = sourceIdx;

			if(mapping.rest && mapping.rest[0] !== ",") {
				base64VLQ.decode(mapping.rest, mapping);
				var linePosition = mapping.value + currentLine;
				currentLine = linePosition;
			} else {
				var linePosition = currentLine;
			}

			if(mapping.rest) {
				var next = mapping.rest.indexOf(",");
				mapping.rest = next === -1 ? "" : mapping.rest.substr(next);
			}

			if(!ignore) {
				addSource(line, sources ? sources[sourceIdx] : null, sourcesContent ? sourcesContent[sourceIdx] : null, linePosition)
				return true;
			}
		}
		function addCode(generatedCode) {
			if(currentNode && currentNode instanceof CodeNode) {
				currentNode.addGeneratedCode(generatedCode);
			} else if(currentNode && currentNode instanceof SourceNode && !generatedCode.trim()) {
				currentNode.generatedCode += generatedCode;
				currentSourceNodeLine++;
			} else {
				currentNode = new CodeNode(generatedCode);
				nodes.push(currentNode);
			}
		}
		function addSource(generatedCode, source, originalSource, linePosition) {
			if(currentNode && currentNode instanceof SourceNode &&
				currentNode.source === source &&
				currentSourceNodeLine === linePosition
			) {
				currentNode.generatedCode += generatedCode;
				currentSourceNodeLine++;
			} else {
				currentNode = new SourceNode(generatedCode, source, originalSource, linePosition);
				currentSourceNodeLine = linePosition + 1;
				nodes.push(currentNode);
			}
		}
	};


/***/ },
/* 68 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function mixinSourceAndMap(proto) {
		proto.map = function(options) {
			options = options || {};
			if(options.columns === false) {
				return this.listMap(options).toStringWithSourceMap().map;
			}

			return this.node(options).toStringWithSourceMap({file:"x"}).map.toJSON();
		};

		proto.sourceAndMap = function(options) {
			options = options || {};
			if(options.columns === false) {
				//console.log(this.listMap(options).debugInfo());
				return this.listMap(options).toStringWithSourceMap();
			}

			var res = this.node(options).toStringWithSourceMap({file:"x"});
			return {
				source: res.code,
				map: res.map.toJSON()
			};
		};
	}


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(48);
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceListMap = __webpack_require__(60).SourceListMap;

	function RawSource(value) {
		Source.call(this);
		this._value = value;
	}
	module.exports = RawSource;

	RawSource.prototype = Object.create(Source.prototype);
	RawSource.prototype.constructor = RawSource;

	RawSource.prototype.source = function() {
		return this._value;
	};

	RawSource.prototype.map = function(options) {
		return null;
	};

	RawSource.prototype.node = function(options) {
		return new SourceNode(null, null, null, this._value);
	};

	RawSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value);
	};

	RawSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
	};


/***/ },
/* 70 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleReason(module, dependency) {
		this.module = module;
		this.dependency = dependency;
	}
	module.exports = ModuleReason;


/***/ },
/* 71 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function removeAndDo(collection, thing, action) {
		var idx = this[collection].indexOf(thing);
		if(idx >= 0) {
			this[collection].splice(idx, 1);
			thing[action](this);
			return true;
		}
		return false;
	};


/***/ },
/* 72 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ArrayMap() {
		this.keys = [];
		this.values = [];
	}
	module.exports = ArrayMap;

	ArrayMap.prototype.get = function(key) {
		for(var i = 0; i < this.keys.length; i++) {
			if(this.keys[i] === key) {
				return this.values[i];
			}
		}
		return;
	};

	ArrayMap.prototype.set = function(key, value) {
		for(var i = 0; i < this.keys.length; i++) {
			if(this.keys[i] === key) {
				this.values[i] = value;
				return this;
			}
		}
		this.keys.push(key);
		this.values.push(value);
		return this;
	};

	ArrayMap.prototype.remove = function(key) {
		for(var i = 0; i < this.keys.length; i++) {
			if(this.keys[i] === key) {
				this.keys.splice(i, 1);
				this.values.splice(i, 1);
				return true;
			}
		}
		return false;
	};

	ArrayMap.prototype.clone = function() {
		var newMap = new ArrayMap();
		for(var i = 0; i < this.keys.length; i++) {
			newMap.keys.push(this.keys[i]);
			newMap.values.push(this.values[i]);
		}
		return newMap;
	};


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Chunk(name, module, loc) {
		this.id = null;
		this.ids = null;
		this.name = name;
		this.modules = [];
		this.chunks = [];
		this.parents = [];
		this.blocks = [];
		this.origins = [];
		this.files = [];
		this.rendered = false;
		this.entry = false;
		this.initial = false;
		if(module) {
			this.origins.push({
				module: module,
				loc: loc,
				name: name
			});
		}
	}
	module.exports = Chunk;

	Chunk.prototype.addModule = function(module) {
		if(this.modules.indexOf(module) >= 0) {
			return false;
		}
		this.modules.push(module);
		return true;
	};

	Chunk.prototype._removeAndDo = __webpack_require__(71);

	Chunk.prototype.removeModule = function(module) {
		this._removeAndDo("modules", module, "removeChunk");
	};

	Chunk.prototype.removeChunk = function(chunk) {
		this._removeAndDo("chunks", chunk, "removeParent");
	};

	Chunk.prototype.removeParent = function(chunk) {
		this._removeAndDo("parents", chunk, "removeChunk");
	};

	function createAdder(collection) {
		return function(chunk) {
			if(chunk === this) {
				return false;
			}
			if(this[collection].indexOf(chunk) >= 0) {
				return false;
			}
			this[collection].push(chunk);
			return true;
		};
	}

	Chunk.prototype.addChunk = createAdder("chunks");

	Chunk.prototype.addParent = createAdder("parents");

	Chunk.prototype.addBlock = function(block) {
		if(this.blocks.indexOf(block) >= 0) {
			return false;
		}
		this.blocks.push(block);
		return true;
	};

	Chunk.prototype.addOrigin = function(module, loc) {
		this.origins.push({
			module: module,
			loc: loc,
			name: this.name
		});
	};

	Chunk.prototype.remove = function(reason) {
		this.modules.slice().forEach(function(m) {
			m.removeChunk(this);
		}, this);
		this.parents.forEach(function(c) {
			var idx = c.chunks.indexOf(this);
			if(idx >= 0) {
				c.chunks.splice(idx, 1);
			}
			this.chunks.forEach(function(cc) {
				cc.addParent(c);
			});
		}, this);
		this.chunks.forEach(function(c) {
			var idx = c.parents.indexOf(this);
			if(idx >= 0) {
				c.parents.splice(idx, 1);
			}
			this.parents.forEach(function(cc) {
				cc.addChunk(c);
			});
		}, this);
		this.blocks.forEach(function(b) {
			var idx = b.chunks.indexOf(this);
			if(idx >= 0) {
				b.chunks.splice(idx, 1);
				if(b.chunks.length === 0) {
					b.chunks = null;
					b.chunkReason = reason;
				}
			}
		}, this);
	};

	Chunk.prototype.integrate = function(other, reason) {
		if(!this.canBeIntegrated(other)) {
			return false;
		}

		var otherModules = other.modules.slice();
		otherModules.forEach(function(m) {
			m.removeChunk(other);
			m.addChunk(this);
			this.addModule(m);
			m.rewriteChunkInReasons(other, [this]);
		}, this);
		other.modules.length = 0;

		function moveChunks(chunks, kind, onChunk) {
			chunks.forEach(function(c) {
				var idx = c[kind].indexOf(other);
				if(idx >= 0) {
					c[kind].splice(idx, 1);
				}
				onChunk(c);
			});
		}
		moveChunks(other.parents, "chunks", function(c) {
			if(c !== this && this.addParent(c)) {
				c.addChunk(this);
			}
		}.bind(this));
		other.parents.length = 0;
		moveChunks(other.chunks, "parents", function(c) {
			if(c !== this && this.addChunk(c)) {
				c.addParent(this);
			}
		}.bind(this));
		other.chunks.length = 0;
		other.blocks.forEach(function(b) {
			b.chunks = (b.chunks || [this]).map(function(c) {
				return c === other ? this : c;
			}, this);
			b.chunkReason = reason;
			this.addBlock(b);
		}, this);
		other.blocks.length = 0;
		other.origins.forEach(function(origin) {
			if(!origin.reasons) {
				origin.reasons = [reason];
			} else if(origin.reasons[0] !== reason) {
				origin.reasons.unshift(reason);
			}
			this.origins.push(origin);
		}, this);
		return true;
	};

	Chunk.prototype.isEmpty = function() {
		return this.modules.length === 0;
	};

	Chunk.prototype.updateHash = function(hash) {
		hash.update(this.id + " ");
		hash.update(this.ids ? this.ids.join(",") : "");
		hash.update(this.name + "");
		this.modules.forEach(function(m) {
			m.updateHash(hash);
		});
	};

	Chunk.prototype.size = function(options) {
		var CHUNK_OVERHEAD = options.chunkOverhead || 10000;
		var ENTRY_CHUNK_MULTIPLICATOR = options.entryChunkMultiplicator || 10;

		var modulesSize = this.modules.reduce(function(a, b) {
			return a + b.size();
		}, 0);
		return modulesSize * (this.initial ? ENTRY_CHUNK_MULTIPLICATOR : 1) + CHUNK_OVERHEAD;
	};

	Chunk.prototype.canBeIntegrated = function(other) {
		if(other.initial) {
			return false;
		}
		if(this.initial) {
			if(other.parents.length !== 1 || other.parents[0] !== this) {
				return false;
			}
		}
		return true;
	};

	Chunk.prototype.integratedSize = function(other, options) {
		// Chunk if it's possible to integrate this chunk
		if(!this.canBeIntegrated(other)) {
			return false;
		}

		var CHUNK_OVERHEAD = options.chunkOverhead || 10000;
		var ENTRY_CHUNK_MULTIPLICATOR = options.entryChunkMultiplicator || 10;

		var mergedModules = this.modules.slice();
		other.modules.forEach(function(m) {
			if(this.modules.indexOf(m) < 0) {
				mergedModules.push(m);
			}
		}, this);

		var modulesSize = mergedModules.map(function(m) {
			return m.size();
		}).reduce(function(a, b) {
			return a + b;
		}, 0);
		return modulesSize * (this.initial || other.initial ? ENTRY_CHUNK_MULTIPLICATOR : 1) + CHUNK_OVERHEAD;
	};

	Chunk.prototype.getChunkMaps = function(includeEntries, realHash) {
		var chunksProcessed = [];
		var chunkHashMap = {};
		var chunkNameMap = {};
		(function addChunk(c) {
			if(chunksProcessed.indexOf(c) >= 0) return;
			chunksProcessed.push(c);
			if(!c.entry || includeEntries) {
				chunkHashMap[c.id] = realHash ? c.hash : c.renderedHash;
				if(c.name)
					chunkNameMap[c.id] = c.name;
			}
			c.chunks.forEach(addChunk);
		}(this));
		return {
			hash: chunkHashMap,
			name: chunkNameMap
		};
	};

	Chunk.prototype.toString = function() {
		return "Chunk[" + this.modules.join() + "]";
	};


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequestShortener = __webpack_require__(75);

	function Stats(compilation) {
		this.compilation = compilation;
		this.hash = compilation.hash;
	}
	module.exports = Stats;

	Stats.prototype.hasWarnings = function() {
		return this.compilation.warnings.length > 0;
	};

	Stats.prototype.hasErrors = function() {
		return this.compilation.errors.length > 0;
	};

	Stats.prototype.toJson = function toJson(options, forToString) {
		if(typeof options === "boolean" || typeof options === "string") {
			options = Stats.presetToOptions(options);
		} else if(!options) {
			options = {};
		}

		function d(v, def) {
			return v === undefined ? def : v;
		}
		var compilation = this.compilation;
		var requestShortener = new RequestShortener(d(options.context, process.cwd()));
		var showHash = d(options.hash, true);
		var showVersion = d(options.version, true);
		var showTimings = d(options.timings, true);
		var showAssets = d(options.assets, true);
		var showChunks = d(options.chunks, true);
		var showChunkModules = d(options.chunkModules, !!forToString);
		var showChunkOrigins = d(options.chunkOrigins, !forToString);
		var showModules = d(options.modules, !forToString);
		var showCachedModules = d(options.cached, true);
		var showCachedAssets = d(options.cachedAssets, true);
		var showReasons = d(options.reasons, !forToString);
		var showChildren = d(options.children, true);
		var showSource = d(options.source, !forToString);
		var showErrors = d(options.errors, true);
		var showErrorDetails = d(options.errorDetails, !forToString);
		var showWarnings = d(options.warnings, true);
		var showPublicPath = d(options.publicPath, !forToString);
		var excludeModules = [].concat(d(options.exclude, [])).map(function(str) {
			if(typeof str !== "string") return str;
			return new RegExp("[\\\\/]" + str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + "([\\\\/]|$|!|\\?)");
		});
		var sortModules = d(options.modulesSort, "id");
		var sortChunks = d(options.chunksSort, "id");
		var sortAssets = d(options.assetsSort, "");

		function moduleFilter(module) {
			if(!showCachedModules && !module.built) {
				return false;
			}
			if(excludeModules.length === 0)
				return true;
			var ident = module.identifier();
			return !excludeModules.some(function(regExp) {
				return regExp.test(ident);
			});
		}

		function sortByField(field) {
			if(!field) return function() {
				return 0;
			};
			if(field[0] === "!") {
				field = field.substr(1);
				return function(a, b) {
					if(a[field] === b[field]) return 0;
					return a[field] < b[field] ? 1 : -1;
				};
			}
			return function(a, b) {
				if(a[field] === b[field]) return 0;
				return a[field] < b[field] ? -1 : 1;
			};
		}

		function formatError(e) {
			var text = "";
			if(typeof e === "string")
				e = {
					message: e
				};
			if(e.chunk) {
				text += "chunk " + (e.chunk.name || e.chunk.id) +
					(e.chunk.entry ? " [entry]" : e.chunk.initial ? " [initial]" : "") + "\n";
			}
			if(e.file) {
				text += e.file + "\n";
			}
			if(e.module && e.module.readableIdentifier && typeof e.module.readableIdentifier === "function") {
				text += e.module.readableIdentifier(requestShortener) + "\n";
			}
			text += e.message;
			if(showErrorDetails && e.details) text += "\n" + e.details;
			if(showErrorDetails && e.missing) text += e.missing.map(function(item) {
				return "\n[" + item + "]";
			}).join("");
			if(e.dependencies && e.origin) {
				text += "\n @ " + e.origin.readableIdentifier(requestShortener);
				e.dependencies.forEach(function(dep) {
					if(!dep.loc) return;
					if(typeof dep.loc === "string") return;
					if(!dep.loc.start) return;
					if(!dep.loc.end) return;
					text += " " + dep.loc.start.line + ":" + dep.loc.start.column + "-" +
						(dep.loc.start.line !== dep.loc.end.line ? dep.loc.end.line + ":" : "") + dep.loc.end.column;
				});
			}
			return text;
		}

		var obj = {
			errors: compilation.errors.map(formatError),
			warnings: compilation.warnings.map(formatError)
		};

		//We just hint other renderers since actually omitting
		//errors/warnings from the JSON would be kind of weird.
		Object.defineProperty(obj, "_showWarnings", {
			value: showWarnings,
			enumerable: false
		});
		Object.defineProperty(obj, "_showErrors", {
			value: showErrors,
			enumerable: false
		});

		if(showVersion) {
			obj.version = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;
		}

		if(showHash) obj.hash = this.hash;
		if(showTimings && this.startTime && this.endTime) {
			obj.time = this.endTime - this.startTime;
		}
		if(showPublicPath) {
			obj.publicPath = this.compilation.mainTemplate.getPublicPath({
				hash: this.compilation.hash
			});
		}
		if(showAssets) {
			var assetsByFile = {};
			obj.assetsByChunkName = {};
			obj.assets = Object.keys(compilation.assets).map(function(asset) {
				var obj = {
					name: asset,
					size: compilation.assets[asset].size(),
					chunks: [],
					chunkNames: [],
					emitted: compilation.assets[asset].emitted
				};
				assetsByFile[asset] = obj;
				return obj;
			}).filter(function(asset) {
				return showCachedAssets || asset.emitted;
			});
			compilation.chunks.forEach(function(chunk) {
				chunk.files.forEach(function(asset) {
					if(assetsByFile[asset]) {
						chunk.ids.forEach(function(id) {
							assetsByFile[asset].chunks.push(id);
						});
						if(chunk.name) {
							assetsByFile[asset].chunkNames.push(chunk.name);
							if(obj.assetsByChunkName[chunk.name])
								obj.assetsByChunkName[chunk.name] = [].concat(obj.assetsByChunkName[chunk.name]).concat([asset]);
							else
								obj.assetsByChunkName[chunk.name] = asset;
						}
					}
				});
			});
			obj.assets.sort(sortByField(sortAssets));
		}

		function fnModule(module) {
			var obj = {
				id: module.id,
				identifier: module.identifier(),
				name: module.readableIdentifier(requestShortener),
				index: module.index,
				index2: module.index2,
				size: module.size(),
				cacheable: !!module.cacheable,
				built: !!module.built,
				optional: !!module.optional,
				prefetched: !!module.prefetched,
				chunks: module.chunks.map(function(chunk) {
					return chunk.id;
				}),
				assets: Object.keys(module.assets || {}),
				issuer: module.issuer,
				profile: module.profile,
				failed: !!module.error,
				errors: module.errors && module.dependenciesErrors && (module.errors.length + module.dependenciesErrors.length),
				warnings: module.errors && module.dependenciesErrors && (module.warnings.length + module.dependenciesWarnings.length)
			};
			if(showReasons) {
				obj.reasons = module.reasons.filter(function(reason) {
					return reason.dependency && reason.module;
				}).map(function(reason) {
					var obj = {
						moduleId: reason.module.id,
						moduleIdentifier: reason.module.identifier(),
						module: reason.module.readableIdentifier(requestShortener),
						moduleName: reason.module.readableIdentifier(requestShortener),
						type: reason.dependency.type,
						userRequest: reason.dependency.userRequest
					};
					var dep = reason.dependency;
					if(dep.templateModules) obj.templateModules = dep.templateModules.map(function(module) {
						return module.id;
					});
					if(typeof dep.loc === "object") obj.loc = dep.loc.start.line + ":" + dep.loc.start.column + "-" +
						(dep.loc.start.line !== dep.loc.end.line ? dep.loc.end.line + ":" : "") + dep.loc.end.column;
					return obj;
				}).sort(function(a, b) {
					return a.moduleId - b.moduleId;
				});
			}
			if(showSource && module._source) {
				obj.source = module._source.source();
			}
			return obj;
		}
		if(showChunks) {
			obj.chunks = compilation.chunks.map(function(chunk) {
				var obj = {
					id: chunk.id,
					rendered: chunk.rendered,
					initial: !!chunk.initial,
					entry: !!chunk.entry,
					extraAsync: !!chunk.extraAsync,
					size: chunk.modules.reduce(function(size, module) {
						return size + module.size();
					}, 0),
					names: chunk.name ? [chunk.name] : [],
					files: chunk.files.slice(),
					hash: chunk.renderedHash,
					parents: chunk.parents.map(function(c) {
						return c.id;
					})
				};
				if(showChunkModules) {
					obj.modules = chunk.modules.filter(moduleFilter).map(fnModule);
					obj.filteredModules = chunk.modules.length - obj.modules.length;
					obj.modules.sort(sortByField(sortModules));
				}
				if(showChunkOrigins) {
					obj.origins = chunk.origins.map(function(origin) {
						return {
							moduleId: origin.module ? origin.module.id : undefined,
							module: origin.module ? origin.module.identifier() : "",
							moduleIdentifier: origin.module ? origin.module.identifier() : "",
							moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : "",
							loc: typeof origin.loc === "object" ? obj.loc = origin.loc.start.line + ":" + origin.loc.start.column + "-" +
								(origin.loc.start.line !== origin.loc.end.line ? origin.loc.end.line + ":" : "") + origin.loc.end.column : "",
							name: origin.name,
							reasons: origin.reasons || []
						};
					});
				}
				return obj;
			});
			obj.chunks.sort(sortByField(sortChunks));
		}
		if(showModules) {
			obj.modules = compilation.modules.filter(moduleFilter).map(fnModule);
			obj.filteredModules = compilation.modules.length - obj.modules.length;
			obj.modules.sort(sortByField(sortModules));
		}
		if(showChildren) {
			obj.children = compilation.children.map(function(child) {
				var obj = new Stats(child).toJson(options, forToString);
				delete obj.hash;
				delete obj.version;
				obj.name = child.name;
				return obj;
			});
		}
		return obj;
	};

	Stats.prototype.toString = function toString(options) {
		if(typeof options === "boolean" || typeof options === "string") {
			options = Stats.presetToOptions(options);
		} else if(!options) options = {};

		function d(v, def) {
			return v === undefined ? def : v;
		}
		var useColors = d(options.colors, false);

		var obj = this.toJson(options, true);

		return Stats.jsonToString(obj, useColors);
	};

	Stats.jsonToString = function jsonToString(obj, useColors) {
		var buf = [];

		function normal(str) {
			buf.push(str);
		}

		function bold(str) {
			if(useColors) buf.push("\u001b[1m");
			buf.push(str);
			if(useColors) buf.push("\u001b[22m");
		}

		function yellow(str) {
			if(useColors) buf.push("\u001b[1m\u001b[33m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}

		function red(str) {
			if(useColors) buf.push("\u001b[1m\u001b[31m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}

		function green(str) {
			if(useColors) buf.push("\u001b[1m\u001b[32m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}

		function cyan(str) {
			if(useColors) buf.push("\u001b[1m\u001b[36m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}

		function magenta(str) {
			if(useColors) buf.push("\u001b[1m\u001b[35m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}

		function coloredTime(time) {
			var times = [800, 400, 200, 100];
			if(obj.time) {
				times = [obj.time / 2, obj.time / 4, obj.time / 8, obj.time / 16];
			}
			if(time < times[3])
				normal(time + "ms");
			else if(time < times[2])
				bold(time + "ms");
			else if(time < times[1])
				green(time + "ms");
			else if(time < times[0])
				yellow(time + "ms");
			else
				red(time + "ms");
		}

		function newline() {
			buf.push("\n");
		}

		function table(array, formats, align, splitter) {
			var rows = array.length;
			var cols = array[0].length;
			var colSizes = new Array(cols);
			for(var col = 0; col < cols; col++)
				colSizes[col] = 3;
			for(var row = 0; row < rows; row++) {
				for(var col = 0; col < cols; col++) {
					var value = array[row][col] + "";
					if(value.length > colSizes[col]) {
						colSizes[col] = value.length;
					}
				}
			}
			for(var row = 0; row < rows; row++) {
				for(var col = 0; col < cols; col++) {
					var format = row === 0 ? bold : formats[col];
					var value = array[row][col] + "";
					var l = value.length;
					if(align[col] === "l")
						format(value);
					for(; l < colSizes[col] && col !== cols - 1; l++)
						normal(" ");
					if(align[col] === "r")
						format(value);
					if(col + 1 < cols)
						normal(splitter || "  ");
				}
				newline();
			}
		}

		function formatSize(size) {
			if(size <= 0) return "0 bytes";

			var abbreviations = ["bytes", "kB", "MB", "GB"];
			var index = Math.floor(Math.log(size) / Math.log(1000));

			return +(size / Math.pow(1000, index))
				.toPrecision(3) + " " + abbreviations[index];
		}

		if(obj.hash) {
			normal("Hash: ");
			bold(obj.hash);
			newline();
		}
		if(obj.version) {
			normal("Version: webpack ");
			bold(obj.version);
			newline();
		}
		if(typeof obj.time === "number") {
			normal("Time: ");
			bold(obj.time);
			normal("ms");
			newline();
		}
		if(obj.publicPath) {
			normal("PublicPath: ");
			bold(obj.publicPath);
			newline();
		}
		if(obj.assets && obj.assets.length > 0) {
			var t = [
				["Asset", "Size", "Chunks", "", "Chunk Names"]
			];
			obj.assets.forEach(function(asset) {
				t.push([
					asset.name,
					formatSize(asset.size),
					asset.chunks.join(", "),
					asset.emitted ? "[emitted]" : "",
					asset.chunkNames.join(", ")
				]);
			});
			table(t, [green, normal, bold, green, normal], "rrrll");
		}
		var modulesByIdentifier = {};
		if(obj.modules) {
			obj.modules.forEach(function(module) {
				modulesByIdentifier["$" + module.identifier] = module;
			});
		} else if(obj.chunks) {
			obj.chunks.forEach(function(chunk) {
				if(chunk.modules) {
					chunk.modules.forEach(function(module) {
						modulesByIdentifier["$" + module.identifier] = module;
					});
				}
			});
		}

		function processProfile(module) {
			if(module.profile) {
				normal("      ");
				var sum = 0,
					allowSum = true;
				var path = [];
				var current = module;
				while(current.issuer) {
					if(!modulesByIdentifier["$" + current.issuer]) {
						normal(" ... ->");
						allowSum = false;
						break;
					}
					path.unshift(current = modulesByIdentifier["$" + current.issuer]);
				}
				path.forEach(function(module) {
					normal(" [");
					normal(module.id);
					normal("] ");
					if(module.profile) {
						var time = (module.profile.factory || 0) + (module.profile.building || 0);
						coloredTime(time);
						sum += time;
						normal(" ");
					}
					normal("->");
				});
				Object.keys(module.profile).forEach(function(key) {
					normal(" " + key + ":");
					var time = module.profile[key];
					coloredTime(time);
					sum += time;
				});
				if(allowSum) {
					normal(" = ");
					coloredTime(sum);
				}
				newline();
			}
		}

		function processModuleAttributes(module) {
			normal(" ");
			normal(formatSize(module.size));
			if(module.chunks) {
				module.chunks.forEach(function(chunk) {
					normal(" {");
					yellow(chunk);
					normal("}");
				});
			}
			if(!module.cacheable) {
				red(" [not cacheable]");
			}
			if(module.optional) {
				yellow(" [optional]");
			}
			if(module.built) {
				green(" [built]");
			}
			if(module.prefetched) {
				magenta(" [prefetched]");
			}
			if(module.failed)
				red(" [failed]");
			if(module.warnings)
				yellow(" [" + module.warnings + " warning" + (module.warnings === 1 ? "" : "s") + "]");
			if(module.errors)
				red(" [" + module.errors + " error" + (module.errors === 1 ? "" : "s") + "]");
		}
		if(obj.chunks) {
			obj.chunks.forEach(function(chunk) {
				normal("chunk ");
				if(chunk.id < 1000) normal(" ");
				if(chunk.id < 100) normal(" ");
				if(chunk.id < 10) normal(" ");
				normal("{");
				yellow(chunk.id);
				normal("} ");
				green(chunk.files.join(", "));
				if(chunk.names && chunk.names.length > 0) {
					normal(" (");
					normal(chunk.names.join(", "));
					normal(")");
				}
				normal(" ");
				normal(formatSize(chunk.size));
				chunk.parents.forEach(function(id) {
					normal(" {");
					yellow(id);
					normal("}");
				});
				if(chunk.rendered) {
					green(" [rendered]");
				}
				newline();
				if(chunk.origins) {
					chunk.origins.forEach(function(origin) {
						normal("    > ");
						if(origin.reasons && origin.reasons.length) {
							yellow(origin.reasons.join(" "));
							normal(" ");
						}
						if(origin.name) {
							normal(origin.name);
							normal(" ");
						}
						if(origin.module) {
							normal("[");
							normal(origin.moduleId);
							normal("] ");
							var module = modulesByIdentifier["$" + origin.module];
							if(module) {
								bold(module.name);
								normal(" ");
							}
							if(origin.loc) {
								normal(origin.loc);
							}
						}
						newline();
					});
				}
				if(chunk.modules) {
					chunk.modules.forEach(function(module) {
						normal(" ");
						if(module.id < 1000) normal(" ");
						if(module.id < 100) normal(" ");
						if(module.id < 10) normal(" ");
						normal("[");
						normal(module.id);
						normal("] ");
						bold(module.name);
						processModuleAttributes(module);
						newline();
						if(module.reasons) {
							module.reasons.forEach(function(reason) {
								normal("        ");
								normal(reason.type);
								normal(" ");
								cyan(reason.userRequest);
								if(reason.templateModules) cyan(reason.templateModules.join(" "));
								normal(" [");
								normal(reason.moduleId);
								normal("] ");
								magenta(reason.module);
								if(reason.loc) {
									normal(" ");
									normal(reason.loc);
								}
								newline();
							});
						}
						processProfile(module);
					});
					if(chunk.filteredModules > 0) {
						normal("     + " + chunk.filteredModules + " hidden modules");
						newline();
					}
				}
			});
		}
		if(obj.modules) {
			obj.modules.forEach(function(module) {
				if(module.id < 1000) normal(" ");
				if(module.id < 100) normal(" ");
				if(module.id < 10) normal(" ");
				normal("[");
				normal(module.id);
				normal("] ");
				bold(module.name || module.identifier);
				processModuleAttributes(module);
				newline();
				if(module.reasons) {
					module.reasons.forEach(function(reason) {
						normal("       ");
						normal(reason.type);
						normal(" ");
						cyan(reason.userRequest);
						if(reason.templateModules) cyan(reason.templateModules.join(" "));
						normal(" [");
						normal(reason.moduleId);
						normal("] ");
						magenta(reason.module);
						if(reason.loc) {
							normal(" ");
							normal(reason.loc);
						}
						newline();
					});
				}
				processProfile(module);
			});
			if(obj.filteredModules > 0) {
				normal("    + " + obj.filteredModules + " hidden modules");
				newline();
			}
		}
		if(obj._showWarnings && obj.warnings) {
			obj.warnings.forEach(function(warning) {
				newline();
				yellow("WARNING in " + warning);
				newline();
			});
		}
		if(obj._showErrors && obj.errors) {
			obj.errors.forEach(function(error) {
				newline();
				red("ERROR in " + error);
				newline();
			});
		}
		if(obj.children) {
			obj.children.forEach(function(child) {
				if(child.name) {
					normal("Child ");
					bold(child.name);
					normal(":");
				} else {
					normal("Child");
				}
				newline();
				buf.push("    ");
				buf.push(Stats.jsonToString(child, useColors).replace(/\n/g, "\n    "));
				newline();
			});
		}

		while(buf[buf.length - 1] === "\n") buf.pop();
		return buf.join("");
	};

	Stats.presetToOptions = function(name) {
		//Accepted values: none, errors-only, minimal, normal, verbose
		//Any other falsy value will behave as 'none', truthy values as 'normal'
		var pn = (typeof name === "string") && name.toLowerCase() || name;
		if(pn === "none" || !pn) {
			return {
				hash: false,
				version: false,
				timings: false,
				assets: false,
				chunks: false,
				modules: false,
				reasons: false,
				children: false,
				source: false,
				errors: false,
				errorDetails: false,
				warnings: false,
				publicPath: false
			};
		} else {
			return {
				assets: pn === "verbose",
				version: pn === "verbose",
				timings: pn !== "errors-only" && pn !== "minimal",
				hash: pn !== "errors-only" && pn !== "minimal",
				chunks: pn !== "errors-only",
				chunkModules: pn === "verbose",
				//warnings: pn !== "errors-only",
				errorDetails: pn !== "errors-only" && pn !== "minimal",
				reasons: pn === "verbose",
				colors: true
			};
		}
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);

	function RequestShortener(directory) {
		var parentDirectory = path.dirname(directory);
		if(/[\/\\]$/.test(directory)) directory = directory.substr(0, directory.length - 1);
		if(directory) {
			var currentDirectoryRegExp = directory.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			currentDirectoryRegExp = new RegExp("^" + currentDirectoryRegExp + "|(!)" + currentDirectoryRegExp, "g");

			this.currentDirectoryRegExp = currentDirectoryRegExp;
		}

		if(/[\/\\]$/.test(parentDirectory)) parentDirectory = parentDirectory.substr(0, parentDirectory.length - 1);
		if(parentDirectory && parentDirectory !== directory) {
			var parentDirectoryRegExp = parentDirectory.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			parentDirectoryRegExp = new RegExp("^" + parentDirectoryRegExp + "|(!)" + parentDirectoryRegExp, "g");

			this.parentDirectoryRegExp = parentDirectoryRegExp;
		}

		if(__dirname.length >= 2) {
			var buildins = path.join(__dirname, "..");
			var buildinsAsModule = currentDirectoryRegExp && currentDirectoryRegExp.test(buildins);
			var buildinsRegExp = buildins.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			buildinsRegExp = new RegExp("^" + buildinsRegExp + "|(!)" + buildinsRegExp, "g");

			this.buildinsAsModule = buildinsAsModule;
			this.buildinsRegExp = buildinsRegExp;
		}

		this.nodeModulesRegExp = /\/node_modules\//g;
		this.indexJsRegExp = /\/index.js(!|\?|\(query\))/g;
	}
	module.exports = RequestShortener;

	RequestShortener.prototype.shorten = function(request) {
		if(!request)
			return request;
		if(this.buildinsAsModule && this.buildinsRegExp)
			request = request.replace(this.buildinsRegExp, "!(webpack)");
		if(this.currentDirectoryRegExp)
			request = request.replace(this.currentDirectoryRegExp, "!.");
		if(this.parentDirectoryRegExp)
			request = request.replace(this.parentDirectoryRegExp, "!..");
		if(!this.buildinsAsModule && this.buildinsRegExp)
			request = request.replace(this.buildinsRegExp, "!(webpack)");
		request = request.replace(/\\/g, "/");
		request = request.replace(this.nodeModulesRegExp, "/~/");
		request = request.replace(this.indexJsRegExp, "$1");
		return request.replace(/^!|!$/, "");
	};

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 76 */,
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var OriginalSource = __webpack_require__(79);
	var PrefixSource = __webpack_require__(80);
	var Template = __webpack_require__(81);

	function MainTemplate(outputOptions) {
		Template.call(this, outputOptions);
		this.plugin("startup", function(source, chunk, hash) {
			var buf = [];
			if(chunk.modules.some(function(m) {
					return m.id === 0;
				})) {
				buf.push("");
				buf.push("// Load entry module and return exports");
				buf.push("return " + this.renderRequireFunctionForModule(hash, chunk, "0") + "(0);");
			}
			return this.asString(buf);
		});
		this.plugin("render", function(bootstrapSource, chunk, hash, moduleTemplate, dependencyTemplates) {
			var source = new ConcatSource();
			source.add("/******/ (function(modules) { // webpackBootstrap\n");
			source.add(new PrefixSource("/******/", bootstrapSource));
			source.add("/******/ })\n");
			source.add("/************************************************************************/\n");
			source.add("/******/ (");
			var modules = this.renderChunkModules(chunk, moduleTemplate, dependencyTemplates, "/******/ ");
			source.add(this.applyPluginsWaterfall("modules", modules, chunk, hash, moduleTemplate, dependencyTemplates));
			source.add(")");
			return source;
		});
		this.plugin("local-vars", function(source /*, chunk, hash*/ ) {
			return this.asString([
				source,
				"// The module cache",
				"var installedModules = {};"
			]);
		});
		this.plugin("require", function(source, chunk, hash) {
			return this.asString([
				source,
				"// Check if module is in cache",
				"if(installedModules[moduleId])",
				this.indent("return installedModules[moduleId].exports;"),
				"",
				"// Create a new module (and put it into the cache)",
				"var module = installedModules[moduleId] = {",
				this.indent(this.applyPluginsWaterfall("module-obj", "", chunk, hash, "moduleId")),
				"};",
				"",
				"// Execute the module function",
				"modules[moduleId].call(module.exports, module, module.exports, " + this.renderRequireFunctionForModule(hash, chunk, "moduleId") + ");",
				"",
				"// Flag the module as loaded",
				"module.loaded = true;",
				"",
				"// Return the exports of the module",
				"return module.exports;"
			]);
		});
		this.plugin("module-obj", function( /*source, chunk, hash, varModuleId*/ ) {
			return this.asString([
				"exports: {},",
				"id: moduleId,",
				"loaded: false"
			]);
		});
		this.plugin("require-extensions", function(source, chunk, hash) {
			var buf = [];
			if(chunk.chunks.length > 0) {
				buf.push("// This file contains only the entry chunk.");
				buf.push("// The chunk loading function for additional chunks");
				buf.push(this.requireFn + ".e = function requireEnsure(chunkId, callback) {");
				buf.push(this.indent(this.applyPluginsWaterfall("require-ensure", "throw new Error('Not chunk loading available');", chunk, hash, "chunkId")));
				buf.push("};");
			}
			buf.push("");
			buf.push("// expose the modules object (__webpack_modules__)");
			buf.push(this.requireFn + ".m = modules;");

			buf.push("");
			buf.push("// expose the module cache");
			buf.push(this.requireFn + ".c = installedModules;");

			var publicPath = this.getPublicPath({
				hash: hash
			});
			buf.push("");
			buf.push("// __webpack_public_path__");
			buf.push(this.requireFn + ".p = " + JSON.stringify(publicPath) + ";");
			return this.asString(buf);
		});
	}
	module.exports = MainTemplate;

	MainTemplate.prototype = Object.create(Template.prototype);
	MainTemplate.prototype.requireFn = "__webpack_require__";
	MainTemplate.prototype.render = function(hash, chunk, moduleTemplate, dependencyTemplates) {
		var buf = [];
		buf.push(this.applyPluginsWaterfall("bootstrap", "", chunk, hash, moduleTemplate, dependencyTemplates));
		buf.push(this.applyPluginsWaterfall("local-vars", "", chunk, hash));
		buf.push("");
		buf.push("// The require function");
		buf.push("function " + this.requireFn + "(moduleId) {");
		buf.push(this.indent(this.applyPluginsWaterfall("require", "", chunk, hash)));
		buf.push("}");
		buf.push("");
		buf.push(this.asString(this.applyPluginsWaterfall("require-extensions", "", chunk, hash)));
		buf.push(this.asString(this.applyPluginsWaterfall("startup", "", chunk, hash)));
		var source = this.applyPluginsWaterfall("render", new OriginalSource(this.prefix(buf, " \t") + "\n", "webpack/bootstrap " + hash), chunk, hash, moduleTemplate, dependencyTemplates);
		if(chunk.modules.some(function(module) {
				return module.id === 0;
			})) {
			source = this.applyPluginsWaterfall("render-with-entry", source, chunk, hash);
		}
		if(!source) throw new Error("Compiler error: MainTemplate plugin 'render' should return something");
		chunk.rendered = true;
		return new ConcatSource(source, ";");
	};

	MainTemplate.prototype.renderRequireFunctionForModule = function(hash, chunk, varModuleId) {
		return this.applyPluginsWaterfall("module-require", this.requireFn, chunk, hash, varModuleId);
	};

	MainTemplate.prototype.renderAddModule = function(hash, chunk, varModuleId, varModule) {
		return this.applyPluginsWaterfall("add-module", "modules[" + varModuleId + "] = " + varModule + ";", chunk, hash, varModuleId, varModule);
	};

	MainTemplate.prototype.renderCurrentHashCode = function(hash, length) {
		length = length || Infinity;
		return this.applyPluginsWaterfall("current-hash", JSON.stringify(hash.substr(0, length)), length);
	};

	MainTemplate.prototype.entryPointInChildren = function(chunk) {
		function checkChildren(chunk, alreadyCheckedChunks) {
			return chunk.chunks.some(function(child) {
				if(alreadyCheckedChunks.indexOf(child) >= 0) return;
				alreadyCheckedChunks.push(child);
				return child.modules.some(function(module) {
					return module.id === 0;
				}) || checkChildren(child, alreadyCheckedChunks);
			});
		}
		return checkChildren(chunk, []);
	};

	MainTemplate.prototype.getPublicPath = function(options) {
		return this.applyPluginsWaterfall("asset-path", this.outputOptions.publicPath || "", options);
	};

	MainTemplate.prototype.updateHash = function(hash) {
		hash.update("maintemplate");
		hash.update("3");
		hash.update(this.outputOptions.publicPath + "");
		this.applyPlugins("hash", hash);
	};

	MainTemplate.prototype.updateHashForChunk = function(hash, chunk) {
		this.updateHash(hash);
		this.applyPlugins("hash-for-chunk", hash, chunk);
	};

	MainTemplate.prototype.useChunkHash = function(chunk) {
		var paths = this.applyPluginsWaterfall("global-hash-paths", []);
		return !this.applyPluginsBailResult("global-hash", chunk, paths);
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceListMap = __webpack_require__(60).SourceListMap;
	var Source = __webpack_require__(48);

	function ConcatSource() {
		Source.call(this);
		this.children = Array.prototype.slice.call(arguments);
	}
	module.exports = ConcatSource;

	ConcatSource.prototype = Object.create(Source.prototype);
	ConcatSource.prototype.constructor = ConcatSource;

	ConcatSource.prototype.add = function(item) {
		this.children.push(item);
	};

	ConcatSource.prototype.source = function() {
		return this.children.map(function(item) {
			return typeof item === "string" ? item : item.source();
		}).join("");
	};

	ConcatSource.prototype.size = function() {
		return this.children.map(function(item) {
			return typeof item === "string" ? item.length : item.size();
		}).reduce(function(sum, s) { return sum + s; }, 0);
	};

	__webpack_require__(68)(ConcatSource.prototype);

	ConcatSource.prototype.node = function(options) {
		var node = new SourceNode(null, null, null, this.children.map(function(item) {
			return typeof item === "string" ? item : item.node(options);
		}));
		return node;
	};

	ConcatSource.prototype.listMap = function(options) {
		var map = new SourceListMap();
		this.children.forEach(function(item) {
			if(typeof item === "string")
				map.add(item);
			else
				map.add(item.listMap(options));
		});
		return map;
	};

	ConcatSource.prototype.updateHash = function(hash) {
		this.children.forEach(function(item) {
			if (typeof item === "string") {
				hash.update(item)
			} else {
				item.updateHash(hash);
			}
		});
	};


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceMapConsumer = __webpack_require__(49).SourceMapConsumer;
	var SourceListMap = __webpack_require__(60).SourceListMap;
	var Source = __webpack_require__(48);

	function isSplitter(c) {
		switch(c) {
		case 10: // \n
		case 13: // \r
		case 59: // ;
		case 123: // {
		case 125: // }
		return true;
		}
		return false;
	}
	function _splitCode(code) {
		var result = [];
		var i = 0, j = 0;
		for(; i < code.length; i++) {
			if(isSplitter(code.charCodeAt(i))) {
				while(isSplitter(code.charCodeAt(++i)));
				result.push(code.substring(j, i));
				j = i;
			}
		}
		if(j < code.length)
			result.push(code.substr(j));
		return result;
	}

	function OriginalSource(value, name) {
		Source.call(this);
		this._value = value;
		this._name = name;
	}

	module.exports = OriginalSource;

	OriginalSource.prototype = Object.create(Source.prototype);
	OriginalSource.prototype.constructor = OriginalSource;

	OriginalSource.prototype.source = function() {
		return this._value;
	};

	__webpack_require__(68)(OriginalSource.prototype);

	OriginalSource.prototype.node = function(options) {
		options = options || {};
		var sourceMap = this._sourceMap;
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) {
				var pos = 0;
				if(options.columns === false) {
					return new SourceNode(idx+1, 0, name,
						(line + (idx != lines.length-1 ? "\n" : ""))
					);
				}
				return new SourceNode(null, null, null,
					_splitCode(line + (idx != lines.length-1 ? "\n" : "")).map(function(item) {
						if(/^\s*$/.test(item)) return item;
						var res = new SourceNode(idx+1, pos, name, item);
						pos += item.length;
						return res;
					})
				);
			})
		);
		node.setSourceContent(name, value);
		return node;
	};

	OriginalSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value, this._name, this._value)
	};

	OriginalSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
	};


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(48);
	var SourceNode = __webpack_require__(49).SourceNode;

	function PrefixSource(prefix, source) {
		Source.call(this);
		this._source = source;
		this._prefix = prefix;
	}
	module.exports = PrefixSource;

	PrefixSource.prototype = Object.create(Source.prototype);
	PrefixSource.prototype.constructor = PrefixSource;

	PrefixSource.prototype.source = function() {
		var node = typeof this._source === "string" ? this._source : this._source.source();
		var prefix = this._prefix;
		return prefix + node.replace(/\n(.)/g, "\n" + prefix + "$1");
	};

	__webpack_require__(68)(PrefixSource.prototype);

	PrefixSource.prototype.node = function(options) {
		var node = this._source.node(options);
		var append = [this._prefix];
		return new SourceNode(null, null, null, [
			cloneAndPrefix(node, this._prefix, append)
		]);
	};

	PrefixSource.prototype.listMap = function(options) {
		var prefix = this._prefix;
		var map = this._source.listMap(options);
		map.mapGeneratedCode(function(code) {
			return prefix + code.replace(/\n(.)/g, "\n" + prefix + "$1");
		});
		return map;
	};

	PrefixSource.prototype.updateHash = function(hash) {
		if(typeof this._source === "string")
			hash.update(this._source);
		else
			this._source.updateHash(hash);
		if(typeof this._prefix === "string")
			hash.update(this._prefix);
		else
			this._prefix.updateHash(hash);
	};

	function cloneAndPrefix(node, prefix, append) {
		if(typeof node === "string") {
			var result = node.replace(/\n(.)/g, "\n" + prefix + "$1");
			if(append.length > 0) result = append.pop() + result;
			if(/\n$/.test(node)) append.push(prefix);
			return result;
		} else {
			var newNode = new SourceNode(
				node.line,
				node.column,
				node.source,
				node.children.map(function(node) {
					return cloneAndPrefix(node, prefix, append);
				}),
				node.name
			);
			newNode.sourceContents = node.sourceContents;
			return newNode;
		}
	};


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Tapable = __webpack_require__(37);
	var ConcatSource = __webpack_require__(78);

	function Template(outputOptions) {
		Tapable.call(this);
		this.outputOptions = outputOptions || {};
	}
	module.exports = Template;

	Template.getFunctionContent = function(fn) {
		return fn.toString().replace(/^function\s?\(\)\s?\{\n?|\n?\}$/g, "").replace(/^\t/mg, "");
	};

	Template.toIdentifier = function(str) {
		if(typeof str !== "string") return "";
		return str.replace(/^[^a-zA-Z$_]/, "_").replace(/[^a-zA-Z0-9$_]/g, "_");
	};

	Template.prototype = Object.create(Tapable.prototype);
	Template.prototype.constructor = Template;

	Template.prototype.indent = function indent(str) {
		if(Array.isArray(str)) {
			return str.map(indent).join("\n");
		} else {
			str = str.trimRight();
			if(!str) return "";
			var ind = (str[0] === "\n" ? "" : "\t");
			return ind + str.replace(/\n([^\n])/g, "\n\t$1");
		}
	};

	Template.prototype.prefix = function(str, prefix) {
		if(Array.isArray(str)) {
			str = str.join("\n");
		}
		str = str.trim();
		if(!str) return "";
		var ind = (str[0] === "\n" ? "" : prefix);
		return ind + str.replace(/\n([^\n])/g, "\n" + prefix + "$1");
	};

	Template.prototype.asString = function(str) {
		if(Array.isArray(str)) {
			return str.join("\n");
		}
		return str;
	};

	Template.prototype.getModulesArrayBounds = function(modules) {
		if(modules.some(function(module) {
				return typeof module.id !== "number";
			}))
			return false;
		var maxId = -Infinity;
		var minId = Infinity;
		modules.forEach(function(module) {
			if(maxId < module.id) maxId = module.id;
			if(minId > module.id) minId = module.id;
		});
		if(minId < 16 + ("" + minId).length) {
			// add minId x ',' instead of 'Array(minId).concat(...)'
			minId = 0;
		}
		var objectOverhead = modules.map(function(module) {
			var idLength = (module.id + "").length;
			return idLength + 2;
		}).reduce(function(a, b) {
			return a + b;
		}, -1);
		var arrayOverhead = minId === 0 ? maxId : 16 + ("" + minId).length + maxId;
		return arrayOverhead < objectOverhead ? [minId, maxId] : false;
	};

	Template.prototype.renderChunkModules = function(chunk, moduleTemplate, dependencyTemplates, prefix) {
		if(!prefix) prefix = "";
		var source = new ConcatSource();
		if(chunk.modules.length === 0) {
			source.add("[]");
			return source;
		}
		var bounds = this.getModulesArrayBounds(chunk.modules);
		if(bounds) {
			// Render a spare array
			var minId = bounds[0];
			var maxId = bounds[1];
			if(minId !== 0) source.add("Array(" + minId + ").concat(");
			source.add("[\n");
			var modules = {};
			chunk.modules.forEach(function(module) {
				modules[module.id] = module;
			});
			for(var idx = minId; idx <= maxId; idx++) {
				var module = modules[idx];
				if(idx !== minId) source.add(",\n");
				source.add("/* " + idx + " */");
				if(module) {
					source.add("\n");
					source.add(moduleTemplate.render(module, dependencyTemplates, chunk));
				}
			}
			source.add("\n" + prefix + "]");
			if(minId !== 0) source.add(")");
		} else {
			// Render an object
			source.add("{\n");
			chunk.modules.forEach(function(module, idx) {
				if(idx !== 0) source.add(",\n");
				source.add("\n/***/ " + JSON.stringify(module.id) + ":\n");
				source.add(moduleTemplate.render(module, dependencyTemplates, chunk));
			});
			source.add("\n\n" + prefix + "}");
		}
		return source;
	};


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var Template = __webpack_require__(81);

	function ChunkTemplate(outputOptions) {
		Template.call(this, outputOptions);
	}

	module.exports = ChunkTemplate;

	ChunkTemplate.prototype = Object.create(Template.prototype);
	ChunkTemplate.prototype.render = function(chunk, moduleTemplate, dependencyTemplates) {
		var modules = this.renderChunkModules(chunk, moduleTemplate, dependencyTemplates);
		var core = this.applyPluginsWaterfall("modules", modules, chunk, moduleTemplate, dependencyTemplates);
		var source = this.applyPluginsWaterfall("render", core, chunk, moduleTemplate, dependencyTemplates);
		if(chunk.modules.some(function(module) {
				return module.id === 0;
			})) {
			source = this.applyPluginsWaterfall("render-with-entry", source, chunk);
		}
		chunk.rendered = true;
		return new ConcatSource(source, ";");
	};

	ChunkTemplate.prototype.updateHash = function(hash) {
		hash.update("ChunkTemplate");
		hash.update("2");
		this.applyPlugins("hash", hash);
	};

	ChunkTemplate.prototype.updateHashForChunk = function(hash, chunk) {
		this.updateHash(hash);
		this.applyPlugins("hash-for-chunk", hash, chunk);
	};


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(81);

	function HotUpdateChunkTemplate(outputOptions) {
		Template.call(this, outputOptions);
	}

	module.exports = HotUpdateChunkTemplate;

	HotUpdateChunkTemplate.prototype = Object.create(Template.prototype);
	HotUpdateChunkTemplate.prototype.render = function(id, modules, hash, moduleTemplate, dependencyTemplates) {
		var modulesSource = this.renderChunkModules({
			id: id,
			modules: modules
		}, moduleTemplate, dependencyTemplates);
		var core = this.applyPluginsWaterfall("modules", modulesSource, modules, moduleTemplate, dependencyTemplates);
		var source = this.applyPluginsWaterfall("render", core, modules, hash, id, moduleTemplate, dependencyTemplates);
		return source;
	};

	HotUpdateChunkTemplate.prototype.updateHash = function(hash) {
		hash.update("HotUpdateChunkTemplate");
		hash.update("1");
		this.applyPlugins("hash", hash);
	};


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(81);

	function ModuleTemplate(outputOptions) {
		Template.call(this, outputOptions);
	}
	module.exports = ModuleTemplate;

	ModuleTemplate.prototype = Object.create(Template.prototype);
	ModuleTemplate.prototype.render = function(module, dependencyTemplates, chunk) {
		var moduleSource = module.source(dependencyTemplates, this.outputOptions, this.requestShortener);
		moduleSource = this.applyPluginsWaterfall("module", moduleSource, module, chunk, dependencyTemplates);
		moduleSource = this.applyPluginsWaterfall("render", moduleSource, module, chunk, dependencyTemplates);
		return this.applyPluginsWaterfall("package", moduleSource, module, chunk, dependencyTemplates);
	};

	ModuleTemplate.prototype.updateHash = function(hash) {
		hash.update("1");
		this.applyPlugins("hash", hash);
	};


/***/ },
/* 85 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Dependency() {
		this.module = null;
	}
	module.exports = Dependency;

	Dependency.prototype.isEqualResource = function( /* other */ ) {
		return false;
	};

	Dependency.prototype.updateHash = function(hash) {
		hash.update((this.module && this.module.id) + "");
	};

	Dependency.prototype.disconnect = function() {
		this.module = null;
	};

	Dependency.compare = function(a, b) {
		return Dependency.compareLocations(a.loc, b.loc);
	};

	Dependency.compareLocations = function(a, b) {
		if(typeof a === "string") {
			if(typeof b === "string") {
				if(a < b) return -1;
				if(a > b) return 1;
				return 0;
			} else if(typeof b === "object") {
				return 1;
			} else {
				return 0;
			}
		} else if(typeof a === "object") {
			if(typeof b === "string") {
				return -1;
			} else if(typeof b === "object") {
				if(a.start) a = a.start;
				if(b.start) b = b.start;
				if(a.line < b.line) return -1;
				if(a.line > b.line) return 1;
				if(a.column < b.column) return -1;
				if(a.column > b.column) return 1;
				if(a.index < b.index) return -1;
				if(a.index > b.index) return 1;
				return 0;
			} else {
				return 0;
			}
		}
	};


/***/ },
/* 86 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ChunkRenderError(chunk, file, error) {
		Error.call(this);
		Error.captureStackTrace(this, ChunkRenderError);
		this.name = "ChunkRenderError";
		this.error = error;
		this.message = error.message;
		this.details = error.stack;
		this.file = file;
		this.chunk = chunk;
	}
	module.exports = ChunkRenderError;

	ChunkRenderError.prototype = Object.create(Error.prototype);


/***/ },
/* 87 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CachedSource(source) {
		this._source = source;
		this._cachedSource = undefined;
		this._cachedSize = undefined;
		this._cachedMaps = {};
	}
	module.exports = CachedSource;

	CachedSource.prototype.source = function() {
		if(typeof this._cachedSource !== "undefined") return this._cachedSource;
		return this._cachedSource = this._source.source();
	};

	CachedSource.prototype.size = function() {
		if(typeof this._cachedSize !== "undefined") return this._cachedSize;
		if(typeof this._cachedSource !== "undefined")
			return this._cachedSize = this._cachedSource.length;
		return this._cachedSize = this._source.size();
	};

	CachedSource.prototype.sourceAndMap = function(options) {
		var key = JSON.stringify(options);
		if(typeof this._cachedSource !== "undefined" && key in this._cachedMaps)
			return { source: this._cachedSource, map: this._cachedMaps[key] };
		else if(typeof this._cachedSource !== "undefined") {
			return { source: this._cachedSource, map: this._cachedMaps[key] = this._source.map(options) };
		} else if(key in this._cachedMaps) {
			return { source: this._cachedSource = this._source.source(), map: this._cachedMaps[key] };
		}
		var result = this._source.sourceAndMap(options);
		this._cachedSource = result.source;
		this._cachedMaps[key] = result.map;
		return { source: this._cachedSource, map: this._cachedMaps[key] };
	};

	CachedSource.prototype.node = function(options) {
		return this._source.node(options);
	};

	CachedSource.prototype.listMap = function(options) {
		return this._source.listMap(options);
	}

	CachedSource.prototype.map = function(options) {
		if(!options) options = {};
		var key = JSON.stringify(options);
		if(key in this._cachedMaps)
			return this._cachedMaps[key];
		return this._cachedMaps[key] = this._source.map();
	};

	CachedSource.prototype.updateHash = function(hash) {
		this._source.updateHash(hash);
	};


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(89)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(91)

	exports.createHmac = __webpack_require__(103)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(104)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(90)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(32).Buffer))

/***/ },
/* 90 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(92)

	var md5 = toConstructor(__webpack_require__(100))
	var rmd160 = toConstructor(__webpack_require__(102))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(32).Buffer
	var Hash   = __webpack_require__(93)(Buffer)

	exports.sha1 = __webpack_require__(94)(Buffer, Hash)
	exports.sha256 = __webpack_require__(98)(Buffer, Hash)
	exports.sha512 = __webpack_require__(99)(Buffer, Hash)


/***/ },
/* 93 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(95).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(96);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(97);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 97 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(95).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(95).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(101);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(91)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(105)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var esprima = __webpack_require__(107);
	var Tapable = __webpack_require__(37);
	var BasicEvaluatedExpression = __webpack_require__(108);

	function Parser(options) {
		Tapable.call(this);
		this.options = options;
		this.initializeEvaluating();
	}
	module.exports = Parser;

	// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API

	Parser.prototype = Object.create(Tapable.prototype);
	Parser.prototype.constructor = Parser;

	Parser.prototype.initializeEvaluating = function() {
		function joinRanges(startRange, endRange) {
			if(!endRange) return startRange;
			if(!startRange) return endRange;
			return [startRange[0], endRange[1]];
		}
		this.plugin("evaluate Literal", function(expr) {
			switch(typeof expr.value) {
				case "number":
					return new BasicEvaluatedExpression().setNumber(expr.value).setRange(expr.range);
				case "string":
					return new BasicEvaluatedExpression().setString(expr.value).setRange(expr.range);
				case "boolean":
					return new BasicEvaluatedExpression().setBoolean(expr.value).setRange(expr.range);
			}
			if(expr.value === null)
				return new BasicEvaluatedExpression().setNull().setRange(expr.range);
			if(expr.value instanceof RegExp)
				return new BasicEvaluatedExpression().setRegExp(expr.value).setRange(expr.range);
		});
		this.plugin("evaluate LogicalExpression", function(expr) {
			if(expr.operator === "&&") {
				var left = this.evaluateExpression(expr.left);
				var leftAsBool = left && left.asBool();
				if(leftAsBool === false) return left.setRange(expr.range);
				if(leftAsBool !== true) return;
				var right = this.evaluateExpression(expr.right);
				return right.setRange(expr.range);
			} else if(expr.operator === "||") {
				var left = this.evaluateExpression(expr.left);
				var leftAsBool = left && left.asBool();
				if(leftAsBool === true) return left.setRange(expr.range);
				if(leftAsBool !== false) return;
				var right = this.evaluateExpression(expr.right);
				return right.setRange(expr.range);
			}
		});
		this.plugin("evaluate BinaryExpression", function(expr) {
			if(expr.operator === "+") {
				var left = this.evaluateExpression(expr.left);
				var right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				var res = new BasicEvaluatedExpression();
				if(left.isString()) {
					if(right.isString()) {
						res.setString(left.string + right.string);
					} else if(right.isNumber()) {
						res.setString(left.string + right.number);
					} else if(right.isWrapped() && right.prefix && right.prefix.isString()) {
						res.setWrapped(
							new BasicEvaluatedExpression()
							.setString(left.string + right.prefix.string)
							.setRange(joinRanges(left.range, right.prefix.range)),
							right.postfix);
					} else {
						res.setWrapped(left, null);
					}
				} else if(left.isNumber()) {
					if(right.isString()) {
						res.setString(left.number + right.string);
					} else if(right.isNumber()) {
						res.setNumber(left.number + right.number);
					}
				} else if(left.isWrapped()) {
					if(left.postfix && left.postfix.isString() && right.isString()) {
						res.setWrapped(left.prefix,
							new BasicEvaluatedExpression()
							.setString(left.postfix.string + right.string)
							.setRange(joinRanges(left.postfix.range, right.range))
						);
					} else if(left.postfix && left.postfix.isString() && right.isNumber()) {
						res.setWrapped(left.prefix,
							new BasicEvaluatedExpression()
							.setString(left.postfix.string + right.number)
							.setRange(joinRanges(left.postfix.range, right.range))
						);
					} else if(right.isString()) {
						res.setWrapped(left.prefix, right);
					} else if(right.isNumber()) {
						res.setWrapped(left.prefix,
							new BasicEvaluatedExpression()
							.setString(right.number + "")
							.setRange(right.range));
					} else {
						res.setWrapped(left.prefix, new BasicEvaluatedExpression());
					}
				} else {
					if(right.isString()) {
						res.setWrapped(null, right);
					}
				}
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "-") {
				var left = this.evaluateExpression(expr.left);
				var right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				if(!left.isNumber() || !right.isNumber()) return;
				var res = new BasicEvaluatedExpression();
				res.setNumber(left.number - right.number);
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "*") {
				var left = this.evaluateExpression(expr.left);
				var right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				if(!left.isNumber() || !right.isNumber()) return;
				var res = new BasicEvaluatedExpression();
				res.setNumber(left.number * right.number);
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "/") {
				var left = this.evaluateExpression(expr.left);
				var right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				if(!left.isNumber() || !right.isNumber()) return;
				var res = new BasicEvaluatedExpression();
				res.setNumber(left.number / right.number);
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "==" || expr.operator === "===") {
				var left = this.evaluateExpression(expr.left);
				var right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				var res = new BasicEvaluatedExpression();
				res.setRange(expr.range);
				if(left.isString() && right.isString()) {
					return res.setBoolean(left.string === right.string);
				} else if(left.isNumber() && right.isNumber()) {
					return res.setBoolean(left.number === right.number);
				} else if(left.isBoolean() && right.isBoolean()) {
					return res.setBoolean(left.bool === right.bool);
				}
			} else if(expr.operator === "!=" || expr.operator === "!==") {
				var left = this.evaluateExpression(expr.left);
				var right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				var res = new BasicEvaluatedExpression();
				res.setRange(expr.range);
				if(left.isString() && right.isString()) {
					return res.setBoolean(left.string !== right.string);
				} else if(left.isNumber() && right.isNumber()) {
					return res.setBoolean(left.number !== right.number);
				} else if(left.isBoolean() && right.isBoolean()) {
					return res.setBoolean(left.bool !== right.bool);
				}
			}
		});
		this.plugin("evaluate UnaryExpression", function(expr) {
			if(expr.operator === "typeof") {
				if(expr.argument.type === "Identifier") {
					var name = this.scope.renames["$" + expr.argument.name] || expr.argument.name;
					if(this.scope.definitions.indexOf(name) === -1) {
						var res = this.applyPluginsBailResult("evaluate typeof " + name, expr);
						if(res !== undefined) return res;
					}
				}
				if(expr.argument.type === "MemberExpression") {
					var expression = expr.argument;
					var exprName = [];
					while(expression.type === "MemberExpression" && !expression.computed) {
						exprName.unshift(this.scope.renames["$" + expression.property.name] || expression.property.name);
						expression = expression.object;
					}
					if(expression.type === "Identifier") {
						exprName.unshift(this.scope.renames["$" + expression.name] || expression.name);
						if(this.scope.definitions.indexOf(name) === -1) {
							exprName = exprName.join(".");
							var res = this.applyPluginsBailResult("evaluate typeof " + exprName, expr);
							if(res !== undefined) return res;
						}
					}
				}
				if(expr.argument.type === "FunctionExpression") {
					return new BasicEvaluatedExpression().setString("function").setRange(expr.range);
				}
				var arg = this.evaluateExpression(expr.argument);
				if(arg.isString() || arg.isWrapped()) return new BasicEvaluatedExpression().setString("string").setRange(expr.range);
				else if(arg.isNumber()) return new BasicEvaluatedExpression().setString("number").setRange(expr.range);
				else if(arg.isBoolean()) return new BasicEvaluatedExpression().setString("boolean").setRange(expr.range);
				else if(arg.isArray() || arg.isConstArray() || arg.isRegExp()) return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
			} else if(expr.operator === "!") {
				var argument = this.evaluateExpression(expr.argument);
				if(!argument) return;
				if(argument.isBoolean()) {
					return new BasicEvaluatedExpression().setBoolean(!argument.bool).setRange(expr.range);
				} else if(argument.isString()) {
					return new BasicEvaluatedExpression().setBoolean(!argument.string).setRange(expr.range);
				} else if(argument.isNumber()) {
					return new BasicEvaluatedExpression().setBoolean(!argument.number).setRange(expr.range);
				}
			}
		});
		this.plugin("evaluate typeof undefined", function(expr) {
			return new BasicEvaluatedExpression().setString("undefined").setRange(expr.range);
		});
		this.plugin("evaluate Identifier", function(expr) {
			var name = this.scope.renames["$" + expr.name] || expr.name;
			if(this.scope.definitions.indexOf(expr.name) === -1) {
				var result = this.applyPluginsBailResult("evaluate Identifier " + name, expr);
				if(result) return result;
				return new BasicEvaluatedExpression().setIdentifier(name).setRange(expr.range);
			} else {
				return this.applyPluginsBailResult("evaluate defined Identifier " + name, expr);
			}
		});
		this.plugin("evaluate MemberExpression", function(expression) {
			var expr = expression;
			var exprName = [];
			while(expr.type === "MemberExpression" && !expr.computed) {
				exprName.unshift(expr.property.name);
				expr = expr.object;
			}
			if(expr.type === "Identifier") {
				var name = this.scope.renames["$" + expr.name] || expr.name;
				if(this.scope.definitions.indexOf(name) === -1) {
					exprName.unshift(name);
					exprName = exprName.join(".");
					if(this.scope.definitions.indexOf(expr.name) === -1) {
						var result = this.applyPluginsBailResult("evaluate Identifier " + exprName, expression);
						if(result) return result;
						return new BasicEvaluatedExpression().setIdentifier(exprName).setRange(expression.range);
					} else {
						return this.applyPluginsBailResult("evaluate defined Identifier " + exprName, expression);
					}
				}
			}
		});
		this.plugin("evaluate CallExpression", function(expr) {
			if(expr.callee.type !== "MemberExpression") return;
			if(expr.callee.computed) return;
			var param = this.evaluateExpression(expr.callee.object);
			if(!param) return;
			return this.applyPluginsBailResult("evaluate CallExpression ." + expr.callee.property.name, expr, param);
		});
		this.plugin("evaluate CallExpression .replace", function(expr, param) {
			if(!param.isString()) return;
			if(expr.arguments.length !== 2) return;
			var arg1 = this.evaluateExpression(expr.arguments[0]);
			var arg2 = this.evaluateExpression(expr.arguments[1]);
			if(!arg1.isString() && !arg1.isRegExp()) return;
			arg1 = arg1.regExp || arg1.string;
			if(!arg2.isString()) return;
			arg2 = arg2.string;
			return new BasicEvaluatedExpression().setString(param.string.replace(arg1, arg2)).setRange(expr.range);
		});
		["substr", "substring"].forEach(function(fn) {
			this.plugin("evaluate CallExpression ." + fn, function(expr, param) {
				if(!param.isString()) return;
				var result, str = param.string;
				switch(expr.arguments.length) {
					case 1:
						var arg1 = this.evaluateExpression(expr.arguments[0]);
						if(!arg1.isNumber()) return;
						result = str[fn](arg1.number);
						break;
					case 2:
						var arg1 = this.evaluateExpression(expr.arguments[0]);
						var arg2 = this.evaluateExpression(expr.arguments[1]);
						if(!arg1.isNumber()) return;
						if(!arg2.isNumber()) return;
						result = str[fn](arg1.number, arg2.number);
						break;
					default:
						return;
				}
				return new BasicEvaluatedExpression().setString(result).setRange(expr.range);
			});
		}, this);
		this.plugin("evaluate CallExpression .split", function(expr, param) {
			if(!param.isString()) return;
			if(expr.arguments.length !== 1) return;
			var result;
			var arg = this.evaluateExpression(expr.arguments[0]);
			if(arg.isString()) {
				result = param.string.split(arg.string);
			} else if(arg.isRegExp()) {
				result = param.string.split(arg.regExp);
			} else return;
			return new BasicEvaluatedExpression().setArray(result).setRange(expr.range);
		});
		this.plugin("evaluate ConditionalExpression", function(expr) {
			var condition = this.evaluateExpression(expr.test);
			var conditionValue = condition.asBool();
			if(conditionValue === undefined) {
				var consequent = this.evaluateExpression(expr.consequent);
				var alternate = this.evaluateExpression(expr.alternate);
				if(!consequent || !alternate) return;
				var res = new BasicEvaluatedExpression();
				if(consequent.isConditional())
					res.setOptions(consequent.options);
				else
					res.setOptions([consequent]);
				if(alternate.isConditional())
					res.addOptions(alternate.options);
				else
					res.addOptions([alternate]);
			} else {
				var res = this.evaluateExpression(conditionValue ? expr.consequent : expr.alternate);
			}
			res.setRange(expr.range);
			return res;
		});
		this.plugin("evaluate ArrayExpression", function(expr) {
			var items = expr.elements.map(function(element) {
				return element !== null && this.evaluateExpression(element);
			}, this);
			if(items.filter(function(i) {
					return !i;
				}).length > 0) return;
			return new BasicEvaluatedExpression().setItems(items).setRange(expr.range);
		});
	};

	Parser.prototype.getRenameIdentifier = function getRenameIdentifier(expr) {
		var result = this.evaluateExpression(expr);
		if(!result) return;
		if(result.isIdentifier()) return result.identifier;
		return;
	};

	Parser.prototype.walkStatements = function walkStatements(statements) {
		statements.forEach(function(statement) {
			this.walkStatement(statement);
		}, this);
	};

	Parser.prototype.walkStatement = function walkStatement(statement) {
		if(this.applyPluginsBailResult("statement", statement) !== undefined) return;
		if(this["walk" + statement.type])
			this["walk" + statement.type](statement);
	};

	// Real Statements
	Parser.prototype.walkBlockStatement = function walkBlockStatement(statement) {
		this.walkStatements(statement.body);
	};

	Parser.prototype.walkExpressionStatement = function walkExpressionStatement(statement) {
		this.walkExpression(statement.expression);
	};

	Parser.prototype.walkIfStatement = function walkIfStatement(statement) {
		var result = this.applyPluginsBailResult("statement if", statement);
		if(result === undefined) {
			this.walkExpression(statement.test);
			this.walkStatement(statement.consequent);
			if(statement.alternate)
				this.walkStatement(statement.alternate);
		} else {
			if(result)
				this.walkStatement(statement.consequent);
			else if(statement.alternate)
				this.walkStatement(statement.alternate);
		}
	};

	Parser.prototype.walkLabeledStatement = function walkLabeledStatement(statement) {
		var result = this.applyPluginsBailResult("label " + statement.label.name, statement);
		if(result !== true)
			this.walkStatement(statement.body);
	};

	Parser.prototype.walkWithStatement = function walkWithStatement(statement) {
		this.walkExpression(statement.object);
		this.walkStatement(statement.body);
	};

	Parser.prototype.walkSwitchStatement = function walkSwitchStatement(statement) {
		this.walkExpression(statement.discriminant);
		this.walkSwitchCases(statement.cases);
	};

	Parser.prototype.walkReturnStatement =
		Parser.prototype.walkThrowStatement = function walkArgumentStatement(statement) {
			if(statement.argument)
				this.walkExpression(statement.argument);
		};

	Parser.prototype.walkTryStatement = function walkTryStatement(statement) {
		if(this.scope.inTry) {
			this.walkStatement(statement.block);
		} else {
			this.scope.inTry = true;
			this.walkStatement(statement.block);
			this.scope.inTry = false;
		}
		this.walkCatchClauses(statement.handlers);
		if(statement.finalizer)
			this.walkStatement(statement.finalizer);
	};

	Parser.prototype.walkWhileStatement =
		Parser.prototype.walkDoWhileStatement = function walkLoopStatement(statement) {
			this.walkExpression(statement.test);
			this.walkStatement(statement.body);
		};

	Parser.prototype.walkForStatement = function walkForStatement(statement) {
		if(statement.init) {
			if(statement.init.type === "VariableDeclaration")
				this.walkStatement(statement.init);
			else
				this.walkExpression(statement.init);
		}
		if(statement.test)
			this.walkExpression(statement.test);
		if(statement.update)
			this.walkExpression(statement.update);
		this.walkStatement(statement.body);
	};

	Parser.prototype.walkForInStatement = function walkForInStatement(statement) {
		if(statement.left.type === "VariableDeclaration")
			this.walkStatement(statement.left);
		else
			this.walkExpression(statement.left);
		this.walkExpression(statement.right);
		this.walkStatement(statement.body);
	};

	// Declarations
	Parser.prototype.walkFunctionDeclaration = function walkFunctionDeclaration(statement) {
		this.scope.renames["$" + statement.id.name] = undefined;
		this.scope.definitions.push(statement.id.name);
		this.inScope(statement.params, function() {
			if(statement.body.type === "BlockStatement")
				this.walkStatement(statement.body);
			else
				this.walkExpression(statement.body);
		}.bind(this));
	};

	Parser.prototype.walkVariableDeclaration = function walkVariableDeclaration(statement) {
		if(statement.declarations)
			this.walkVariableDeclarators(statement.declarations);
	};

	Parser.prototype.walkSwitchCases = function walkSwitchCases(switchCases) {
		switchCases.forEach(function(switchCase) {
			if(switchCase.test)
				this.walkExpression(switchCase.test);
			this.walkStatements(switchCase.consequent);
		}, this);
	};

	Parser.prototype.walkCatchClauses = function walkCatchClauses(catchClauses) {
		catchClauses.forEach(function(catchClause) {
			if(catchClause.guard)
				this.walkExpression(catchClause.guard);
			this.inScope([catchClause.param], function() {
				this.walkStatement(catchClause.body);
			}.bind(this));
		}, this);
	};

	Parser.prototype.walkVariableDeclarators = function walkVariableDeclarators(declarators) {
		declarators.forEach(function(declarator) {
			switch(declarator.type) {
				case "VariableDeclarator":
					var renameIdentifier = declarator.init && this.getRenameIdentifier(declarator.init);
					if(renameIdentifier && declarator.id.type === "Identifier" && this.applyPluginsBailResult("can-rename " + renameIdentifier, declarator.init)) {
						// renaming with "var a = b;"
						if(!this.applyPluginsBailResult("rename " + renameIdentifier, declarator.init)) {
							this.scope.renames["$" + declarator.id.name] = this.scope.renames["$" + renameIdentifier] || renameIdentifier;
							var idx = this.scope.definitions.indexOf(declarator.id.name);
							if(idx >= 0) this.scope.definitions.splice(idx, 1);
						}
					} else if(declarator.id.type === "Identifier" && !this.applyPluginsBailResult("var " + declarator.id.name, declarator)) {
						this.scope.renames["$" + declarator.id.name] = undefined;
						this.scope.definitions.push(declarator.id.name);
						if(declarator.init)
							this.walkExpression(declarator.init);
					} else {
						this.walkExpression(declarator.id);
						if(declarator.init)
							this.walkExpression(declarator.init);
					}
					break;
			}
		}, this);
	};

	Parser.prototype.walkExpressions = function walkExpressions(expressions) {
		expressions.forEach(function(expression) {
			if(expression)
				this.walkExpression(expression);
		}, this);
	};

	Parser.prototype.walkExpression = function walkExpression(expression) {
		if(this["walk" + expression.type])
			return this["walk" + expression.type](expression);
	};

	Parser.prototype.walkArrayExpression = function walkArrayExpression(expression) {
		if(expression.elements)
			this.walkExpressions(expression.elements);
	};

	Parser.prototype.walkObjectExpression = function walkObjectExpression(expression) {
		expression.properties.forEach(function(prop) {
			this.walkExpression(prop.value);
		}, this);
	};

	Parser.prototype.walkFunctionExpression = function walkFunctionExpression(expression) {
		this.inScope(expression.params, function() {
			if(expression.body.type === "BlockStatement")
				this.walkStatement(expression.body);
			else
				this.walkExpression(expression.body);
		}.bind(this));
	};

	Parser.prototype.walkSequenceExpression = function walkSequenceExpression(expression) {
		if(expression.expressions)
			this.walkExpressions(expression.expressions);
	};

	Parser.prototype.walkUpdateExpression = function walkUpdateExpression(expression) {
		this.walkExpression(expression.argument);
	};

	Parser.prototype.walkUnaryExpression = function walkUnaryExpression(expression) {
		if(expression.operator === "typeof") {
			var expr = expression.argument;
			var exprName = [];
			while(expr.type === "MemberExpression" && !expr.computed) {
				exprName.unshift(expr.property.name);
				expr = expr.object;
			}
			if(expr.type === "Identifier" && this.scope.definitions.indexOf(expr.name) === -1) {
				exprName.unshift(this.scope.renames["$" + expr.name] || expr.name);
				exprName = exprName.join(".");
				var result = this.applyPluginsBailResult("typeof " + exprName, expression);
				if(result === true)
					return;
			}
		}
		this.walkExpression(expression.argument);
	};

	Parser.prototype.walkBinaryExpression =
		Parser.prototype.walkLogicalExpression = function walkLeftRightExpression(expression) {
			this.walkExpression(expression.left);
			this.walkExpression(expression.right);
		};

	Parser.prototype.walkAssignmentExpression = function walkAssignmentExpression(expression) {
		var renameIdentifier = this.getRenameIdentifier(expression.right);
		if(expression.left.type === "Identifier" && renameIdentifier && this.applyPluginsBailResult("can-rename " + renameIdentifier, expression.right)) {
			// renaming "a = b;"
			if(!this.applyPluginsBailResult("rename " + renameIdentifier, expression.right)) {
				this.scope.renames["$" + expression.left.name] = renameIdentifier;
				var idx = this.scope.definitions.indexOf(expression.left.name);
				if(idx >= 0) this.scope.definitions.splice(idx, 1);
			}
		} else if(expression.left.type === "Identifier") {
			if(!this.applyPluginsBailResult("assigned " + expression.left.name, expression)) {
				this.walkExpression(expression.right);
			}
			this.scope.renames["$" + expression.left.name] = undefined;
			if(!this.applyPluginsBailResult("assign " + expression.left.name, expression)) {
				this.walkExpression(expression.left);
			}
		} else {
			this.walkExpression(expression.right);
			this.scope.renames["$" + expression.left.name] = undefined;
			this.walkExpression(expression.left);
		}
	};

	Parser.prototype.walkConditionalExpression = function walkConditionalExpression(expression) {
		var result = this.applyPluginsBailResult("expression ?:", expression);
		if(result === undefined) {
			this.walkExpression(expression.test);
			this.walkExpression(expression.consequent);
			if(expression.alternate)
				this.walkExpression(expression.alternate);
		} else {
			if(result)
				this.walkExpression(expression.consequent);
			else if(expression.alternate)
				this.walkExpression(expression.alternate);
		}
	};

	Parser.prototype.walkNewExpression = function walkNewExpression(expression) {
		this.walkExpression(expression.callee);
		if(expression.arguments)
			this.walkExpressions(expression.arguments);
	};

	Parser.prototype.walkCallExpression = function walkCallExpression(expression) {
		function walkIIFE(functionExpression, args) {
			var params = functionExpression.params;
			var args = args.map(function(arg) {
				var renameIdentifier = this.getRenameIdentifier(arg);
				if(renameIdentifier && this.applyPluginsBailResult("can-rename " + renameIdentifier, arg)) {
					if(!this.applyPluginsBailResult("rename " + renameIdentifier, arg))
						return renameIdentifier;
				}
				this.walkExpression(arg);
			}, this);
			this.inScope(params.filter(function(identifier, idx) {
				return !args[idx];
			}), function() {
				args.forEach(function(arg, idx) {
					if(!arg) return;
					if(!params[idx] || params[idx].type !== "Identifier") return;
					this.scope.renames["$" + params[idx].name] = arg;
				}, this);
				if(functionExpression.body.type === "BlockStatement")
					this.walkStatement(functionExpression.body);
				else
					this.walkExpression(functionExpression.body);
			}.bind(this));
		}
		if(expression.callee.type === "MemberExpression" && expression.callee.object.type === "FunctionExpression" && !expression.callee.computed && ["call", "bind"].indexOf(expression.callee.property.name) >= 0 && expression.arguments && expression.arguments.length > 1) {
			// (function(...) { }.call/bind(?, ...))
			walkIIFE.call(this, expression.callee.object, expression.arguments.slice(1));
			this.walkExpression(expression.arguments[0]);
		} else if(expression.callee.type === "FunctionExpression" && expression.arguments) {
			// (function(...) { }(...))
			walkIIFE.call(this, expression.callee, expression.arguments);
		} else {

			var callee = this.evaluateExpression(expression.callee);
			if(callee.isIdentifier()) {
				var result = this.applyPluginsBailResult("call " + callee.identifier, expression);
				if(result === true)
					return;
			}

			if(expression.callee)
				this.walkExpression(expression.callee);
			if(expression.arguments)
				this.walkExpressions(expression.arguments);
		}
	};

	Parser.prototype.walkMemberExpression = function walkMemberExpression(expression) {
		var expr = expression;
		var exprName = [];
		while(expr.type === "MemberExpression" && !expr.computed) {
			exprName.unshift(expr.property.name);
			expr = expr.object;
		}
		if(expr.type === "Identifier" && this.scope.definitions.indexOf(expr.name) === -1) {
			exprName.unshift(this.scope.renames["$" + expr.name] || expr.name);
			exprName = exprName.join(".");
			var result = this.applyPluginsBailResult("expression " + exprName, expression);
			if(result === true)
				return;
		}
		this.walkExpression(expression.object);
		if(expression.computed === true)
			this.walkExpression(expression.property);
	};

	Parser.prototype.walkIdentifier = function walkIdentifier(expression) {
		if(this.scope.definitions.indexOf(expression.name) === -1) {
			var result = this.applyPluginsBailResult("expression " + (this.scope.renames["$" + expression.name] || expression.name), expression);
			if(result === true)
				return;
		}
	};

	Parser.prototype.inScope = function inScope(params, fn) {
		var oldScope = this.scope;
		this.scope = {
			inTry: false,
			definitions: oldScope.definitions.slice(),
			renames: Object.create(oldScope.renames)
		};
		params.forEach(function(param) {
			if(typeof param !== "string") {
				if(param.type !== "Identifier")
					return;
				param = param.name;
			}
			this.scope.renames["$" + param] = undefined;
			this.scope.definitions.push(param);
		}, this);
		fn();
		this.scope = oldScope;
	};

	Parser.prototype.evaluateExpression = function evaluateExpression(expression) {
		var result = this.applyPluginsBailResult("evaluate " + expression.type, expression);
		if(result !== undefined)
			return result;
		return new BasicEvaluatedExpression().setRange(expression.range);
	};

	Parser.prototype.parseString = function parseString(expression) {
		switch(expression.type) {
			case "BinaryExpression":
				if(expression.operator === "+")
					return this.parseString(expression.left) + this.parseString(expression.right);
				break;
			case "Literal":
				return expression.value + "";
		}
		throw new Error(expression.type + " is not supported as parameter for require");
	};

	Parser.prototype.parseCalculatedString = function parseCalculatedString(expression) {
		switch(expression.type) {
			case "BinaryExpression":
				if(expression.operator === "+") {
					var left = this.parseCalculatedString(expression.left);
					var right = this.parseCalculatedString(expression.right);
					if(left.code) {
						return {
							range: left.range,
							value: left.value,
							code: true
						};
					} else if(right.code) {
						return {
							range: [left.range[0], right.range ? right.range[1] : left.range[1]],
							value: left.value + right.value,
							code: true
						};
					} else {
						return {
							range: [left.range[0], right.range[1]],
							value: left.value + right.value
						};
					}
				}
				break;
			case "ConditionalExpression":
				var consequent = this.parseCalculatedString(expression.consequent);
				var alternate = this.parseCalculatedString(expression.alternate);
				var items = [];
				if(consequent.conditional)
					Array.prototype.push.apply(items, consequent.conditional);
				else if(!consequent.code)
					items.push(consequent);
				else break;
				if(alternate.conditional)
					Array.prototype.push.apply(items, alternate.conditional);
				else if(!alternate.code)
					items.push(alternate);
				else break;
				return {
					value: "",
					code: true,
					conditional: items
				};
			case "Literal":
				return {
					range: expression.range,
					value: expression.value + ""
				};
		}
		return {
			value: "",
			code: true
		};
	};

	["parseString", "parseCalculatedString"].forEach(function(fn) {
		Parser.prototype[fn + "Array"] = function parseXXXArray(expression) {
			switch(expression.type) {
				case "ArrayExpression":
					var arr = [];
					if(expression.elements)
						expression.elements.forEach(function(expr) {
							arr.push(this[fn](expr));
						}, this);
					return arr;
			}
			return [this[fn](expression)];
		};
	});

	Parser.prototype.parse = function parse(source, initialState) {
		var ast = esprima.parse(source, {
			range: true,
			loc: true,
			raw: true
		});
		if(!ast || typeof ast !== "object")
			throw new Error("Source couldn't be parsed");
		var oldScope = this.scope;
		var oldState = this.state;
		this.scope = {
			inTry: false,
			definitions: [],
			renames: {}
		};
		var state = this.state = initialState || {};
		if(this.applyPluginsBailResult("program", ast) === undefined)
			this.walkStatements(ast.body);
		this.scope = oldScope;
		this.state = oldState;
		return state;
	};

	Parser.prototype.evaluate = function evaluate(source) {
		var ast = esprima.parse("(" + source + ")", {
			range: true,
			loc: true,
			raw: true
		});
		if(!ast || typeof ast !== "object" || ast.type !== "Program")
			throw new Error("evaluate: Source couldn't be parsed");
		if(ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement")
			throw new Error("evaluate: Source is not a expression");
		return this.evaluateExpression(ast.body[0].expression);
	};


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (root, factory) {
	    'use strict';

	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
	    // Rhino, and plain browser loading.

	    /* istanbul ignore next */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== 'undefined') {
	        factory(exports);
	    } else {
	        factory((root.esprima = {}));
	    }
	}(this, function (exports) {
	    'use strict';

	    var Token,
	        TokenName,
	        FnExprTokens,
	        Syntax,
	        PlaceHolders,
	        Messages,
	        Regex,
	        source,
	        strict,
	        index,
	        lineNumber,
	        lineStart,
	        hasLineTerminator,
	        lastIndex,
	        lastLineNumber,
	        lastLineStart,
	        startIndex,
	        startLineNumber,
	        startLineStart,
	        scanning,
	        length,
	        lookahead,
	        state,
	        extra,
	        isBindingElement,
	        isAssignmentTarget,
	        firstCoverInitializedNameError;

	    Token = {
	        BooleanLiteral: 1,
	        EOF: 2,
	        Identifier: 3,
	        Keyword: 4,
	        NullLiteral: 5,
	        NumericLiteral: 6,
	        Punctuator: 7,
	        StringLiteral: 8,
	        RegularExpression: 9,
	        Template: 10
	    };

	    TokenName = {};
	    TokenName[Token.BooleanLiteral] = 'Boolean';
	    TokenName[Token.EOF] = '<end>';
	    TokenName[Token.Identifier] = 'Identifier';
	    TokenName[Token.Keyword] = 'Keyword';
	    TokenName[Token.NullLiteral] = 'Null';
	    TokenName[Token.NumericLiteral] = 'Numeric';
	    TokenName[Token.Punctuator] = 'Punctuator';
	    TokenName[Token.StringLiteral] = 'String';
	    TokenName[Token.RegularExpression] = 'RegularExpression';
	    TokenName[Token.Template] = 'Template';

	    // A function following one of those tokens is an expression.
	    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	                    'return', 'case', 'delete', 'throw', 'void',
	                    // assignment operators
	                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
	                    '&=', '|=', '^=', ',',
	                    // binary/unary operators
	                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	                    '<=', '<', '>', '!=', '!=='];

	    Syntax = {
	        AssignmentExpression: 'AssignmentExpression',
	        AssignmentPattern: 'AssignmentPattern',
	        ArrayExpression: 'ArrayExpression',
	        ArrayPattern: 'ArrayPattern',
	        ArrowFunctionExpression: 'ArrowFunctionExpression',
	        BlockStatement: 'BlockStatement',
	        BinaryExpression: 'BinaryExpression',
	        BreakStatement: 'BreakStatement',
	        CallExpression: 'CallExpression',
	        CatchClause: 'CatchClause',
	        ClassBody: 'ClassBody',
	        ClassDeclaration: 'ClassDeclaration',
	        ClassExpression: 'ClassExpression',
	        ConditionalExpression: 'ConditionalExpression',
	        ContinueStatement: 'ContinueStatement',
	        DoWhileStatement: 'DoWhileStatement',
	        DebuggerStatement: 'DebuggerStatement',
	        EmptyStatement: 'EmptyStatement',
	        ExportAllDeclaration: 'ExportAllDeclaration',
	        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	        ExportNamedDeclaration: 'ExportNamedDeclaration',
	        ExportSpecifier: 'ExportSpecifier',
	        ExpressionStatement: 'ExpressionStatement',
	        ForStatement: 'ForStatement',
	        ForOfStatement: 'ForOfStatement',
	        ForInStatement: 'ForInStatement',
	        FunctionDeclaration: 'FunctionDeclaration',
	        FunctionExpression: 'FunctionExpression',
	        Identifier: 'Identifier',
	        IfStatement: 'IfStatement',
	        ImportDeclaration: 'ImportDeclaration',
	        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	        ImportSpecifier: 'ImportSpecifier',
	        Literal: 'Literal',
	        LabeledStatement: 'LabeledStatement',
	        LogicalExpression: 'LogicalExpression',
	        MemberExpression: 'MemberExpression',
	        MetaProperty: 'MetaProperty',
	        MethodDefinition: 'MethodDefinition',
	        NewExpression: 'NewExpression',
	        ObjectExpression: 'ObjectExpression',
	        ObjectPattern: 'ObjectPattern',
	        Program: 'Program',
	        Property: 'Property',
	        RestElement: 'RestElement',
	        ReturnStatement: 'ReturnStatement',
	        SequenceExpression: 'SequenceExpression',
	        SpreadElement: 'SpreadElement',
	        Super: 'Super',
	        SwitchCase: 'SwitchCase',
	        SwitchStatement: 'SwitchStatement',
	        TaggedTemplateExpression: 'TaggedTemplateExpression',
	        TemplateElement: 'TemplateElement',
	        TemplateLiteral: 'TemplateLiteral',
	        ThisExpression: 'ThisExpression',
	        ThrowStatement: 'ThrowStatement',
	        TryStatement: 'TryStatement',
	        UnaryExpression: 'UnaryExpression',
	        UpdateExpression: 'UpdateExpression',
	        VariableDeclaration: 'VariableDeclaration',
	        VariableDeclarator: 'VariableDeclarator',
	        WhileStatement: 'WhileStatement',
	        WithStatement: 'WithStatement',
	        YieldExpression: 'YieldExpression'
	    };

	    PlaceHolders = {
	        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'
	    };

	    // Error messages should be identical to V8.
	    Messages = {
	        UnexpectedToken: 'Unexpected token %0',
	        UnexpectedNumber: 'Unexpected number',
	        UnexpectedString: 'Unexpected string',
	        UnexpectedIdentifier: 'Unexpected identifier',
	        UnexpectedReserved: 'Unexpected reserved word',
	        UnexpectedTemplate: 'Unexpected quasi %0',
	        UnexpectedEOS: 'Unexpected end of input',
	        NewlineAfterThrow: 'Illegal newline after throw',
	        InvalidRegExp: 'Invalid regular expression',
	        UnterminatedRegExp: 'Invalid regular expression: missing /',
	        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	        NoCatchOrFinally: 'Missing catch or finally after try',
	        UnknownLabel: 'Undefined label \'%0\'',
	        Redeclaration: '%0 \'%1\' has already been declared',
	        IllegalContinue: 'Illegal continue statement',
	        IllegalBreak: 'Illegal break statement',
	        IllegalReturn: 'Illegal return statement',
	        StrictModeWith: 'Strict mode code may not include a with statement',
	        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	        StrictReservedWord: 'Use of future reserved word in strict mode',
	        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	        DefaultRestParameter: 'Unexpected token =',
	        ObjectPatternAsRestParameter: 'Unexpected token {',
	        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	        DuplicateConstructor: 'A class may only have one constructor',
	        StaticPrototype: 'Classes may not have static property named prototype',
	        MissingFromClause: 'Unexpected token',
	        NoAsAfterImportNamespace: 'Unexpected token',
	        InvalidModuleSpecifier: 'Unexpected token',
	        IllegalImportDeclaration: 'Unexpected token',
	        IllegalExportDeclaration: 'Unexpected token',
	        DuplicateBinding: 'Duplicate binding %0'
	    };

	    // See also tools/generate-unicode-regex.js.
	    Regex = {
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	    };

	    // Ensure the condition is true, otherwise throw an error.
	    // This is only to have a better contract semantic, i.e. another safety net
	    // to catch a logic error. The condition shall be fulfilled in normal case.
	    // Do NOT use this to enforce a certain condition on any user input.

	    function assert(condition, message) {
	        /* istanbul ignore if */
	        if (!condition) {
	            throw new Error('ASSERT: ' + message);
	        }
	    }

	    function isDecimalDigit(ch) {
	        return (ch >= 0x30 && ch <= 0x39);   // 0..9
	    }

	    function isHexDigit(ch) {
	        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
	    }

	    function isOctalDigit(ch) {
	        return '01234567'.indexOf(ch) >= 0;
	    }

	    function octalToDecimal(ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);

	        if (index < length && isOctalDigit(source[index])) {
	            octal = true;
	            code = code * 8 + '01234567'.indexOf(source[index++]);

	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 &&
	                    index < length &&
	                    isOctalDigit(source[index])) {
	                code = code * 8 + '01234567'.indexOf(source[index++]);
	            }
	        }

	        return {
	            code: code,
	            octal: octal
	        };
	    }

	    // ECMA-262 11.2 White Space

	    function isWhiteSpace(ch) {
	        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
	            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
	    }

	    // ECMA-262 11.3 Line Terminators

	    function isLineTerminator(ch) {
	        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
	    }

	    // ECMA-262 11.6 Identifier Names and Identifiers

	    function fromCodePoint(cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    }

	    function isIdentifierStart(ch) {
	        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
	            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
	            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
	            (ch === 0x5C) ||                      // \ (backslash)
	            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));
	    }

	    function isIdentifierPart(ch) {
	        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
	            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
	            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
	            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
	            (ch === 0x5C) ||                      // \ (backslash)
	            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));
	    }

	    // ECMA-262 11.6.2.2 Future Reserved Words

	    function isFutureReservedWord(id) {
	        switch (id) {
	        case 'enum':
	        case 'export':
	        case 'import':
	        case 'super':
	            return true;
	        default:
	            return false;
	        }
	    }

	    function isStrictModeReservedWord(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'yield':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }

	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }

	    // ECMA-262 11.6.2.1 Keywords

	    function isKeyword(id) {
	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') ||
	                (id === 'try') || (id === 'let');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }

	    // ECMA-262 11.4 Comments

	    function addComment(type, value, start, end, loc) {
	        var comment;

	        assert(typeof start === 'number', 'Comment must have valid position');

	        state.lastCommentStart = start;

	        comment = {
	            type: type,
	            value: value
	        };
	        if (extra.range) {
	            comment.range = [start, end];
	        }
	        if (extra.loc) {
	            comment.loc = loc;
	        }
	        extra.comments.push(comment);
	        if (extra.attachComment) {
	            extra.leadingComments.push(comment);
	            extra.trailingComments.push(comment);
	        }
	        if (extra.tokenize) {
	            comment.type = comment.type + 'Comment';
	            if (extra.delegate) {
	                comment = extra.delegate(comment);
	            }
	            extra.tokens.push(comment);
	        }
	    }

	    function skipSingleLineComment(offset) {
	        var start, loc, ch, comment;

	        start = index - offset;
	        loc = {
	            start: {
	                line: lineNumber,
	                column: index - lineStart - offset
	            }
	        };

	        while (index < length) {
	            ch = source.charCodeAt(index);
	            ++index;
	            if (isLineTerminator(ch)) {
	                hasLineTerminator = true;
	                if (extra.comments) {
	                    comment = source.slice(start + offset, index - 1);
	                    loc.end = {
	                        line: lineNumber,
	                        column: index - lineStart - 1
	                    };
	                    addComment('Line', comment, start, index - 1, loc);
	                }
	                if (ch === 13 && source.charCodeAt(index) === 10) {
	                    ++index;
	                }
	                ++lineNumber;
	                lineStart = index;
	                return;
	            }
	        }

	        if (extra.comments) {
	            comment = source.slice(start + offset, index);
	            loc.end = {
	                line: lineNumber,
	                column: index - lineStart
	            };
	            addComment('Line', comment, start, index, loc);
	        }
	    }

	    function skipMultiLineComment() {
	        var start, loc, ch, comment;

	        if (extra.comments) {
	            start = index - 2;
	            loc = {
	                start: {
	                    line: lineNumber,
	                    column: index - lineStart - 2
	                }
	            };
	        }

	        while (index < length) {
	            ch = source.charCodeAt(index);
	            if (isLineTerminator(ch)) {
	                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
	                    ++index;
	                }
	                hasLineTerminator = true;
	                ++lineNumber;
	                ++index;
	                lineStart = index;
	            } else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (source.charCodeAt(index + 1) === 0x2F) {
	                    ++index;
	                    ++index;
	                    if (extra.comments) {
	                        comment = source.slice(start + 2, index - 2);
	                        loc.end = {
	                            line: lineNumber,
	                            column: index - lineStart
	                        };
	                        addComment('Block', comment, start, index, loc);
	                    }
	                    return;
	                }
	                ++index;
	            } else {
	                ++index;
	            }
	        }

	        // Ran off the end of the file - the whole thing is a comment
	        if (extra.comments) {
	            loc.end = {
	                line: lineNumber,
	                column: index - lineStart
	            };
	            comment = source.slice(start + 2, index);
	            addComment('Block', comment, start, index, loc);
	        }
	        tolerateUnexpectedToken();
	    }

	    function skipComment() {
	        var ch, start;
	        hasLineTerminator = false;

	        start = (index === 0);
	        while (index < length) {
	            ch = source.charCodeAt(index);

	            if (isWhiteSpace(ch)) {
	                ++index;
	            } else if (isLineTerminator(ch)) {
	                hasLineTerminator = true;
	                ++index;
	                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
	                    ++index;
	                }
	                ++lineNumber;
	                lineStart = index;
	                start = true;
	            } else if (ch === 0x2F) { // U+002F is '/'
	                ch = source.charCodeAt(index + 1);
	                if (ch === 0x2F) {
	                    ++index;
	                    ++index;
	                    skipSingleLineComment(2);
	                    start = true;
	                } else if (ch === 0x2A) {  // U+002A is '*'
	                    ++index;
	                    ++index;
	                    skipMultiLineComment();
	                } else {
	                    break;
	                }
	            } else if (start && ch === 0x2D) { // U+002D is '-'
	                // U+003E is '>'
	                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    index += 3;
	                    skipSingleLineComment(3);
	                } else {
	                    break;
	                }
	            } else if (ch === 0x3C) { // U+003C is '<'
	                if (source.slice(index + 1, index + 4) === '!--') {
	                    ++index; // `<`
	                    ++index; // `!`
	                    ++index; // `-`
	                    ++index; // `-`
	                    skipSingleLineComment(4);
	                } else {
	                    break;
	                }
	            } else {
	                break;
	            }
	        }
	    }

	    function scanHexEscape(prefix) {
	        var i, len, ch, code = 0;

	        len = (prefix === 'u') ? 4 : 2;
	        for (i = 0; i < len; ++i) {
	            if (index < length && isHexDigit(source[index])) {
	                ch = source[index++];
	                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	            } else {
	                return '';
	            }
	        }
	        return String.fromCharCode(code);
	    }

	    function scanUnicodeCodePointEscape() {
	        var ch, code;

	        ch = source[index];
	        code = 0;

	        // At least, one hex digit is required.
	        if (ch === '}') {
	            throwUnexpectedToken();
	        }

	        while (index < length) {
	            ch = source[index++];
	            if (!isHexDigit(ch)) {
	                break;
	            }
	            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
	        }

	        if (code > 0x10FFFF || ch !== '}') {
	            throwUnexpectedToken();
	        }

	        return fromCodePoint(code);
	    }

	    function codePointAt(i) {
	        var cp, first, second;

	        cp = source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            second = source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }

	        return cp;
	    }

	    function getComplexIdentifier() {
	        var cp, ch, id;

	        cp = codePointAt(index);
	        id = fromCodePoint(cp);
	        index += id.length;

	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        if (cp === 0x5C) {
	            if (source.charCodeAt(index) !== 0x75) {
	                throwUnexpectedToken();
	            }
	            ++index;
	            if (source[index] === '{') {
	                ++index;
	                ch = scanUnicodeCodePointEscape();
	            } else {
	                ch = scanHexEscape('u');
	                cp = ch.charCodeAt(0);
	                if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
	                    throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }

	        while (index < length) {
	            cp = codePointAt(index);
	            if (!isIdentifierPart(cp)) {
	                break;
	            }
	            ch = fromCodePoint(cp);
	            id += ch;
	            index += ch.length;

	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (source.charCodeAt(index) !== 0x75) {
	                    throwUnexpectedToken();
	                }
	                ++index;
	                if (source[index] === '{') {
	                    ++index;
	                    ch = scanUnicodeCodePointEscape();
	                } else {
	                    ch = scanHexEscape('u');
	                    cp = ch.charCodeAt(0);
	                    if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
	                        throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }

	        return id;
	    }

	    function getIdentifier() {
	        var start, ch;

	        start = index++;
	        while (index < length) {
	            ch = source.charCodeAt(index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                index = start;
	                return getComplexIdentifier();
	            } else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                index = start;
	                return getComplexIdentifier();
	            }
	            if (isIdentifierPart(ch)) {
	                ++index;
	            } else {
	                break;
	            }
	        }

	        return source.slice(start, index);
	    }

	    function scanIdentifier() {
	        var start, id, type;

	        start = index;

	        // Backslash (U+005C) starts an escaped character.
	        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();

	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = Token.Identifier;
	        } else if (isKeyword(id)) {
	            type = Token.Keyword;
	        } else if (id === 'null') {
	            type = Token.NullLiteral;
	        } else if (id === 'true' || id === 'false') {
	            type = Token.BooleanLiteral;
	        } else {
	            type = Token.Identifier;
	        }

	        return {
	            type: type,
	            value: id,
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }


	    // ECMA-262 11.7 Punctuators

	    function scanPunctuator() {
	        var token, str;

	        token = {
	            type: Token.Punctuator,
	            value: '',
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: index,
	            end: index
	        };

	        // Check for most common single-character punctuators.
	        str = source[index];
	        switch (str) {

	        case '(':
	            if (extra.tokenize) {
	                extra.openParenToken = extra.tokenValues.length;
	            }
	            ++index;
	            break;

	        case '{':
	            if (extra.tokenize) {
	                extra.openCurlyToken = extra.tokenValues.length;
	            }
	            state.curlyStack.push('{');
	            ++index;
	            break;

	        case '.':
	            ++index;
	            if (source[index] === '.' && source[index + 1] === '.') {
	                // Spread operator: ...
	                index += 2;
	                str = '...';
	            }
	            break;

	        case '}':
	            ++index;
	            state.curlyStack.pop();
	            break;
	        case ')':
	        case ';':
	        case ',':
	        case '[':
	        case ']':
	        case ':':
	        case '?':
	        case '~':
	            ++index;
	            break;

	        default:
	            // 4-character punctuator.
	            str = source.substr(index, 4);
	            if (str === '>>>=') {
	                index += 4;
	            } else {

	                // 3-character punctuators.
	                str = str.substr(0, 3);
	                if (str === '===' || str === '!==' || str === '>>>' ||
	                    str === '<<=' || str === '>>=') {
	                    index += 3;
	                } else {

	                    // 2-character punctuators.
	                    str = str.substr(0, 2);
	                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                        str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                        str === '<=' || str === '>=' || str === '=>') {
	                        index += 2;
	                    } else {

	                        // 1-character punctuators.
	                        str = source[index];
	                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                            ++index;
	                        }
	                    }
	                }
	            }
	        }

	        if (index === token.start) {
	            throwUnexpectedToken();
	        }

	        token.end = index;
	        token.value = str;
	        return token;
	    }

	    // ECMA-262 11.8.3 Numeric Literals

	    function scanHexLiteral(start) {
	        var number = '';

	        while (index < length) {
	            if (!isHexDigit(source[index])) {
	                break;
	            }
	            number += source[index++];
	        }

	        if (number.length === 0) {
	            throwUnexpectedToken();
	        }

	        if (isIdentifierStart(source.charCodeAt(index))) {
	            throwUnexpectedToken();
	        }

	        return {
	            type: Token.NumericLiteral,
	            value: parseInt('0x' + number, 16),
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }

	    function scanBinaryLiteral(start) {
	        var ch, number;

	        number = '';

	        while (index < length) {
	            ch = source[index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            number += source[index++];
	        }

	        if (number.length === 0) {
	            // only 0b or 0B
	            throwUnexpectedToken();
	        }

	        if (index < length) {
	            ch = source.charCodeAt(index);
	            /* istanbul ignore else */
	            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
	                throwUnexpectedToken();
	            }
	        }

	        return {
	            type: Token.NumericLiteral,
	            value: parseInt(number, 2),
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }

	    function scanOctalLiteral(prefix, start) {
	        var number, octal;

	        if (isOctalDigit(prefix)) {
	            octal = true;
	            number = '0' + source[index++];
	        } else {
	            octal = false;
	            ++index;
	            number = '';
	        }

	        while (index < length) {
	            if (!isOctalDigit(source[index])) {
	                break;
	            }
	            number += source[index++];
	        }

	        if (!octal && number.length === 0) {
	            // only 0o or 0O
	            throwUnexpectedToken();
	        }

	        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
	            throwUnexpectedToken();
	        }

	        return {
	            type: Token.NumericLiteral,
	            value: parseInt(number, 8),
	            octal: octal,
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }

	    function isImplicitOctalLiteral() {
	        var i, ch;

	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (i = index + 1; i < length; ++i) {
	            ch = source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!isOctalDigit(ch)) {
	                return true;
	            }
	        }

	        return true;
	    }

	    function scanNumericLiteral() {
	        var number, start, ch;

	        ch = source[index];
	        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
	            'Numeric literal must start with a decimal digit or a decimal point');

	        start = index;
	        number = '';
	        if (ch !== '.') {
	            number = source[index++];
	            ch = source[index];

	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (number === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++index;
	                    return scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++index;
	                    return scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return scanOctalLiteral(ch, start);
	                }

	                if (isOctalDigit(ch)) {
	                    if (isImplicitOctalLiteral()) {
	                        return scanOctalLiteral(ch, start);
	                    }
	                }
	            }

	            while (isDecimalDigit(source.charCodeAt(index))) {
	                number += source[index++];
	            }
	            ch = source[index];
	        }

	        if (ch === '.') {
	            number += source[index++];
	            while (isDecimalDigit(source.charCodeAt(index))) {
	                number += source[index++];
	            }
	            ch = source[index];
	        }

	        if (ch === 'e' || ch === 'E') {
	            number += source[index++];

	            ch = source[index];
	            if (ch === '+' || ch === '-') {
	                number += source[index++];
	            }
	            if (isDecimalDigit(source.charCodeAt(index))) {
	                while (isDecimalDigit(source.charCodeAt(index))) {
	                    number += source[index++];
	                }
	            } else {
	                throwUnexpectedToken();
	            }
	        }

	        if (isIdentifierStart(source.charCodeAt(index))) {
	            throwUnexpectedToken();
	        }

	        return {
	            type: Token.NumericLiteral,
	            value: parseFloat(number),
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }

	    // ECMA-262 11.8.4 String Literals

	    function scanStringLiteral() {
	        var str = '', quote, start, ch, unescaped, octToDec, octal = false;

	        quote = source[index];
	        assert((quote === '\'' || quote === '"'),
	            'String literal must starts with a quote');

	        start = index;
	        ++index;

	        while (index < length) {
	            ch = source[index++];

	            if (ch === quote) {
	                quote = '';
	                break;
	            } else if (ch === '\\') {
	                ch = source[index++];
	                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                    case 'u':
	                    case 'x':
	                        if (source[index] === '{') {
	                            ++index;
	                            str += scanUnicodeCodePointEscape();
	                        } else {
	                            unescaped = scanHexEscape(ch);
	                            if (!unescaped) {
	                                throw throwUnexpectedToken();
	                            }
	                            str += unescaped;
	                        }
	                        break;
	                    case 'n':
	                        str += '\n';
	                        break;
	                    case 'r':
	                        str += '\r';
	                        break;
	                    case 't':
	                        str += '\t';
	                        break;
	                    case 'b':
	                        str += '\b';
	                        break;
	                    case 'f':
	                        str += '\f';
	                        break;
	                    case 'v':
	                        str += '\x0B';
	                        break;
	                    case '8':
	                    case '9':
	                        str += ch;
	                        tolerateUnexpectedToken();
	                        break;

	                    default:
	                        if (isOctalDigit(ch)) {
	                            octToDec = octalToDecimal(ch);

	                            octal = octToDec.octal || octal;
	                            str += String.fromCharCode(octToDec.code);
	                        } else {
	                            str += ch;
	                        }
	                        break;
	                    }
	                } else {
	                    ++lineNumber;
	                    if (ch === '\r' && source[index] === '\n') {
	                        ++index;
	                    }
	                    lineStart = index;
	                }
	            } else if (isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            } else {
	                str += ch;
	            }
	        }

	        if (quote !== '') {
	            index = start;
	            throwUnexpectedToken();
	        }

	        return {
	            type: Token.StringLiteral,
	            value: str,
	            octal: octal,
	            lineNumber: startLineNumber,
	            lineStart: startLineStart,
	            start: start,
	            end: index
	        };
	    }

	    // ECMA-262 11.8.6 Template Literal Lexical Components

	    function scanTemplate() {
	        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;

	        terminated = false;
	        tail = false;
	        start = index;
	        head = (source[index] === '`');
	        rawOffset = 2;

	        ++index;

	        while (index < length) {
	            ch = source[index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            } else if (ch === '$') {
	                if (source[index] === '{') {
	                    state.curlyStack.push('${');
	                    ++index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            } else if (ch === '\\') {
	                ch = source[index++];
	                if (!isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                    case 'n':
	                        cooked += '\n';
	                        break;
	                    case 'r':
	                        cooked += '\r';
	                        break;
	                    case 't':
	                        cooked += '\t';
	                        break;
	                    case 'u':
	                    case 'x':
	                        if (source[index] === '{') {
	                            ++index;
	                            cooked += scanUnicodeCodePointEscape();
	                        } else {
	                            restore = index;
	                            unescaped = scanHexEscape(ch);
	                            if (unescaped) {
	                                cooked += unescaped;
	                            } else {
	                                index = restore;
	                                cooked += ch;
	                            }
	                        }
	                        break;
	                    case 'b':
	                        cooked += '\b';
	                        break;
	                    case 'f':
	                        cooked += '\f';
	                        break;
	                    case 'v':
	                        cooked += '\v';
	                        break;

	                    default:
	                        if (ch === '0') {
	                            if (isDecimalDigit(source.charCodeAt(index))) {
	                                // Illegal: \01 \02 and so on
	                                throwError(Messages.TemplateOctalLiteral);
	                            }
	                            cooked += '\0';
	                        } else if (isOctalDigit(ch)) {
	                            // Illegal: \1 \2
	                            throwError(Messages.TemplateOctalLiteral);
	                        } else {
	                            cooked += ch;
	                        }
	                        break;
	                    }
	                } else {
	                    ++lineNumber;
	                    if (ch === '\r' && source[index] === '\n') {
	                        ++index;
	                    }
	                    lineStart = index;
	                }
	            } else if (isLineTerminator(ch.charCodeAt(0))) {
	                ++lineNumber;
	                if (ch === '\r' && source[index] === '\n') {
	                    ++index;
	                }
	                lineStart = index;
	                cooked += '\n';
	            } else {
	                cooked += ch;
	            }
	        }

	        if (!terminated) {
	            throwUnexpectedToken();
	        }

	        if (!head) {
	            state.curlyStack.pop();
	        }

	        return {
	            type: Token.Template,
	            value: {
	                cooked: cooked,
	                raw: source.slice(start + 1, index - rawOffset)
	            },
	            head: head,
	            tail: tail,
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            start: start,
	            end: index
	        };
	    }

	    // ECMA-262 11.8.5 Regular Expression Literals

	    function testRegExp(pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF',
	            tmp = pattern;

	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                // Replace every Unicode escape sequence with the equivalent
	                // BMP character or a constant ASCII code point in the case of
	                // astral symbols. (See the above note on `astralSubstitute`
	                // for more information.)
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                    var codePoint = parseInt($1 || $2, 16);
	                    if (codePoint > 0x10FFFF) {
	                        throwUnexpectedToken(null, Messages.InvalidRegExp);
	                    }
	                    if (codePoint <= 0xFFFF) {
	                        return String.fromCharCode(codePoint);
	                    }
	                    return astralSubstitute;
	                })
	                // Replace each paired surrogate with a single ASCII symbol to
	                // avoid throwing on regular expressions that are only valid in
	                // combination with the "u" flag.
	                .replace(
	                    /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
	                    astralSubstitute
	                );
	        }

	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        } catch (e) {
	            throwUnexpectedToken(null, Messages.InvalidRegExp);
	        }

	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        } catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    }

	    function scanRegExpBody() {
	        var ch, str, classMarker, terminated, body;

	        ch = source[index];
	        assert(ch === '/', 'Regular expression literal must start with a slash');
	        str = source[index++];

	        classMarker = false;
	        terminated = false;
	        while (index < length) {
	            ch = source[index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = source[index++];
	                // ECMA-262 7.8.5
	                if (isLineTerminator(ch.charCodeAt(0))) {
	                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            } else if (isLineTerminator(ch.charCodeAt(0))) {
	                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
	            } else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            } else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                } else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }

	        if (!terminated) {
	            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
	        }

	        // Exclude leading and trailing slash.
	        body = str.substr(1, str.length - 2);
	        return {
	            value: body,
	            literal: str
	        };
	    }

	    function scanRegExpFlags() {
	        var ch, str, flags, restore;

	        str = '';
	        flags = '';
	        while (index < length) {
	            ch = source[index];
	            if (!isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }

	            ++index;
	            if (ch === '\\' && index < length) {
	                ch = source[index];
	                if (ch === 'u') {
	                    ++index;
	                    restore = index;
	                    ch = scanHexEscape('u');
	                    if (ch) {
	                        flags += ch;
	                        for (str += '\\u'; restore < index; ++restore) {
	                            str += source[restore];
	                        }
	                    } else {
	                        index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    tolerateUnexpectedToken();
	                } else {
	                    str += '\\';
	                    tolerateUnexpectedToken();
	                }
	            } else {
	                flags += ch;
	                str += ch;
	            }
	        }

	        return {
	            value: flags,
	            literal: str
	        };
	    }

	    function scanRegExp() {
	        var start, body, flags, value;
	        scanning = true;

	        lookahead = null;
	        skipComment();
	        start = index;

	        body = scanRegExpBody();
	        flags = scanRegExpFlags();
	        value = testRegExp(body.value, flags.value);
	        scanning = false;
	        if (extra.tokenize) {
	            return {
	                type: Token.RegularExpression,
	                value: value,
	                regex: {
	                    pattern: body.value,
	                    flags: flags.value
	                },
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: start,
	                end: index
	            };
	        }

	        return {
	            literal: body.literal + flags.literal,
	            value: value,
	            regex: {
	                pattern: body.value,
	                flags: flags.value
	            },
	            start: start,
	            end: index
	        };
	    }

	    function collectRegex() {
	        var pos, loc, regex, token;

	        skipComment();

	        pos = index;
	        loc = {
	            start: {
	                line: lineNumber,
	                column: index - lineStart
	            }
	        };

	        regex = scanRegExp();

	        loc.end = {
	            line: lineNumber,
	            column: index - lineStart
	        };

	        /* istanbul ignore next */
	        if (!extra.tokenize) {
	            // Pop the previous token, which is likely '/' or '/='
	            if (extra.tokens.length > 0) {
	                token = extra.tokens[extra.tokens.length - 1];
	                if (token.range[0] === pos && token.type === 'Punctuator') {
	                    if (token.value === '/' || token.value === '/=') {
	                        extra.tokens.pop();
	                    }
	                }
	            }

	            extra.tokens.push({
	                type: 'RegularExpression',
	                value: regex.literal,
	                regex: regex.regex,
	                range: [pos, index],
	                loc: loc
	            });
	        }

	        return regex;
	    }

	    function isIdentifierName(token) {
	        return token.type === Token.Identifier ||
	            token.type === Token.Keyword ||
	            token.type === Token.BooleanLiteral ||
	            token.type === Token.NullLiteral;
	    }

	    // Using the following algorithm:
	    // https://github.com/mozilla/sweet.js/wiki/design

	    function advanceSlash() {
	        var regex, previous, check;

	        function testKeyword(value) {
	            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');
	        }

	        previous = extra.tokenValues[extra.tokenValues.length - 1];
	        regex = (previous !== null);

	        switch (previous) {
	        case 'this':
	        case ']':
	            regex = false;
	            break;

	        case ')':
	            check = extra.tokenValues[extra.openParenToken - 1];
	            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
	            break;

	        case '}':
	            // Dividing a function by anything makes little sense,
	            // but we have to check for that.
	            regex = false;
	            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
	                // Anonymous function, e.g. function(){} /42
	                check = extra.tokenValues[extra.openCurlyToken - 4];
	                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;
	            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
	                // Named function, e.g. function f(){} /42/
	                check = extra.tokenValues[extra.openCurlyToken - 5];
	                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;
	            }
	        }

	        return regex ? collectRegex() : scanPunctuator();
	    }

	    function advance() {
	        var cp, token;

	        if (index >= length) {
	            return {
	                type: Token.EOF,
	                lineNumber: lineNumber,
	                lineStart: lineStart,
	                start: index,
	                end: index
	            };
	        }

	        cp = source.charCodeAt(index);

	        if (isIdentifierStart(cp)) {
	            token = scanIdentifier();
	            if (strict && isStrictModeReservedWord(token.value)) {
	                token.type = Token.Keyword;
	            }
	            return token;
	        }

	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return scanPunctuator();
	        }

	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return scanStringLiteral();
	        }

	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (isDecimalDigit(source.charCodeAt(index + 1))) {
	                return scanNumericLiteral();
	            }
	            return scanPunctuator();
	        }

	        if (isDecimalDigit(cp)) {
	            return scanNumericLiteral();
	        }

	        // Slash (/) U+002F can also start a regex.
	        if (extra.tokenize && cp === 0x2F) {
	            return advanceSlash();
	        }

	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {
	            return scanTemplate();
	        }

	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            cp = codePointAt(index);
	            if (isIdentifierStart(cp)) {
	                return scanIdentifier();
	            }
	        }

	        return scanPunctuator();
	    }

	    function collectToken() {
	        var loc, token, value, entry;

	        loc = {
	            start: {
	                line: lineNumber,
	                column: index - lineStart
	            }
	        };

	        token = advance();
	        loc.end = {
	            line: lineNumber,
	            column: index - lineStart
	        };

	        if (token.type !== Token.EOF) {
	            value = source.slice(token.start, token.end);
	            entry = {
	                type: TokenName[token.type],
	                value: value,
	                range: [token.start, token.end],
	                loc: loc
	            };
	            if (token.regex) {
	                entry.regex = {
	                    pattern: token.regex.pattern,
	                    flags: token.regex.flags
	                };
	            }
	            if (extra.tokenValues) {
	                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);
	            }
	            if (extra.tokenize) {
	                if (!extra.range) {
	                    delete entry.range;
	                }
	                if (!extra.loc) {
	                    delete entry.loc;
	                }
	                if (extra.delegate) {
	                    entry = extra.delegate(entry);
	                }
	            }
	            extra.tokens.push(entry);
	        }

	        return token;
	    }

	    function lex() {
	        var token;
	        scanning = true;

	        lastIndex = index;
	        lastLineNumber = lineNumber;
	        lastLineStart = lineStart;

	        skipComment();

	        token = lookahead;

	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;

	        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
	        scanning = false;
	        return token;
	    }

	    function peek() {
	        scanning = true;

	        skipComment();

	        lastIndex = index;
	        lastLineNumber = lineNumber;
	        lastLineStart = lineStart;

	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;

	        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
	        scanning = false;
	    }

	    function Position() {
	        this.line = startLineNumber;
	        this.column = startIndex - startLineStart;
	    }

	    function SourceLocation() {
	        this.start = new Position();
	        this.end = null;
	    }

	    function WrappingSourceLocation(startToken) {
	        this.start = {
	            line: startToken.lineNumber,
	            column: startToken.start - startToken.lineStart
	        };
	        this.end = null;
	    }

	    function Node() {
	        if (extra.range) {
	            this.range = [startIndex, 0];
	        }
	        if (extra.loc) {
	            this.loc = new SourceLocation();
	        }
	    }

	    function WrappingNode(startToken) {
	        if (extra.range) {
	            this.range = [startToken.start, 0];
	        }
	        if (extra.loc) {
	            this.loc = new WrappingSourceLocation(startToken);
	        }
	    }

	    WrappingNode.prototype = Node.prototype = {

	        processComment: function () {
	            var lastChild,
	                innerComments,
	                leadingComments,
	                trailingComments,
	                bottomRight = extra.bottomRightStack,
	                i,
	                comment,
	                last = bottomRight[bottomRight.length - 1];

	            if (this.type === Syntax.Program) {
	                if (this.body.length > 0) {
	                    return;
	                }
	            }
	            /**
	             * patch innnerComments for properties empty block
	             * `function a() {/** comments **\/}`
	             */

	            if (this.type === Syntax.BlockStatement && this.body.length === 0) {
	                innerComments = [];
	                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
	                    comment = extra.leadingComments[i];
	                    if (this.range[1] >= comment.range[1]) {
	                        innerComments.unshift(comment);
	                        extra.leadingComments.splice(i, 1);
	                        extra.trailingComments.splice(i, 1);
	                    }
	                }
	                if (innerComments.length) {
	                    this.innerComments = innerComments;
	                    //bottomRight.push(this);
	                    return;
	                }
	            }

	            if (extra.trailingComments.length > 0) {
	                trailingComments = [];
	                for (i = extra.trailingComments.length - 1; i >= 0; --i) {
	                    comment = extra.trailingComments[i];
	                    if (comment.range[0] >= this.range[1]) {
	                        trailingComments.unshift(comment);
	                        extra.trailingComments.splice(i, 1);
	                    }
	                }
	                extra.trailingComments = [];
	            } else {
	                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
	                    trailingComments = last.trailingComments;
	                    delete last.trailingComments;
	                }
	            }

	            // Eating the stack.
	            while (last && last.range[0] >= this.range[0]) {
	                lastChild = bottomRight.pop();
	                last = bottomRight[bottomRight.length - 1];
	            }

	            if (lastChild) {
	                if (lastChild.leadingComments) {
	                    leadingComments = [];
	                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
	                        comment = lastChild.leadingComments[i];
	                        if (comment.range[1] <= this.range[0]) {
	                            leadingComments.unshift(comment);
	                            lastChild.leadingComments.splice(i, 1);
	                        }
	                    }

	                    if (!lastChild.leadingComments.length) {
	                        lastChild.leadingComments = undefined;
	                    }
	                }
	            } else if (extra.leadingComments.length > 0) {
	                leadingComments = [];
	                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
	                    comment = extra.leadingComments[i];
	                    if (comment.range[1] <= this.range[0]) {
	                        leadingComments.unshift(comment);
	                        extra.leadingComments.splice(i, 1);
	                    }
	                }
	            }


	            if (leadingComments && leadingComments.length > 0) {
	                this.leadingComments = leadingComments;
	            }
	            if (trailingComments && trailingComments.length > 0) {
	                this.trailingComments = trailingComments;
	            }

	            bottomRight.push(this);
	        },

	        finish: function () {
	            if (extra.range) {
	                this.range[1] = lastIndex;
	            }
	            if (extra.loc) {
	                this.loc.end = {
	                    line: lastLineNumber,
	                    column: lastIndex - lastLineStart
	                };
	                if (extra.source) {
	                    this.loc.source = extra.source;
	                }
	            }

	            if (extra.attachComment) {
	                this.processComment();
	            }
	        },

	        finishArrayExpression: function (elements) {
	            this.type = Syntax.ArrayExpression;
	            this.elements = elements;
	            this.finish();
	            return this;
	        },

	        finishArrayPattern: function (elements) {
	            this.type = Syntax.ArrayPattern;
	            this.elements = elements;
	            this.finish();
	            return this;
	        },

	        finishArrowFunctionExpression: function (params, defaults, body, expression) {
	            this.type = Syntax.ArrowFunctionExpression;
	            this.id = null;
	            this.params = params;
	            this.defaults = defaults;
	            this.body = body;
	            this.generator = false;
	            this.expression = expression;
	            this.finish();
	            return this;
	        },

	        finishAssignmentExpression: function (operator, left, right) {
	            this.type = Syntax.AssignmentExpression;
	            this.operator = operator;
	            this.left = left;
	            this.right = right;
	            this.finish();
	            return this;
	        },

	        finishAssignmentPattern: function (left, right) {
	            this.type = Syntax.AssignmentPattern;
	            this.left = left;
	            this.right = right;
	            this.finish();
	            return this;
	        },

	        finishBinaryExpression: function (operator, left, right) {
	            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
	            this.operator = operator;
	            this.left = left;
	            this.right = right;
	            this.finish();
	            return this;
	        },

	        finishBlockStatement: function (body) {
	            this.type = Syntax.BlockStatement;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishBreakStatement: function (label) {
	            this.type = Syntax.BreakStatement;
	            this.label = label;
	            this.finish();
	            return this;
	        },

	        finishCallExpression: function (callee, args) {
	            this.type = Syntax.CallExpression;
	            this.callee = callee;
	            this.arguments = args;
	            this.finish();
	            return this;
	        },

	        finishCatchClause: function (param, body) {
	            this.type = Syntax.CatchClause;
	            this.param = param;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishClassBody: function (body) {
	            this.type = Syntax.ClassBody;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishClassDeclaration: function (id, superClass, body) {
	            this.type = Syntax.ClassDeclaration;
	            this.id = id;
	            this.superClass = superClass;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishClassExpression: function (id, superClass, body) {
	            this.type = Syntax.ClassExpression;
	            this.id = id;
	            this.superClass = superClass;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishConditionalExpression: function (test, consequent, alternate) {
	            this.type = Syntax.ConditionalExpression;
	            this.test = test;
	            this.consequent = consequent;
	            this.alternate = alternate;
	            this.finish();
	            return this;
	        },

	        finishContinueStatement: function (label) {
	            this.type = Syntax.ContinueStatement;
	            this.label = label;
	            this.finish();
	            return this;
	        },

	        finishDebuggerStatement: function () {
	            this.type = Syntax.DebuggerStatement;
	            this.finish();
	            return this;
	        },

	        finishDoWhileStatement: function (body, test) {
	            this.type = Syntax.DoWhileStatement;
	            this.body = body;
	            this.test = test;
	            this.finish();
	            return this;
	        },

	        finishEmptyStatement: function () {
	            this.type = Syntax.EmptyStatement;
	            this.finish();
	            return this;
	        },

	        finishExpressionStatement: function (expression) {
	            this.type = Syntax.ExpressionStatement;
	            this.expression = expression;
	            this.finish();
	            return this;
	        },

	        finishForStatement: function (init, test, update, body) {
	            this.type = Syntax.ForStatement;
	            this.init = init;
	            this.test = test;
	            this.update = update;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishForOfStatement: function (left, right, body) {
	            this.type = Syntax.ForOfStatement;
	            this.left = left;
	            this.right = right;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishForInStatement: function (left, right, body) {
	            this.type = Syntax.ForInStatement;
	            this.left = left;
	            this.right = right;
	            this.body = body;
	            this.each = false;
	            this.finish();
	            return this;
	        },

	        finishFunctionDeclaration: function (id, params, defaults, body, generator) {
	            this.type = Syntax.FunctionDeclaration;
	            this.id = id;
	            this.params = params;
	            this.defaults = defaults;
	            this.body = body;
	            this.generator = generator;
	            this.expression = false;
	            this.finish();
	            return this;
	        },

	        finishFunctionExpression: function (id, params, defaults, body, generator) {
	            this.type = Syntax.FunctionExpression;
	            this.id = id;
	            this.params = params;
	            this.defaults = defaults;
	            this.body = body;
	            this.generator = generator;
	            this.expression = false;
	            this.finish();
	            return this;
	        },

	        finishIdentifier: function (name) {
	            this.type = Syntax.Identifier;
	            this.name = name;
	            this.finish();
	            return this;
	        },

	        finishIfStatement: function (test, consequent, alternate) {
	            this.type = Syntax.IfStatement;
	            this.test = test;
	            this.consequent = consequent;
	            this.alternate = alternate;
	            this.finish();
	            return this;
	        },

	        finishLabeledStatement: function (label, body) {
	            this.type = Syntax.LabeledStatement;
	            this.label = label;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishLiteral: function (token) {
	            this.type = Syntax.Literal;
	            this.value = token.value;
	            this.raw = source.slice(token.start, token.end);
	            if (token.regex) {
	                this.regex = token.regex;
	            }
	            this.finish();
	            return this;
	        },

	        finishMemberExpression: function (accessor, object, property) {
	            this.type = Syntax.MemberExpression;
	            this.computed = accessor === '[';
	            this.object = object;
	            this.property = property;
	            this.finish();
	            return this;
	        },

	        finishMetaProperty: function (meta, property) {
	            this.type = Syntax.MetaProperty;
	            this.meta = meta;
	            this.property = property;
	            this.finish();
	            return this;
	        },

	        finishNewExpression: function (callee, args) {
	            this.type = Syntax.NewExpression;
	            this.callee = callee;
	            this.arguments = args;
	            this.finish();
	            return this;
	        },

	        finishObjectExpression: function (properties) {
	            this.type = Syntax.ObjectExpression;
	            this.properties = properties;
	            this.finish();
	            return this;
	        },

	        finishObjectPattern: function (properties) {
	            this.type = Syntax.ObjectPattern;
	            this.properties = properties;
	            this.finish();
	            return this;
	        },

	        finishPostfixExpression: function (operator, argument) {
	            this.type = Syntax.UpdateExpression;
	            this.operator = operator;
	            this.argument = argument;
	            this.prefix = false;
	            this.finish();
	            return this;
	        },

	        finishProgram: function (body, sourceType) {
	            this.type = Syntax.Program;
	            this.body = body;
	            this.sourceType = sourceType;
	            this.finish();
	            return this;
	        },

	        finishProperty: function (kind, key, computed, value, method, shorthand) {
	            this.type = Syntax.Property;
	            this.key = key;
	            this.computed = computed;
	            this.value = value;
	            this.kind = kind;
	            this.method = method;
	            this.shorthand = shorthand;
	            this.finish();
	            return this;
	        },

	        finishRestElement: function (argument) {
	            this.type = Syntax.RestElement;
	            this.argument = argument;
	            this.finish();
	            return this;
	        },

	        finishReturnStatement: function (argument) {
	            this.type = Syntax.ReturnStatement;
	            this.argument = argument;
	            this.finish();
	            return this;
	        },

	        finishSequenceExpression: function (expressions) {
	            this.type = Syntax.SequenceExpression;
	            this.expressions = expressions;
	            this.finish();
	            return this;
	        },

	        finishSpreadElement: function (argument) {
	            this.type = Syntax.SpreadElement;
	            this.argument = argument;
	            this.finish();
	            return this;
	        },

	        finishSwitchCase: function (test, consequent) {
	            this.type = Syntax.SwitchCase;
	            this.test = test;
	            this.consequent = consequent;
	            this.finish();
	            return this;
	        },

	        finishSuper: function () {
	            this.type = Syntax.Super;
	            this.finish();
	            return this;
	        },

	        finishSwitchStatement: function (discriminant, cases) {
	            this.type = Syntax.SwitchStatement;
	            this.discriminant = discriminant;
	            this.cases = cases;
	            this.finish();
	            return this;
	        },

	        finishTaggedTemplateExpression: function (tag, quasi) {
	            this.type = Syntax.TaggedTemplateExpression;
	            this.tag = tag;
	            this.quasi = quasi;
	            this.finish();
	            return this;
	        },

	        finishTemplateElement: function (value, tail) {
	            this.type = Syntax.TemplateElement;
	            this.value = value;
	            this.tail = tail;
	            this.finish();
	            return this;
	        },

	        finishTemplateLiteral: function (quasis, expressions) {
	            this.type = Syntax.TemplateLiteral;
	            this.quasis = quasis;
	            this.expressions = expressions;
	            this.finish();
	            return this;
	        },

	        finishThisExpression: function () {
	            this.type = Syntax.ThisExpression;
	            this.finish();
	            return this;
	        },

	        finishThrowStatement: function (argument) {
	            this.type = Syntax.ThrowStatement;
	            this.argument = argument;
	            this.finish();
	            return this;
	        },

	        finishTryStatement: function (block, handler, finalizer) {
	            this.type = Syntax.TryStatement;
	            this.block = block;
	            this.guardedHandlers = [];
	            this.handlers = handler ? [handler] : [];
	            this.handler = handler;
	            this.finalizer = finalizer;
	            this.finish();
	            return this;
	        },

	        finishUnaryExpression: function (operator, argument) {
	            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
	            this.operator = operator;
	            this.argument = argument;
	            this.prefix = true;
	            this.finish();
	            return this;
	        },

	        finishVariableDeclaration: function (declarations) {
	            this.type = Syntax.VariableDeclaration;
	            this.declarations = declarations;
	            this.kind = 'var';
	            this.finish();
	            return this;
	        },

	        finishLexicalDeclaration: function (declarations, kind) {
	            this.type = Syntax.VariableDeclaration;
	            this.declarations = declarations;
	            this.kind = kind;
	            this.finish();
	            return this;
	        },

	        finishVariableDeclarator: function (id, init) {
	            this.type = Syntax.VariableDeclarator;
	            this.id = id;
	            this.init = init;
	            this.finish();
	            return this;
	        },

	        finishWhileStatement: function (test, body) {
	            this.type = Syntax.WhileStatement;
	            this.test = test;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishWithStatement: function (object, body) {
	            this.type = Syntax.WithStatement;
	            this.object = object;
	            this.body = body;
	            this.finish();
	            return this;
	        },

	        finishExportSpecifier: function (local, exported) {
	            this.type = Syntax.ExportSpecifier;
	            this.exported = exported || local;
	            this.local = local;
	            this.finish();
	            return this;
	        },

	        finishImportDefaultSpecifier: function (local) {
	            this.type = Syntax.ImportDefaultSpecifier;
	            this.local = local;
	            this.finish();
	            return this;
	        },

	        finishImportNamespaceSpecifier: function (local) {
	            this.type = Syntax.ImportNamespaceSpecifier;
	            this.local = local;
	            this.finish();
	            return this;
	        },

	        finishExportNamedDeclaration: function (declaration, specifiers, src) {
	            this.type = Syntax.ExportNamedDeclaration;
	            this.declaration = declaration;
	            this.specifiers = specifiers;
	            this.source = src;
	            this.finish();
	            return this;
	        },

	        finishExportDefaultDeclaration: function (declaration) {
	            this.type = Syntax.ExportDefaultDeclaration;
	            this.declaration = declaration;
	            this.finish();
	            return this;
	        },

	        finishExportAllDeclaration: function (src) {
	            this.type = Syntax.ExportAllDeclaration;
	            this.source = src;
	            this.finish();
	            return this;
	        },

	        finishImportSpecifier: function (local, imported) {
	            this.type = Syntax.ImportSpecifier;
	            this.local = local || imported;
	            this.imported = imported;
	            this.finish();
	            return this;
	        },

	        finishImportDeclaration: function (specifiers, src) {
	            this.type = Syntax.ImportDeclaration;
	            this.specifiers = specifiers;
	            this.source = src;
	            this.finish();
	            return this;
	        },

	        finishYieldExpression: function (argument, delegate) {
	            this.type = Syntax.YieldExpression;
	            this.argument = argument;
	            this.delegate = delegate;
	            this.finish();
	            return this;
	        }
	    };


	    function recordError(error) {
	        var e, existing;

	        for (e = 0; e < extra.errors.length; e++) {
	            existing = extra.errors[e];
	            // Prevent duplicated error.
	            /* istanbul ignore next */
	            if (existing.index === error.index && existing.message === error.message) {
	                return;
	            }
	        }

	        extra.errors.push(error);
	    }

	    function constructError(msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        } catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        } finally {
	            return error;
	        }
	    }

	    function createError(line, pos, description) {
	        var msg, column, error;

	        msg = 'Line ' + line + ': ' + description;
	        column = pos - (scanning ? lineStart : lastLineStart) + 1;
	        error = constructError(msg, column);
	        error.lineNumber = line;
	        error.description = description;
	        error.index = pos;
	        return error;
	    }

	    // Throw an exception

	    function throwError(messageFormat) {
	        var args, msg;

	        args = Array.prototype.slice.call(arguments, 1);
	        msg = messageFormat.replace(/%(\d)/g,
	            function (whole, idx) {
	                assert(idx < args.length, 'Message reference must be in range');
	                return args[idx];
	            }
	        );

	        throw createError(lastLineNumber, lastIndex, msg);
	    }

	    function tolerateError(messageFormat) {
	        var args, msg, error;

	        args = Array.prototype.slice.call(arguments, 1);
	        /* istanbul ignore next */
	        msg = messageFormat.replace(/%(\d)/g,
	            function (whole, idx) {
	                assert(idx < args.length, 'Message reference must be in range');
	                return args[idx];
	            }
	        );

	        error = createError(lineNumber, lastIndex, msg);
	        if (extra.errors) {
	            recordError(error);
	        } else {
	            throw error;
	        }
	    }

	    // Throw an exception because of the token.

	    function unexpectedTokenError(token, message) {
	        var value, msg = message || Messages.UnexpectedToken;

	        if (token) {
	            if (!message) {
	                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
	                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
	                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
	                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
	                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :
	                    Messages.UnexpectedToken;

	                if (token.type === Token.Keyword) {
	                    if (isFutureReservedWord(token.value)) {
	                        msg = Messages.UnexpectedReserved;
	                    } else if (strict && isStrictModeReservedWord(token.value)) {
	                        msg = Messages.StrictReservedWord;
	                    }
	                }
	            }

	            value = (token.type === Token.Template) ? token.value.raw : token.value;
	        } else {
	            value = 'ILLEGAL';
	        }

	        msg = msg.replace('%0', value);

	        return (token && typeof token.lineNumber === 'number') ?
	            createError(token.lineNumber, token.start, msg) :
	            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
	    }

	    function throwUnexpectedToken(token, message) {
	        throw unexpectedTokenError(token, message);
	    }

	    function tolerateUnexpectedToken(token, message) {
	        var error = unexpectedTokenError(token, message);
	        if (extra.errors) {
	            recordError(error);
	        } else {
	            throw error;
	        }
	    }

	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.

	    function expect(value) {
	        var token = lex();
	        if (token.type !== Token.Punctuator || token.value !== value) {
	            throwUnexpectedToken(token);
	        }
	    }

	    /**
	     * @name expectCommaSeparator
	     * @description Quietly expect a comma when in tolerant mode, otherwise delegates
	     * to <code>expect(value)</code>
	     * @since 2.0
	     */
	    function expectCommaSeparator() {
	        var token;

	        if (extra.errors) {
	            token = lookahead;
	            if (token.type === Token.Punctuator && token.value === ',') {
	                lex();
	            } else if (token.type === Token.Punctuator && token.value === ';') {
	                lex();
	                tolerateUnexpectedToken(token);
	            } else {
	                tolerateUnexpectedToken(token, Messages.UnexpectedToken);
	            }
	        } else {
	            expect(',');
	        }
	    }

	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.

	    function expectKeyword(keyword) {
	        var token = lex();
	        if (token.type !== Token.Keyword || token.value !== keyword) {
	            throwUnexpectedToken(token);
	        }
	    }

	    // Return true if the next token matches the specified punctuator.

	    function match(value) {
	        return lookahead.type === Token.Punctuator && lookahead.value === value;
	    }

	    // Return true if the next token matches the specified keyword

	    function matchKeyword(keyword) {
	        return lookahead.type === Token.Keyword && lookahead.value === keyword;
	    }

	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)

	    function matchContextualKeyword(keyword) {
	        return lookahead.type === Token.Identifier && lookahead.value === keyword;
	    }

	    // Return true if the next token is an assignment operator

	    function matchAssign() {
	        var op;

	        if (lookahead.type !== Token.Punctuator) {
	            return false;
	        }
	        op = lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    }

	    function consumeSemicolon() {
	        // Catch the very common case first: immediately a semicolon (U+003B).
	        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
	            lex();
	            return;
	        }

	        if (hasLineTerminator) {
	            return;
	        }

	        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
	        lastIndex = startIndex;
	        lastLineNumber = startLineNumber;
	        lastLineStart = startLineStart;

	        if (lookahead.type !== Token.EOF && !match('}')) {
	            throwUnexpectedToken(lookahead);
	        }
	    }

	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    function isolateCoverGrammar(parser) {
	        var oldIsBindingElement = isBindingElement,
	            oldIsAssignmentTarget = isAssignmentTarget,
	            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
	            result;
	        isBindingElement = true;
	        isAssignmentTarget = true;
	        firstCoverInitializedNameError = null;
	        result = parser();
	        if (firstCoverInitializedNameError !== null) {
	            throwUnexpectedToken(firstCoverInitializedNameError);
	        }
	        isBindingElement = oldIsBindingElement;
	        isAssignmentTarget = oldIsAssignmentTarget;
	        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
	        return result;
	    }

	    function inheritCoverGrammar(parser) {
	        var oldIsBindingElement = isBindingElement,
	            oldIsAssignmentTarget = isAssignmentTarget,
	            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
	            result;
	        isBindingElement = true;
	        isAssignmentTarget = true;
	        firstCoverInitializedNameError = null;
	        result = parser();
	        isBindingElement = isBindingElement && oldIsBindingElement;
	        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
	        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
	        return result;
	    }

	    // ECMA-262 13.3.3 Destructuring Binding Patterns

	    function parseArrayPattern(params, kind) {
	        var node = new Node(), elements = [], rest, restNode;
	        expect('[');

	        while (!match(']')) {
	            if (match(',')) {
	                lex();
	                elements.push(null);
	            } else {
	                if (match('...')) {
	                    restNode = new Node();
	                    lex();
	                    params.push(lookahead);
	                    rest = parseVariableIdentifier(kind);
	                    elements.push(restNode.finishRestElement(rest));
	                    break;
	                } else {
	                    elements.push(parsePatternWithDefault(params, kind));
	                }
	                if (!match(']')) {
	                    expect(',');
	                }
	            }

	        }

	        expect(']');

	        return node.finishArrayPattern(elements);
	    }

	    function parsePropertyPattern(params, kind) {
	        var node = new Node(), key, keyToken, computed = match('['), init;
	        if (lookahead.type === Token.Identifier) {
	            keyToken = lookahead;
	            key = parseVariableIdentifier();
	            if (match('=')) {
	                params.push(keyToken);
	                lex();
	                init = parseAssignmentExpression();

	                return node.finishProperty(
	                    'init', key, false,
	                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);
	            } else if (!match(':')) {
	                params.push(keyToken);
	                return node.finishProperty('init', key, false, key, false, true);
	            }
	        } else {
	            key = parseObjectPropertyKey();
	        }
	        expect(':');
	        init = parsePatternWithDefault(params, kind);
	        return node.finishProperty('init', key, computed, init, false, false);
	    }

	    function parseObjectPattern(params, kind) {
	        var node = new Node(), properties = [];

	        expect('{');

	        while (!match('}')) {
	            properties.push(parsePropertyPattern(params, kind));
	            if (!match('}')) {
	                expect(',');
	            }
	        }

	        lex();

	        return node.finishObjectPattern(properties);
	    }

	    function parsePattern(params, kind) {
	        if (match('[')) {
	            return parseArrayPattern(params, kind);
	        } else if (match('{')) {
	            return parseObjectPattern(params, kind);
	        } else if (matchKeyword('let')) {
	            if (kind === 'const' || kind === 'let') {
	                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
	            }
	        }

	        params.push(lookahead);
	        return parseVariableIdentifier(kind);
	    }

	    function parsePatternWithDefault(params, kind) {
	        var startToken = lookahead, pattern, previousAllowYield, right;
	        pattern = parsePattern(params, kind);
	        if (match('=')) {
	            lex();
	            previousAllowYield = state.allowYield;
	            state.allowYield = true;
	            right = isolateCoverGrammar(parseAssignmentExpression);
	            state.allowYield = previousAllowYield;
	            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
	        }
	        return pattern;
	    }

	    // ECMA-262 12.2.5 Array Initializer

	    function parseArrayInitializer() {
	        var elements = [], node = new Node(), restSpread;

	        expect('[');

	        while (!match(']')) {
	            if (match(',')) {
	                lex();
	                elements.push(null);
	            } else if (match('...')) {
	                restSpread = new Node();
	                lex();
	                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));

	                if (!match(']')) {
	                    isAssignmentTarget = isBindingElement = false;
	                    expect(',');
	                }
	                elements.push(restSpread);
	            } else {
	                elements.push(inheritCoverGrammar(parseAssignmentExpression));

	                if (!match(']')) {
	                    expect(',');
	                }
	            }
	        }

	        lex();

	        return node.finishArrayExpression(elements);
	    }

	    // ECMA-262 12.2.6 Object Initializer

	    function parsePropertyFunction(node, paramInfo, isGenerator) {
	        var previousStrict, body;

	        isAssignmentTarget = isBindingElement = false;

	        previousStrict = strict;
	        body = isolateCoverGrammar(parseFunctionSourceElements);

	        if (strict && paramInfo.firstRestricted) {
	            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
	        }
	        if (strict && paramInfo.stricted) {
	            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
	        }

	        strict = previousStrict;
	        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
	    }

	    function parsePropertyMethodFunction() {
	        var params, method, node = new Node(),
	            previousAllowYield = state.allowYield;

	        state.allowYield = false;
	        params = parseParams();
	        state.allowYield = previousAllowYield;

	        state.allowYield = false;
	        method = parsePropertyFunction(node, params, false);
	        state.allowYield = previousAllowYield;

	        return method;
	    }

	    function parseObjectPropertyKey() {
	        var token, node = new Node(), expr;

	        token = lex();

	        // Note: This function is called only from parseObjectProperty(), where
	        // EOF and Punctuator tokens are already filtered out.

	        switch (token.type) {
	        case Token.StringLiteral:
	        case Token.NumericLiteral:
	            if (strict && token.octal) {
	                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
	            }
	            return node.finishLiteral(token);
	        case Token.Identifier:
	        case Token.BooleanLiteral:
	        case Token.NullLiteral:
	        case Token.Keyword:
	            return node.finishIdentifier(token.value);
	        case Token.Punctuator:
	            if (token.value === '[') {
	                expr = isolateCoverGrammar(parseAssignmentExpression);
	                expect(']');
	                return expr;
	            }
	            break;
	        }
	        throwUnexpectedToken(token);
	    }

	    function lookaheadPropertyName() {
	        switch (lookahead.type) {
	        case Token.Identifier:
	        case Token.StringLiteral:
	        case Token.BooleanLiteral:
	        case Token.NullLiteral:
	        case Token.NumericLiteral:
	        case Token.Keyword:
	            return true;
	        case Token.Punctuator:
	            return lookahead.value === '[';
	        }
	        return false;
	    }

	    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,
	    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.
	    // This can only be determined after we consumed up to the left parentheses.
	    //
	    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller
	    // is responsible to visit other options.
	    function tryParseMethodDefinition(token, key, computed, node) {
	        var value, options, methodNode, params,
	            previousAllowYield = state.allowYield;

	        if (token.type === Token.Identifier) {
	            // check for `get` and `set`;

	            if (token.value === 'get' && lookaheadPropertyName()) {
	                computed = match('[');
	                key = parseObjectPropertyKey();
	                methodNode = new Node();
	                expect('(');
	                expect(')');

	                state.allowYield = false;
	                value = parsePropertyFunction(methodNode, {
	                    params: [],
	                    defaults: [],
	                    stricted: null,
	                    firstRestricted: null,
	                    message: null
	                }, false);
	                state.allowYield = previousAllowYield;

	                return node.finishProperty('get', key, computed, value, false, false);
	            } else if (token.value === 'set' && lookaheadPropertyName()) {
	                computed = match('[');
	                key = parseObjectPropertyKey();
	                methodNode = new Node();
	                expect('(');

	                options = {
	                    params: [],
	                    defaultCount: 0,
	                    defaults: [],
	                    firstRestricted: null,
	                    paramSet: {}
	                };
	                if (match(')')) {
	                    tolerateUnexpectedToken(lookahead);
	                } else {
	                    state.allowYield = false;
	                    parseParam(options);
	                    state.allowYield = previousAllowYield;
	                    if (options.defaultCount === 0) {
	                        options.defaults = [];
	                    }
	                }
	                expect(')');

	                state.allowYield = false;
	                value = parsePropertyFunction(methodNode, options, false);
	                state.allowYield = previousAllowYield;

	                return node.finishProperty('set', key, computed, value, false, false);
	            }
	        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
	            computed = match('[');
	            key = parseObjectPropertyKey();
	            methodNode = new Node();

	            state.allowYield = true;
	            params = parseParams();
	            state.allowYield = previousAllowYield;

	            state.allowYield = false;
	            value = parsePropertyFunction(methodNode, params, true);
	            state.allowYield = previousAllowYield;

	            return node.finishProperty('init', key, computed, value, true, false);
	        }

	        if (key && match('(')) {
	            value = parsePropertyMethodFunction();
	            return node.finishProperty('init', key, computed, value, true, false);
	        }

	        // Not a MethodDefinition.
	        return null;
	    }

	    function parseObjectProperty(hasProto) {
	        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;

	        computed = match('[');
	        if (match('*')) {
	            lex();
	        } else {
	            key = parseObjectPropertyKey();
	        }
	        maybeMethod = tryParseMethodDefinition(token, key, computed, node);
	        if (maybeMethod) {
	            return maybeMethod;
	        }

	        if (!key) {
	            throwUnexpectedToken(lookahead);
	        }

	        // Check for duplicated __proto__
	        if (!computed) {
	            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||
	                (key.type === Syntax.Literal && key.value === '__proto__');
	            if (hasProto.value && proto) {
	                tolerateError(Messages.DuplicateProtoProperty);
	            }
	            hasProto.value |= proto;
	        }

	        if (match(':')) {
	            lex();
	            value = inheritCoverGrammar(parseAssignmentExpression);
	            return node.finishProperty('init', key, computed, value, false, false);
	        }

	        if (token.type === Token.Identifier) {
	            if (match('=')) {
	                firstCoverInitializedNameError = lookahead;
	                lex();
	                value = isolateCoverGrammar(parseAssignmentExpression);
	                return node.finishProperty('init', key, computed,
	                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
	            }
	            return node.finishProperty('init', key, computed, key, false, true);
	        }

	        throwUnexpectedToken(lookahead);
	    }

	    function parseObjectInitializer() {
	        var properties = [], hasProto = {value: false}, node = new Node();

	        expect('{');

	        while (!match('}')) {
	            properties.push(parseObjectProperty(hasProto));

	            if (!match('}')) {
	                expectCommaSeparator();
	            }
	        }

	        expect('}');

	        return node.finishObjectExpression(properties);
	    }

	    function reinterpretExpressionAsPattern(expr) {
	        var i;
	        switch (expr.type) {
	        case Syntax.Identifier:
	        case Syntax.MemberExpression:
	        case Syntax.RestElement:
	        case Syntax.AssignmentPattern:
	            break;
	        case Syntax.SpreadElement:
	            expr.type = Syntax.RestElement;
	            reinterpretExpressionAsPattern(expr.argument);
	            break;
	        case Syntax.ArrayExpression:
	            expr.type = Syntax.ArrayPattern;
	            for (i = 0; i < expr.elements.length; i++) {
	                if (expr.elements[i] !== null) {
	                    reinterpretExpressionAsPattern(expr.elements[i]);
	                }
	            }
	            break;
	        case Syntax.ObjectExpression:
	            expr.type = Syntax.ObjectPattern;
	            for (i = 0; i < expr.properties.length; i++) {
	                reinterpretExpressionAsPattern(expr.properties[i].value);
	            }
	            break;
	        case Syntax.AssignmentExpression:
	            expr.type = Syntax.AssignmentPattern;
	            reinterpretExpressionAsPattern(expr.left);
	            break;
	        default:
	            // Allow other node type for tolerant parsing.
	            break;
	        }
	    }

	    // ECMA-262 12.2.9 Template Literals

	    function parseTemplateElement(option) {
	        var node, token;

	        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {
	            throwUnexpectedToken();
	        }

	        node = new Node();
	        token = lex();

	        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);
	    }

	    function parseTemplateLiteral() {
	        var quasi, quasis, expressions, node = new Node();

	        quasi = parseTemplateElement({ head: true });
	        quasis = [quasi];
	        expressions = [];

	        while (!quasi.tail) {
	            expressions.push(parseExpression());
	            quasi = parseTemplateElement({ head: false });
	            quasis.push(quasi);
	        }

	        return node.finishTemplateLiteral(quasis, expressions);
	    }

	    // ECMA-262 12.2.10 The Grouping Operator

	    function parseGroupExpression() {
	        var expr, expressions, startToken, i, params = [];

	        expect('(');

	        if (match(')')) {
	            lex();
	            if (!match('=>')) {
	                expect('=>');
	            }
	            return {
	                type: PlaceHolders.ArrowParameterPlaceHolder,
	                params: [],
	                rawParams: []
	            };
	        }

	        startToken = lookahead;
	        if (match('...')) {
	            expr = parseRestElement(params);
	            expect(')');
	            if (!match('=>')) {
	                expect('=>');
	            }
	            return {
	                type: PlaceHolders.ArrowParameterPlaceHolder,
	                params: [expr]
	            };
	        }

	        isBindingElement = true;
	        expr = inheritCoverGrammar(parseAssignmentExpression);

	        if (match(',')) {
	            isAssignmentTarget = false;
	            expressions = [expr];

	            while (startIndex < length) {
	                if (!match(',')) {
	                    break;
	                }
	                lex();

	                if (match('...')) {
	                    if (!isBindingElement) {
	                        throwUnexpectedToken(lookahead);
	                    }
	                    expressions.push(parseRestElement(params));
	                    expect(')');
	                    if (!match('=>')) {
	                        expect('=>');
	                    }
	                    isBindingElement = false;
	                    for (i = 0; i < expressions.length; i++) {
	                        reinterpretExpressionAsPattern(expressions[i]);
	                    }
	                    return {
	                        type: PlaceHolders.ArrowParameterPlaceHolder,
	                        params: expressions
	                    };
	                }

	                expressions.push(inheritCoverGrammar(parseAssignmentExpression));
	            }

	            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
	        }


	        expect(')');

	        if (match('=>')) {
	            if (expr.type === Syntax.Identifier && expr.name === 'yield') {
	                return {
	                    type: PlaceHolders.ArrowParameterPlaceHolder,
	                    params: [expr]
	                };
	            }

	            if (!isBindingElement) {
	                throwUnexpectedToken(lookahead);
	            }

	            if (expr.type === Syntax.SequenceExpression) {
	                for (i = 0; i < expr.expressions.length; i++) {
	                    reinterpretExpressionAsPattern(expr.expressions[i]);
	                }
	            } else {
	                reinterpretExpressionAsPattern(expr);
	            }

	            expr = {
	                type: PlaceHolders.ArrowParameterPlaceHolder,
	                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
	            };
	        }
	        isBindingElement = false;
	        return expr;
	    }


	    // ECMA-262 12.2 Primary Expressions

	    function parsePrimaryExpression() {
	        var type, token, expr, node;

	        if (match('(')) {
	            isBindingElement = false;
	            return inheritCoverGrammar(parseGroupExpression);
	        }

	        if (match('[')) {
	            return inheritCoverGrammar(parseArrayInitializer);
	        }

	        if (match('{')) {
	            return inheritCoverGrammar(parseObjectInitializer);
	        }

	        type = lookahead.type;
	        node = new Node();

	        if (type === Token.Identifier) {
	            if (state.sourceType === 'module' && lookahead.value === 'await') {
	                tolerateUnexpectedToken(lookahead);
	            }
	            expr = node.finishIdentifier(lex().value);
	        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
	            isAssignmentTarget = isBindingElement = false;
	            if (strict && lookahead.octal) {
	                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
	            }
	            expr = node.finishLiteral(lex());
	        } else if (type === Token.Keyword) {
	            if (!strict && state.allowYield && matchKeyword('yield')) {
	                return parseNonComputedProperty();
	            }
	            if (!strict && matchKeyword('let')) {
	                return node.finishIdentifier(lex().value);
	            }
	            isAssignmentTarget = isBindingElement = false;
	            if (matchKeyword('function')) {
	                return parseFunctionExpression();
	            }
	            if (matchKeyword('this')) {
	                lex();
	                return node.finishThisExpression();
	            }
	            if (matchKeyword('class')) {
	                return parseClassExpression();
	            }
	            throwUnexpectedToken(lex());
	        } else if (type === Token.BooleanLiteral) {
	            isAssignmentTarget = isBindingElement = false;
	            token = lex();
	            token.value = (token.value === 'true');
	            expr = node.finishLiteral(token);
	        } else if (type === Token.NullLiteral) {
	            isAssignmentTarget = isBindingElement = false;
	            token = lex();
	            token.value = null;
	            expr = node.finishLiteral(token);
	        } else if (match('/') || match('/=')) {
	            isAssignmentTarget = isBindingElement = false;
	            index = startIndex;

	            if (typeof extra.tokens !== 'undefined') {
	                token = collectRegex();
	            } else {
	                token = scanRegExp();
	            }
	            lex();
	            expr = node.finishLiteral(token);
	        } else if (type === Token.Template) {
	            expr = parseTemplateLiteral();
	        } else {
	            throwUnexpectedToken(lex());
	        }

	        return expr;
	    }

	    // ECMA-262 12.3 Left-Hand-Side Expressions

	    function parseArguments() {
	        var args = [], expr;

	        expect('(');

	        if (!match(')')) {
	            while (startIndex < length) {
	                if (match('...')) {
	                    expr = new Node();
	                    lex();
	                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
	                } else {
	                    expr = isolateCoverGrammar(parseAssignmentExpression);
	                }
	                args.push(expr);
	                if (match(')')) {
	                    break;
	                }
	                expectCommaSeparator();
	            }
	        }

	        expect(')');

	        return args;
	    }

	    function parseNonComputedProperty() {
	        var token, node = new Node();

	        token = lex();

	        if (!isIdentifierName(token)) {
	            throwUnexpectedToken(token);
	        }

	        return node.finishIdentifier(token.value);
	    }

	    function parseNonComputedMember() {
	        expect('.');

	        return parseNonComputedProperty();
	    }

	    function parseComputedMember() {
	        var expr;

	        expect('[');

	        expr = isolateCoverGrammar(parseExpression);

	        expect(']');

	        return expr;
	    }

	    // ECMA-262 12.3.3 The new Operator

	    function parseNewExpression() {
	        var callee, args, node = new Node();

	        expectKeyword('new');

	        if (match('.')) {
	            lex();
	            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
	                if (state.inFunctionBody) {
	                    lex();
	                    return node.finishMetaProperty('new', 'target');
	                }
	            }
	            throwUnexpectedToken(lookahead);
	        }

	        callee = isolateCoverGrammar(parseLeftHandSideExpression);
	        args = match('(') ? parseArguments() : [];

	        isAssignmentTarget = isBindingElement = false;

	        return node.finishNewExpression(callee, args);
	    }

	    // ECMA-262 12.3.4 Function Calls

	    function parseLeftHandSideExpressionAllowCall() {
	        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;

	        startToken = lookahead;
	        state.allowIn = true;

	        if (matchKeyword('super') && state.inFunctionBody) {
	            expr = new Node();
	            lex();
	            expr = expr.finishSuper();
	            if (!match('(') && !match('.') && !match('[')) {
	                throwUnexpectedToken(lookahead);
	            }
	        } else {
	            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
	        }

	        for (;;) {
	            if (match('.')) {
	                isBindingElement = false;
	                isAssignmentTarget = true;
	                property = parseNonComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
	            } else if (match('(')) {
	                isBindingElement = false;
	                isAssignmentTarget = false;
	                args = parseArguments();
	                expr = new WrappingNode(startToken).finishCallExpression(expr, args);
	            } else if (match('[')) {
	                isBindingElement = false;
	                isAssignmentTarget = true;
	                property = parseComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
	            } else if (lookahead.type === Token.Template && lookahead.head) {
	                quasi = parseTemplateLiteral();
	                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
	            } else {
	                break;
	            }
	        }
	        state.allowIn = previousAllowIn;

	        return expr;
	    }

	    // ECMA-262 12.3 Left-Hand-Side Expressions

	    function parseLeftHandSideExpression() {
	        var quasi, expr, property, startToken;
	        assert(state.allowIn, 'callee of new expression always allow in keyword.');

	        startToken = lookahead;

	        if (matchKeyword('super') && state.inFunctionBody) {
	            expr = new Node();
	            lex();
	            expr = expr.finishSuper();
	            if (!match('[') && !match('.')) {
	                throwUnexpectedToken(lookahead);
	            }
	        } else {
	            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
	        }

	        for (;;) {
	            if (match('[')) {
	                isBindingElement = false;
	                isAssignmentTarget = true;
	                property = parseComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
	            } else if (match('.')) {
	                isBindingElement = false;
	                isAssignmentTarget = true;
	                property = parseNonComputedMember();
	                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
	            } else if (lookahead.type === Token.Template && lookahead.head) {
	                quasi = parseTemplateLiteral();
	                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
	            } else {
	                break;
	            }
	        }
	        return expr;
	    }

	    // ECMA-262 12.4 Postfix Expressions

	    function parsePostfixExpression() {
	        var expr, token, startToken = lookahead;

	        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);

	        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
	            if (match('++') || match('--')) {
	                // ECMA-262 11.3.1, 11.3.2
	                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
	                    tolerateError(Messages.StrictLHSPostfix);
	                }

	                if (!isAssignmentTarget) {
	                    tolerateError(Messages.InvalidLHSInAssignment);
	                }

	                isAssignmentTarget = isBindingElement = false;

	                token = lex();
	                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
	            }
	        }

	        return expr;
	    }

	    // ECMA-262 12.5 Unary Operators

	    function parseUnaryExpression() {
	        var token, expr, startToken;

	        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
	            expr = parsePostfixExpression();
	        } else if (match('++') || match('--')) {
	            startToken = lookahead;
	            token = lex();
	            expr = inheritCoverGrammar(parseUnaryExpression);
	            // ECMA-262 11.4.4, 11.4.5
	            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
	                tolerateError(Messages.StrictLHSPrefix);
	            }

	            if (!isAssignmentTarget) {
	                tolerateError(Messages.InvalidLHSInAssignment);
	            }
	            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
	            isAssignmentTarget = isBindingElement = false;
	        } else if (match('+') || match('-') || match('~') || match('!')) {
	            startToken = lookahead;
	            token = lex();
	            expr = inheritCoverGrammar(parseUnaryExpression);
	            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
	            isAssignmentTarget = isBindingElement = false;
	        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
	            startToken = lookahead;
	            token = lex();
	            expr = inheritCoverGrammar(parseUnaryExpression);
	            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
	            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
	                tolerateError(Messages.StrictDelete);
	            }
	            isAssignmentTarget = isBindingElement = false;
	        } else {
	            expr = parsePostfixExpression();
	        }

	        return expr;
	    }

	    function binaryPrecedence(token, allowIn) {
	        var prec = 0;

	        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
	            return 0;
	        }

	        switch (token.value) {
	        case '||':
	            prec = 1;
	            break;

	        case '&&':
	            prec = 2;
	            break;

	        case '|':
	            prec = 3;
	            break;

	        case '^':
	            prec = 4;
	            break;

	        case '&':
	            prec = 5;
	            break;

	        case '==':
	        case '!=':
	        case '===':
	        case '!==':
	            prec = 6;
	            break;

	        case '<':
	        case '>':
	        case '<=':
	        case '>=':
	        case 'instanceof':
	            prec = 7;
	            break;

	        case 'in':
	            prec = allowIn ? 7 : 0;
	            break;

	        case '<<':
	        case '>>':
	        case '>>>':
	            prec = 8;
	            break;

	        case '+':
	        case '-':
	            prec = 9;
	            break;

	        case '*':
	        case '/':
	        case '%':
	            prec = 11;
	            break;

	        default:
	            break;
	        }

	        return prec;
	    }

	    // ECMA-262 12.6 Multiplicative Operators
	    // ECMA-262 12.7 Additive Operators
	    // ECMA-262 12.8 Bitwise Shift Operators
	    // ECMA-262 12.9 Relational Operators
	    // ECMA-262 12.10 Equality Operators
	    // ECMA-262 12.11 Binary Bitwise Operators
	    // ECMA-262 12.12 Binary Logical Operators

	    function parseBinaryExpression() {
	        var marker, markers, expr, token, prec, stack, right, operator, left, i;

	        marker = lookahead;
	        left = inheritCoverGrammar(parseUnaryExpression);

	        token = lookahead;
	        prec = binaryPrecedence(token, state.allowIn);
	        if (prec === 0) {
	            return left;
	        }
	        isAssignmentTarget = isBindingElement = false;
	        token.prec = prec;
	        lex();

	        markers = [marker, lookahead];
	        right = isolateCoverGrammar(parseUnaryExpression);

	        stack = [left, token, right];

	        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

	            // Reduce: make a binary expression from the three topmost entries.
	            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
	                right = stack.pop();
	                operator = stack.pop().value;
	                left = stack.pop();
	                markers.pop();
	                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
	                stack.push(expr);
	            }

	            // Shift.
	            token = lex();
	            token.prec = prec;
	            stack.push(token);
	            markers.push(lookahead);
	            expr = isolateCoverGrammar(parseUnaryExpression);
	            stack.push(expr);
	        }

	        // Final reduce to clean-up the stack.
	        i = stack.length - 1;
	        expr = stack[i];
	        markers.pop();
	        while (i > 1) {
	            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
	            i -= 2;
	        }

	        return expr;
	    }


	    // ECMA-262 12.13 Conditional Operator

	    function parseConditionalExpression() {
	        var expr, previousAllowIn, consequent, alternate, startToken;

	        startToken = lookahead;

	        expr = inheritCoverGrammar(parseBinaryExpression);
	        if (match('?')) {
	            lex();
	            previousAllowIn = state.allowIn;
	            state.allowIn = true;
	            consequent = isolateCoverGrammar(parseAssignmentExpression);
	            state.allowIn = previousAllowIn;
	            expect(':');
	            alternate = isolateCoverGrammar(parseAssignmentExpression);

	            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
	            isAssignmentTarget = isBindingElement = false;
	        }

	        return expr;
	    }

	    // ECMA-262 14.2 Arrow Function Definitions

	    function parseConciseBody() {
	        if (match('{')) {
	            return parseFunctionSourceElements();
	        }
	        return isolateCoverGrammar(parseAssignmentExpression);
	    }

	    function checkPatternParam(options, param) {
	        var i;
	        switch (param.type) {
	        case Syntax.Identifier:
	            validateParam(options, param, param.name);
	            break;
	        case Syntax.RestElement:
	            checkPatternParam(options, param.argument);
	            break;
	        case Syntax.AssignmentPattern:
	            checkPatternParam(options, param.left);
	            break;
	        case Syntax.ArrayPattern:
	            for (i = 0; i < param.elements.length; i++) {
	                if (param.elements[i] !== null) {
	                    checkPatternParam(options, param.elements[i]);
	                }
	            }
	            break;
	        case Syntax.YieldExpression:
	            break;
	        default:
	            assert(param.type === Syntax.ObjectPattern, 'Invalid type');
	            for (i = 0; i < param.properties.length; i++) {
	                checkPatternParam(options, param.properties[i].value);
	            }
	            break;
	        }
	    }
	    function reinterpretAsCoverFormalsList(expr) {
	        var i, len, param, params, defaults, defaultCount, options, token;

	        defaults = [];
	        defaultCount = 0;
	        params = [expr];

	        switch (expr.type) {
	        case Syntax.Identifier:
	            break;
	        case PlaceHolders.ArrowParameterPlaceHolder:
	            params = expr.params;
	            break;
	        default:
	            return null;
	        }

	        options = {
	            paramSet: {}
	        };

	        for (i = 0, len = params.length; i < len; i += 1) {
	            param = params[i];
	            switch (param.type) {
	            case Syntax.AssignmentPattern:
	                params[i] = param.left;
	                if (param.right.type === Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        throwUnexpectedToken(lookahead);
	                    }
	                    param.right.type = Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	                defaults.push(param.right);
	                ++defaultCount;
	                checkPatternParam(options, param.left);
	                break;
	            default:
	                checkPatternParam(options, param);
	                params[i] = param;
	                defaults.push(null);
	                break;
	            }
	        }

	        if (strict || !state.allowYield) {
	            for (i = 0, len = params.length; i < len; i += 1) {
	                param = params[i];
	                if (param.type === Syntax.YieldExpression) {
	                    throwUnexpectedToken(lookahead);
	                }
	            }
	        }

	        if (options.message === Messages.StrictParamDupe) {
	            token = strict ? options.stricted : options.firstRestricted;
	            throwUnexpectedToken(token, options.message);
	        }

	        if (defaultCount === 0) {
	            defaults = [];
	        }

	        return {
	            params: params,
	            defaults: defaults,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    }

	    function parseArrowFunctionExpression(options, node) {
	        var previousStrict, previousAllowYield, body;

	        if (hasLineTerminator) {
	            tolerateUnexpectedToken(lookahead);
	        }
	        expect('=>');

	        previousStrict = strict;
	        previousAllowYield = state.allowYield;
	        state.allowYield = true;

	        body = parseConciseBody();

	        if (strict && options.firstRestricted) {
	            throwUnexpectedToken(options.firstRestricted, options.message);
	        }
	        if (strict && options.stricted) {
	            tolerateUnexpectedToken(options.stricted, options.message);
	        }

	        strict = previousStrict;
	        state.allowYield = previousAllowYield;

	        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
	    }

	    // ECMA-262 14.4 Yield expression

	    function parseYieldExpression() {
	        var argument, expr, delegate, previousAllowYield;

	        argument = null;
	        expr = new Node();
	        delegate = false;

	        expectKeyword('yield');

	        if (!hasLineTerminator) {
	            previousAllowYield = state.allowYield;
	            state.allowYield = false;
	            delegate = match('*');
	            if (delegate) {
	                lex();
	                argument = parseAssignmentExpression();
	            } else {
	                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
	                    argument = parseAssignmentExpression();
	                }
	            }
	            state.allowYield = previousAllowYield;
	        }

	        return expr.finishYieldExpression(argument, delegate);
	    }

	    // ECMA-262 12.14 Assignment Operators

	    function parseAssignmentExpression() {
	        var token, expr, right, list, startToken;

	        startToken = lookahead;
	        token = lookahead;

	        if (!state.allowYield && matchKeyword('yield')) {
	            return parseYieldExpression();
	        }

	        expr = parseConditionalExpression();

	        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
	            isAssignmentTarget = isBindingElement = false;
	            list = reinterpretAsCoverFormalsList(expr);

	            if (list) {
	                firstCoverInitializedNameError = null;
	                return parseArrowFunctionExpression(list, new WrappingNode(startToken));
	            }

	            return expr;
	        }

	        if (matchAssign()) {
	            if (!isAssignmentTarget) {
	                tolerateError(Messages.InvalidLHSInAssignment);
	            }

	            // ECMA-262 12.1.1
	            if (strict && expr.type === Syntax.Identifier) {
	                if (isRestrictedWord(expr.name)) {
	                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
	                }
	                if (isStrictModeReservedWord(expr.name)) {
	                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);
	                }
	            }

	            if (!match('=')) {
	                isAssignmentTarget = isBindingElement = false;
	            } else {
	                reinterpretExpressionAsPattern(expr);
	            }

	            token = lex();
	            right = isolateCoverGrammar(parseAssignmentExpression);
	            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
	            firstCoverInitializedNameError = null;
	        }

	        return expr;
	    }

	    // ECMA-262 12.15 Comma Operator

	    function parseExpression() {
	        var expr, startToken = lookahead, expressions;

	        expr = isolateCoverGrammar(parseAssignmentExpression);

	        if (match(',')) {
	            expressions = [expr];

	            while (startIndex < length) {
	                if (!match(',')) {
	                    break;
	                }
	                lex();
	                expressions.push(isolateCoverGrammar(parseAssignmentExpression));
	            }

	            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
	        }

	        return expr;
	    }

	    // ECMA-262 13.2 Block

	    function parseStatementListItem() {
	        if (lookahead.type === Token.Keyword) {
	            switch (lookahead.value) {
	            case 'export':
	                if (state.sourceType !== 'module') {
	                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
	                }
	                return parseExportDeclaration();
	            case 'import':
	                if (state.sourceType !== 'module') {
	                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
	                }
	                return parseImportDeclaration();
	            case 'const':
	                return parseLexicalDeclaration({inFor: false});
	            case 'function':
	                return parseFunctionDeclaration(new Node());
	            case 'class':
	                return parseClassDeclaration();
	            }
	        }

	        if (matchKeyword('let') && isLexicalDeclaration()) {
	            return parseLexicalDeclaration({inFor: false});
	        }

	        return parseStatement();
	    }

	    function parseStatementList() {
	        var list = [];
	        while (startIndex < length) {
	            if (match('}')) {
	                break;
	            }
	            list.push(parseStatementListItem());
	        }

	        return list;
	    }

	    function parseBlock() {
	        var block, node = new Node();

	        expect('{');

	        block = parseStatementList();

	        expect('}');

	        return node.finishBlockStatement(block);
	    }

	    // ECMA-262 13.3.2 Variable Statement

	    function parseVariableIdentifier(kind) {
	        var token, node = new Node();

	        token = lex();

	        if (token.type === Token.Keyword && token.value === 'yield') {
	            if (strict) {
	                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
	            } if (!state.allowYield) {
	                throwUnexpectedToken(token);
	            }
	        } else if (token.type !== Token.Identifier) {
	            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
	                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
	            } else {
	                if (strict || token.value !== 'let' || kind !== 'var') {
	                    throwUnexpectedToken(token);
	                }
	            }
	        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
	            tolerateUnexpectedToken(token);
	        }

	        return node.finishIdentifier(token.value);
	    }

	    function parseVariableDeclaration(options) {
	        var init = null, id, node = new Node(), params = [];

	        id = parsePattern(params, 'var');

	        // ECMA-262 12.2.1
	        if (strict && isRestrictedWord(id.name)) {
	            tolerateError(Messages.StrictVarName);
	        }

	        if (match('=')) {
	            lex();
	            init = isolateCoverGrammar(parseAssignmentExpression);
	        } else if (id.type !== Syntax.Identifier && !options.inFor) {
	            expect('=');
	        }

	        return node.finishVariableDeclarator(id, init);
	    }

	    function parseVariableDeclarationList(options) {
	        var opt, list;

	        opt = { inFor: options.inFor };
	        list = [parseVariableDeclaration(opt)];

	        while (match(',')) {
	            lex();
	            list.push(parseVariableDeclaration(opt));
	        }

	        return list;
	    }

	    function parseVariableStatement(node) {
	        var declarations;

	        expectKeyword('var');

	        declarations = parseVariableDeclarationList({ inFor: false });

	        consumeSemicolon();

	        return node.finishVariableDeclaration(declarations);
	    }

	    // ECMA-262 13.3.1 Let and Const Declarations

	    function parseLexicalBinding(kind, options) {
	        var init = null, id, node = new Node(), params = [];

	        id = parsePattern(params, kind);

	        // ECMA-262 12.2.1
	        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
	            tolerateError(Messages.StrictVarName);
	        }

	        if (kind === 'const') {
	            if (!matchKeyword('in') && !matchContextualKeyword('of')) {
	                expect('=');
	                init = isolateCoverGrammar(parseAssignmentExpression);
	            }
	        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {
	            expect('=');
	            init = isolateCoverGrammar(parseAssignmentExpression);
	        }

	        return node.finishVariableDeclarator(id, init);
	    }

	    function parseBindingList(kind, options) {
	        var list = [parseLexicalBinding(kind, options)];

	        while (match(',')) {
	            lex();
	            list.push(parseLexicalBinding(kind, options));
	        }

	        return list;
	    }


	    function tokenizerState() {
	        return {
	            index: index,
	            lineNumber: lineNumber,
	            lineStart: lineStart,
	            hasLineTerminator: hasLineTerminator,
	            lastIndex: lastIndex,
	            lastLineNumber: lastLineNumber,
	            lastLineStart: lastLineStart,
	            startIndex: startIndex,
	            startLineNumber: startLineNumber,
	            startLineStart: startLineStart,
	            lookahead: lookahead,
	            tokenCount: extra.tokens ? extra.tokens.length : 0
	        };
	    }

	    function resetTokenizerState(ts) {
	        index = ts.index;
	        lineNumber = ts.lineNumber;
	        lineStart = ts.lineStart;
	        hasLineTerminator = ts.hasLineTerminator;
	        lastIndex = ts.lastIndex;
	        lastLineNumber = ts.lastLineNumber;
	        lastLineStart = ts.lastLineStart;
	        startIndex = ts.startIndex;
	        startLineNumber = ts.startLineNumber;
	        startLineStart = ts.startLineStart;
	        lookahead = ts.lookahead;
	        if (extra.tokens) {
	            extra.tokens.splice(ts.tokenCount, extra.tokens.length);
	        }
	    }

	    function isLexicalDeclaration() {
	        var lexical, ts;

	        ts = tokenizerState();

	        lex();
	        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||
	            matchKeyword('let') || matchKeyword('yield');

	        resetTokenizerState(ts);

	        return lexical;
	    }

	    function parseLexicalDeclaration(options) {
	        var kind, declarations, node = new Node();

	        kind = lex().value;
	        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');

	        declarations = parseBindingList(kind, options);

	        consumeSemicolon();

	        return node.finishLexicalDeclaration(declarations, kind);
	    }

	    function parseRestElement(params) {
	        var param, node = new Node();

	        lex();

	        if (match('{')) {
	            throwError(Messages.ObjectPatternAsRestParameter);
	        }

	        params.push(lookahead);

	        param = parseVariableIdentifier();

	        if (match('=')) {
	            throwError(Messages.DefaultRestParameter);
	        }

	        if (!match(')')) {
	            throwError(Messages.ParameterAfterRestParameter);
	        }

	        return node.finishRestElement(param);
	    }

	    // ECMA-262 13.4 Empty Statement

	    function parseEmptyStatement(node) {
	        expect(';');
	        return node.finishEmptyStatement();
	    }

	    // ECMA-262 12.4 Expression Statement

	    function parseExpressionStatement(node) {
	        var expr = parseExpression();
	        consumeSemicolon();
	        return node.finishExpressionStatement(expr);
	    }

	    // ECMA-262 13.6 If statement

	    function parseIfStatement(node) {
	        var test, consequent, alternate;

	        expectKeyword('if');

	        expect('(');

	        test = parseExpression();

	        expect(')');

	        consequent = parseStatement();

	        if (matchKeyword('else')) {
	            lex();
	            alternate = parseStatement();
	        } else {
	            alternate = null;
	        }

	        return node.finishIfStatement(test, consequent, alternate);
	    }

	    // ECMA-262 13.7 Iteration Statements

	    function parseDoWhileStatement(node) {
	        var body, test, oldInIteration;

	        expectKeyword('do');

	        oldInIteration = state.inIteration;
	        state.inIteration = true;

	        body = parseStatement();

	        state.inIteration = oldInIteration;

	        expectKeyword('while');

	        expect('(');

	        test = parseExpression();

	        expect(')');

	        if (match(';')) {
	            lex();
	        }

	        return node.finishDoWhileStatement(body, test);
	    }

	    function parseWhileStatement(node) {
	        var test, body, oldInIteration;

	        expectKeyword('while');

	        expect('(');

	        test = parseExpression();

	        expect(')');

	        oldInIteration = state.inIteration;
	        state.inIteration = true;

	        body = parseStatement();

	        state.inIteration = oldInIteration;

	        return node.finishWhileStatement(test, body);
	    }

	    function parseForStatement(node) {
	        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,
	            body, oldInIteration, previousAllowIn = state.allowIn;

	        init = test = update = null;
	        forIn = true;

	        expectKeyword('for');

	        expect('(');

	        if (match(';')) {
	            lex();
	        } else {
	            if (matchKeyword('var')) {
	                init = new Node();
	                lex();

	                state.allowIn = false;
	                declarations = parseVariableDeclarationList({ inFor: true });
	                state.allowIn = previousAllowIn;

	                if (declarations.length === 1 && matchKeyword('in')) {
	                    init = init.finishVariableDeclaration(declarations);
	                    lex();
	                    left = init;
	                    right = parseExpression();
	                    init = null;
	                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
	                    init = init.finishVariableDeclaration(declarations);
	                    lex();
	                    left = init;
	                    right = parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                } else {
	                    init = init.finishVariableDeclaration(declarations);
	                    expect(';');
	                }
	            } else if (matchKeyword('const') || matchKeyword('let')) {
	                init = new Node();
	                kind = lex().value;

	                if (!strict && lookahead.value === 'in') {
	                    init = init.finishIdentifier(kind);
	                    lex();
	                    left = init;
	                    right = parseExpression();
	                    init = null;
	                } else {
	                    state.allowIn = false;
	                    declarations = parseBindingList(kind, {inFor: true});
	                    state.allowIn = previousAllowIn;

	                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
	                        init = init.finishLexicalDeclaration(declarations, kind);
	                        lex();
	                        left = init;
	                        right = parseExpression();
	                        init = null;
	                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
	                        init = init.finishLexicalDeclaration(declarations, kind);
	                        lex();
	                        left = init;
	                        right = parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    } else {
	                        consumeSemicolon();
	                        init = init.finishLexicalDeclaration(declarations, kind);
	                    }
	                }
	            } else {
	                initStartToken = lookahead;
	                state.allowIn = false;
	                init = inheritCoverGrammar(parseAssignmentExpression);
	                state.allowIn = previousAllowIn;

	                if (matchKeyword('in')) {
	                    if (!isAssignmentTarget) {
	                        tolerateError(Messages.InvalidLHSInForIn);
	                    }

	                    lex();
	                    reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = parseExpression();
	                    init = null;
	                } else if (matchContextualKeyword('of')) {
	                    if (!isAssignmentTarget) {
	                        tolerateError(Messages.InvalidLHSInForLoop);
	                    }

	                    lex();
	                    reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                } else {
	                    if (match(',')) {
	                        initSeq = [init];
	                        while (match(',')) {
	                            lex();
	                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
	                        }
	                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
	                    }
	                    expect(';');
	                }
	            }
	        }

	        if (typeof left === 'undefined') {

	            if (!match(';')) {
	                test = parseExpression();
	            }
	            expect(';');

	            if (!match(')')) {
	                update = parseExpression();
	            }
	        }

	        expect(')');

	        oldInIteration = state.inIteration;
	        state.inIteration = true;

	        body = isolateCoverGrammar(parseStatement);

	        state.inIteration = oldInIteration;

	        return (typeof left === 'undefined') ?
	                node.finishForStatement(init, test, update, body) :
	                forIn ? node.finishForInStatement(left, right, body) :
	                    node.finishForOfStatement(left, right, body);
	    }

	    // ECMA-262 13.8 The continue statement

	    function parseContinueStatement(node) {
	        var label = null, key;

	        expectKeyword('continue');

	        // Optimize the most common form: 'continue;'.
	        if (source.charCodeAt(startIndex) === 0x3B) {
	            lex();

	            if (!state.inIteration) {
	                throwError(Messages.IllegalContinue);
	            }

	            return node.finishContinueStatement(null);
	        }

	        if (hasLineTerminator) {
	            if (!state.inIteration) {
	                throwError(Messages.IllegalContinue);
	            }

	            return node.finishContinueStatement(null);
	        }

	        if (lookahead.type === Token.Identifier) {
	            label = parseVariableIdentifier();

	            key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
	                throwError(Messages.UnknownLabel, label.name);
	            }
	        }

	        consumeSemicolon();

	        if (label === null && !state.inIteration) {
	            throwError(Messages.IllegalContinue);
	        }

	        return node.finishContinueStatement(label);
	    }

	    // ECMA-262 13.9 The break statement

	    function parseBreakStatement(node) {
	        var label = null, key;

	        expectKeyword('break');

	        // Catch the very common case first: immediately a semicolon (U+003B).
	        if (source.charCodeAt(lastIndex) === 0x3B) {
	            lex();

	            if (!(state.inIteration || state.inSwitch)) {
	                throwError(Messages.IllegalBreak);
	            }

	            return node.finishBreakStatement(null);
	        }

	        if (hasLineTerminator) {
	            if (!(state.inIteration || state.inSwitch)) {
	                throwError(Messages.IllegalBreak);
	            }
	        } else if (lookahead.type === Token.Identifier) {
	            label = parseVariableIdentifier();

	            key = '$' + label.name;
	            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
	                throwError(Messages.UnknownLabel, label.name);
	            }
	        }

	        consumeSemicolon();

	        if (label === null && !(state.inIteration || state.inSwitch)) {
	            throwError(Messages.IllegalBreak);
	        }

	        return node.finishBreakStatement(label);
	    }

	    // ECMA-262 13.10 The return statement

	    function parseReturnStatement(node) {
	        var argument = null;

	        expectKeyword('return');

	        if (!state.inFunctionBody) {
	            tolerateError(Messages.IllegalReturn);
	        }

	        // 'return' followed by a space and an identifier is very common.
	        if (source.charCodeAt(lastIndex) === 0x20) {
	            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
	                argument = parseExpression();
	                consumeSemicolon();
	                return node.finishReturnStatement(argument);
	            }
	        }

	        if (hasLineTerminator) {
	            // HACK
	            return node.finishReturnStatement(null);
	        }

	        if (!match(';')) {
	            if (!match('}') && lookahead.type !== Token.EOF) {
	                argument = parseExpression();
	            }
	        }

	        consumeSemicolon();

	        return node.finishReturnStatement(argument);
	    }

	    // ECMA-262 13.11 The with statement

	    function parseWithStatement(node) {
	        var object, body;

	        if (strict) {
	            tolerateError(Messages.StrictModeWith);
	        }

	        expectKeyword('with');

	        expect('(');

	        object = parseExpression();

	        expect(')');

	        body = parseStatement();

	        return node.finishWithStatement(object, body);
	    }

	    // ECMA-262 13.12 The switch statement

	    function parseSwitchCase() {
	        var test, consequent = [], statement, node = new Node();

	        if (matchKeyword('default')) {
	            lex();
	            test = null;
	        } else {
	            expectKeyword('case');
	            test = parseExpression();
	        }
	        expect(':');

	        while (startIndex < length) {
	            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
	                break;
	            }
	            statement = parseStatementListItem();
	            consequent.push(statement);
	        }

	        return node.finishSwitchCase(test, consequent);
	    }

	    function parseSwitchStatement(node) {
	        var discriminant, cases, clause, oldInSwitch, defaultFound;

	        expectKeyword('switch');

	        expect('(');

	        discriminant = parseExpression();

	        expect(')');

	        expect('{');

	        cases = [];

	        if (match('}')) {
	            lex();
	            return node.finishSwitchStatement(discriminant, cases);
	        }

	        oldInSwitch = state.inSwitch;
	        state.inSwitch = true;
	        defaultFound = false;

	        while (startIndex < length) {
	            if (match('}')) {
	                break;
	            }
	            clause = parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    throwError(Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }

	        state.inSwitch = oldInSwitch;

	        expect('}');

	        return node.finishSwitchStatement(discriminant, cases);
	    }

	    // ECMA-262 13.14 The throw statement

	    function parseThrowStatement(node) {
	        var argument;

	        expectKeyword('throw');

	        if (hasLineTerminator) {
	            throwError(Messages.NewlineAfterThrow);
	        }

	        argument = parseExpression();

	        consumeSemicolon();

	        return node.finishThrowStatement(argument);
	    }

	    // ECMA-262 13.15 The try statement

	    function parseCatchClause() {
	        var param, params = [], paramMap = {}, key, i, body, node = new Node();

	        expectKeyword('catch');

	        expect('(');
	        if (match(')')) {
	            throwUnexpectedToken(lookahead);
	        }

	        param = parsePattern(params);
	        for (i = 0; i < params.length; i++) {
	            key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                tolerateError(Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }

	        // ECMA-262 12.14.1
	        if (strict && isRestrictedWord(param.name)) {
	            tolerateError(Messages.StrictCatchVariable);
	        }

	        expect(')');
	        body = parseBlock();
	        return node.finishCatchClause(param, body);
	    }

	    function parseTryStatement(node) {
	        var block, handler = null, finalizer = null;

	        expectKeyword('try');

	        block = parseBlock();

	        if (matchKeyword('catch')) {
	            handler = parseCatchClause();
	        }

	        if (matchKeyword('finally')) {
	            lex();
	            finalizer = parseBlock();
	        }

	        if (!handler && !finalizer) {
	            throwError(Messages.NoCatchOrFinally);
	        }

	        return node.finishTryStatement(block, handler, finalizer);
	    }

	    // ECMA-262 13.16 The debugger statement

	    function parseDebuggerStatement(node) {
	        expectKeyword('debugger');

	        consumeSemicolon();

	        return node.finishDebuggerStatement();
	    }

	    // 13 Statements

	    function parseStatement() {
	        var type = lookahead.type,
	            expr,
	            labeledBody,
	            key,
	            node;

	        if (type === Token.EOF) {
	            throwUnexpectedToken(lookahead);
	        }

	        if (type === Token.Punctuator && lookahead.value === '{') {
	            return parseBlock();
	        }
	        isAssignmentTarget = isBindingElement = true;
	        node = new Node();

	        if (type === Token.Punctuator) {
	            switch (lookahead.value) {
	            case ';':
	                return parseEmptyStatement(node);
	            case '(':
	                return parseExpressionStatement(node);
	            default:
	                break;
	            }
	        } else if (type === Token.Keyword) {
	            switch (lookahead.value) {
	            case 'break':
	                return parseBreakStatement(node);
	            case 'continue':
	                return parseContinueStatement(node);
	            case 'debugger':
	                return parseDebuggerStatement(node);
	            case 'do':
	                return parseDoWhileStatement(node);
	            case 'for':
	                return parseForStatement(node);
	            case 'function':
	                return parseFunctionDeclaration(node);
	            case 'if':
	                return parseIfStatement(node);
	            case 'return':
	                return parseReturnStatement(node);
	            case 'switch':
	                return parseSwitchStatement(node);
	            case 'throw':
	                return parseThrowStatement(node);
	            case 'try':
	                return parseTryStatement(node);
	            case 'var':
	                return parseVariableStatement(node);
	            case 'while':
	                return parseWhileStatement(node);
	            case 'with':
	                return parseWithStatement(node);
	            default:
	                break;
	            }
	        }

	        expr = parseExpression();

	        // ECMA-262 12.12 Labelled Statements
	        if ((expr.type === Syntax.Identifier) && match(':')) {
	            lex();

	            key = '$' + expr.name;
	            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
	                throwError(Messages.Redeclaration, 'Label', expr.name);
	            }

	            state.labelSet[key] = true;
	            labeledBody = parseStatement();
	            delete state.labelSet[key];
	            return node.finishLabeledStatement(expr, labeledBody);
	        }

	        consumeSemicolon();

	        return node.finishExpressionStatement(expr);
	    }

	    // ECMA-262 14.1 Function Definition

	    function parseFunctionSourceElements() {
	        var statement, body = [], token, directive, firstRestricted,
	            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,
	            node = new Node();

	        expect('{');

	        while (startIndex < length) {
	            if (lookahead.type !== Token.StringLiteral) {
	                break;
	            }
	            token = lookahead;

	            statement = parseStatementListItem();
	            body.push(statement);
	            if (statement.expression.type !== Syntax.Literal) {
	                // this is not directive
	                break;
	            }
	            directive = source.slice(token.start + 1, token.end - 1);
	            if (directive === 'use strict') {
	                strict = true;
	                if (firstRestricted) {
	                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
	                }
	            } else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }

	        oldLabelSet = state.labelSet;
	        oldInIteration = state.inIteration;
	        oldInSwitch = state.inSwitch;
	        oldInFunctionBody = state.inFunctionBody;

	        state.labelSet = {};
	        state.inIteration = false;
	        state.inSwitch = false;
	        state.inFunctionBody = true;

	        while (startIndex < length) {
	            if (match('}')) {
	                break;
	            }
	            body.push(parseStatementListItem());
	        }

	        expect('}');

	        state.labelSet = oldLabelSet;
	        state.inIteration = oldInIteration;
	        state.inSwitch = oldInSwitch;
	        state.inFunctionBody = oldInFunctionBody;

	        return node.finishBlockStatement(body);
	    }

	    function validateParam(options, param, name) {
	        var key = '$' + name;
	        if (strict) {
	            if (isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = Messages.StrictParamDupe;
	            }
	        } else if (!options.firstRestricted) {
	            if (isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = Messages.StrictParamName;
	            } else if (isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = Messages.StrictReservedWord;
	            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = Messages.StrictParamDupe;
	            }
	        }
	        options.paramSet[key] = true;
	    }

	    function parseParam(options) {
	        var token, param, params = [], i, def;

	        token = lookahead;
	        if (token.value === '...') {
	            param = parseRestElement(params);
	            validateParam(options, param.argument, param.argument.name);
	            options.params.push(param);
	            options.defaults.push(null);
	            return false;
	        }

	        param = parsePatternWithDefault(params);
	        for (i = 0; i < params.length; i++) {
	            validateParam(options, params[i], params[i].value);
	        }

	        if (param.type === Syntax.AssignmentPattern) {
	            def = param.right;
	            param = param.left;
	            ++options.defaultCount;
	        }

	        options.params.push(param);
	        options.defaults.push(def);

	        return !match(')');
	    }

	    function parseParams(firstRestricted) {
	        var options;

	        options = {
	            params: [],
	            defaultCount: 0,
	            defaults: [],
	            firstRestricted: firstRestricted
	        };

	        expect('(');

	        if (!match(')')) {
	            options.paramSet = {};
	            while (startIndex < length) {
	                if (!parseParam(options)) {
	                    break;
	                }
	                expect(',');
	            }
	        }

	        expect(')');

	        if (options.defaultCount === 0) {
	            options.defaults = [];
	        }

	        return {
	            params: options.params,
	            defaults: options.defaults,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    }

	    function parseFunctionDeclaration(node, identifierIsOptional) {
	        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,
	            isGenerator, previousAllowYield;

	        previousAllowYield = state.allowYield;

	        expectKeyword('function');

	        isGenerator = match('*');
	        if (isGenerator) {
	            lex();
	        }

	        if (!identifierIsOptional || !match('(')) {
	            token = lookahead;
	            id = parseVariableIdentifier();
	            if (strict) {
	                if (isRestrictedWord(token.value)) {
	                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
	                }
	            } else {
	                if (isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = Messages.StrictFunctionName;
	                } else if (isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = Messages.StrictReservedWord;
	                }
	            }
	        }

	        state.allowYield = !isGenerator;
	        tmp = parseParams(firstRestricted);
	        params = tmp.params;
	        defaults = tmp.defaults;
	        stricted = tmp.stricted;
	        firstRestricted = tmp.firstRestricted;
	        if (tmp.message) {
	            message = tmp.message;
	        }


	        previousStrict = strict;
	        body = parseFunctionSourceElements();
	        if (strict && firstRestricted) {
	            throwUnexpectedToken(firstRestricted, message);
	        }
	        if (strict && stricted) {
	            tolerateUnexpectedToken(stricted, message);
	        }

	        strict = previousStrict;
	        state.allowYield = previousAllowYield;

	        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
	    }

	    function parseFunctionExpression() {
	        var token, id = null, stricted, firstRestricted, message, tmp,
	            params = [], defaults = [], body, previousStrict, node = new Node(),
	            isGenerator, previousAllowYield;

	        previousAllowYield = state.allowYield;

	        expectKeyword('function');

	        isGenerator = match('*');
	        if (isGenerator) {
	            lex();
	        }

	        state.allowYield = !isGenerator;
	        if (!match('(')) {
	            token = lookahead;
	            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();
	            if (strict) {
	                if (isRestrictedWord(token.value)) {
	                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
	                }
	            } else {
	                if (isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = Messages.StrictFunctionName;
	                } else if (isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = Messages.StrictReservedWord;
	                }
	            }
	        }

	        tmp = parseParams(firstRestricted);
	        params = tmp.params;
	        defaults = tmp.defaults;
	        stricted = tmp.stricted;
	        firstRestricted = tmp.firstRestricted;
	        if (tmp.message) {
	            message = tmp.message;
	        }

	        previousStrict = strict;
	        body = parseFunctionSourceElements();
	        if (strict && firstRestricted) {
	            throwUnexpectedToken(firstRestricted, message);
	        }
	        if (strict && stricted) {
	            tolerateUnexpectedToken(stricted, message);
	        }
	        strict = previousStrict;
	        state.allowYield = previousAllowYield;

	        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
	    }

	    // ECMA-262 14.5 Class Definitions

	    function parseClassBody() {
	        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;

	        classBody = new Node();

	        expect('{');
	        body = [];
	        while (!match('}')) {
	            if (match(';')) {
	                lex();
	            } else {
	                method = new Node();
	                token = lookahead;
	                isStatic = false;
	                computed = match('[');
	                if (match('*')) {
	                    lex();
	                } else {
	                    key = parseObjectPropertyKey();
	                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
	                        token = lookahead;
	                        isStatic = true;
	                        computed = match('[');
	                        if (match('*')) {
	                            lex();
	                        } else {
	                            key = parseObjectPropertyKey();
	                        }
	                    }
	                }
	                method = tryParseMethodDefinition(token, key, computed, method);
	                if (method) {
	                    method['static'] = isStatic; // jscs:ignore requireDotNotation
	                    if (method.kind === 'init') {
	                        method.kind = 'method';
	                    }
	                    if (!isStatic) {
	                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
	                            if (method.kind !== 'method' || !method.method || method.value.generator) {
	                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
	                            }
	                            if (hasConstructor) {
	                                throwUnexpectedToken(token, Messages.DuplicateConstructor);
	                            } else {
	                                hasConstructor = true;
	                            }
	                            method.kind = 'constructor';
	                        }
	                    } else {
	                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
	                            throwUnexpectedToken(token, Messages.StaticPrototype);
	                        }
	                    }
	                    method.type = Syntax.MethodDefinition;
	                    delete method.method;
	                    delete method.shorthand;
	                    body.push(method);
	                } else {
	                    throwUnexpectedToken(lookahead);
	                }
	            }
	        }
	        lex();
	        return classBody.finishClassBody(body);
	    }

	    function parseClassDeclaration(identifierIsOptional) {
	        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
	        strict = true;

	        expectKeyword('class');

	        if (!identifierIsOptional || lookahead.type === Token.Identifier) {
	            id = parseVariableIdentifier();
	        }

	        if (matchKeyword('extends')) {
	            lex();
	            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
	        }
	        classBody = parseClassBody();
	        strict = previousStrict;

	        return classNode.finishClassDeclaration(id, superClass, classBody);
	    }

	    function parseClassExpression() {
	        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
	        strict = true;

	        expectKeyword('class');

	        if (lookahead.type === Token.Identifier) {
	            id = parseVariableIdentifier();
	        }

	        if (matchKeyword('extends')) {
	            lex();
	            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
	        }
	        classBody = parseClassBody();
	        strict = previousStrict;

	        return classNode.finishClassExpression(id, superClass, classBody);
	    }

	    // ECMA-262 15.2 Modules

	    function parseModuleSpecifier() {
	        var node = new Node();

	        if (lookahead.type !== Token.StringLiteral) {
	            throwError(Messages.InvalidModuleSpecifier);
	        }
	        return node.finishLiteral(lex());
	    }

	    // ECMA-262 15.2.3 Exports

	    function parseExportSpecifier() {
	        var exported, local, node = new Node(), def;
	        if (matchKeyword('default')) {
	            // export {default} from 'something';
	            def = new Node();
	            lex();
	            local = def.finishIdentifier('default');
	        } else {
	            local = parseVariableIdentifier();
	        }
	        if (matchContextualKeyword('as')) {
	            lex();
	            exported = parseNonComputedProperty();
	        }
	        return node.finishExportSpecifier(local, exported);
	    }

	    function parseExportNamedDeclaration(node) {
	        var declaration = null,
	            isExportFromIdentifier,
	            src = null, specifiers = [];

	        // non-default export
	        if (lookahead.type === Token.Keyword) {
	            // covers:
	            // export var f = 1;
	            switch (lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = parseLexicalDeclaration({inFor: false});
	                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = parseStatementListItem();
	                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
	            }
	        }

	        expect('{');
	        while (!match('}')) {
	            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
	            specifiers.push(parseExportSpecifier());
	            if (!match('}')) {
	                expect(',');
	                if (match('}')) {
	                    break;
	                }
	            }
	        }
	        expect('}');

	        if (matchContextualKeyword('from')) {
	            // covering:
	            // export {default} from 'foo';
	            // export {foo} from 'foo';
	            lex();
	            src = parseModuleSpecifier();
	            consumeSemicolon();
	        } else if (isExportFromIdentifier) {
	            // covering:
	            // export {default}; // missing fromClause
	            throwError(lookahead.value ?
	                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
	        } else {
	            // cover
	            // export {foo};
	            consumeSemicolon();
	        }
	        return node.finishExportNamedDeclaration(declaration, specifiers, src);
	    }

	    function parseExportDefaultDeclaration(node) {
	        var declaration = null,
	            expression = null;

	        // covers:
	        // export default ...
	        expectKeyword('default');

	        if (matchKeyword('function')) {
	            // covers:
	            // export default function foo () {}
	            // export default function () {}
	            declaration = parseFunctionDeclaration(new Node(), true);
	            return node.finishExportDefaultDeclaration(declaration);
	        }
	        if (matchKeyword('class')) {
	            declaration = parseClassDeclaration(true);
	            return node.finishExportDefaultDeclaration(declaration);
	        }

	        if (matchContextualKeyword('from')) {
	            throwError(Messages.UnexpectedToken, lookahead.value);
	        }

	        // covers:
	        // export default {};
	        // export default [];
	        // export default (1 + 2);
	        if (match('{')) {
	            expression = parseObjectInitializer();
	        } else if (match('[')) {
	            expression = parseArrayInitializer();
	        } else {
	            expression = parseAssignmentExpression();
	        }
	        consumeSemicolon();
	        return node.finishExportDefaultDeclaration(expression);
	    }

	    function parseExportAllDeclaration(node) {
	        var src;

	        // covers:
	        // export * from 'foo';
	        expect('*');
	        if (!matchContextualKeyword('from')) {
	            throwError(lookahead.value ?
	                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
	        }
	        lex();
	        src = parseModuleSpecifier();
	        consumeSemicolon();

	        return node.finishExportAllDeclaration(src);
	    }

	    function parseExportDeclaration() {
	        var node = new Node();
	        if (state.inFunctionBody) {
	            throwError(Messages.IllegalExportDeclaration);
	        }

	        expectKeyword('export');

	        if (matchKeyword('default')) {
	            return parseExportDefaultDeclaration(node);
	        }
	        if (match('*')) {
	            return parseExportAllDeclaration(node);
	        }
	        return parseExportNamedDeclaration(node);
	    }

	    // ECMA-262 15.2.2 Imports

	    function parseImportSpecifier() {
	        // import {<foo as bar>} ...;
	        var local, imported, node = new Node();

	        imported = parseNonComputedProperty();
	        if (matchContextualKeyword('as')) {
	            lex();
	            local = parseVariableIdentifier();
	        }

	        return node.finishImportSpecifier(local, imported);
	    }

	    function parseNamedImports() {
	        var specifiers = [];
	        // {foo, bar as bas}
	        expect('{');
	        while (!match('}')) {
	            specifiers.push(parseImportSpecifier());
	            if (!match('}')) {
	                expect(',');
	                if (match('}')) {
	                    break;
	                }
	            }
	        }
	        expect('}');
	        return specifiers;
	    }

	    function parseImportDefaultSpecifier() {
	        // import <foo> ...;
	        var local, node = new Node();

	        local = parseNonComputedProperty();

	        return node.finishImportDefaultSpecifier(local);
	    }

	    function parseImportNamespaceSpecifier() {
	        // import <* as foo> ...;
	        var local, node = new Node();

	        expect('*');
	        if (!matchContextualKeyword('as')) {
	            throwError(Messages.NoAsAfterImportNamespace);
	        }
	        lex();
	        local = parseNonComputedProperty();

	        return node.finishImportNamespaceSpecifier(local);
	    }

	    function parseImportDeclaration() {
	        var specifiers = [], src, node = new Node();

	        if (state.inFunctionBody) {
	            throwError(Messages.IllegalImportDeclaration);
	        }

	        expectKeyword('import');

	        if (lookahead.type === Token.StringLiteral) {
	            // import 'foo';
	            src = parseModuleSpecifier();
	        } else {

	            if (match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(parseNamedImports());
	            } else if (match('*')) {
	                // import * as foo
	                specifiers.push(parseImportNamespaceSpecifier());
	            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
	                // import foo
	                specifiers.push(parseImportDefaultSpecifier());
	                if (match(',')) {
	                    lex();
	                    if (match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(parseImportNamespaceSpecifier());
	                    } else if (match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(parseNamedImports());
	                    } else {
	                        throwUnexpectedToken(lookahead);
	                    }
	                }
	            } else {
	                throwUnexpectedToken(lex());
	            }

	            if (!matchContextualKeyword('from')) {
	                throwError(lookahead.value ?
	                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
	            }
	            lex();
	            src = parseModuleSpecifier();
	        }

	        consumeSemicolon();
	        return node.finishImportDeclaration(specifiers, src);
	    }

	    // ECMA-262 15.1 Scripts

	    function parseScriptBody() {
	        var statement, body = [], token, directive, firstRestricted;

	        while (startIndex < length) {
	            token = lookahead;
	            if (token.type !== Token.StringLiteral) {
	                break;
	            }

	            statement = parseStatementListItem();
	            body.push(statement);
	            if (statement.expression.type !== Syntax.Literal) {
	                // this is not directive
	                break;
	            }
	            directive = source.slice(token.start + 1, token.end - 1);
	            if (directive === 'use strict') {
	                strict = true;
	                if (firstRestricted) {
	                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
	                }
	            } else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }

	        while (startIndex < length) {
	            statement = parseStatementListItem();
	            /* istanbul ignore if */
	            if (typeof statement === 'undefined') {
	                break;
	            }
	            body.push(statement);
	        }
	        return body;
	    }

	    function parseProgram() {
	        var body, node;

	        peek();
	        node = new Node();

	        body = parseScriptBody();
	        return node.finishProgram(body, state.sourceType);
	    }

	    function filterTokenLocation() {
	        var i, entry, token, tokens = [];

	        for (i = 0; i < extra.tokens.length; ++i) {
	            entry = extra.tokens[i];
	            token = {
	                type: entry.type,
	                value: entry.value
	            };
	            if (entry.regex) {
	                token.regex = {
	                    pattern: entry.regex.pattern,
	                    flags: entry.regex.flags
	                };
	            }
	            if (extra.range) {
	                token.range = entry.range;
	            }
	            if (extra.loc) {
	                token.loc = entry.loc;
	            }
	            tokens.push(token);
	        }

	        extra.tokens = tokens;
	    }

	    function tokenize(code, options, delegate) {
	        var toString,
	            tokens;

	        toString = String;
	        if (typeof code !== 'string' && !(code instanceof String)) {
	            code = toString(code);
	        }

	        source = code;
	        index = 0;
	        lineNumber = (source.length > 0) ? 1 : 0;
	        lineStart = 0;
	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;
	        length = source.length;
	        lookahead = null;
	        state = {
	            allowIn: true,
	            allowYield: true,
	            labelSet: {},
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            lastCommentStart: -1,
	            curlyStack: []
	        };

	        extra = {};

	        // Options matching.
	        options = options || {};

	        // Of course we collect tokens here.
	        options.tokens = true;
	        extra.tokens = [];
	        extra.tokenValues = [];
	        extra.tokenize = true;
	        extra.delegate = delegate;

	        // The following two fields are necessary to compute the Regex tokens.
	        extra.openParenToken = -1;
	        extra.openCurlyToken = -1;

	        extra.range = (typeof options.range === 'boolean') && options.range;
	        extra.loc = (typeof options.loc === 'boolean') && options.loc;

	        if (typeof options.comment === 'boolean' && options.comment) {
	            extra.comments = [];
	        }
	        if (typeof options.tolerant === 'boolean' && options.tolerant) {
	            extra.errors = [];
	        }

	        try {
	            peek();
	            if (lookahead.type === Token.EOF) {
	                return extra.tokens;
	            }

	            lex();
	            while (lookahead.type !== Token.EOF) {
	                try {
	                    lex();
	                } catch (lexError) {
	                    if (extra.errors) {
	                        recordError(lexError);
	                        // We have to break on the first error
	                        // to avoid infinite loops.
	                        break;
	                    } else {
	                        throw lexError;
	                    }
	                }
	            }

	            tokens = extra.tokens;
	            if (typeof extra.errors !== 'undefined') {
	                tokens.errors = extra.errors;
	            }
	        } catch (e) {
	            throw e;
	        } finally {
	            extra = {};
	        }
	        return tokens;
	    }

	    function parse(code, options) {
	        var program, toString;

	        toString = String;
	        if (typeof code !== 'string' && !(code instanceof String)) {
	            code = toString(code);
	        }

	        source = code;
	        index = 0;
	        lineNumber = (source.length > 0) ? 1 : 0;
	        lineStart = 0;
	        startIndex = index;
	        startLineNumber = lineNumber;
	        startLineStart = lineStart;
	        length = source.length;
	        lookahead = null;
	        state = {
	            allowIn: true,
	            allowYield: true,
	            labelSet: {},
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            lastCommentStart: -1,
	            curlyStack: [],
	            sourceType: 'script'
	        };
	        strict = false;

	        extra = {};
	        if (typeof options !== 'undefined') {
	            extra.range = (typeof options.range === 'boolean') && options.range;
	            extra.loc = (typeof options.loc === 'boolean') && options.loc;
	            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

	            if (extra.loc && options.source !== null && options.source !== undefined) {
	                extra.source = toString(options.source);
	            }

	            if (typeof options.tokens === 'boolean' && options.tokens) {
	                extra.tokens = [];
	            }
	            if (typeof options.comment === 'boolean' && options.comment) {
	                extra.comments = [];
	            }
	            if (typeof options.tolerant === 'boolean' && options.tolerant) {
	                extra.errors = [];
	            }
	            if (extra.attachComment) {
	                extra.range = true;
	                extra.comments = [];
	                extra.bottomRightStack = [];
	                extra.trailingComments = [];
	                extra.leadingComments = [];
	            }
	            if (options.sourceType === 'module') {
	                // very restrictive condition for now
	                state.sourceType = options.sourceType;
	                strict = true;
	            }
	        }

	        try {
	            program = parseProgram();
	            if (typeof extra.comments !== 'undefined') {
	                program.comments = extra.comments;
	            }
	            if (typeof extra.tokens !== 'undefined') {
	                filterTokenLocation();
	                program.tokens = extra.tokens;
	            }
	            if (typeof extra.errors !== 'undefined') {
	                program.errors = extra.errors;
	            }
	        } catch (e) {
	            throw e;
	        } finally {
	            extra = {};
	        }

	        return program;
	    }

	    // Sync with *.json manifests.
	    exports.version = '2.7.3';

	    exports.tokenize = tokenize;

	    exports.parse = parse;

	    // Deep copy.
	    /* istanbul ignore next */
	    exports.Syntax = (function () {
	        var name, types = {};

	        if (typeof Object.create === 'function') {
	            types = Object.create(null);
	        }

	        for (name in Syntax) {
	            if (Syntax.hasOwnProperty(name)) {
	                types[name] = Syntax[name];
	            }
	        }

	        if (typeof Object.freeze === 'function') {
	            Object.freeze(types);
	        }

	        return types;
	    }());

	}));
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 108 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function BasicEvaluatedExpression() {
		this.range = null;
	}
	module.exports = BasicEvaluatedExpression;

	BasicEvaluatedExpression.prototype.isNull = function() {
		return !!this.null;
	};
	BasicEvaluatedExpression.prototype.isString = function() {
		return Object.prototype.hasOwnProperty.call(this, "string");
	};
	BasicEvaluatedExpression.prototype.isNumber = function() {
		return Object.prototype.hasOwnProperty.call(this, "number");
	};
	BasicEvaluatedExpression.prototype.isBoolean = function() {
		return Object.prototype.hasOwnProperty.call(this, "bool");
	};
	BasicEvaluatedExpression.prototype.isRegExp = function() {
		return Object.prototype.hasOwnProperty.call(this, "regExp");
	};
	BasicEvaluatedExpression.prototype.isConditional = function() {
		return Object.prototype.hasOwnProperty.call(this, "options");
	};
	BasicEvaluatedExpression.prototype.isArray = function() {
		return Object.prototype.hasOwnProperty.call(this, "items");
	};
	BasicEvaluatedExpression.prototype.isConstArray = function() {
		return Object.prototype.hasOwnProperty.call(this, "array");
	};
	BasicEvaluatedExpression.prototype.isIdentifier = function() {
		return Object.prototype.hasOwnProperty.call(this, "identifier");
	};
	BasicEvaluatedExpression.prototype.isWrapped = function() {
		return Object.prototype.hasOwnProperty.call(this, "prefix") || Object.prototype.hasOwnProperty.call(this, "postfix");
	};
	BasicEvaluatedExpression.prototype.asBool = function() {
		if(this.isBoolean()) return this.bool;
		else if(this.isNull()) return false;
		else if(this.isString()) return !!this.string;
		else if(this.isNumber()) return !!this.number;
		else if(this.isRegExp()) return true;
		else if(this.isArray()) return true;
		else if(this.isConstArray()) return true;
		else if(this.isWrapped()) return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;
		return undefined;
	};
	BasicEvaluatedExpression.prototype.set = function(value) {
		if(typeof value === "string") return this.setString(value);
		if(typeof value === "number") return this.setNumber(value);
		if(typeof value === "boolean") return this.setBoolean(value);
		if(value === null) return this.setNull();
		if(value instanceof RegExp) return this.setRegExp(value);
		if(Array.isArray(value)) return this.setArray(value);
		return this;
	};
	BasicEvaluatedExpression.prototype.setString = function(str) {
		if(str === null)
			delete this.string;
		else
			this.string = str;
		return this;
	};
	BasicEvaluatedExpression.prototype.setNull = function() {
		this.null = true;
		return this;
	};
	BasicEvaluatedExpression.prototype.setNumber = function(num) {
		if(num === null)
			delete this.number;
		else
			this.number = num;
		return this;
	};
	BasicEvaluatedExpression.prototype.setBoolean = function(bool) {
		if(bool === null)
			delete this.bool;
		else
			this.bool = bool;
		return this;
	};
	BasicEvaluatedExpression.prototype.setRegExp = function(regExp) {
		if(regExp === null)
			delete this.regExp;
		else
			this.regExp = regExp;
		return this;
	};
	BasicEvaluatedExpression.prototype.setIdentifier = function(identifier) {
		if(identifier === null)
			delete this.identifier;
		else
			this.identifier = identifier;
		return this;
	};
	BasicEvaluatedExpression.prototype.setWrapped = function(prefix, postfix) {
		this.prefix = prefix;
		this.postfix = postfix;
		return this;
	};
	BasicEvaluatedExpression.prototype.unsetWrapped = function() {
		delete this.prefix;
		delete this.postfix;
		return this;
	};
	BasicEvaluatedExpression.prototype.setOptions = function(options) {
		if(options === null)
			delete this.options;
		else
			this.options = options;
		return this;
	};
	BasicEvaluatedExpression.prototype.setItems = function(items) {
		if(items === null)
			delete this.items;
		else
			this.items = items;
		return this;
	};
	BasicEvaluatedExpression.prototype.setArray = function(array) {
		if(array === null)
			delete this.array;
		else
			this.array = array;
		return this;
	};
	BasicEvaluatedExpression.prototype.addOptions = function(options) {
		if(!this.options) this.options = [];
		options.forEach(function(item) {
			this.options.push(item);
		}, this);
		return this;
	};
	BasicEvaluatedExpression.prototype.setRange = function(range) {
		this.range = range;
		return this;
	};


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Tapable = __webpack_require__(37);
	var createInnerCallback = __webpack_require__(110);

	function Resolver(fileSystem) {
		Tapable.call(this);
		this.fileSystem = fileSystem;
	}
	module.exports = Resolver;

	Resolver.prototype = Object.create(Tapable.prototype);

	Resolver.prototype.resolveSync = function resolveSync(context, request) {
		var err, result, sync = false;
		this.resolve(context, request, function(e, r) {
			err = e;
			result = r;
			sync = true;
		});
		if(!sync) throw new Error("Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!");
		if(err) throw err;
		return result;
	};

	Resolver.prototype.resolve = function resolve(context, request, callback) {
		if(typeof request === "string") request = this.parse(request);
		this.applyPlugins("resolve", context, request);
		var obj = {
			path: context,
			request: request.path,
			query: request.query,
			directory: request.directory
		};
		function onResolved(err, result) {
			if(err) return callback(err);
			return callback(null, result.path === false ? false : result.path + (result.query || ""));
		}
		onResolved.log = callback.log;
		onResolved.missing = callback.missing;
		if(request.module) return this.doResolve("module", obj, onResolved);
		if(request.directory) return this.doResolve("directory", obj, onResolved);
		return this.doResolve(["file", "directory"], obj, onResolved);
	};

	Resolver.prototype.doResolve = function doResolve(types, request, callback, noError) {
		if(!Array.isArray(types)) types = [types];
		var stackLine = types.join(" or ") + ": (" + request.path + ") " +
			(request.request || "") + (request.query || "") +
			(request.directory ? " directory" : "") +
			(request.module ? " module" : "");
		var newStack = [stackLine];
		if(callback.stack) {
			newStack = callback.stack.concat(newStack);
			if(callback.stack.indexOf(stackLine) >= 0) {
				// Prevent recursion
				var recursionError = new Error("Recursion in resolving\nStack:\n  " + newStack.join("\n  "));
				recursionError.recursion = true;
				if(callback.log) callback.log("abort resolving because of recursion");
				return callback(recursionError);
			}
		}
		this.applyPlugins("resolve-step", types, request);
		var localMissing = [];
		var missing = callback.missing ? {
			push: function(item) {
				callback.missing.push(item);
				localMissing.push(item);
			}
		} : localMissing;
		var log = [];
		function writeLog(msg) {
			log.push(msg);
		}
		function logAsString() {
			return log.join("\n");
		}
		var currentRequestString = request.request ? request.request + " in " + request.path : request.path;
		if(types.length == 1 && !noError) {
			// If only one type, we can pass the error.
			return this.applyPluginsParallelBailResult(types[0], request, createInnerCallback(function innerCallback(err, result) {
				if(callback.log) {
					for(var i = 0; i < log.length; i++)
						callback.log(log[i]);
				}
				if(err) return callback(err);
				if(result) return callback(null, result);
				if(types[0] === "result") return callback(null, request);
				var error = new Error("Cannot resolve " + types[0] + " '" + request.request + "' in " + request.path);
				error.details = logAsString();
				error.missing = localMissing;
				return callback(error);
			}, {
				log: writeLog,
				missing: missing,
				stack: newStack
			}, "resolve " + types[0] + " " + currentRequestString));
		}
		// For multiple type we list the errors in the details although some of them are not important
		this.forEachBail(types, function(type, callback) {
			this.applyPluginsParallelBailResult(type, request, createInnerCallback(function(err, result) {
				if(!err && result) return callback(result);
				if (err) {
					(err.message || "").split("\n").forEach(function(line) {
						log.push("  " + line);
					});
				}
				callback();
			}, {
				log: writeLog,
				missing: missing,
				stack: newStack
			}, "resolve " + type));
		}.bind(this), function(result) {
			if(callback.log) {
				callback.log("resolve '" + types.join("' or '") + "' " + currentRequestString);
				for(var i = 0; i < log.length; i++)
					callback.log("  " + log[i]);
			}
			if(noError && !result) return callback();
			if(result) return callback(null, result);
			var error = new Error("Cannot resolve '" + types.join("' or '") + "' " + currentRequestString);
			error.details = logAsString();
			error.missing = localMissing;
			return callback(error);
		});
	};

	Resolver.prototype.parse = function parse(identifier) {
		if(identifier === "") return null;
		var part = {
			path: null,
			query: null,
			module: false,
			directory: false,
			file: false
		};
		var idxQuery = identifier.indexOf("?");
		if(idxQuery == 0) {
			part.query = identifier;
		} else if(idxQuery > 0) {
			part.path = identifier.slice(0, idxQuery);
			part.query = identifier.slice(idxQuery);
		} else {
			part.path = identifier;
		}
		if(part.path) {
			part.module = this.isModule(part.path);
			if(part.directory = this.isDirectory(part.path)) {
				part.path = part.path.substr(0, part.path.length - 1);
			}
		}
		return part;
	};

	var notModuleRegExp = /^\.$|^\.[\\\/]|^\.\.$|^\.\.[\/\\]|^\/|^[A-Z]:[\\\/]/i;
	Resolver.prototype.isModule = function isModule(path) {
		return !notModuleRegExp.test(path);
	};

	var directoryRegExp = /[\/\\]$/i;
	Resolver.prototype.isDirectory = function isDirectory(path) {
		return directoryRegExp.test(path);
	};

	Resolver.prototype.join = __webpack_require__(111);

	Resolver.prototype.normalize = __webpack_require__(112);

	Resolver.prototype.forEachBail = function(array, iterator, callback) {
		if(array.length == 0) return callback();
		var currentPos = array.length;
		var currentError, currentResult;
		var done = [];
		for(var i = 0; i < array.length; i++) {
			var itCb = (function(i) {
				return function() {
					if(i >= currentPos) return; // ignore
					var args = Array.prototype.slice.call(arguments);
					done.push(i);
					if(args.length > 0) {
						currentPos = i + 1;
						done = done.filter(function(item) {
							return item <= i;
						});
						currentResult = args;
					}
					if(done.length == currentPos) {
						callback.apply(null, currentResult);
						currentPos = 0;
					}
				};
			}(i));
			iterator(array[i], itCb);
			if(currentPos == 0) break;
		}
	};



/***/ },
/* 110 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function createInnerCallback(callback, options, message) {
		var log = options.log;
		if(!log) {
			if(options.stack !== callback.stack) {
				function callbackWrapper() {
					return callback.apply(this, arguments);
				}
				callbackWrapper.stack = options.stack;
				callbackWrapper.missing = options.missing;
			}
			return callback;
		}
		function loggingCallbackWrapper() {
			log(message);
			for(var i = 0; i < theLog.length; i++)
				log("  " + theLog[i]);
			return callback.apply(this, arguments);
		}
		var theLog = [];
		loggingCallbackWrapper.log = function writeLog(msg) {
			theLog.push(msg);
		};
		loggingCallbackWrapper.stack = options.stack;
		loggingCallbackWrapper.missing = options.missing;
		return loggingCallbackWrapper;
	}

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var normalize = __webpack_require__(112);

	var absoluteWinRegExp = /^[A-Z]:([\\\/]|$)/i;
	var absoluteNixRegExp = /^\//i;

	module.exports = function join(path, request) {
		if(request == "") return normalize(path);
		if(absoluteWinRegExp.test(request)) return normalize(request.replace(/\//g, "\\"));
		if(absoluteNixRegExp.test(request)) return normalize(request);
		if(path == "/") return normalize(path + request);
		if(absoluteWinRegExp.test(path)) return normalize(path + "\\" + request.replace(/\//g, "\\"));
		if(absoluteNixRegExp.test(path)) return normalize(path + "/" + request);
		return normalize(path + "/" + request);
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	var doubleSlashWinRegExp = /\\+/g;
	var doubleSlashNixRegExp = /\/+/g;
	var currentDirectoryWinMiddleRegExp = /\\(\.\\)+/;
	var currentDirectoryWinEndRegExp = /\\\.$/;
	var parentDirectoryWinMiddleRegExp = /\\+[^\\]+\\+\.\.\\/;
	var parentDirectoryWinEndRegExp1 = /([A-Z]:\\)\\*[^\\]+\\+\.\.$/i;
	var parentDirectoryWinEndRegExp2 = /\\+[^\\]+\\+\.\.$/;
	var currentDirectoryNixMiddleRegExp = /\/+(\.\/)+/;
	var currentDirectoryNixEndRegExp1 = /^\/+\.$/;
	var currentDirectoryNixEndRegExp2 = /\/+\.$/;
	var parentDirectoryNixMiddleRegExp = /(^|\/[^\/]+)\/+\.\.\/+/;
	var parentDirectoryNixEndRegExp1 = /^\/[^\/]+\/+\.\.$/;
	var parentDirectoryNixEndRegExp2 = /\/+[^\/]+\/+\.\.$/;
	var parentDirectoryNixEndRegExp3 = /^\/+\.\.$/;

	// RegExp magic :)

	module.exports = function normalize(path) {
		while(currentDirectoryWinMiddleRegExp.test(path))
			path = path.replace(currentDirectoryWinMiddleRegExp, "\\");
		path = path.replace(currentDirectoryWinEndRegExp, "");
		while(parentDirectoryWinMiddleRegExp.test(path))
			path = path.replace(parentDirectoryWinMiddleRegExp, "\\");
		path = path.replace(parentDirectoryWinEndRegExp1, "$1");
		path = path.replace(parentDirectoryWinEndRegExp2, "");

		while(currentDirectoryNixMiddleRegExp.test(path))
			path = path.replace(currentDirectoryNixMiddleRegExp, "/");
		path = path.replace(currentDirectoryNixEndRegExp1, "/");
		path = path.replace(currentDirectoryNixEndRegExp2, "");
		while(parentDirectoryNixMiddleRegExp.test(path))
			path = path.replace(parentDirectoryNixMiddleRegExp, "/");
		path = path.replace(parentDirectoryNixEndRegExp1, "/");
		path = path.replace(parentDirectoryNixEndRegExp2, "");
		path = path.replace(parentDirectoryNixEndRegExp3, "/");

		return path.replace(doubleSlashWinRegExp, "\\").replace(doubleSlashNixRegExp, "/");
	};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(39);

	var Tapable = __webpack_require__(37);
	var NormalModule = __webpack_require__(114);
	var RawModule = __webpack_require__(124);
	var LoadersList = __webpack_require__(125);

	function NormalModuleFactory(context, resolvers, parser, options) {
		Tapable.call(this);
		this.resolvers = resolvers;
		this.parser = parser;
		this.loaders = new LoadersList(options.loaders);
		this.preLoaders = new LoadersList(options.preLoaders);
		this.postLoaders = new LoadersList(options.postLoaders);
		this.context = context || "";
		this.plugin("factory", function() {
			var _this = this;
			return function(result, callback) {
				var resolver = _this.applyPluginsWaterfall("resolver", null);

				// Ignored
				if(!resolver) return callback();

				resolver(result, function onDoneResolving(err, data) {
					if(err) return callback(err);

					// Ignored
					if(!data) return callback();

					// direct module
					if(typeof data.source === "function")
						return callback(null, data);

					_this.applyPluginsAsyncWaterfall("after-resolve", data, function(err, result) {
						if(err) return callback(err);

						// Ignored
						if(!result) return callback();

						var createdModule = _this.applyPluginsBailResult("create-module", result);
						if(!createdModule) {
							createdModule = new NormalModule(
								result.request,
								result.userRequest,
								result.rawRequest,
								result.loaders,
								result.resource,
								result.parser
							);
						}

						createdModule = _this.applyPluginsWaterfall("module", createdModule);

						return callback(null, createdModule);
					});
				});
			};
		});
		this.plugin("resolver", function() {
			var _this = this;
			return function(data, callback) {
				var context = data.context;
				var request = data.request;

				var noAutoLoaders = /^-?!/.test(request);
				var noPrePostAutoLoaders = /^!!/.test(request);
				var noPostAutoLoaders = /^-!/.test(request);
				var elements = request.replace(/^-?!+/, "").replace(/!!+/g, "!").split("!");
				var resource = elements.pop();

				async.parallel([
					function(callback) {
						_this.resolveRequestArray(context, elements, _this.resolvers.loader, callback);
					},
					function(callback) {
						if(resource === "" || resource[0] === "?")
							return callback(null, resource);
						_this.resolvers.normal.resolve(context, resource, callback);
					}
				], function(err, results) {
					if(err) return callback(err);
					var loaders = results[0];
					resource = results[1];

					if(resource === false)
						return callback(null,
							new RawModule("/* (ignored) */",
								"ignored " + context + " " + request,
								request + " (ignored)")); // ignored

					var userRequest = loaders.concat([resource]).join("!");

					if(noPrePostAutoLoaders)
						return onDoneResolving();
					if(noAutoLoaders) {
						async.parallel([
							_this.resolveRequestArray.bind(_this, context, noPostAutoLoaders ? [] : _this.postLoaders.match(resource), _this.resolvers.loader),
							_this.resolveRequestArray.bind(_this, context, _this.preLoaders.match(resource), _this.resolvers.loader)
						], function(err, results) {
							if(err) return callback(err);
							loaders = results[0].concat(loaders).concat(results[1]);
							onDoneResolving();
						});
					} else {
						async.parallel([
							_this.resolveRequestArray.bind(_this, context, noPostAutoLoaders ? [] : _this.postLoaders.match(resource), _this.resolvers.loader),
							_this.resolveRequestArray.bind(_this, context, _this.loaders.match(resource), _this.resolvers.loader),
							_this.resolveRequestArray.bind(_this, context, _this.preLoaders.match(resource), _this.resolvers.loader)
						], function(err, results) {
							if(err) return callback(err);
							loaders = results[0].concat(loaders).concat(results[1]).concat(results[2]);
							onDoneResolving();
						});
					}

					function onDoneResolving() {
						callback(null, {
							context: context,
							request: loaders.concat([resource]).join("!"),
							userRequest: userRequest,
							rawRequest: request,
							loaders: loaders,
							resource: resource,
							parser: _this.parser
						});
					}
				});
			};
		});
	}
	module.exports = NormalModuleFactory;

	NormalModuleFactory.prototype = Object.create(Tapable.prototype);
	NormalModuleFactory.prototype.constructor = NormalModuleFactory;

	NormalModuleFactory.prototype.create = function(context, dependency, callback) {
		var _this = this;
		context = context || this.context;
		var request = dependency.request;
		_this.applyPluginsAsyncWaterfall("before-resolve", {
			context: context,
			request: request,
			dependency: dependency
		}, function(err, result) {
			if(err) return callback(err);

			// Ignored
			if(!result) return callback();

			var factory = _this.applyPluginsWaterfall("factory", null);

			// Ignored
			if(!factory) return callback();

			factory(result, callback);

		});
	};

	NormalModuleFactory.prototype.resolveRequestArray = function resolveRequestArray(context, array, resolver, callback) {
		if(array.length === 0) return callback(null, []);
		async.map(array, function(item, callback) {
			if(item === "" || item[0] === "?")
				return callback(null, item);
			resolver.resolve(context, item, callback);
		}, callback);
	};


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);
	var Module = __webpack_require__(44);
	var NormalModuleMixin = __webpack_require__(115);
	var SourceMapSource = __webpack_require__(116);
	var OriginalSource = __webpack_require__(79);
	var RawSource = __webpack_require__(69);
	var ReplaceSource = __webpack_require__(47);
	var CachedSource = __webpack_require__(87);
	var ModuleParseError = __webpack_require__(121);
	var TemplateArgumentDependency = __webpack_require__(122);
	var AsyncDependenciesBlock = __webpack_require__(123);

	function NormalModule(request, userRequest, rawRequest, loaders, resource, parser) {
		Module.call(this);
		this.request = request;
		this.userRequest = userRequest;
		this.rawRequest = rawRequest;
		this.parser = parser;
		NormalModuleMixin.call(this, loaders, resource);
		this.meta = {};
		this.assets = {};
		this.built = false;
		this._cachedSource = null;
	}
	module.exports = NormalModule;

	NormalModule.prototype = Object.create(Module.prototype);
	NormalModuleMixin.mixin(NormalModule.prototype);

	NormalModule.prototype.identifier = function() {
		return this.request;
	};

	NormalModule.prototype.readableIdentifier = function(requestShortener) {
		return requestShortener.shorten(this.userRequest);
	};

	function contextify(options, request) {
		return request.split("!").map(function(r) {
			var rp = path.relative(options.context, r);
			if(path.sep === "\\")
				rp = rp.replace(/\\/g, "/");
			if(rp.indexOf("../") !== 0)
				rp = "./" + rp;
			return rp;
		}).join("!");
	}

	NormalModule.prototype.libIdent = function(options) {
		return contextify(options, this.userRequest);
	};

	NormalModule.prototype.fillLoaderContext = function fillLoaderContext(loaderContext, options, compilation) {
		loaderContext.webpack = true;
		loaderContext.sourceMap = !!this.useSourceMap;
		loaderContext.emitFile = function(name, content, sourceMap) {
			if(typeof sourceMap === "string") {
				this.assets[name] = new OriginalSource(content, sourceMap);
			} else if(sourceMap) {
				this.assets[name] = new SourceMapSource(content, name, sourceMap);
			} else {
				this.assets[name] = new RawSource(content);
			}
		}.bind(this);
		loaderContext._module = this;
		loaderContext._compilation = compilation;
		loaderContext._compiler = compilation.compiler;
		loaderContext.fs = compilation.compiler.inputFileSystem;
		compilation.applyPlugins("normal-module-loader", loaderContext, this);
	};

	NormalModule.prototype.disconnect = function disconnect() {
		this.built = false;
		Module.prototype.disconnect.call(this);
	};

	NormalModule.prototype.build = function build(options, compilation, resolver, fs, callback) {
		this.buildTimestamp = new Date().getTime();
		this.built = true;
		return this.doBuild(options, compilation, resolver, fs, function(err) {
			if(err) return callback(err);
			this.dependencies.length = 0;
			this.variables.length = 0;
			this.blocks.length = 0;
			this._cachedSource = null;
			if(options.module && options.module.noParse) {
				if(Array.isArray(options.module.noParse)) {
					if(options.module.noParse.some(function(regExp) {
							return typeof regExp === "string" ?
								this.request.indexOf(regExp) === 0 :
								regExp.test(this.request);
						}, this)) return callback();
				} else if(typeof options.module.noParse === "string" ?
					this.request.indexOf(options.module.noParse) === 0 :
					options.module.noParse.test(this.request)) {
					return callback();
				}
			}
			try {
				this.parser.parse(this._source.source(), {
					current: this,
					module: this,
					compilation: compilation,
					options: options
				});
			} catch(e) {
				var source = this._source.source();
				this._source = null;
				return callback(new ModuleParseError(this, source, e));
			}
			return callback();
		}.bind(this));
	};

	NormalModule.prototype.source = function(dependencyTemplates, outputOptions, requestShortener) {
		var hash = __webpack_require__(88).createHash("md5");
		this.updateHash(hash);
		hash = hash.digest("hex");
		if(this._cachedSource && this._cachedSource.hash === hash) {
			return this._cachedSource.source;
		}
		var _source = this._source;
		if(!_source) return new RawSource("throw new Error('No source available');");
		var source = new ReplaceSource(_source);
		this._cachedSource = {
			source: source,
			hash: hash
		};
		var topLevelBlock = this;

		function doDep(dep) {
			var template = dependencyTemplates.get(dep.constructor);
			if(!template) throw new Error("No template for dependency: " + dep.constructor.name);
			template.apply(dep, source, outputOptions, requestShortener, dependencyTemplates);
		}

		function doVariable(vars, variable) {
			var name = variable.name;
			var expr = variable.expressionSource(dependencyTemplates, outputOptions, requestShortener);
			vars.push({
				name: name,
				expression: expr
			});
		}

		function doBlock(block) {
			block.dependencies.forEach(doDep);
			block.blocks.forEach(doBlock);
			if(block.variables.length > 0) {
				var vars = [];
				block.variables.forEach(doVariable.bind(null, vars));
				var varNames = [];
				var varExpressions = [];
				var varStartCode = "";
				var varEndCode = "";

				function emitFunction() {
					if(varNames.length === 0) return;

					varStartCode += "/* WEBPACK VAR INJECTION */(function(" + varNames.join(", ") + ") {";
					// exports === this in the topLevelBlock, but exports do compress better...
					varEndCode = (topLevelBlock === block ? "}.call(exports, " : "}.call(this, ") +
						varExpressions.map(function(e) {
							return e.source();
						}).join(", ") + "))" + varEndCode;

					varNames.length = 0;
					varExpressions.length = 0;
				}
				vars.forEach(function(v) {
					if(varNames.indexOf(v.name) >= 0) emitFunction();
					varNames.push(v.name);
					varExpressions.push(v.expression);
				});
				emitFunction();
				var start = block.range ? block.range[0] : 0;
				var end = block.range ? block.range[1] : _source.size();
				if(varStartCode) source.insert(start + 0.5, varStartCode);
				if(varEndCode) source.insert(end + 0.5, "\n/* WEBPACK VAR INJECTION */" + varEndCode);
			}
		}
		doBlock(this);
		return new CachedSource(source);
	};

	NormalModule.prototype.needRebuild = function needRebuild(fileTimestamps, contextTimestamps) {
		var timestamp = 0;
		this.fileDependencies.forEach(function(file) {
			var ts = fileTimestamps[file];
			if(!ts) timestamp = Infinity;
			if(ts > timestamp) timestamp = ts;
		});
		this.contextDependencies.forEach(function(context) {
			var ts = contextTimestamps[context];
			if(!ts) timestamp = Infinity;
			if(ts > timestamp) timestamp = ts;
		});
		return timestamp >= this.buildTimestamp;
	};

	NormalModule.prototype.size = function() {
		return this._source ? this._source.size() : -1;
	};

	NormalModule.prototype.updateHash = function(hash) {
		if(this._source) {
			hash.update("source");
			this._source.updateHash(hash);
		} else
			hash.update("null");
		hash.update("meta");
		hash.update(JSON.stringify(this.meta));
		Module.prototype.updateHash.call(this, hash);
	};

	NormalModule.prototype.getSourceHash = function() {
		if(!this._source) return "";
		var hash = __webpack_require__(88).createHash("md5");
		hash.update(this._source.source());
		return hash.digest("hex");
	};

	NormalModule.prototype.getAllModuleDependencies = function() {
		var list = [];

		function doDep(dep) {
			if(dep.module && list.indexOf(dep.module) < 0)
				list.push(dep.module);
		}

		function doVariable(variable) {
			variable.dependencies.forEach(doDep);
		}

		function doBlock(block) {
			block.variables.forEach(doVariable);
			block.dependencies.forEach(doDep);
			block.blocks.forEach(doBlock);
		}
		doBlock(this);
		return list;
	};

	NormalModule.prototype.createTemplate = function(keepModules, roots) {
		roots.sort(function(a, b) {
			var ia = a.identifier();
			var ib = b.identifier();
			if(ia < ib) return -1;
			if(ib < ia) return 1;
			return 0;
		});
		var template = new NormalModule("", "", "", [], "", null);
		template._source = this._source;
		template.built = this.built;
		template.templateModules = keepModules;
		template._templateOrigin = this;
		template.readableIdentifier = function() {
			return "template of " + this._templateOrigin.id + " referencing " + keepModules.map(function(m) {
				return m.id;
			}).join(", ");
		};
		template.identifier = function() {
			var array = roots.map(function(m) {
				return m.identifier();
			});
			array.sort();
			return array.join("|");
		};
		var args = template.arguments = [];

		function doDeps(deps) {
			return deps.map(function(dep) {
				if(dep.module && keepModules.indexOf(dep.module) < 0) {
					var argName = "__webpack_module_template_argument_" + args.length + "__";
					args.push(argName);
					return new TemplateArgumentDependency(argName, dep);
				} else {
					return dep;
				}
			});
		}

		function doBlock(block, newBlock) {
			block.variables.forEach(function(variable) {
				var newDependencies = doDeps(variable.dependencies);
				newBlock.addVariable(variable.name, variable.expression, newDependencies);
			});
			newBlock.dependencies = doDeps(block.dependencies);
			block.blocks.forEach(function(childBlock) {
				var newChildBlock = new AsyncDependenciesBlock(childBlock.name, childBlock.module, childBlock.loc);
				newBlock.addBlock(newChildBlock);
				doBlock(childBlock, newChildBlock);
			});
		}
		doBlock(this, template);
		return template;
	};

	NormalModule.prototype.getTemplateArguments = function(keepModules) {
		var list = [];

		function doDep(dep) {
			if(dep.module && keepModules.indexOf(dep.module) < 0)
				list.push(dep.module);
		}

		function doVariable(variable) {
			variable.dependencies.forEach(doDep);
		}

		function doBlock(block) {
			block.variables.forEach(doVariable);
			block.dependencies.forEach(doDep);
			block.blocks.forEach(doBlock);
		}
		doBlock(this);
		return list;
	};


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RawSource = __webpack_require__(69);
	var OriginalSource = __webpack_require__(79);
	var SourceMapSource = __webpack_require__(116);
	var LineToLineMappedSource = __webpack_require__(117);
	var path = __webpack_require__(36); // TODO refactor

	var ModuleBuildError = __webpack_require__(118);
	var ModuleError = __webpack_require__(119);
	var ModuleWarning = __webpack_require__(120);

	function utf8BufferToString(buf) {
		var str = buf.toString("utf-8");
		if(str.charCodeAt(0) === 0xFEFF) {
			return str.substr(1);
		} else {
			return str;
		}
	}

	function NormalModuleMixin(loaders, resource) {
		this.resource = resource;
		this.loaders = loaders;
		var resourcePath = this.splitQuery(this.resource)[0];
		this.context = resourcePath ? path.dirname(resourcePath) : null;
		this.fileDependencies = [];
		this.contextDependencies = [];
		this.warnings = [];
		this.errors = [];
		this.error = null;
		this._source = null;
	}
	module.exports = NormalModuleMixin;

	NormalModuleMixin.mixin = function(pt) {
		for(var name in NormalModuleMixin.prototype)
			pt[name] = NormalModuleMixin.prototype[name];
	};

	NormalModuleMixin.prototype.splitQuery = function splitQuery(req) {
		var i = req.indexOf("?");
		if(i < 0) return [req, ""];
		return [req.substr(0, i), req.substr(i)];
	};

	NormalModuleMixin.prototype.doBuild = function doBuild(options, moduleContext, resolver, fs, callback) {
		var splitQuery = this.splitQuery.bind(this);
		var module = this;
		this.cacheable = true;

		// Prepare context
		var loaders = [];
		function addLoaderToList(loader) {
			var l = splitQuery(loader);
			loaders.push({
				request: loader,
				path: l[0],
				query: l[1],
				module: null
			});
		}
		this.loaders.forEach(addLoaderToList);
		var loaderContextCacheable;
		var loaderContext = {
			version: 1,
			context: this.context,
			loaders: loaders,
			loaderIndex: 0,
			resource: this.resource,
			resourcePath: splitQuery(this.resource)[0],
			resourceQuery: this.resource ? splitQuery(this.resource)[1] || null : undefined,
			emitWarning: function(warning) {
				this.warnings.push(new ModuleWarning(this, warning));
			}.bind(this),
			emitError: function(error) {
				this.errors.push(new ModuleError(this, error));
			}.bind(this),
			exec: function(code, filename) {
				if(false) {
					// TODO: check if in enhanced-require
					var Module = require("module");
					var m = new Module(filename, module);
					m.paths = Module._nodeModulePaths(loaderContext.context);
					m.filename = filename;
					m._compile(code, filename);
					return m.exports;
				} else {
					throw new Error("loaderContext.exec is not supported");
				}
			},
			resolve: function(context, request, callback) {
				resolver.resolve(context, request, callback);
			},
			resolveSync: function(context, request) {
				return resolver.resolveSync(context, request);
			},
			cacheable: function(flag) {
				loaderContextCacheable = flag !== false;
			},
			dependency: function(file) {
				this.fileDependencies.push(file);
			}.bind(this),
			addDependency: function(file) {
				this.fileDependencies.push(file);
			}.bind(this),
			addContextDependency: function(context) {
				this.contextDependencies.push(context);
			}.bind(this),
			clearDependencies: function() {
				this.fileDependencies.length = 0;
				this.contextDependencies.length = 0;
				module.cacheable = true;
			}.bind(this),
			inputValue: undefined,
			value: null,
			options: options,
			debug: options.debug
		};
		this.fillLoaderContext(loaderContext, options, moduleContext);
		if(options.loader) for(var key in options.loader)
			loaderContext[key] = options.loader[key];


		function runSyncOrAsync(fn, context, args, callback) {
			var isSync = true;
			var isDone = false;
			var isError = false; // internal error
			var reportedError = false;
			if(!context.async) context.async = function async() {
				if(isDone) {
					if(reportedError) return; // ignore
					throw new Error("async(): The callback was already called.");
				}
				isSync = false;
				return context.callback;
			};
			context.callback = function() {
				if(isDone) {
					if(reportedError) return; // ignore
					throw new Error("callback(): The callback was already called.");
				}
				isDone = true;
				isSync = false;
				try {
					callback.apply(null, arguments);
				} catch(e) {
					isError = true;
					throw e;
				}
			};
			try {
				var result = (function WEBPACK_CORE_LOADER_EXECUTION() { return fn.apply(context, args) }());
				if(isSync) {
					isDone = true;
					if(result === undefined)
						return callback();
					return callback(null, result);
				}
			} catch(e) {
				if(isError) throw e;
				if(isDone) {
					// loader is already "done", so we cannot use the callback function
					// for better debugging we print the error on the console
					if(typeof e === "object" && e.stack) console.error(e.stack);
					else console.error(e);
					return;
				}
				isDone = true;
				reportedError = true;
				callback(e);
			}

		}

		// Load and pitch loaders
		(function loadPitch() {
			var l = loaderContext.loaders[loaderContext.loaderIndex];
			if(!l) {
				return onLoadPitchDone.call(this);
			}
			if(l.module) {
				loaderContext.loaderIndex++;
				return loadPitch.call(this);
			}
			if(false) {
				if(require.supportQuery) {
					l.module = require(l.request);
				} else {
					try {
						l.module = require(l.path);
					} catch (e) {
						// it is possible for node to choke on a require if the FD descriptor
						// limit has been reached. give it a chance to recover.
						if (e instanceof Error && e.code === 'EMFILE') {
							if (typeof setImmediate === 'function') {
								// node >= 0.9.0
								return setImmediate(loadPitch.bind(this));
							} else  {
								// node < 0.9.0
								return process.nextTick(loadPitch.bind(this));
							}
						}
						return callback(e)
					}
				}
			} else if(typeof __webpack_require_loader__ === "function") {
				l.module = __webpack_require_loader__(l.request);
			} else {
				return callback(new Error("Cannot load loader, __webpack_require_loader__ not provided."));
			}
			if(typeof l.module !== "function")
				return callback(new Error("Loader " + l.request + " didn't return a function"));
			var pitchedLoaders = [];
			var remaining = [];
			for(var i = 0; i < loaderContext.loaderIndex; i++)
				pitchedLoaders.push(loaderContext.loaders[i].request);
			for(i = loaderContext.loaderIndex + 1; i < loaderContext.loaders.length; i++)
				remaining.push(loaderContext.loaders[i].request);
			remaining.push(loaderContext.resource);
			if(typeof l.module.pitch !== "function") return loadPitch.call(this);
			loaderContextCacheable = false;
			var privateLoaderContext = Object.create(loaderContext);
			privateLoaderContext.query = l.query;
			runSyncOrAsync(l.module.pitch, privateLoaderContext, [remaining.join("!"), pitchedLoaders.join("!"), l.data = {}], function(err) {
				if(err) return onModuleBuildFailed.call(this, err);
				if(!loaderContextCacheable) this.cacheable = false;
				var args = Array.prototype.slice.call(arguments, 1);
				loaderContext.resourcePath = privateLoaderContext.resourcePath;
				loaderContext.resourceQuery = privateLoaderContext.resourceQuery;
				loaderContext.resource = privateLoaderContext.resource;
				loaderContext.loaderIndex = privateLoaderContext.loaderIndex;
				if(args.length > 0) {
					nextLoader.apply(this, [null].concat(args));
				} else {
					loadPitch.call(this);
				}
			}.bind(this));
		}.call(this));

		var resourceBuffer;
		function onLoadPitchDone() {
			loaderContext.loaderIndex = loaderContext.loaders.length;
			var request = [];
			for(var i = 0; i < loaderContext.loaders.length; i++)
				request.push(loaderContext.loaders[i].request);
			request.push(loaderContext.resource);
			loaderContext.request = request.join("!");
			var resourcePath = loaderContext.resourcePath;
			loaderContextCacheable = true;
			if(resourcePath) {
				loaderContext.addDependency(resourcePath);
				fs.readFile(resourcePath, function(err, buffer) {
					if(err) return nextLoader(err);
					if(module.lineToLine)
						resourceBuffer = buffer;
					nextLoader(null, buffer);
				});
			} else
				nextLoader(null, null);
		}

		function nextLoader(err/*, paramBuffer1, param2, ...*/) {
			if(!loaderContextCacheable) module.cacheable = false;
			var args = Array.prototype.slice.call(arguments, 1);
			if(err) {
				// a loader emitted an error
				return onModuleBuildFailed.call(module, err);
			}
			if(loaderContext.loaderIndex === 0) {
				if(Buffer.isBuffer(args[0]))
					args[0] = utf8BufferToString(args[0]);
				return onModuleBuild.apply(module, args);
			}
			loaderContext.loaderIndex--;
			var l = loaderContext.loaders[loaderContext.loaderIndex];
			if(!l.module) return nextLoader.apply(null, [null].concat(args));
			var privateLoaderContext = Object.create(loaderContext);
			privateLoaderContext.data = l.data;
			privateLoaderContext.inputValue = loaderContext.inputValue;
			privateLoaderContext.query = l.query;
			if(!l.module.raw && Buffer.isBuffer(args[0])) {
				args[0] = utf8BufferToString(args[0]);
			} else if(l.module.raw && typeof args[0] === "string") {
				args[0] = new Buffer(args[0], "utf-8");
			}
			loaderContextCacheable = false;
			runSyncOrAsync(l.module, privateLoaderContext, args, function() {
				loaderContext.inputValue = privateLoaderContext.value;
				nextLoader.apply(null, arguments);
			});
		}


		function onModuleBuild(source, sourceMap) {
			if(!Buffer.isBuffer(source) && typeof source !== "string")
				return onModuleBuildFailed.call(this, new Error("Final loader didn't return a Buffer or String"));
			if(this.identifier && this.lineToLine && resourceBuffer) {
				this._source = new LineToLineMappedSource(source, this.identifier(),
					resourceBuffer.toString("utf-8"));
			} else if(this.identifier && this.useSourceMap && sourceMap) {
				this._source = new SourceMapSource(source, this.identifier(), sourceMap);
			} else if(this.identifier) {
				this._source = new OriginalSource(source, this.identifier());
			} else {
				this._source = new RawSource(source);
			}
			return callback();
		}

		function onModuleBuildFailed(err) {
			this.error = err;
			return callback(new ModuleBuildError(this, err));
		}
	};

	NormalModuleMixin.prototype.fillLoaderContext = function fillLoaderContext() {};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceMapConsumer = __webpack_require__(49).SourceMapConsumer;
	var SourceMapGenerator = __webpack_require__(49).SourceMapGenerator;
	var SourceListMap = __webpack_require__(60).SourceListMap;
	var fromStringWithSourceMap = __webpack_require__(60).fromStringWithSourceMap;
	var Source = __webpack_require__(48);

	function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap) {
		Source.call(this);
		this._value = value;
		this._name = name;
		this._sourceMap = sourceMap;
		this._originalSource = originalSource;
		this._innerSourceMap = innerSourceMap;
	}
	module.exports = SourceMapSource;

	SourceMapSource.prototype = Object.create(Source.prototype);
	SourceMapSource.prototype.constructor = SourceMapSource;

	SourceMapSource.prototype.source = function() {
		return this._value;
	};

	__webpack_require__(68)(SourceMapSource.prototype);

	SourceMapSource.prototype.node = function(options) {
		var innerSourceMap = this._innerSourceMap;
		var sourceMap = this._sourceMap;
		if(innerSourceMap) {
			innerSourceMap = new SourceMapConsumer(innerSourceMap);
			sourceMap = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));
			sourceMap.setSourceContent(this._name, this._originalSource);
			sourceMap.applySourceMap(innerSourceMap, this._name);
			sourceMap = sourceMap.toJSON();
		}
		return SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));
	};

	SourceMapSource.prototype.listMap = function(options) {
		if(options.module === false)
			return new SourceListMap(this._value, this._name, this._value);
		return fromStringWithSourceMap(this._value, typeof this._sourceMap === "string" ? JSON.parse(this._sourceMap) : this._sourceMap);
	};

	SourceMapSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
		if(this._originalSource)
			hash.update(this._originalSource);
	};


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(49).SourceNode;
	var SourceListMap = __webpack_require__(60).SourceListMap;
	var Source = __webpack_require__(48);

	function LineToLineMappedSource(value, name, originalSource) {
		Source.call(this);
		this._value = value;
		this._name = name;
		this._originalSource = originalSource;
	}

	module.exports = LineToLineMappedSource;

	LineToLineMappedSource.prototype = Object.create(Source.prototype);
	LineToLineMappedSource.prototype.constructor = LineToLineMappedSource;

	LineToLineMappedSource.prototype.source = function() {
		return this._value;
	};

	__webpack_require__(68)(LineToLineMappedSource.prototype);

	LineToLineMappedSource.prototype.node = function(options) {
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) {
				return new SourceNode(idx+1, 0, name,
					(line + (idx != lines.length-1 ? "\n" : ""))
				);
			})
		);
		node.setSourceContent(name, this._originalSource);
		return node;
	};

	LineToLineMappedSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value, this._name, this._originalSource)
	};

	LineToLineMappedSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
		hash.update(this._originalSource);
	};


/***/ },
/* 118 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var loaderFlag = "WEBPACK_CORE_LOADER_EXECUTION";
	function ModuleBuildError(module, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleBuildError);
		this.name = "ModuleBuildError";
		this.message = "Module build failed: ";
		if(err !== null && typeof err === "object") {
			if(typeof err.stack === "string" && err.stack) {
				var stack = err.stack.split("\n");
				for(var i = 0; i < stack.length; i++)
					if(stack[i].indexOf(loaderFlag) >= 0)
						stack.length = i;
				stack = stack.join("\n");
				if(!err.hideStack) {
					this.message += stack;
				} else {
					this.details = stack;
					if(typeof err.message === "string" && err.message) {
						this.message += err.message;
					} else {
						this.message += err;
					}
				}
			} else if(typeof err.message === "string" && err.message) {
				this.message += err.message;
			} else {
				this.message += err;
			}
		}
		this.module = module;
		this.error = err;
	}
	module.exports = ModuleBuildError;

	ModuleBuildError.prototype = Object.create(Error.prototype);


/***/ },
/* 119 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleError(module, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleError);
		this.name = "ModuleError";
		this.module = module;
		this.message = err;
		this.error = err;
	}
	module.exports = ModuleError;

	ModuleError.prototype = Object.create(Error.prototype);


/***/ },
/* 120 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleWarning(module, warning) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleWarning);
		this.name = "ModuleWarning";
		this.module = module;
		this.message = warning;
		this.warning = warning;
	}
	module.exports = ModuleWarning;

	ModuleWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 121 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleParseError(module, source, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleParseError);
		this.name = "ModuleParseError";
		this.message = "Module parse failed: " + module.request + " " + err.message;
		this.message += "\nYou may need an appropriate loader to handle this file type.";
		if(typeof err.lineNumber === "number") {
			if(/[\0\u0001\u0002\u0003\u0004\u0005\u0006\u0007]/.test(source)) { // binary file
				this.message += "\n(Source code omitted for this binary file)";
			} else {
				source = source.split("\n");
				this.message += "\n| " + source.slice(Math.max(0, err.lineNumber - 3), err.lineNumber + 2).join("\n| ");
			}
		} else {
			this.message += "\n" + err.stack;
		}
		this.module = module;
		this.error = err;
	}
	module.exports = ModuleParseError;

	ModuleParseError.prototype = Object.create(Error.prototype);


/***/ },
/* 122 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function TemplateArgumentDependency(name, dep) {
		this.name = name;
		this.dep = dep;
	}
	module.exports = TemplateArgumentDependency;

	TemplateArgumentDependency.prototype.constructor = TemplateArgumentDependency;
	TemplateArgumentDependency.prototype.type = "template argument";

	TemplateArgumentDependency.prototype.updateHash = function(hash) {
		hash.update(this.name);
	};

	TemplateArgumentDependency.Template = function TemplateArgumentDependencyTemplate() {};

	TemplateArgumentDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener, dependencyTemplates) {
		var d = dep.dep;
		var template = dependencyTemplates.get(d.constructor);
		if(!template) throw new Error("No template for dependency: " + d.constructor.name);
		if(!template.applyAsTemplateArgument) throw new Error("Template cannot be applied as TemplateArgument: " + d.constructor.name);
		return template.applyAsTemplateArgument(dep.name, d, source, outputOptions, requestShortener, dependencyTemplates);
	};


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DependenciesBlock = __webpack_require__(45);

	function AsyncDependenciesBlock(name, module, loc) {
		DependenciesBlock.call(this);
		this.chunkName = name;
		this.chunks = null;
		this.module = module;
		this.loc = loc;

		Object.defineProperty(this, "chunk", {
			get: function() {
				throw new Error("`chunk` was been renamed to `chunks` and is now an array");
			},
			set: function() {
				throw new Error("`chunk` was been renamed to `chunks` and is now an array");
			}
		});

	}
	module.exports = AsyncDependenciesBlock;

	AsyncDependenciesBlock.prototype = Object.create(DependenciesBlock.prototype);

	AsyncDependenciesBlock.prototype.updateHash = function updateHash(hash) {
		hash.update(this.chunkName || "");
		hash.update(this.chunks && this.chunks.map(function(chunk) {
			return typeof chunk.id === "number" ? chunk.id : "";
		}).join(",") || "");
		DependenciesBlock.prototype.updateHash.call(this, hash);
	};

	AsyncDependenciesBlock.prototype.disconnect = function() {
		this.chunks = null;
		DependenciesBlock.prototype.disconnect.call(this);
	};


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(44);
	var OriginalSource = __webpack_require__(79);
	var RawSource = __webpack_require__(69);

	function RawModule(source, identifier, readableIdentifier) {
		Module.call(this);
		this.sourceStr = source;
		this.identifierStr = identifier || this.sourceStr;
		this.readableIdentifierStr = readableIdentifier || this.identifierStr;
		this.cacheable = true;
		this.built = false;
	}
	module.exports = RawModule;

	RawModule.prototype = Object.create(Module.prototype);

	RawModule.prototype.identifier = function() {
		return this.identifierStr;
	};

	RawModule.prototype.readableIdentifier = function(requestShortener) {
		return requestShortener.shorten(this.readableIdentifierStr);
	};

	RawModule.prototype.needRebuild = function() {
		return false;
	};

	RawModule.prototype.build = function(options, compilation, resolver, fs, callback) {
		this.builtTime = new Date().getTime();
		callback();
	};

	RawModule.prototype.source = function() {
		if(this.useSourceMap)
			return new OriginalSource(this.sourceStr, this.identifier());
		else
			return new RawSource(this.sourceStr);
	};

	RawModule.prototype.size = function() {
		return this.sourceStr.length;
	};

	RawModule.prototype.getSourceHash = function() {
		var hash = __webpack_require__(88).createHash("md5");
		hash.update(this.sourceStr);
		return hash.digest("hex");
	};

	RawModule.prototype.getAllModuleDependencies = function() {
		return [];
	};

	RawModule.prototype.createTemplate = function() {
		return new RawModule(this.sourceStr, "template of " + this.id);
	};

	RawModule.prototype.getTemplateArguments = function() {
		return [];
	};


/***/ },
/* 125 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LoadersList(list) {
		this.list = list || [];
		this.list.forEach(function(element) {
			if(element === null || typeof element !== "object")
				throw new Error("Each element of the loaders list must be an object or array");
		});
	}
	module.exports = LoadersList;

	function regExpAsMatcher(regExp) {
		return function(str) {
			return regExp.test(str);
		}
	}

	function asMatcher(test) {
		if(typeof test === "string") {
			return regExpAsMatcher(new RegExp("^"+test.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")));
		} else if(typeof test === "function") {
			return test;
		} else if(test instanceof RegExp) {
			return regExpAsMatcher(test);
		} else if(Array.isArray(test)) {
			var matchers = test.map(function(item) {
				if(Array.isArray(item)) {
					var matchers = item.map(asMatcher);
					return function(str) {
						return matchers.every(function(matcher) {
							return matcher(str);
						});
					};
				} else {
					return asMatcher(item);
				}
			});
			return function(str) {
				for(var i = 0; i < test.length; i++) {
					if(matchers[i](str))
						return true;
				}
				return false;
			};
		} else {
			throw new Error(test + " is not a valid test");
		}
	}

	function getLoadersFromObject(element) {
		if(element.query) {
			if(!element.loader || element.loader.indexOf("!") >= 0) throw new Error("Cannot define 'query' and multiple loaders in loaders list");
			if(typeof element.query === "string") return [element.loader + "?" + element.query];
			return [element.loader + "?" + JSON.stringify(element.query)];
		}
		if(element.loader) return element.loader.split("!");
		if(element.loaders) return element.loaders;
		throw new Error("Element from loaders list should have one of the fields 'loader' or 'loaders'");
	}

	LoadersList.prototype.matchPart = function matchPart(str, test) {
		if(!test) return true;
		var matcher = asMatcher(test);
		return matcher(str);
	};

	LoadersList.prototype.match = function match(str) {
		return this.list.map(function(element) {
			if(Array.isArray(element)) {
				for(var i = 0; i < element.length; i++) {
					if(this.matchObject(str, element[i]))
						return getLoadersFromObject(element[i]);
				}
			} else {
				if(this.matchObject(str, element))
					return getLoadersFromObject(element);
			}
		}, this).filter(Boolean).reduce(function(array, r) {
			r.forEach(function(r) {
				array.push(r);
			});
			return array;
		}, []) || [];
	};

	LoadersList.prototype.matchObject = function matchObject(str, obj) {
		if(obj.test)
			if(!this.matchPart(str, obj.test)) return false;
		if(obj.include)
			if(!this.matchPart(str, obj.include)) return false;
		if(obj.exclude)
			if(this.matchPart(str, obj.exclude)) return false;
		return true;
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(39);
	var path = __webpack_require__(36);

	var Tapable = __webpack_require__(37);
	var ContextModule = __webpack_require__(127);
	var ContextElementDependency = __webpack_require__(128);

	function ContextModuleFactory(resolvers) {
		Tapable.call(this);
		this.resolvers = resolvers;
	}
	module.exports = ContextModuleFactory;

	ContextModuleFactory.prototype = Object.create(Tapable.prototype);
	ContextModuleFactory.prototype.constructor = ContextModuleFactory;

	ContextModuleFactory.prototype.create = function(context, dependency, callback) {
		this.applyPluginsAsyncWaterfall("before-resolve", {
			context: context,
			request: dependency.request,
			recursive: dependency.recursive,
			regExp: dependency.regExp
		}, function(err, result) {
			if(err) return callback(err);

			// Ignored
			if(!result) return callback();

			var context = result.context;
			var request = result.request;
			var recursive = result.recursive;
			var regExp = result.regExp;

			var loaders, resource, loadersPrefix = "";
			var idx = request.lastIndexOf("!");
			if(idx >= 0) {
				loaders = request.substr(0, idx + 1);
				for(var i = 0; i < loaders.length && loaders[i] === "!"; i++) {
					loadersPrefix += "!";
				}
				loaders = loaders.substr(i).replace(/!+$/, "").replace(/!!+/g, "!");
				if(loaders === "") loaders = [];
				else loaders = loaders.split("!");
				resource = request.substr(idx + 1);
			} else {
				loaders = [];
				resource = request;
			}

			async.parallel([
				this.resolvers.context.resolve.bind(this.resolvers.context, context, resource),
				async.map.bind(async, loaders, this.resolvers.loader.resolve.bind(this.resolvers.loader, context))
			], function(err, result) {
				if(err) return callback(err);

				this.applyPluginsAsyncWaterfall("after-resolve", {
					loaders: loadersPrefix + result[1].join("!") + (result[1].length > 0 ? "!" : ""),
					resource: result[0],
					recursive: recursive,
					regExp: regExp
				}, function(err, result) {
					if(err) return callback(err);

					// Ignored
					if(!result) return callback();

					return callback(null, new ContextModule(this.resolveDependencies.bind(this), result.resource, result.recursive, result.regExp, result.loaders));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};

	ContextModuleFactory.prototype.resolveDependencies = function resolveDependencies(fs, resource, recursive, regExp, callback) {
		(function addDirectory(directory, callback) {
			fs.readdir(directory, function(err, files) {
				if(err) return callback(err);
				if(!files || files.length === 0) return callback(null, []);
				async.map(files.filter(function(p) {
					return p.indexOf(".") !== 0;
				}), function(seqment, callback) {

					var subResource = path.join(directory, seqment);

					fs.stat(subResource, function(err, stat) {
						if(err) return callback(err);

						if(stat.isDirectory()) {

							if(!recursive) return callback();
							addDirectory.call(this, subResource, callback);

						} else if(stat.isFile()) {

							var obj = {
								context: resource,
								request: "." + subResource.substr(resource.length).replace(/\\/g, "/")
							};
							this.applyPluginsAsyncWaterfall("alternatives", [obj], function(err, alternatives) {
								if(err) return callback(err);
								alternatives = alternatives.filter(function(obj) {
									return regExp.test(obj.request);
								}).map(function(obj) {
									var dep = new ContextElementDependency(obj.request);
									dep.optional = true;
									return dep;
								});
								callback(null, alternatives);
							});

						} else callback();

					}.bind(this));

				}.bind(this), function(err, result) {
					if(err) return callback(err);

					if(!result) return callback(null, []);

					callback(null, result.filter(function(i) {
						return !!i;
					}).reduce(function(a, i) {
						return a.concat(i);
					}, []));
				});
			}.bind(this));
		}.call(this, resource, callback));
	};


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(44);
	var OriginalSource = __webpack_require__(79);
	var RawSource = __webpack_require__(69);

	function ContextModule(resolveDependencies, context, recursive, regExp, addon) {
		Module.call(this);
		this.resolveDependencies = resolveDependencies;
		this.context = context;
		this.recursive = recursive;
		this.regExp = regExp;
		this.addon = addon;
		this.cacheable = true;
		this.contextDependencies = [context];
		this.built = false;
	}
	module.exports = ContextModule;

	ContextModule.prototype = Object.create(Module.prototype);

	ContextModule.prototype.identifier = function() {
		var identifier = "";
		identifier += this.context + " ";
		if(!this.recursive)
			identifier += "nonrecursive ";
		if(this.addon)
			identifier += this.addon;
		if(this.regExp)
			identifier += this.regExp;
		return identifier.replace(/ $/, "");
	};

	function prettyRegExp(str) {
		return str.substring(1, str.length - 1);
	}

	ContextModule.prototype.readableIdentifier = function(requestShortener) {
		var identifier = "";
		identifier += requestShortener.shorten(this.context) + " ";
		if(!this.recursive)
			identifier += "nonrecursive ";
		if(this.addon)
			identifier += requestShortener.shorten(this.addon);
		if(this.regExp)
			identifier += prettyRegExp(this.regExp + "");
		return identifier.replace(/ $/, "");
	};

	ContextModule.prototype.needRebuild = function(fileTimestamps, contextTimestamps) {
		var ts = contextTimestamps[this.context];
		if(!ts) return true;
		return ts >= this.builtTime;
	};

	ContextModule.prototype.disconnect = function disconnect() {
		this.built = false;
		Module.prototype.disconnect.call(this);
	};

	ContextModule.prototype.build = function(options, compilation, resolver, fs, callback) {
		this.built = true;
		this.builtTime = new Date().getTime();
		var addon = this.addon;
		this.resolveDependencies(fs, this.context, this.recursive, this.regExp, function(err, dependencies) {
			if(err) return callback(err);
			if(dependencies) {
				dependencies.forEach(function(dep) {
					dep.loc = dep.userRequest;
					dep.userRequest = dep.request;
					dep.request = addon + dep.userRequest;
				});
			}
			this.dependencies = dependencies;
			callback();
		}.bind(this));
	};

	ContextModule.prototype.source = function() {
		var str;
		if(this.dependencies && this.dependencies.length > 0) {
			var map = {};
			this.dependencies.slice().sort(function(a, b) {
				if(a.userRequest === b.userRequest) return 0;
				return a.userRequest < b.userRequest ? -1 : 1;
			}).forEach(function(dep) {
				if(dep.module)
					map[dep.userRequest] = dep.module.id;
			});
			str = [
				"var map = ", JSON.stringify(map, null, "\t"), ";\n",
				"function webpackContext(req) {\n",
				"\treturn __webpack_require__(webpackContextResolve(req));\n",
				"};\n",
				"function webpackContextResolve(req) {\n",
				"\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n",
				"};\n",
				"webpackContext.keys = function webpackContextKeys() {\n",
				"\treturn Object.keys(map);\n",
				"};\n",
				"webpackContext.resolve = webpackContextResolve;\n",
				"module.exports = webpackContext;\n",
				"webpackContext.id = " + this.id + ";\n"
			];
		} else {
			str = [
				"function webpackContext(req) {\n",
				"\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n",
				"}\n",
				"webpackContext.keys = function() { return []; };\n",
				"webpackContext.resolve = webpackContext;\n",
				"module.exports = webpackContext;\n",
				"webpackContext.id = " + this.id + ";\n"
			];
		}
		if(this.useSourceMap) {
			return new OriginalSource(str.join(""), this.identifier());
		} else {
			return new RawSource(str.join(""));
		}
	};

	ContextModule.prototype.size = function() {
		return this.dependencies.map(function(dep) {
			return dep.userRequest.length + 5;
		}).reduce(function(a, b) {
			return a + b;
		}, 160);
	};


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function ContextElementDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = ContextElementDependency;

	ContextElementDependency.prototype = Object.create(ModuleDependency.prototype);
	ContextElementDependency.prototype.constructor = ContextElementDependency;
	ContextElementDependency.prototype.type = "context element";


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(85);

	function ModuleDependency(request) {
		Dependency.call(this);
		this.request = request;
		this.userRequest = request;
	}
	module.exports = ModuleDependency;

	ModuleDependency.prototype = Object.create(Dependency.prototype);
	ModuleDependency.prototype.constructor = ModuleDependency;
	ModuleDependency.prototype.isEqualResource = function isEqualResource(other) {
		if(!(other instanceof ModuleDependency))
			return false;
		return this.request === other.request;
	};


/***/ },
/* 130 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function WebEnvironmentPlugin(inputFileSystem, outputFileSystem) {
		this.inputFileSystem = inputFileSystem;
		this.outputFileSystem = outputFileSystem;
	}
	module.exports = WebEnvironmentPlugin;
	WebEnvironmentPlugin.prototype.apply = function(compiler) {
		var inputFileSystem = compiler.inputFileSystem = this.inputFileSystem;
		compiler.resolvers.normal.fileSystem = inputFileSystem;
		compiler.resolvers.context.fileSystem = inputFileSystem;
		compiler.resolvers.loader.fileSystem = inputFileSystem;
		compiler.outputFileSystem = this.outputFileSystem;
	};


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var OptionsApply = __webpack_require__(132);

	var LoaderTargetPlugin = __webpack_require__(133);
	var FunctionModulePlugin = __webpack_require__(134);
	var EvalDevToolModulePlugin = __webpack_require__(136);
	var SourceMapDevToolPlugin = __webpack_require__(139);
	var EvalSourceMapDevToolPlugin = __webpack_require__(141);

	var EntryOptionPlugin = __webpack_require__(143);
	var RecordIdsPlugin = __webpack_require__(150);

	var APIPlugin = __webpack_require__(151);
	var ConstPlugin = __webpack_require__(155);
	var RequireJsStuffPlugin = __webpack_require__(156);
	var NodeStuffPlugin = __webpack_require__(157);
	var CompatibilityPlugin = __webpack_require__(160);
	var DefinePlugin = __webpack_require__(162);

	var MovedToPluginWarningPlugin = __webpack_require__(163);
	var TemplatedPathPlugin = __webpack_require__(164);
	var WarnCaseSensitiveModulesPlugin = __webpack_require__(165);

	var LoaderPlugin = __webpack_require__(167);
	var CommonJsPlugin = __webpack_require__(169);
	var AMDPlugin = __webpack_require__(187);
	var RequireContextPlugin = __webpack_require__(198);
	var RequireEnsurePlugin = __webpack_require__(202);
	var RequireIncludePlugin = __webpack_require__(209);

	var RemoveParentModulesPlugin = __webpack_require__(212);
	var RemoveEmptyChunksPlugin = __webpack_require__(213);
	var MergeDuplicateChunksPlugin = __webpack_require__(214);
	var FlagIncludedChunksPlugin = __webpack_require__(215);

	var UnsafeCachePlugin = __webpack_require__(216);
	var ModulesInDirectoriesPlugin = __webpack_require__(217);
	var ModulesInRootPlugin = __webpack_require__(219);
	var ModuleTemplatesPlugin = __webpack_require__(220);
	var ModuleAsFilePlugin = __webpack_require__(221);
	var ModuleAsDirectoryPlugin = __webpack_require__(222);
	var ModuleAliasPlugin = __webpack_require__(161);
	var DirectoryDefaultFilePlugin = __webpack_require__(223);
	var DirectoryDescriptionFilePlugin = __webpack_require__(224);
	var DirectoryDescriptionFileFieldAliasPlugin = __webpack_require__(225);
	var FileAppendPlugin = __webpack_require__(226);
	var DirectoryResultPlugin = __webpack_require__(227);
	var ResultSymlinkPlugin = __webpack_require__(228);

	function WebpackOptionsApply() {
		OptionsApply.call(this);
	}
	module.exports = WebpackOptionsApply;

	WebpackOptionsApply.prototype = Object.create(OptionsApply.prototype);
	WebpackOptionsApply.prototype.process = function(options, compiler) {
		compiler.context = options.context;
		if(options.plugins && Array.isArray(options.plugins)) {
			compiler.apply.apply(compiler, options.plugins);
		}
		compiler.outputPath = options.output.path;
		compiler.recordsInputPath = options.recordsInputPath || options.recordsPath;
		compiler.recordsOutputPath = options.recordsOutputPath || options.recordsPath;
		compiler.name = options.name;
		if(typeof options.target === "string") {
			switch(options.target) {
				case "web":
					var JsonpTemplatePlugin = __webpack_require__(229);
					var NodeSourcePlugin = __webpack_require__(234);
					compiler.apply(
						new JsonpTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeSourcePlugin(options.node),
						new LoaderTargetPlugin("web")
					);
					break;
				case "webworker":
					var WebWorkerTemplatePlugin = __webpack_require__(246);
					var NodeSourcePlugin = __webpack_require__(234);
					compiler.apply(
						new WebWorkerTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeSourcePlugin(options.node),
						new LoaderTargetPlugin("webworker")
					);
					break;
				case "node":
				case "async-node":
					var NodeTemplatePlugin = __webpack_require__(249);
					var NodeTargetPlugin = __webpack_require__(361);
					compiler.apply(
						new NodeTemplatePlugin(options.output, options.target === "async-node"),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new LoaderTargetPlugin("node")
					);
					break;
				case "node-webkit":
					var JsonpTemplatePlugin = __webpack_require__(229);
					var NodeTargetPlugin = __webpack_require__(361);
					var ExternalsPlugin = __webpack_require__(362);
					compiler.apply(
						new JsonpTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new ExternalsPlugin("commonjs", "nw.gui"),
						new LoaderTargetPlugin("node-webkit")
					);
					break;
				case "atom":
				case "electron":
					var NodeTemplatePlugin = __webpack_require__(249);
					var NodeTargetPlugin = __webpack_require__(361);
					var ExternalsPlugin = __webpack_require__(362);
					compiler.apply(
						new NodeTemplatePlugin(options.output, true),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new ExternalsPlugin("commonjs", [
							"app",
							"auto-updater",
							"browser-window",
							"content-tracing",
							"dialog",
							"global-shortcut",
							"ipc",
							"menu",
							"menu-item",
							"power-monitor",
							"protocol",
							"tray",
							"remote",
							"web-view",
							"clipboard",
							"crash-reporter",
							"screen",
							"shell",
							"native-image"
						]),
						new LoaderTargetPlugin(options.target)
					);
					break;
				default:
					throw new Error("Unsupported target '" + options.target + "'.");
			}
		} else if(options.target !== false) {
			options.target(compiler);
		} else {
			throw new Error("Unsupported target '" + options.target + "'.");
		}
		if(options.output.library || options.output.libraryTarget !== "var") {
			var LibraryTemplatePlugin = __webpack_require__(366);
			compiler.apply(new LibraryTemplatePlugin(options.output.library, options.output.libraryTarget, options.output.umdNamedDefine));
		}
		if(options.externals) {
			var ExternalsPlugin = __webpack_require__(362);
			compiler.apply(new ExternalsPlugin(options.output.libraryTarget, options.externals));
		}

		if(options.hot) {
			compiler.apply(new MovedToPluginWarningPlugin("hot", "HotModuleReplacementPlugin"));
			var HotModuleReplacementPlugin = __webpack_require__(371);
			compiler.apply(new HotModuleReplacementPlugin(options.output));
		}

		if(options.devtool && (options.devtool.indexOf("sourcemap") >= 0 || options.devtool.indexOf("source-map") >= 0)) {
			var hidden = options.devtool.indexOf("hidden") >= 0;
			var inline = options.devtool.indexOf("inline") >= 0;
			var evalWrapped = options.devtool.indexOf("eval") >= 0;
			var cheap = options.devtool.indexOf("cheap") >= 0;
			var moduleMaps = options.devtool.indexOf("module") >= 0;
			var legacy = options.devtool.indexOf("@") >= 0;
			var modern = options.devtool.indexOf("#") >= 0;
			var comment = legacy && modern ? "\n/*\n//@ sourceMappingURL=[url]\n//# sourceMappingURL=[url]\n*/" :
				legacy ? "\n/*\n//@ sourceMappingURL=[url]\n*/" :
				modern ? "\n//# sourceMappingURL=[url]" :
				null;
			var Plugin = evalWrapped ? EvalSourceMapDevToolPlugin : SourceMapDevToolPlugin;
			compiler.apply(new Plugin({
				filename: inline ? null : options.output.sourceMapFilename,
				moduleFilenameTemplate: options.output.devtoolModuleFilenameTemplate,
				fallbackModuleFilenameTemplate: options.output.devtoolFallbackModuleFilenameTemplate,
				append: hidden ? false : comment,
				module: moduleMaps ? true : cheap ? false : true,
				columns: cheap ? false : true,
				lineToLine: options.output.devtoolLineToLine
			}));
		} else if(options.devtool && options.devtool.indexOf("eval") >= 0) {
			var legacy = options.devtool.indexOf("@") >= 0;
			var modern = options.devtool.indexOf("#") >= 0;
			var comment = legacy && modern ? "//@ sourceURL=[url]\n//# sourceURL=[url]" :
				legacy ? "//@ sourceURL=[url]" :
				modern ? "//# sourceURL=[url]" :
				null;
			compiler.apply(new EvalDevToolModulePlugin(comment, options.output.devtoolModuleFilenameTemplate));
		}

		compiler.apply(new EntryOptionPlugin());
		compiler.applyPluginsBailResult("entry-option", options.context, options.entry);

		if(options.prefetch) {
			compiler.apply(new MovedToPluginWarningPlugin("prefetch", "PrefetchPlugin"));
			var PrefetchPlugin = __webpack_require__(375);
			options.prefetch.map(function(request) {
				compiler.apply(new PrefetchPlugin(options.context, request));
			});
		}
		compiler.apply(
			new CompatibilityPlugin(),
			new LoaderPlugin(),
			new NodeStuffPlugin(options.node),
			new RequireJsStuffPlugin(),
			new APIPlugin(),
			new ConstPlugin(),
			new RequireIncludePlugin(),
			new RequireEnsurePlugin(),
			new RequireContextPlugin(options.resolve.modulesDirectories, options.resolve.extensions),
			new AMDPlugin(options.module, options.amd || {}),
			new CommonJsPlugin(options.module)
		);

		compiler.apply(
			new RemoveParentModulesPlugin(),
			new RemoveEmptyChunksPlugin(),
			new MergeDuplicateChunksPlugin(),
			new FlagIncludedChunksPlugin()
		);

		compiler.apply(new TemplatedPathPlugin());

		compiler.apply(new RecordIdsPlugin());

		compiler.apply(new WarnCaseSensitiveModulesPlugin());

		if(options.optimize && options.optimize.occurenceOrder) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.occurenceOrder", "optimize.OccurrenceOrderPlugin"));
			var OccurrenceOrderPlugin = __webpack_require__(377);
			compiler.apply(new OccurrenceOrderPlugin(options.optimize.occurenceOrderPreferEntry));
		}

		if(options.optimize && options.optimize.minChunkSize) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.minChunkSize", "optimize.MinChunkSizePlugin"));
			var MinChunkSizePlugin = __webpack_require__(378);
			compiler.apply(new MinChunkSizePlugin(options.optimize));
		}

		if(options.optimize && options.optimize.maxChunks) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.maxChunks", "optimize.LimitChunkCountPlugin"));
			var LimitChunkCountPlugin = __webpack_require__(379);
			compiler.apply(new LimitChunkCountPlugin(options.optimize));
		}

		if(options.optimize.minimize) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.minimize", "optimize.UglifyJsPlugin"));
			var UglifyJsPlugin = __webpack_require__(380);
			if(options.optimize.minimize === true)
				compiler.apply(new UglifyJsPlugin());
			else
				compiler.apply(new UglifyJsPlugin(options.optimize.minimize));
		}

		if(options.cache === undefined ? options.watch : options.cache) {
			var CachePlugin = __webpack_require__(394);
			compiler.apply(new CachePlugin(typeof options.cache === "object" ? options.cache : null));
		}

		if(typeof options.provide === "object") {
			compiler.apply(new MovedToPluginWarningPlugin("provide", "ProvidePlugin"));
			var ProvidePlugin = __webpack_require__(395);
			compiler.apply(new ProvidePlugin(options.provide));
		}

		if(options.define) {
			compiler.apply(new MovedToPluginWarningPlugin("define", "DefinePlugin"));
			var defineObject = {};
			if(typeof options.define === "object") {
				Object.keys(options.define).forEach(function(key) {
					defineObject[key] = options.define[key];
				});
			}
			compiler.apply(new DefinePlugin(defineObject));
		}
		if(options.defineDebug !== false)
			compiler.apply(new DefinePlugin({
				DEBUG: !!options.debug
			}));

		compiler.applyPlugins("after-plugins", compiler);
		compiler.resolvers.normal.apply(
			new UnsafeCachePlugin(options.resolve.unsafeCache),
			options.resolve.packageAlias ? new DirectoryDescriptionFileFieldAliasPlugin("package.json", options.resolve.packageAlias) : function() {},
			new ModuleAliasPlugin(options.resolve.alias),
			makeRootPlugin("module", options.resolve.root),
			new ModulesInDirectoriesPlugin("module", options.resolve.modulesDirectories),
			makeRootPlugin("module", options.resolve.fallback),
			new ModuleAsFilePlugin("module"),
			new ModuleAsDirectoryPlugin("module"),
			new DirectoryDescriptionFilePlugin("package.json", options.resolve.packageMains),
			new DirectoryDefaultFilePlugin(["index"]),
			new FileAppendPlugin(options.resolve.extensions),
			new ResultSymlinkPlugin()
		);
		compiler.resolvers.context.apply(
			new UnsafeCachePlugin(options.resolve.unsafeCache),
			new ModuleAliasPlugin(options.resolve.alias),
			makeRootPlugin("module", options.resolve.root),
			new ModulesInDirectoriesPlugin("module", options.resolve.modulesDirectories),
			makeRootPlugin("module", options.resolve.fallback),
			new ModuleAsFilePlugin("module"),
			new ModuleAsDirectoryPlugin("module"),
			new DirectoryResultPlugin(),
			new ResultSymlinkPlugin()
		);
		compiler.resolvers.loader.apply(
			new UnsafeCachePlugin(options.resolve.unsafeCache),
			new ModuleAliasPlugin(options.resolveLoader.alias),
			makeRootPlugin("loader-module", options.resolveLoader.root),
			new ModulesInDirectoriesPlugin("loader-module", options.resolveLoader.modulesDirectories),
			makeRootPlugin("loader-module", options.resolveLoader.fallback),
			new ModuleTemplatesPlugin("loader-module", options.resolveLoader.moduleTemplates, "module"),
			new ModuleAsFilePlugin("module"),
			new ModuleAsDirectoryPlugin("module"),
			new DirectoryDescriptionFilePlugin("package.json", options.resolveLoader.packageMains),
			new DirectoryDefaultFilePlugin(["index"]),
			new FileAppendPlugin(options.resolveLoader.extensions),
			new ResultSymlinkPlugin()
		);
		compiler.applyPlugins("after-resolvers", compiler);
		return options;
	};

	function makeRootPlugin(name, root) {
		if(typeof root === "string")
			return new ModulesInRootPlugin(name, root);
		else if(Array.isArray(root)) {
			return function() {
				root.forEach(function(root) {
					this.apply(new ModulesInRootPlugin(name, root));
				}, this);
			};
		}
		return function() {};
	}


/***/ },
/* 132 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OptionsApply() {}
	module.exports = OptionsApply;

	OptionsApply.prototype.process = function( /* options, compiler */ ) {

	};


/***/ },
/* 133 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LoaderTargetPlugin(target) {
		this.target = target;
	}
	module.exports = LoaderTargetPlugin;
	LoaderTargetPlugin.prototype.apply = function(compiler) {
		var target = this.target;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("normal-module-loader", function(loaderContext) {
				loaderContext.target = target;
			});
		});
	};


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var FunctionModuleTemplatePlugin = __webpack_require__(135);
	var RequestShortener = __webpack_require__(75);

	function FunctionModulePlugin(options, requestShortener) {
		this.options = options;
		this.requestShortener = requestShortener;
	}
	module.exports = FunctionModulePlugin;
	FunctionModulePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.moduleTemplate.requestShortener = this.requestShortener || new RequestShortener(compiler.context);
			compilation.moduleTemplate.apply(new FunctionModuleTemplatePlugin());
		}.bind(this));
	};


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var PrefixSource = __webpack_require__(80);

	function FunctionModuleTemplatePlugin() {}
	module.exports = FunctionModuleTemplatePlugin;

	FunctionModuleTemplatePlugin.prototype.apply = function(moduleTemplate) {
		moduleTemplate.plugin("render", function(moduleSource, module) {
			var source = new ConcatSource();
			var defaultArguments = ["module", "exports"];
			if((module.arguments && module.arguments.length !== 0) || module.hasDependencies()) {
				defaultArguments.push("__webpack_require__");
			}
			source.add("/***/ function(" + defaultArguments.concat(module.arguments || []).join(", ") + ") {\n\n");
			source.add(new PrefixSource(this.outputOptions.sourcePrefix, moduleSource));
			source.add("\n\n/***/ }");
			return source;
		});
		moduleTemplate.plugin("package", function(moduleSource, module) {
			if(this.outputOptions.pathinfo) {
				var source = new ConcatSource();
				var req = module.readableIdentifier(this.requestShortener);
				source.add("/*!****" + req.replace(/./g, "*") + "****!*\\\n");
				source.add("  !*** " + req.replace(/\*\//g, "*_/") + " ***!\n");
				source.add("  \\****" + req.replace(/./g, "*") + "****/\n");
				source.add(moduleSource);
				return source;
			}
			return moduleSource;
		});
		moduleTemplate.plugin("hash", function(hash) {
			hash.update("FunctionModuleTemplatePlugin");
			hash.update("2");
		});
	};


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var EvalDevToolModuleTemplatePlugin = __webpack_require__(137);

	function EvalDevToolModulePlugin(sourceUrlComment, moduleFilenameTemplate) {
		this.sourceUrlComment = sourceUrlComment;
		this.moduleFilenameTemplate = moduleFilenameTemplate;
	}
	module.exports = EvalDevToolModulePlugin;
	EvalDevToolModulePlugin.prototype.apply = function(compiler) {
		var self = this;
		compiler.plugin("compilation", function(compilation) {
			compilation.moduleTemplate.apply(new EvalDevToolModuleTemplatePlugin(self.sourceUrlComment, self.moduleFilenameTemplate));
		});
	};


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RawSource = __webpack_require__(69);
	var ModuleFilenameHelpers = __webpack_require__(138);

	function EvalDevToolModuleTemplatePlugin(sourceUrlComment, moduleFilenameTemplate) {
		this.sourceUrlComment = sourceUrlComment || "//# sourceURL=[url]";
		this.moduleFilenameTemplate = moduleFilenameTemplate || "webpack:///[resourcePath]?[loaders]";
	}
	module.exports = EvalDevToolModuleTemplatePlugin;

	EvalDevToolModuleTemplatePlugin.prototype.apply = function(moduleTemplate) {
		var self = this;
		moduleTemplate.plugin("module", function(source, module) {
			var content = source.source();
			var str = ModuleFilenameHelpers.createFilename(module, self.moduleFilenameTemplate, this.requestShortener);
			var footer = ["\n",
				ModuleFilenameHelpers.createFooter(module, this.requestShortener),
				self.sourceUrlComment.replace(/\[url\]/g, encodeURI(str).replace(/%2F/g, "/").replace(/%20/g, "_").replace(/%5E/g, "^").replace(/%5C/g, "\\").replace(/^\//, ""))
			].join("\n");
			return new RawSource("eval(" + JSON.stringify(content + footer) + ");");
		});
		moduleTemplate.plugin("hash", function(hash) {
			hash.update("EvalDevToolModuleTemplatePlugin");
			hash.update("2");
		});
	};


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleFilenameHelpers = exports;

	ModuleFilenameHelpers.ALL_LOADERS_RESOURCE = "[all-loaders][resource]";
	ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE = /\[all-?loaders\]\[resource\]/gi;
	ModuleFilenameHelpers.LOADERS_RESOURCE = "[loaders][resource]";
	ModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE = /\[loaders\]\[resource\]/gi;
	ModuleFilenameHelpers.RESOURCE = "[resource]";
	ModuleFilenameHelpers.REGEXP_RESOURCE = /\[resource\]/gi;
	ModuleFilenameHelpers.ABSOLUTE_RESOURCE_PATH = "[absolute-resource-path]";
	ModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH = /\[abs(olute)?-?resource-?path\]/gi;
	ModuleFilenameHelpers.RESOURCE_PATH = "[resource-path]";
	ModuleFilenameHelpers.REGEXP_RESOURCE_PATH = /\[resource-?path\]/gi;
	ModuleFilenameHelpers.ALL_LOADERS = "[all-loaders]";
	ModuleFilenameHelpers.REGEXP_ALL_LOADERS = /\[all-?loaders\]/gi;
	ModuleFilenameHelpers.LOADERS = "[loaders]";
	ModuleFilenameHelpers.REGEXP_LOADERS = /\[loaders\]/gi;
	ModuleFilenameHelpers.QUERY = "[query]";
	ModuleFilenameHelpers.REGEXP_QUERY = /\[query\]/gi;
	ModuleFilenameHelpers.ID = "[id]";
	ModuleFilenameHelpers.REGEXP_ID = /\[id\]/gi;
	ModuleFilenameHelpers.HASH = "[hash]";
	ModuleFilenameHelpers.REGEXP_HASH = /\[hash\]/gi;

	function getAfter(str, token) {
		var idx = str.indexOf(token);
		return idx < 0 ? "" : str.substr(idx);
	}

	function getBefore(str, token) {
		var idx = str.lastIndexOf(token);
		return idx < 0 ? "" : str.substr(0, idx);
	}

	function getHash(str) {
		var hash = __webpack_require__(88).createHash("md5");
		hash.update(str);
		return hash.digest("hex").substr(0, 4);
	}

	function asRegExp(test) {
		if(typeof test === "string") test = new RegExp("^" + test.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"));
		return test;
	}

	ModuleFilenameHelpers.createFilename = function createFilename(module, moduleFilenameTemplate, requestShortener) {
		if(!module) module = "";
		if(typeof module === "string") {
			var shortIdentifier = requestShortener.shorten(module);
			var identifier = shortIdentifier;
			var moduleId = "";
			var absoluteResourcePath = module.split("!").pop();
			var hash = getHash(identifier);
		} else {
			var shortIdentifier = module.readableIdentifier(requestShortener);
			var identifier = requestShortener.shorten(module.identifier());
			var moduleId = module.id;
			var absoluteResourcePath = module.resourcePath || module.identifier().split("!").pop();
			var hash = getHash(identifier);
		}
		var resource = shortIdentifier.split("!").pop();
		var loaders = getBefore(shortIdentifier, "!");
		var allLoaders = getBefore(identifier, "!");
		var query = getAfter(resource, "?");
		var resourcePath = resource.substr(0, resource.length - query.length);
		if(typeof moduleFilenameTemplate === "function") {
			return moduleFilenameTemplate({
				identifier: identifier,
				shortIdentifier: shortIdentifier,
				resource: resource,
				resourcePath: resourcePath,
				absoluteResourcePath: absoluteResourcePath,
				allLoaders: allLoaders,
				query: query,
				moduleId: moduleId,
				hash: hash
			});
		}
		return moduleFilenameTemplate
			.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE, identifier)
			.replace(ModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE, shortIdentifier)
			.replace(ModuleFilenameHelpers.REGEXP_RESOURCE, resource)
			.replace(ModuleFilenameHelpers.REGEXP_RESOURCE_PATH, resourcePath)
			.replace(ModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH, absoluteResourcePath)
			.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS, allLoaders)
			.replace(ModuleFilenameHelpers.REGEXP_LOADERS, loaders)
			.replace(ModuleFilenameHelpers.REGEXP_QUERY, query)
			.replace(ModuleFilenameHelpers.REGEXP_ID, moduleId)
			.replace(ModuleFilenameHelpers.REGEXP_HASH, hash);
	};

	ModuleFilenameHelpers.createFooter = function createFooter(module, requestShortener) {
		if(!module) module = "";
		if(typeof module === "string") {
			return [
				"/** WEBPACK FOOTER **",
				" ** " + requestShortener.shorten(module),
				" **/"
			].join("\n");
		} else {
			return [
				"/*****************",
				" ** WEBPACK FOOTER",
				" ** " + module.readableIdentifier(requestShortener),
				" ** module id = " + module.id,
				" ** module chunks = " + module.chunks.map(function(c) {
					return c.id;
				}).join(" "),
				" **/"
			].join("\n");
		}
	};

	ModuleFilenameHelpers.replaceDuplicates = function replaceDuplicates(array, fn, comparator) {
		var countMap = {};
		var posMap = {};
		array.forEach(function(item, idx) {
			countMap[item] = (countMap[item] || []);
			countMap[item].push(idx);
			posMap[item] = 0;
		});
		if(comparator) {
			Object.keys(countMap).forEach(function(item) {
				countMap[item].sort(comparator);
			});
		}
		return array.map(function(item, i) {
			if(countMap[item].length > 1) {
				if(comparator && countMap[item][0] === i)
					return item;
				return fn(item, i, posMap[item]++);
			} else return item;
		});
	};

	ModuleFilenameHelpers.matchPart = function matchPart(str, test) {
		if(!test) return true;
		test = asRegExp(test);
		if(Array.isArray(test)) {
			return test.map(asRegExp).filter(function(regExp) {
				return regExp.test(str);
			}).length > 0;
		} else {
			return test.test(str);
		}
	};

	ModuleFilenameHelpers.matchObject = function matchObject(obj, str) {
		if(obj.test)
			if(!ModuleFilenameHelpers.matchPart(str, obj.test)) return false;
		if(obj.include)
			if(!ModuleFilenameHelpers.matchPart(str, obj.include)) return false;
		if(obj.exclude)
			if(ModuleFilenameHelpers.matchPart(str, obj.exclude)) return false;
		return true;
	};


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);
	var RequestShortener = __webpack_require__(75);
	var ConcatSource = __webpack_require__(78);
	var RawSource = __webpack_require__(69);
	var ModuleFilenameHelpers = __webpack_require__(138);
	var SourceMapDevToolModuleOptionsPlugin = __webpack_require__(140);

	function SourceMapDevToolPlugin(options, sourceMappingURLComment, moduleFilenameTemplate, fallbackModuleFilenameTemplate) {
		if(!options || typeof options !== "object") {
			this.sourceMapFilename = options;
			this.sourceMappingURLComment = sourceMappingURLComment === false ? false : sourceMappingURLComment || "\n//# sourceMappingURL=[url]";
			this.moduleFilenameTemplate = moduleFilenameTemplate || "webpack:///[resourcePath]";
			this.fallbackModuleFilenameTemplate = fallbackModuleFilenameTemplate || "webpack:///[resourcePath]?[hash]";
			this.options = {};
		} else {
			this.sourceMapFilename = options.filename;
			this.sourceMappingURLComment = options.append === false ? false : options.append || "\n//# sourceMappingURL=[url]";
			this.moduleFilenameTemplate = options.moduleFilenameTemplate || "webpack:///[resourcePath]";
			this.fallbackModuleFilenameTemplate = options.fallbackModuleFilenameTemplate || "webpack:///[resourcePath]?[hash]";
			this.options = options;
		}
	}
	module.exports = SourceMapDevToolPlugin;
	SourceMapDevToolPlugin.prototype.apply = function(compiler) {
		var sourceMapFilename = this.sourceMapFilename;
		var sourceMappingURLComment = this.sourceMappingURLComment;
		var moduleFilenameTemplate = this.moduleFilenameTemplate;
		var fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;
		var requestShortener = new RequestShortener(compiler.context);
		var options = this.options;
		options.test = options.test || /\.(js|css)($|\?)/i;
		compiler.plugin("compilation", function(compilation) {
			new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
			compilation.plugin("after-optimize-chunk-assets", function(chunks) {
				var allModules = [];
				var allModuleFilenames = [];
				var tasks = [];
				chunks.forEach(function(chunk) {
					chunk.files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options)).map(function(file) {
						var asset = this.assets[file];
						if(asset.__SourceMapDevToolData) {
							var data = asset.__SourceMapDevToolData;
							for(var cachedFile in data) {
								this.assets[cachedFile] = data[cachedFile];
								if(cachedFile !== file)
									chunk.files.push(cachedFile);
							}
							return;
						}
						if(asset.sourceAndMap) {
							var sourceAndMap = asset.sourceAndMap(options);
							var sourceMap = sourceAndMap.map;
							var source = sourceAndMap.source;
						} else {
							var sourceMap = asset.map(options);
							var source = asset.source();
						}
						if(sourceMap) {
							return {
								chunk: chunk,
								file: file,
								asset: asset,
								source: source,
								sourceMap: sourceMap
							};
						}
					}, this).filter(Boolean).map(function(task) {
						var modules = task.sourceMap.sources.map(function(source) {
							var module = compilation.findModule(source);
							return module || source;
						});
						var moduleFilenames = modules.map(function(module) {
							return ModuleFilenameHelpers.createFilename(module, moduleFilenameTemplate, requestShortener);
						});
						task.modules = modules;
						task.moduleFilenames = moduleFilenames;
						return task;
					}, this).forEach(function(task) {
						allModules = allModules.concat(task.modules);
						allModuleFilenames = allModuleFilenames.concat(task.moduleFilenames);
						tasks.push(task);
					}, this);
				}, this);
				allModuleFilenames = ModuleFilenameHelpers.replaceDuplicates(allModuleFilenames, function(filename, i) {
					return ModuleFilenameHelpers.createFilename(allModules[i], fallbackModuleFilenameTemplate, requestShortener);
				}, function(ai, bi) {
					var a = allModules[ai];
					var b = allModules[bi];
					a = !a ? "" : typeof a === "string" ? a : a.identifier();
					b = !b ? "" : typeof b === "string" ? b : b.identifier();
					return a.length - b.length;
				});
				allModuleFilenames = ModuleFilenameHelpers.replaceDuplicates(allModuleFilenames, function(filename, i, n) {
					for(var j = 0; j < n; j++)
						filename += "*";
					return filename;
				});
				tasks.forEach(function(task) {
					task.moduleFilenames = allModuleFilenames.slice(0, task.moduleFilenames.length);
					allModuleFilenames = allModuleFilenames.slice(task.moduleFilenames.length);
				}, this);
				tasks.forEach(function(task) {
					var chunk = task.chunk;
					var file = task.file;
					var asset = task.asset;
					var sourceMap = task.sourceMap;
					var source = task.source;
					var moduleFilenames = task.moduleFilenames;
					var modules = task.modules;
					sourceMap.sources = moduleFilenames;
					if(sourceMap.sourcesContent) {
						sourceMap.sourcesContent = sourceMap.sourcesContent.map(function(content, i) {
							return content + "\n\n\n" + ModuleFilenameHelpers.createFooter(modules[i], requestShortener);
						});
					} else {
						sourceMap.sourcesContent = undefined;
					}
					sourceMap.sourceRoot = "";
					sourceMap.file = file;
					asset.__SourceMapDevToolData = {};
					var currentSourceMappingURLComment = sourceMappingURLComment;
					if(currentSourceMappingURLComment !== false && /\.css($|\?)/i.test(file)) {
						currentSourceMappingURLComment = currentSourceMappingURLComment.replace(/^\n\/\/(.*)$/, "\n/*$1*/");
					}
					if(sourceMapFilename) {
						var filename = file,
							query = "";
						var idx = filename.indexOf("?");
						if(idx >= 0) {
							query = filename.substr(idx);
							filename = filename.substr(0, idx);
						}
						var sourceMapFile = this.getPath(sourceMapFilename, {
							chunk: chunk,
							filename: filename,
							query: query,
							basename: basename(filename)
						});
						var sourceMapUrl = path.relative(path.dirname(file), sourceMapFile).replace(/\\/g, "/");
						if(currentSourceMappingURLComment !== false) {
							asset.__SourceMapDevToolData[file] = this.assets[file] = new ConcatSource(new RawSource(source), currentSourceMappingURLComment.replace(/\[url\]/g, sourceMapUrl));
						}
						asset.__SourceMapDevToolData[sourceMapFile] = this.assets[sourceMapFile] = new RawSource(JSON.stringify(sourceMap));
						chunk.files.push(sourceMapFile);
					} else {
						asset.__SourceMapDevToolData[file] = this.assets[file] = new ConcatSource(new RawSource(source), currentSourceMappingURLComment
							.replace(/\[map\]/g, function() {
								return JSON.stringify(sourceMap);
							})
							.replace(/\[url\]/g, function() {
								return "data:application/json;base64," +
									new Buffer(JSON.stringify(sourceMap)).toString("base64");
							})
						);
					}
				}, this);
			});
		});
	};

	function basename(name) {
		if(name.indexOf("/") < 0) return name;
		return name.substr(name.lastIndexOf("/") + 1);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleFilenameHelpers = __webpack_require__(138);

	function SourceMapDevToolModuleOptionsPlugin(options) {
		this.options = options;
	}

	module.exports = SourceMapDevToolModuleOptionsPlugin;

	SourceMapDevToolModuleOptionsPlugin.prototype.apply = function(compilation) {
		var options = this.options;
		if(options.module !== false) {
			compilation.plugin("build-module", function(module) {
				module.useSourceMap = true;
			});
		}
		if(options.lineToLine === true) {
			compilation.plugin("build-module", function(module) {
				module.lineToLine = true;
			});
		} else if(options.lineToLine) {
			compilation.plugin("build-module", function(module) {
				if(!module.resource) return;
				var resourcePath = module.resource;
				var idx = resourcePath.indexOf("?");
				if(idx >= 0) resourcePath = resourcePath.substr(0, idx);
				module.lineToLine = ModuleFilenameHelpers.matchObject(options.lineToLine, resourcePath);
			});
		}
	};


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var EvalSourceMapDevToolModuleTemplatePlugin = __webpack_require__(142);
	var SourceMapDevToolModuleOptionsPlugin = __webpack_require__(140);

	function EvalSourceMapDevToolPlugin(options, moduleFilenameTemplate) {
		if(!options || typeof options !== "object") {
			this.options = {
				append: options,
				moduleFilenameTemplate: moduleFilenameTemplate
			};
		} else {
			this.options = options;
		}
	}
	module.exports = EvalSourceMapDevToolPlugin;
	EvalSourceMapDevToolPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		compiler.plugin("compilation", function(compilation) {
			new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
			compilation.moduleTemplate.apply(new EvalSourceMapDevToolModuleTemplatePlugin(compilation, options, options.append, options.moduleFilenameTemplate));
		});
	};


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RawSource = __webpack_require__(69);
	var ModuleFilenameHelpers = __webpack_require__(138);

	function EvalSourceMapDevToolModuleTemplatePlugin(compilation, options, sourceMapComment, moduleFilenameTemplate) {
		this.compilation = compilation;
		this.sourceMapComment = sourceMapComment || "//@ sourceMappingURL=[url]";
		this.moduleFilenameTemplate = moduleFilenameTemplate || "webpack:///[resource-path]?[hash]";
		this.options = options;
	}
	module.exports = EvalSourceMapDevToolModuleTemplatePlugin;

	EvalSourceMapDevToolModuleTemplatePlugin.prototype.apply = function(moduleTemplate) {
		var self = this;
		var options = this.options;
		moduleTemplate.plugin("module", function(source, module) {
			if(source.__EvalSourceMapDevToolData)
				return source.__EvalSourceMapDevToolData;

			if(source.sourceAndMap) {
				var sourceAndMap = source.sourceAndMap(options);
				var sourceMap = sourceAndMap.map;
				var content = sourceAndMap.source;
			} else {
				var sourceMap = source.map(options);
				var content = source.source();
			}
			if(!sourceMap) {
				return source;
			}

			// Clone (flat) the sourcemap to ensure that the mutations below do not persist.
			sourceMap = Object.keys(sourceMap).reduce(function(obj, key) {
				obj[key] = sourceMap[key];
				return obj;
			}, {});
			var modules = sourceMap.sources.map(function(source) {
				var module = self.compilation.findModule(source);
				return module || source;
			});
			var moduleFilenames = modules.map(function(module) {
				return ModuleFilenameHelpers.createFilename(module, self.moduleFilenameTemplate, this.requestShortener);
			}, this);
			moduleFilenames = ModuleFilenameHelpers.replaceDuplicates(moduleFilenames, function(filename, i, n) {
				for(var j = 0; j < n; j++)
					filename += "*";
				return filename;
			});
			sourceMap.sources = moduleFilenames;
			if(sourceMap.sourcesContent) {
				sourceMap.sourcesContent = sourceMap.sourcesContent.map(function(content, i) {
					return content + "\n\n\n" + ModuleFilenameHelpers.createFooter(modules[i], this.requestShortener);
				}, this);
			}
			sourceMap.sourceRoot = "";
			sourceMap.file = module.id + ".js";
			var footer = self.sourceMapComment.replace(/\[url\]/g, "data:application/json;base64," + new Buffer(JSON.stringify(sourceMap)).toString("base64"));
			source.__EvalSourceMapDevToolData = new RawSource("eval(" + JSON.stringify(content + footer) + ");");
			return source.__EvalSourceMapDevToolData;
		});
		moduleTemplate.plugin("hash", function(hash) {
			hash.update("eval-source-map");
			hash.update("1");
		});
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SingleEntryPlugin = __webpack_require__(144);
	var MultiEntryPlugin = __webpack_require__(146);

	function EntryOptionPlugin() {}
	module.exports = EntryOptionPlugin;

	EntryOptionPlugin.prototype.apply = function(compiler) {
		compiler.plugin("entry-option", function(context, entry) {
			function itemToPlugin(item, name) {
				if(Array.isArray(item))
					return new MultiEntryPlugin(context, item, name);
				else
					return new SingleEntryPlugin(context, item, name);
			}
			if(typeof entry === "string" || Array.isArray(entry)) {
				compiler.apply(itemToPlugin(entry, "main"));
			} else if(typeof entry === "object") {
				Object.keys(entry).forEach(function(name) {
					compiler.apply(itemToPlugin(entry[name], name));
				});
			}
			return true;
		});
	};


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SingleEntryDependency = __webpack_require__(145);

	function SingleEntryPlugin(context, entry, name) {
		this.context = context;
		this.entry = entry;
		this.name = name;
	}
	module.exports = SingleEntryPlugin;
	SingleEntryPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
		});
		compiler.plugin("make", function(compilation, callback) {
			var dep = new SingleEntryDependency(this.entry);
			dep.loc = this.name;
			compilation.addEntry(this.context, dep, this.name, callback);
		}.bind(this));
	};


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function SingleEntryDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = SingleEntryDependency;

	SingleEntryDependency.prototype = Object.create(ModuleDependency.prototype);
	SingleEntryDependency.prototype.constructor = SingleEntryDependency;
	SingleEntryDependency.prototype.type = "single entry";


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var MultiEntryDependency = __webpack_require__(147);
	var SingleEntryDependency = __webpack_require__(145);
	var MultiModuleFactory = __webpack_require__(148);

	function MultiEntryPlugin(context, entries, name) {
		this.context = context;
		this.entries = entries;
		this.name = name;
	}
	module.exports = MultiEntryPlugin;
	MultiEntryPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var multiModuleFactory = new MultiModuleFactory();
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);

			compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
		});
		compiler.plugin("make", function(compilation, callback) {
			compilation.addEntry(this.context, new MultiEntryDependency(this.entries.map(function(e, idx) {
				var dep = new SingleEntryDependency(e);
				dep.loc = this.name + ":" + (100000 + idx);
				return dep;
			}, this), this.name), this.name, callback);
		}.bind(this));
	};


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(85);

	function MultiEntryDependency(dependencies, name) {
		Dependency.call(this);
		this.dependencies = dependencies;
		this.name = name;
	}
	module.exports = MultiEntryDependency;

	MultiEntryDependency.prototype = Object.create(Dependency.prototype);
	MultiEntryDependency.prototype.constructor = MultiEntryDependency;
	MultiEntryDependency.prototype.type = "multi entry";


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Tapable = __webpack_require__(37);
	var MultiModule = __webpack_require__(149);

	function MultiModuleFactory() {
		Tapable.call(this);
	}
	module.exports = MultiModuleFactory;

	MultiModuleFactory.prototype = Object.create(Tapable.prototype);
	MultiModuleFactory.prototype.constructor = MultiModuleFactory;

	MultiModuleFactory.prototype.create = function(context, dependency, callback) {
		callback(null, new MultiModule(context, dependency.dependencies, dependency.name));
	};


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(44);
	var RawSource = __webpack_require__(69);

	function MultiModule(context, dependencies, name) {
		Module.call(this);
		this.context = context;
		this.dependencies = dependencies;
		this.name = name;
		this.built = false;
		this.cacheable = true;
	}
	module.exports = MultiModule;

	MultiModule.prototype = Object.create(Module.prototype);

	MultiModule.prototype.identifier = function() {
		return "multi " + this.name;
	};

	MultiModule.prototype.readableIdentifier = function() {
		return "multi " + this.name;
	};

	MultiModule.prototype.disconnect = function disconnect() {
		this.built = false;
		Module.prototype.disconnect.call(this);
	};

	MultiModule.prototype.build = function build(options, compilation, resolver, fs, callback) {
		this.built = true;
		return callback();
	};

	MultiModule.prototype.source = function(dependencyTemplates, outputOptions) {
		var str = [];
		this.dependencies.forEach(function(dep, idx) {
			if(dep.module) {
				if(idx === this.dependencies.length - 1)
					str.push("module.exports = ");
				str.push("__webpack_require__(");
				if(outputOptions.pathinfo)
					str.push("/*! " + dep.request + " */");
				str.push("" + JSON.stringify(dep.module.id));
				str.push(")");
			} else {
				str.push("(function webpackMissingModule() { throw new Error(");
				str.push(JSON.stringify("Cannot find module \"" + dep.request + "\""));
				str.push("); }())");
			}
			str.push(";\n");
		}, this);
		return new RawSource(str.join(""));
	};

	MultiModule.prototype.needRebuild = function needRebuild() {
		return false;
	};

	MultiModule.prototype.size = function() {
		return 16 + this.dependencies.length * 12;
	};

	MultiModule.prototype.updateHash = function(hash) {
		hash.update("multi module");
		hash.update(this.name || "");
		Module.prototype.updateHash.call(this, hash);
	};


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);

	function RecordIdsPlugin() {}
	module.exports = RecordIdsPlugin;

	function makeRelative(compiler, identifier) {
		var context = compiler.context;
		return identifier.split("|").map(function(str) {
			return identifier.split("!").map(function(str) {
				return path.relative(context, str);
			}).join("!");
		}).join("|");
	}

	RecordIdsPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("record-modules", function(modules, records) {
				records.nextFreeModuleId = compilation.nextFreeModuleId;
				if(!records.modules) records.modules = {};
				if(!records.modules.byIdentifier) records.modules.byIdentifier = {};
				modules.forEach(function(module) {
					var identifier = makeRelative(compiler, module.identifier());
					records.modules.byIdentifier[identifier] = module.id;
				});
			});
			compilation.plugin("revive-modules", function(modules, records) {
				if(records.nextFreeModuleId)
					compilation.nextFreeModuleId = records.nextFreeModuleId;
				if(!records.modules || !records.modules.byIdentifier) return;
				var usedIds = {
					0: true
				};
				modules.forEach(function(module) {
					if(module.id !== null) return;
					var identifier = makeRelative(compiler, module.identifier());
					var id = records.modules.byIdentifier[identifier];
					if(id === undefined) return;
					if(usedIds[id]) return;
					usedIds[id] = true;
					module.id = id;
				});
			});

			function getDepBlockIdent(chunk, block) {
				var ident = [];
				if(block.chunks.length > 1)
					ident.push(block.chunks.indexOf(chunk));
				while(block.parent) {
					var p = block.parent;
					var idx = p.blocks.indexOf(block);
					var l = p.blocks.length - 1;
					ident.unshift(idx + "/" + l);
					block = block.parent;
				}
				if(!block.identifier) return null;
				ident.unshift(makeRelative(compiler, block.identifier()));
				return ident.join(":");
			}
			compilation.plugin("record-chunks", function(chunks, records) {
				records.nextFreeChunkId = compilation.nextFreeChunkId;
				if(!records.chunks) records.chunks = {};
				if(!records.chunks.byName) records.chunks.byName = {};
				if(!records.chunks.byBlocks) records.chunks.byBlocks = {};
				chunks.forEach(function(chunk) {
					var name = chunk.name;
					var blockIdents = chunk.blocks.map(getDepBlockIdent.bind(null, chunk)).filter(Boolean);
					if(name) records.chunks.byName[name] = chunk.id;
					blockIdents.forEach(function(blockIdent) {
						records.chunks.byBlocks[blockIdent] = chunk.id;
					});
				});
			});
			compilation.plugin("revive-chunks", function(chunks, records) {
				if(records.nextFreeChunkId)
					compilation.nextFreeChunkId = records.nextFreeChunkId;
				if(!records.chunks) return;
				var usedIds = {};
				if(records.chunks.byName) {
					chunks.forEach(function(chunk) {
						if(chunk.id !== null) return;
						if(!chunk.name) return;
						var id = records.chunks.byName[chunk.name];
						if(id === undefined) return;
						if(usedIds[id]) return;
						usedIds[id] = true;
						chunk.id = id;
					});
				}
				if(records.chunks.byBlocks) {
					var argumentedChunks = chunks.filter(function(chunk) {
						return chunk.id === null;
					}).map(function(chunk) {
						return {
							chunk: chunk,
							blockIdents: chunk.blocks.map(getDepBlockIdent.bind(null, chunk)).filter(Boolean)
						};
					}).filter(function(arg) {
						return arg.blockIdents.length > 0;
					});
					var blockIdentsCount = {};
					argumentedChunks.forEach(function(arg, idx) {
						arg.blockIdents.forEach(function(blockIdent) {
							var id = records.chunks.byBlocks[blockIdent];
							if(typeof id !== "number") return;
							var accessor = id + ":" + idx;
							blockIdentsCount[accessor] = (blockIdentsCount[accessor] || 0) + 1;
						});
					});
					blockIdentsCount = Object.keys(blockIdentsCount).map(function(accessor) {
						return [blockIdentsCount[accessor]].concat(accessor.split(":").map(Number));
					}).sort(function(a, b) {
						return b[0] - a[0];
					});
					blockIdentsCount.forEach(function(arg) {
						var id = arg[1];
						if(usedIds[id]) return;
						var idx = arg[2];
						var chunk = argumentedChunks[idx].chunk;
						if(chunk.id !== null) return;
						usedIds[id] = true;
						chunk.id = id;
					});
				}
			});
		});
	};


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(152);
	var BasicEvaluatedExpression = __webpack_require__(108);

	var NullFactory = __webpack_require__(154);

	function APIPlugin() {}
	module.exports = APIPlugin;

	var REPLACEMENTS = {
		__webpack_require__: "__webpack_require__", // eslint-disable-line camelcase
		__webpack_public_path__: "__webpack_require__.p", // eslint-disable-line camelcase
		__webpack_modules__: "__webpack_require__.m", // eslint-disable-line camelcase
		__webpack_chunk_load__: "__webpack_require__.e", // eslint-disable-line camelcase
		__non_webpack_require__: "require", // eslint-disable-line camelcase
		"require.onError": "__webpack_require__.onError" // eslint-disable-line camelcase
	};
	var REPLACEMENT_TYPES = {
		__webpack_public_path__: "string", // eslint-disable-line camelcase
		__webpack_require__: "function", // eslint-disable-line camelcase
		__webpack_modules__: "object", // eslint-disable-line camelcase
		__webpack_chunk_load__: "function" // eslint-disable-line camelcase
	};
	var IGNORES = [];
	APIPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		Object.keys(REPLACEMENTS).forEach(function(key) {
			compiler.parser.plugin("expression " + key, function(expr) {
				var dep = new ConstDependency(REPLACEMENTS[key], expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
			compiler.parser.plugin("evaluate typeof " + key, function(expr) {
				return new BasicEvaluatedExpression().setString(REPLACEMENT_TYPES[key]).setRange(expr.range);
			});
		});
		IGNORES.forEach(function(key) {
			compiler.parser.plugin(key, function() {
				return true;
			});
		});
	};


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);

	function ConstDependency(expression, range) {
		NullDependency.call(this);
		this.expression = expression;
		this.range = range;
	}
	module.exports = ConstDependency;

	ConstDependency.prototype = Object.create(NullDependency.prototype);
	ConstDependency.prototype.constructor = ConstDependency;

	ConstDependency.Template = function ConstDependencyTemplate() {};

	ConstDependency.Template.prototype.apply = function(dep, source) {
		if(typeof dep.range === "number")
			source.insert(dep.range, dep.expression);
		else
			source.replace(dep.range[0], dep.range[1] - 1, dep.expression);
	};

	ConstDependency.prototype.updateHash = function(hash) {
		hash.update(this.range + "");
		hash.update(this.expression + "");
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(85);

	function NullDependency() {
		Dependency.call(this);
	}
	module.exports = NullDependency;

	NullDependency.prototype = Object.create(Dependency.prototype);
	NullDependency.prototype.constructor = NullDependency;
	NullDependency.prototype.type = "null";
	NullDependency.prototype.isEqualResource = function() {
		return false;
	};


/***/ },
/* 154 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function NullFactory() {}
	module.exports = NullFactory;

	NullFactory.prototype.create = function(context, dependency, callback) {
		return callback();
	};


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(152);
	var BasicEvaluatedExpression = __webpack_require__(108);

	var NullFactory = __webpack_require__(154);

	function ConstPlugin() {}
	module.exports = ConstPlugin;

	ConstPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		compiler.parser.plugin("statement if", function(statement) {
			var param = this.evaluateExpression(statement.test);
			var bool = param.asBool();
			if(typeof bool === "boolean") {
				if(statement.test.type !== "Literal") {
					var dep = new ConstDependency(bool + "", param.range);
					dep.loc = statement.loc;
					this.state.current.addDependency(dep);
				}
				return bool;
			}
		});
		compiler.parser.plugin("expression ?:", function(expression) {
			var param = this.evaluateExpression(expression.test);
			var bool = param.asBool();
			if(typeof bool === "boolean") {
				if(expression.test.type !== "Literal") {
					var dep = new ConstDependency(" " + bool + "", param.range);
					dep.loc = expression.loc;
					this.state.current.addDependency(dep);
				}
				return bool;
			}
		});
		compiler.parser.plugin("evaluate Identifier __resourceQuery", function(expr) {
			if(!this.state.module) return;
			var res = new BasicEvaluatedExpression();
			res.setString(this.state.module.splitQuery(this.state.module.resource)[1]);
			res.setRange(expr.range);
			return res;
		});
		compiler.parser.plugin("expression __resourceQuery", function() {
			if(!this.state.module) return;
			this.state.current.addVariable("__resourceQuery", JSON.stringify(this.state.module.splitQuery(this.state.module.resource)[1]));
			return true;
		});
	};


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(152);

	var NullFactory = __webpack_require__(154);

	function RequireJsStuffPlugin() {}
	module.exports = RequireJsStuffPlugin;
	RequireJsStuffPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});

		function remove(expr) {
			var dep = new ConstDependency(";", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		}
		compiler.parser.plugin("call require.config", remove);
		compiler.parser.plugin("call requirejs.config", remove);

		compiler.parser.plugin("expression require.version", function(expr) {
			var dep = new ConstDependency(JSON.stringify("0.0.0"), expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		compiler.parser.plugin("expression requirejs.onError", function(expr) {
			var dep = new ConstDependency(JSON.stringify("__webpack_require__.onError"), expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);
	var ModuleParserHelpers = __webpack_require__(158);
	var ConstDependency = __webpack_require__(152);
	var BasicEvaluatedExpression = __webpack_require__(108);
	var UnsupportedFeatureWarning = __webpack_require__(159);

	var NullFactory = __webpack_require__(154);

	function NodeStuffPlugin(options) {
		this.options = options;
	}
	module.exports = NodeStuffPlugin;
	NodeStuffPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});

		function ignore() {
			return true;
		}

		function setConstant(expressionName, value) {
			compiler.parser.plugin("expression " + expressionName, function() {
				this.state.current.addVariable(expressionName, JSON.stringify(value));
				return true;
			});
		}

		function setModuleConstant(expressionName, fn) {
			compiler.parser.plugin("expression " + expressionName, function() {
				this.state.current.addVariable(expressionName, JSON.stringify(fn(this.state.module)));
				return true;
			});
		}
		var context = compiler.context;
		if(this.options.__filename === "mock") {
			setConstant("__filename", "/index.js");
		} else if(this.options.__filename) {
			setModuleConstant("__filename", function(module) {
				return path.relative(context, module.resource);
			});
		}
		compiler.parser.plugin("evaluate Identifier __filename", function(expr) {
			if(!this.state.module) return;
			var res = new BasicEvaluatedExpression();
			res.setString(this.state.module.splitQuery(this.state.module.resource)[0]);
			res.setRange(expr.range);
			return res;
		});
		if(this.options.__dirname === "mock") {
			setConstant("__dirname", "/");
		} else if(this.options.__dirname) {
			setModuleConstant("__dirname", function(module) {
				return path.relative(context, module.context);
			});
		}
		compiler.parser.plugin("evaluate Identifier __dirname", function(expr) {
			if(!this.state.module) return;
			var res = new BasicEvaluatedExpression();
			res.setString(this.state.module.context);
			res.setRange(expr.range);
			return res;
		});
		compiler.parser.plugin("expression require.main", function(expr) {
			var dep = new ConstDependency("__webpack_require__.c[0]", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		compiler.parser.plugin("expression require.extensions", function(expr) {
			var dep = new ConstDependency("(void 0)", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			if(!this.state.module) return;
			this.state.module.warnings.push(new UnsupportedFeatureWarning(this.state.module, "require.extensions is not supported by webpack. Use a loader instead."));
			return true;
		});
		compiler.parser.plugin("expression module.exports", ignore);
		compiler.parser.plugin("expression module.loaded", ignore);
		compiler.parser.plugin("expression module.id", ignore);
		compiler.parser.plugin("evaluate Identifier module.hot", function(expr) {
			return new BasicEvaluatedExpression().setBoolean(false).setRange(expr.range);
		});
		compiler.parser.plugin("expression module", function() {
			var moduleJsPath = path.join(__dirname, "..", "buildin", "module.js");
			if(this.state.module.context) {
				moduleJsPath = path.relative(this.state.module.context, moduleJsPath);
				if(!/^[A-Z]:/i.test(moduleJsPath)) {
					moduleJsPath = "./" + moduleJsPath.replace(/\\/g, "/");
				}
			}
			return ModuleParserHelpers.addParsedVariable(this, "module", "require(" + JSON.stringify(moduleJsPath) + ")(module)");
		});
	};

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 158 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleParserHelpers = exports;

	ModuleParserHelpers.addParsedVariable = function(parser, name, expression) {
		if(!parser.state.current.addVariable) return false;
		var deps = [];
		parser.parse(expression, {
			current: {
				addDependency: function(dep) {
					dep.userRequest = name;
					deps.push(dep);
				}
			},
			module: parser.state.module
		});
		parser.state.current.addVariable(name, expression, deps);
		return true;
	};


/***/ },
/* 159 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function UnsupportedFeatureWarning(module, message) {
		Error.call(this);
		Error.captureStackTrace(this, UnsupportedFeatureWarning);
		this.name = "UnsupportedFeatureWarning";
		this.message = message;
		this.origin = this.module = module;
	}
	module.exports = UnsupportedFeatureWarning;

	UnsupportedFeatureWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);
	var ConstDependency = __webpack_require__(152);

	var ModuleAliasPlugin = __webpack_require__(161);

	var NullFactory = __webpack_require__(154);

	function CompatibilityPlugin() {}
	module.exports = CompatibilityPlugin;

	CompatibilityPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		compiler.resolvers.normal.apply(
			new ModuleAliasPlugin({
				"enhanced-require": path.join(__dirname, "..", "buildin", "return-require.js")
			})
		);
		compiler.parser.plugin("call require", function(expr) {
			// support for browserify style require delegator: "require(o, !0)"
			if(expr.arguments.length !== 2) return;
			var second = this.evaluateExpression(expr.arguments[1]);
			if(!second.isBoolean()) return;
			if(second.asBool() !== true) return;
			var dep = new ConstDependency("require", expr.callee.range);
			dep.loc = expr.loc;
			if(this.state.current.dependencies.length > 1) {
				var last = this.state.current.dependencies[this.state.current.dependencies.length - 1];
				if(last.critical && last.request === "." && last.userRequest === "." && last.recursive)
					this.state.current.dependencies.pop();
			}
			dep.critical = "This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.";
			this.state.current.addDependency(dep);
			return true;
		});
	};

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);

	function ModuleAliasPlugin(aliasMap) {
		this.aliasMap = aliasMap;
	}
	module.exports = ModuleAliasPlugin;

	ModuleAliasPlugin.prototype.apply = function(resolver) {
		var aliasMap = this.aliasMap;
		resolver.plugin("module", function(request, callback) {
			var fs = this.fileSystem;
			var keys = Object.keys(aliasMap);
			var i = 0;
			(function next() {
				for(;i < keys.length; i++) {
					var aliasName = keys[i];
					var onlyModule = /\$$/.test(aliasName);
					if(onlyModule) aliasName = aliasName.substr(0, aliasName.length-1);
					if((!onlyModule && request.request.indexOf(aliasName + "/") === 0) || request.request === aliasName) {
						var aliasValue = aliasMap[keys[i]];
						if(request.request.indexOf(aliasValue + "/") !== 0 && request.request != aliasValue) {
							var newRequestStr = aliasValue + request.request.substr(aliasName.length);
							var newRequest = this.parse(newRequestStr);
							var obj = {
								path: request.path,
								request: newRequest.path,
								query: newRequest.query,
								directory: newRequest.directory
							};
							var newCallback = createInnerCallback(callback, callback, "aliased with mapping " + JSON.stringify(aliasName) + ": " + JSON.stringify(aliasValue) + " to " + newRequestStr);
							if(newRequest.module) return this.doResolve("module", obj, newCallback);
							if(newRequest.directory) return this.doResolve("directory", obj, newCallback);
							return this.doResolve(["file", "directory"], obj, newCallback);
						}
					}
				}
				return callback();
			}.call(this));
		});
	};


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(152);
	var BasicEvaluatedExpression = __webpack_require__(108);

	var NullFactory = __webpack_require__(154);

	function DefinePlugin(definitions) {
		this.definitions = definitions;
	}
	module.exports = DefinePlugin;
	DefinePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		(function walkDefinitions(definitions, prefix) {
			Object.keys(definitions).forEach(function(key) {
				var code = definitions[key];
				if(code && typeof code === "object" && !(code instanceof RegExp)) {
					walkDefinitions(code, prefix + key + ".");
					applyObjectDefine(prefix + key, code);
					return;
				}
				applyDefineKey(prefix, key);
				applyDefine(prefix + key, code);
			});
		}(this.definitions, ""));

		function stringifyObj(obj) {
			return "{" + Object.keys(obj).map(function(key) {
				var code = obj[key];
				return JSON.stringify(key) + ":" + toCode(code);
			}).join(",") + "}";
		}

		function toCode(code) {
			if(code === null) return "null";
			else if(code === undefined) return "undefined";
			else if(code instanceof RegExp && code.toString) return code.toString();
			else if(typeof code === "function" && code.toString) return code.toString();
			else if(typeof code === "object") return stringifyObj(code);
			else return code + "";
		}

		function applyDefineKey(prefix, key) {
			var splittedKey = key.split(".");
			splittedKey.slice(1).forEach(function(_, i) {
				var fullKey = prefix + splittedKey.slice(0, i + 1).join(".");
				compiler.parser.plugin("can-rename " + fullKey, function() {
					return true;
				});
			});
		}

		function applyDefine(key, code) {
			var isTypeof = /^typeof\s+/.test(key);
			if(isTypeof) key = key.replace(/^typeof\s+/, "");
			var recurse = false;
			var recurseTypeof = false;
			code = toCode(code);
			if(!isTypeof) {
				compiler.parser.plugin("can-rename " + key, function() {
					return true;
				});
				compiler.parser.plugin("evaluate Identifier " + key, function(expr) {
					if(recurse) return;
					recurse = true;
					var res = compiler.parser.evaluate(code);
					recurse = false;
					res.setRange(expr.range);
					return res;
				});
				compiler.parser.plugin("expression " + key, function(expr) {
					var dep = new ConstDependency("(" + code + ")", expr.range);
					dep.loc = expr.loc;
					this.state.current.addDependency(dep);
					return true;
				});
			}
			var typeofCode = isTypeof ? code : "typeof (" + code + ")";
			compiler.parser.plugin("evaluate typeof " + key, function(expr) {
				if(recurseTypeof) return;
				recurseTypeof = true;
				var res = compiler.parser.evaluate(typeofCode);
				recurseTypeof = false;
				res.setRange(expr.range);
				return res;
			});
			compiler.parser.plugin("typeof " + key, function(expr) {
				var res = compiler.parser.evaluate(typeofCode);
				if(!res.isString()) return;
				var dep = new ConstDependency(JSON.stringify(res.string), expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}

		function applyObjectDefine(key, obj) {
			var code = stringifyObj(obj);
			compiler.parser.plugin("can-rename " + key, function() {
				return true;
			});
			compiler.parser.plugin("evaluate Identifier " + key, function(expr) {
				return new BasicEvaluatedExpression().setRange(expr.range);
			});
			compiler.parser.plugin("evaluate typeof " + key, function(expr) {
				return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
			});
			compiler.parser.plugin("expression " + key, function(expr) {
				var dep = new ConstDependency("(" + code + ")", expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
			compiler.parser.plugin("typeof " + key, function(expr) {
				var dep = new ConstDependency("\"object\"", expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
	};


/***/ },
/* 163 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MovedToPluginWarningPlugin(optionName, pluginName) {
		this.optionName = optionName;
		this.pluginName = pluginName;
	}
	module.exports = MovedToPluginWarningPlugin;

	MovedToPluginWarningPlugin.prototype.apply = function(compiler) {
		var optionName = this.optionName;
		var pluginName = this.pluginName;
		compiler.plugin("compilation", function(compilation) {
			compilation.warnings.push(new Error("webpack options:\nDEPRECATED option '" + optionName + "' will be moved to the " + pluginName + ". Use this instead.\nFor more info about the usage of the " + pluginName + " see https://webpack.github.io/docs/list-of-plugins.html"));
		});
	};


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Jason Anderson @diurnalist
	*/

	var REGEXP_HASH = /\[hash(?::(\d+))?\]/gi,
		REGEXP_CHUNKHASH = /\[chunkhash(?::(\d+))?\]/gi,
		REGEXP_NAME = /\[name\]/gi,
		REGEXP_ID = /\[id\]/gi,
		REGEXP_FILE = /\[file\]/gi,
		REGEXP_QUERY = /\[query\]/gi,
		REGEXP_FILEBASE = /\[filebase\]/gi;

	// Using global RegExp for .test is dangerous
	// We use a normal RegExp instead of .test
	var REGEXP_HASH_FOR_TEST = new RegExp(REGEXP_HASH.source, "i"),
		REGEXP_CHUNKHASH_FOR_TEST = new RegExp(REGEXP_CHUNKHASH.source, "i"),
		REGEXP_NAME_FOR_TEST = new RegExp(REGEXP_NAME.source, "i");

	// Backwards compatibility; expose regexes on Template object
	var Template = __webpack_require__(81);
	Template.REGEXP_HASH = REGEXP_HASH;
	Template.REGEXP_CHUNKHASH = REGEXP_CHUNKHASH;
	Template.REGEXP_NAME = REGEXP_NAME;
	Template.REGEXP_ID = REGEXP_ID;
	Template.REGEXP_FILE = REGEXP_FILE;
	Template.REGEXP_QUERY = REGEXP_QUERY;
	Template.REGEXP_FILEBASE = REGEXP_FILEBASE;

	function TemplatedPathPlugin() {}

	module.exports = TemplatedPathPlugin;

	function withHashLength(replacer, handlerFn) {
		return function(_, hashLength) {
			var length = hashLength && parseInt(hashLength, 10);
			if(length && handlerFn) {
				return handlerFn(length);
			}
			var hash = replacer.apply(this, arguments);
			return length ? hash.slice(0, length) : hash;
		};
	}

	function getReplacer(value, allowEmpty) {
		return function(match) {
			// last argument in replacer is the entire input string
			var input = arguments[arguments.length - 1];
			if(value == null) {
				if(!allowEmpty) throw new Error("Path variable " + match + " not implemented in this context: " + input);
				return "";
			} else {
				return "" + value;
			}
		};
	}

	function replacePathVariables(path, data) {
		var chunk = data.chunk;
		var chunkId = chunk && chunk.id;
		var chunkName = chunk && (chunk.name || chunk.id);
		var chunkHash = chunk && (chunk.renderedHash || chunk.hash);
		var chunkHashWithLength = chunk && chunk.hashWithLength;

		if(data.noChunkHash && REGEXP_CHUNKHASH_FOR_TEST.test(path)) {
			throw new Error("Cannot use [chunkhash] for chunk in '" + path + "' (use [hash] instead)");
		}

		return path
			.replace(REGEXP_HASH, withHashLength(getReplacer(data.hash), data.hashWithLength))
			.replace(REGEXP_CHUNKHASH, withHashLength(getReplacer(chunkHash), chunkHashWithLength))
			.replace(REGEXP_ID, getReplacer(chunkId))
			.replace(REGEXP_NAME, getReplacer(chunkName))
			.replace(REGEXP_FILE, getReplacer(data.filename))
			.replace(REGEXP_FILEBASE, getReplacer(data.basename))
			// query is optional, it's OK if it's in a path but there's nothing to replace it with
			.replace(REGEXP_QUERY, getReplacer(data.query, true));
	}

	TemplatedPathPlugin.prototype.constructor = TemplatedPathPlugin;
	TemplatedPathPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			var mainTemplate = compilation.mainTemplate;

			mainTemplate.plugin("asset-path", replacePathVariables);

			mainTemplate.plugin("global-hash", function(chunk, paths) {
				var outputOptions = this.outputOptions;
				var publicPath = outputOptions.publicPath || "";
				var filename = outputOptions.filename || "";
				var chunkFilename = outputOptions.chunkFilename || outputOptions.filename;
				if(REGEXP_HASH_FOR_TEST.test(publicPath) || REGEXP_CHUNKHASH_FOR_TEST.test(publicPath) || REGEXP_NAME_FOR_TEST.test(publicPath))
					return true;
				if(REGEXP_HASH_FOR_TEST.test(filename))
					return true;
				if(REGEXP_HASH_FOR_TEST.test(chunkFilename))
					return true;
				if(REGEXP_HASH_FOR_TEST.test(paths.join("|")))
					return true;
			});

			mainTemplate.plugin("hash-for-chunk", function(hash, chunk) {
				var outputOptions = this.outputOptions;
				var chunkFilename = outputOptions.chunkFilename || outputOptions.filename;
				if(REGEXP_CHUNKHASH_FOR_TEST.test(chunkFilename))
					hash.update(JSON.stringify(chunk.getChunkMaps(true, true).hash));
				if(REGEXP_NAME_FOR_TEST.test(chunkFilename))
					hash.update(JSON.stringify(chunk.getChunkMaps(true, true).name));
			});
		});
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var CaseSensitiveModulesWarning = __webpack_require__(166);

	function WarnCaseSensitiveModulesPlugin() {}
	module.exports = WarnCaseSensitiveModulesPlugin;

	WarnCaseSensitiveModulesPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("seal", function() {
				var moduleWithoutCase = {};
				this.modules.forEach(function(module) {
					var ident = module.identifier().toLowerCase();
					if(moduleWithoutCase["$" + ident]) {
						if(moduleWithoutCase["$" + ident] !== true)
							this.warnings.push(new CaseSensitiveModulesWarning(moduleWithoutCase["$" + ident]));
						this.warnings.push(new CaseSensitiveModulesWarning(module));
						moduleWithoutCase["$" + ident] = true;
					} else {
						moduleWithoutCase["$" + ident] = module;
					}
				}, this);
			});
		});
	};


/***/ },
/* 166 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CaseSensitiveModulesWarning(module) {
		Error.call(this);
		Error.captureStackTrace(this, CaseSensitiveModulesWarning);
		this.name = "CaseSensitiveModulesWarning";
		this.message = "There is another module with an equal name when case is ignored.\n" +
			"This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.\n" +
			"Rename module if multiple modules are expected or use equal casing if one module is expected.";
		this.origin = this.module = module;
	}
	module.exports = CaseSensitiveModulesWarning;

	CaseSensitiveModulesWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var LoaderDependency = __webpack_require__(168);

	function LoaderPlugin() {}
	module.exports = LoaderPlugin;

	LoaderPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(LoaderDependency, normalModuleFactory);
		});
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("normal-module-loader", function(loaderContext, module) {
				loaderContext.loadModule = function loadModule(request, callback) {
					var dep = new LoaderDependency(request);
					dep.loc = request;
					compilation.addModuleDependencies(module, [
						[dep]
					], true, "lm", false, function(err) {
						if(err) return callback(err);

						module = dep.module;
						if(!module) return callback(new Error("Cannot load the module"));
						if(module.building) module.building.push(next);
						else next();

						function next(err) {
							if(err) return callback(err);

							if(dep.module.error) return callback(dep.module.error);
							if(!dep.module._source) throw new Error("The module created for a LoaderDependency must have a property _source");
							var source, map;
							var moduleSource = dep.module._source;
							if(moduleSource.sourceAndMap) {
								var sourceAndMap = moduleSource.sourceAndMap();
								map = sourceAndMap.map;
								source = sourceAndMap.source;
							} else {
								map = moduleSource.map();
								source = moduleSource.source();
							}
							if(dep.module.fileDependencies) {
								dep.module.fileDependencies.forEach(function(dep) {
									loaderContext.addDependency(dep);
								});
							}
							if(dep.module.contextDependencies) {
								dep.module.contextDependencies.forEach(function(dep) {
									loaderContext.addContextDependency(dep);
								});
							}
							return callback(null, source, map, dep.module);
						}
					});
				};
			});
		});
	};


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function LoaderDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = LoaderDependency;

	LoaderDependency.prototype = Object.create(ModuleDependency.prototype);
	LoaderDependency.prototype.constructor = LoaderDependency;
	LoaderDependency.prototype.type = "loader";


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(152);
	var CommonJsRequireDependency = __webpack_require__(170);
	var CommonJsRequireContextDependency = __webpack_require__(173);
	var RequireResolveDependency = __webpack_require__(176);
	var RequireResolveContextDependency = __webpack_require__(177);
	var RequireResolveHeaderDependency = __webpack_require__(179);
	var RequireHeaderDependency = __webpack_require__(180);

	var NullFactory = __webpack_require__(154);

	var RequireResolveDependencyParserPlugin = __webpack_require__(181);
	var CommonJsRequireDependencyParserPlugin = __webpack_require__(183);

	var BasicEvaluatedExpression = __webpack_require__(108);

	function CommonJsPlugin(options) {
		this.options = options;
	}
	module.exports = CommonJsPlugin;

	CommonJsPlugin.prototype.apply = function(compiler) {
		function setTypeof(expr, value) {
			compiler.parser.plugin("evaluate typeof " + expr, function(expr) {
				return new BasicEvaluatedExpression().setString(value).setRange(expr.range);
			});
			compiler.parser.plugin("typeof " + expr, function(expr) {
				var dep = new ConstDependency(JSON.stringify(value), expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
			var contextModuleFactory = params.contextModuleFactory;

			compilation.dependencyFactories.set(CommonJsRequireDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(CommonJsRequireDependency, new CommonJsRequireDependency.Template());

			compilation.dependencyFactories.set(CommonJsRequireContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(CommonJsRequireContextDependency, new CommonJsRequireContextDependency.Template());

			compilation.dependencyFactories.set(RequireResolveDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(RequireResolveDependency, new RequireResolveDependency.Template());

			compilation.dependencyFactories.set(RequireResolveContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(RequireResolveContextDependency, new RequireResolveContextDependency.Template());

			compilation.dependencyFactories.set(RequireResolveHeaderDependency, new NullFactory());
			compilation.dependencyTemplates.set(RequireResolveHeaderDependency, new RequireResolveHeaderDependency.Template());

			compilation.dependencyFactories.set(RequireHeaderDependency, new NullFactory());
			compilation.dependencyTemplates.set(RequireHeaderDependency, new RequireHeaderDependency.Template());
		});
		setTypeof("require", "function");
		setTypeof("require.resolve", "function");
		setTypeof("require.resolveWeak", "function");
		compiler.parser.plugin("evaluate typeof module", function(expr) {
			return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
		});
		compiler.parser.plugin("assign require", function(expr) {
			// to not leak to global "require", we need to define a local require here.
			var dep = new ConstDependency("var require;", 0);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			this.scope.definitions.push("require");
			return true;
		});
		compiler.parser.plugin("can-rename require", function() {
			return true;
		});
		compiler.parser.plugin("rename require", function(expr) {
			// define the require variable. It's still undefined, but not "not defined".
			var dep = new ConstDependency("var require;", 0);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return false;
		});
		compiler.parser.plugin("typeof module", function() {
			return true;
		});
		compiler.parser.plugin("evaluate typeof exports", function(expr) {
			return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
		});
		compiler.parser.apply(
			new CommonJsRequireDependencyParserPlugin(this.options),
			new RequireResolveDependencyParserPlugin(this.options)
		);
	};


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function CommonJsRequireDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = CommonJsRequireDependency;

	CommonJsRequireDependency.prototype = Object.create(ModuleDependency.prototype);
	CommonJsRequireDependency.prototype.constructor = CommonJsRequireDependency;
	CommonJsRequireDependency.prototype.type = "cjs require";

	CommonJsRequireDependency.Template = __webpack_require__(171);


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleDependencyTemplateAsId() {}
	module.exports = ModuleDependencyTemplateAsId;

	ModuleDependencyTemplateAsId.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		if(!dep.range) return;
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module)
			var content = comment + JSON.stringify(dep.module.id);
		else
			var content = __webpack_require__(172).module(dep.request);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	};

	ModuleDependencyTemplateAsId.prototype.applyAsTemplateArgument = function(name, dep, source) {
		if(!dep.range) return;
		source.replace(dep.range[0], dep.range[1] - 1, name);
	};


/***/ },
/* 172 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	exports.module = function(request) {
		return "!(function webpackMissingModule() { " +
			exports.moduleCode(request) +
			" }())";
	};

	exports.moduleCode = function(request) {
		return "var e = new Error(" + JSON.stringify("Cannot find module \"" + request + "\"") + "); " +
			"e.code = 'MODULE_NOT_FOUND'; " +
			"throw e;";
	};

	exports.moduleMetaInfo = function(request) {
		return "!(function webpackMissingModuleMetaInfo() { " +
			"var e = new Error(" + JSON.stringify("Module cannot be imported because no meta info about exports is available \"" + request + "\"") + "); " +
			"e.code = 'MODULE_NOT_FOUND'; " +
			"throw e; " +
			"}())";
	};


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(174);

	function CommonJsRequireContextDependency(request, recursive, regExp, range, valueRange) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
		this.valueRange = valueRange;
	}
	module.exports = CommonJsRequireContextDependency;

	CommonJsRequireContextDependency.prototype = Object.create(ContextDependency.prototype);
	CommonJsRequireContextDependency.prototype.constructor = CommonJsRequireContextDependency;
	CommonJsRequireContextDependency.prototype.type = "cjs require context";

	CommonJsRequireContextDependency.Template = __webpack_require__(175);


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(85);

	function ContextDependency(request, recursive, regExp) {
		Dependency.call(this);
		this.request = request;
		this.userRequest = request;
		this.recursive = recursive;
		this.regExp = regExp;
	}
	module.exports = ContextDependency;

	ContextDependency.prototype = Object.create(Dependency.prototype);
	ContextDependency.prototype.constructor = ContextDependency;
	ContextDependency.prototype.isEqualResource = function(other) {
		if(!(other instanceof ContextDependency))
			return false;
		return this.request === other.request &&
			this.recursive === other.recursive &&
			this.regExp === other.regExp;
	};


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ContextDependencyTemplateAsRequireCall() {}
	module.exports = ContextDependencyTemplateAsRequireCall;

	ContextDependencyTemplateAsRequireCall.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module && dep.module.dependencies && dep.module.dependencies.length > 0) {
			if(dep.valueRange) {
				source.replace(dep.valueRange[1], dep.range[1] - 1, ")");
				source.replace(dep.range[0], dep.valueRange[0] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")(" + (typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : "") + "");
			} else {
				source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")");
			}
		} else {
			var content = __webpack_require__(172).module(dep.request);
			source.replace(dep.range[0], dep.range[1] - 1, content);
		}
	};

	ContextDependencyTemplateAsRequireCall.prototype.applyAsTemplateArgument = function(name, dep, source) {
		if(dep.valueRange) {
			source.replace(dep.valueRange[1], dep.range[1] - 1, ")");
			source.replace(dep.range[0], dep.valueRange[0] - 1, "__webpack_require__(" + name + ")(" + (typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : "") + "");
		} else {
			source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__(" + name + ")");
		}
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function RequireResolveDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = RequireResolveDependency;

	RequireResolveDependency.prototype = Object.create(ModuleDependency.prototype);
	RequireResolveDependency.prototype.constructor = RequireResolveDependency;
	RequireResolveDependency.prototype.type = "require.resolve";

	RequireResolveDependency.Template = __webpack_require__(171);


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(174);

	function RequireResolveContextDependency(request, recursive, regExp, range, valueRange) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
		this.valueRange = valueRange;
	}
	module.exports = RequireResolveContextDependency;

	RequireResolveContextDependency.prototype = Object.create(ContextDependency.prototype);
	RequireResolveContextDependency.prototype.constructor = RequireResolveContextDependency;
	RequireResolveContextDependency.prototype.type = "amd require context";

	RequireResolveContextDependency.Template = __webpack_require__(178);


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ContextDependencyTemplateAsId() {}
	module.exports = ContextDependencyTemplateAsId;

	ContextDependencyTemplateAsId.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module && dep.module.dependencies && dep.module.dependencies.length > 0) {
			if(dep.valueRange) {
				source.replace(dep.valueRange[1], dep.range[1] - 1, ")");
				source.replace(dep.range[0], dep.valueRange[0] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ").resolve(" + (typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : "") + "");
			} else {
				source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ").resolve");
			}
		} else {
			var content = __webpack_require__(172).module(dep.request);
			source.replace(dep.range[0], dep.range[1] - 1, content);
		}
	};


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);

	function RequireResolveHeaderDependency(range) {
		if(!Array.isArray(range)) throw new Error("range must be valid");
		NullDependency.call(this);
		this.range = range;
	}
	module.exports = RequireResolveHeaderDependency;

	RequireResolveHeaderDependency.prototype = Object.create(NullDependency.prototype);
	RequireResolveHeaderDependency.prototype.constructor = RequireResolveHeaderDependency;

	RequireResolveHeaderDependency.Template = function RequireResolveHeaderDependencyTemplate() {};

	RequireResolveHeaderDependency.Template.prototype.apply = function(dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "/*require.resolve*/");
	};

	RequireResolveHeaderDependency.Template.prototype.applyAsTemplateArgument = function(name, dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "/*require.resolve*/");
	};


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);

	function RequireHeaderDependency(range) {
		if(!Array.isArray(range)) throw new Error("range must be valid");
		NullDependency.call(this);
		this.range = range;
	}
	module.exports = RequireHeaderDependency;

	RequireHeaderDependency.prototype = Object.create(NullDependency.prototype);
	RequireHeaderDependency.prototype.constructor = RequireHeaderDependency;

	RequireHeaderDependency.Template = function RequireHeaderDependencyTemplate() {};

	RequireHeaderDependency.Template.prototype.apply = function(dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__");
	};

	RequireHeaderDependency.Template.prototype.applyAsTemplateArgument = function(name, dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "require");
	};


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireResolveDependency = __webpack_require__(176);
	var RequireResolveContextDependency = __webpack_require__(177);
	var RequireResolveHeaderDependency = __webpack_require__(179);
	var ContextDependencyHelpers = __webpack_require__(182);

	function RequireResolveDependencyParserPlugin(options) {
		this.options = options;
	}

	module.exports = RequireResolveDependencyParserPlugin;

	RequireResolveDependencyParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("call require.resolve", function(expr) {
			return this.applyPluginsBailResult("call require.resolve(Weak)", expr, false);
		});
		parser.plugin("call require.resolveWeak", function(expr) {
			return this.applyPluginsBailResult("call require.resolve(Weak)", expr, true);
		});
		parser.plugin("call require.resolve(Weak)", function(expr, weak) {
			if(expr.arguments.length !== 1) return;
			var param = this.evaluateExpression(expr.arguments[0]);
			var dep;
			if(param.isConditional()) {
				param.options.forEach(function(option) {
					var result = this.applyPluginsBailResult("call require.resolve(Weak):item", expr, option, weak);
					if(result === undefined) {
						this.applyPluginsBailResult("call require.resolve(Weak):context", expr, option, weak);
					}
				}, this);
				dep = new RequireResolveHeaderDependency(expr.callee.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			} else {
				var result = this.applyPluginsBailResult("call require.resolve(Weak):item", expr, param, weak);
				if(result === undefined) {
					this.applyPluginsBailResult("call require.resolve(Weak):context", expr, param, weak);
				}
				dep = new RequireResolveHeaderDependency(expr.callee.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require.resolve(Weak):item", function(expr, param, weak) {
			if(param.isString()) {
				var dep = new RequireResolveDependency(param.string, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				dep.weak = weak;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require.resolve(Weak):context", function(expr, param, weak) {
			var dep = ContextDependencyHelpers.create(RequireResolveContextDependency, param.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			dep.weak = weak;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 182 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependencyHelpers = exports;

	ContextDependencyHelpers.create = function(Dep, range, param, expr, options) {
		if(param.isWrapped() && (param.prefix && param.prefix.isString() || param.postfix && param.postfix.isString())) {
			var prefix = param.prefix && param.prefix.isString() ? param.prefix.string : "";
			var postfix = param.postfix && param.postfix.isString() ? param.postfix.string : "";
			var prefixRange = param.prefix && param.prefix.isString() ? param.prefix.range : null;
			var valueRange = [prefixRange ? prefixRange[1] : param.range[0], param.range[1]];
			var idx = prefix.lastIndexOf("/");
			var context = ".";
			if(idx >= 0) {
				context = prefix.substr(0, idx);
				prefix = "." + prefix.substr(idx);
			}
			var regExp = new RegExp("^" +
				prefix.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") +
				options.wrappedContextRegExp.source +
				postfix.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + "$");
			var dep = new Dep(context, options.wrappedContextRecursive, regExp, range, valueRange);
			dep.loc = expr.loc;
			dep.prepend = param.prefix && param.prefix.isString() ? prefix : null;
			dep.critical = options.wrappedContextCritical && "a part of the request of a dependency is an expression";
			return dep;
		} else {
			var dep = new Dep(options.exprContextRequest, options.exprContextRecursive, options.exprContextRegExp, range, param.range);
			dep.loc = expr.loc;
			dep.critical = options.exprContextCritical && "the request of a dependency is an expression";
			return dep;
		}
	};


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(152);
	var CommonJsRequireDependency = __webpack_require__(170);
	var CommonJsRequireContextDependency = __webpack_require__(173);
	var RequireHeaderDependency = __webpack_require__(180);
	var LocalModuleDependency = __webpack_require__(184);
	var ContextDependencyHelpers = __webpack_require__(182);
	var LocalModulesHelpers = __webpack_require__(185);

	function CommonJsRequireDependencyParserPlugin(options) {
		this.options = options;
	}

	module.exports = CommonJsRequireDependencyParserPlugin;

	CommonJsRequireDependencyParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("expression require.cache", function(expr) {
			var dep = new ConstDependency("__webpack_require__.c", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		parser.plugin("expression require", function(expr) {
			var dep = new CommonJsRequireContextDependency(options.unknownContextRequest, options.unknownContextRecursive, options.unknownContextRegExp, expr.range);
			dep.critical = options.unknownContextCritical && "require function is used in a way in which dependencies cannot be statically extracted";
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
		parser.plugin("call require", function(expr) {
			if(expr.arguments.length !== 1) return;
			var localModule, dep;
			var param = this.evaluateExpression(expr.arguments[0]);
			if(param.isConditional()) {
				var isExpression = false;
				var prevLength = this.state.current.dependencies.length;
				dep = new RequireHeaderDependency(expr.callee.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				param.options.forEach(function(param) {
					var result = this.applyPluginsBailResult("call require:commonjs:item", expr, param);
					if(result === undefined) {
						isExpression = true;
					}
				}, this);
				if(isExpression) {
					this.state.current.dependencies.length = prevLength;
				} else {
					return true;
				}
			}
			if(param.isString() && (localModule = LocalModulesHelpers.getLocalModule(this.state, param.string))) {
				dep = new LocalModuleDependency(localModule, expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			} else {
				var result = this.applyPluginsBailResult("call require:commonjs:item", expr, param);
				if(result === undefined) {
					this.applyPluginsBailResult("call require:commonjs:context", expr, param);
				} else {
					dep = new RequireHeaderDependency(expr.callee.range);
					dep.loc = expr.loc;
					this.state.current.addDependency(dep);
				}
				return true;
			}
		});
		parser.plugin("call require:commonjs:item", function(expr, param) {
			if(param.isString()) {
				var dep = new CommonJsRequireDependency(param.string, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require:commonjs:context", function(expr, param) {
			var dep = ContextDependencyHelpers.create(CommonJsRequireContextDependency, expr.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);

	function LocalModuleDependency(localModule, range) {
		NullDependency.call(this);
		localModule.flagUsed();
		this.localModule = localModule;
		this.range = range;
	}
	module.exports = LocalModuleDependency;

	LocalModuleDependency.prototype = Object.create(NullDependency.prototype);
	LocalModuleDependency.prototype.constructor = LocalModuleDependency;

	LocalModuleDependency.Template = function LocalModuleDependencyTemplate() {};

	LocalModuleDependency.Template.prototype.apply = function(dep, source) {
		if(!dep.range) return;
		source.replace(dep.range[0], dep.range[1] - 1, dep.localModule.variableName());
	};


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var LocalModule = __webpack_require__(186);

	var LocalModulesHelpers = exports;

	LocalModulesHelpers.addLocalModule = function(state, name) {
		if(!state.localModules) state.localModules = [];
		var m = new LocalModule(state.module, name, state.localModules.length);
		state.localModules.push(m);
		return m;
	};

	LocalModulesHelpers.getLocalModule = function(state, name, namedModule) {
		if(!state.localModules) return null;
		if(namedModule) {
			// resolve dependency name relative to the defining named module
			name = lookup(namedModule, name);
		}
		for(var i = 0; i < state.localModules.length; i++) {
			if(state.localModules[i].name === name)
				return state.localModules[i];
		}
		return null;
	};

	function lookup(parent, mod) {
		if(mod.charAt(0) !== ".") return mod;

		var path = parent.split("/"),
			segs = mod.split("/");
		path.pop();

		for(var i = 0; i < segs.length; i++) {
			var seg = segs[i];
			if(seg === "..") path.pop();
			else if(seg !== ".") path.push(seg);
		}

		return path.join("/");
	}


/***/ },
/* 186 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LocalModule(module, name, idx) {
		this.module = module;
		this.name = name;
		this.idx = idx;
		this.used = false;
	}
	module.exports = LocalModule;

	LocalModule.prototype.flagUsed = function() {
		this.used = true;
	};

	LocalModule.prototype.variableName = function() {
		return "__WEBPACK_LOCAL_MODULE_" + this.idx + "__";
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);
	var AMDRequireDependency = __webpack_require__(188);
	var AMDRequireItemDependency = __webpack_require__(190);
	var AMDRequireArrayDependency = __webpack_require__(192);
	var AMDRequireContextDependency = __webpack_require__(193);
	var AMDDefineDependency = __webpack_require__(194);
	var LocalModuleDependency = __webpack_require__(184);
	var ConstDependency = __webpack_require__(152);

	var NullFactory = __webpack_require__(154);

	var AMDRequireDependenciesBlockParserPlugin = __webpack_require__(195);
	var AMDDefineDependencyParserPlugin = __webpack_require__(197);

	var ModuleAliasPlugin = __webpack_require__(161);

	var BasicEvaluatedExpression = __webpack_require__(108);

	function AMDPlugin(options, amdOptions) {
		this.amdOptions = amdOptions;
		this.options = options;
	}
	module.exports = AMDPlugin;

	AMDPlugin.prototype.apply = function(compiler) {
		function setTypeof(expr, value) {
			compiler.parser.plugin("evaluate typeof " + expr, function(expr) {
				return new BasicEvaluatedExpression().setString(value).setRange(expr.range);
			});
			compiler.parser.plugin("typeof " + expr, function(expr) {
				var dep = new ConstDependency(JSON.stringify(value), expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}

		function setExpressionToModule(expr, module) {
			compiler.parser.plugin("expression " + expr, function(expr) {
				var dep = new AMDRequireItemDependency(module, expr.range);
				dep.userRequest = expr;
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
		var amdOptions = this.amdOptions;
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
			var contextModuleFactory = params.contextModuleFactory;

			compilation.dependencyFactories.set(AMDRequireDependency, new NullFactory());
			compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());

			compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());

			compilation.dependencyFactories.set(AMDRequireArrayDependency, new NullFactory());
			compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());

			compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());

			compilation.dependencyFactories.set(AMDDefineDependency, new NullFactory());
			compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());

			compilation.dependencyFactories.set(LocalModuleDependency, new NullFactory());
			compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());
		});
		compiler.parser.apply(
			new AMDRequireDependenciesBlockParserPlugin(this.options),
			new AMDDefineDependencyParserPlugin(this.options)
		);
		setExpressionToModule("require.amd", "!!webpack amd options");
		setExpressionToModule("define.amd", "!!webpack amd options");
		setExpressionToModule("define", "!!webpack amd define");
		compiler.parser.plugin("expression __webpack_amd_options__", function() {
			return this.state.current.addVariable("__webpack_amd_options__", JSON.stringify(amdOptions));
		});
		compiler.parser.plugin("evaluate typeof define.amd", function(expr) {
			return new BasicEvaluatedExpression().setString(typeof amdOptions).setRange(expr.range);
		});
		compiler.parser.plugin("evaluate typeof require.amd", function(expr) {
			return new BasicEvaluatedExpression().setString(typeof amdOptions).setRange(expr.range);
		});
		compiler.parser.plugin("evaluate Identifier define.amd", function(expr) {
			return new BasicEvaluatedExpression().setBoolean(true).setRange(expr.range);
		});
		compiler.parser.plugin("evaluate Identifier require.amd", function(expr) {
			return new BasicEvaluatedExpression().setBoolean(true).setRange(expr.range);
		});
		setTypeof("define", "function");
		compiler.parser.plugin("can-rename define", function() {
			return true;
		});
		compiler.parser.plugin("rename define", function(expr) {
			var dep = new AMDRequireItemDependency("!!webpack amd define", expr.range);
			dep.userRequest = "define";
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return false;
		});
		setTypeof("require", "function");
		compiler.resolvers.normal.apply(
			new ModuleAliasPlugin({
				"amdefine": path.join(__dirname, "..", "..", "buildin", "amd-define.js"),
				"webpack amd options": path.join(__dirname, "..", "..", "buildin", "amd-options.js"),
				"webpack amd define": path.join(__dirname, "..", "..", "buildin", "amd-define.js")
			})
		);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);
	var DepBlockHelpers = __webpack_require__(189);

	function AMDRequireDependency(block) {
		NullDependency.call(this);
		this.block = block;
	}
	module.exports = AMDRequireDependency;

	AMDRequireDependency.prototype = Object.create(NullDependency.prototype);
	AMDRequireDependency.prototype.constructor = AMDRequireDependency;

	AMDRequireDependency.Template = function AMDRequireDependencyTemplate() {};

	AMDRequireDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var depBlock = dep.block;
		var wrapper = DepBlockHelpers.getLoadDepBlockWrapper(depBlock, outputOptions, requestShortener, "require");
		if(depBlock.arrayRange && !depBlock.functionRange) {
			if(wrapper) {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					wrapper[0] + "function() {");
				source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, ";}" + wrapper[1]);
			} else {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					"!/* require */(" + asComment(depBlock.chunkReason));
				source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, ")");
			}
		} else if(!depBlock.arrayRange && depBlock.functionRange) {
			if(wrapper) {
				source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1,
					wrapper[0] + "function(__webpack_require__) {(");
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, ".call(exports, __webpack_require__, exports, module));}" + wrapper[1]);
			} else {
				source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1,
					"!/* require */(" + asComment(depBlock.chunkReason));
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, ".call(exports, __webpack_require__, exports, module))");
			}
		} else if(depBlock.arrayRange && depBlock.functionRange) {
			if(wrapper) {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					wrapper[0] + "function(__webpack_require__) { ");
				source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
				source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; (");
				source.insert(depBlock.functionRange[1], ".apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));");
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, "}" + wrapper[1]);
			} else {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					"!/* require */(" + asComment(depBlock.chunkReason) + "function() { ");
				source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
				source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; (");
				source.insert(depBlock.functionRange[1], ".apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));");
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, "}())");
			}
		}
	};

	function asComment(str) {
		if(!str) return "";
		return "/* " + str + " */";
	}


/***/ },
/* 189 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DepBlockHelpers = exports;

	DepBlockHelpers.getLoadDepBlockWrapper = function(depBlock, outputOptions, requestShortener, name) {
		if(depBlock.chunks) {
			var chunks = depBlock.chunks.filter(function(chunk) {
				return !chunk.entry && typeof chunk.id === "number";
			});
			if(chunks.length === 1) {
				var chunk = chunks[0];
				return [
					"__webpack_require__.e" + asComment(name) + "(" + chunk.id + "" +
					(outputOptions.pathinfo && depBlock.chunkName ? "/*! " + requestShortener.shorten(depBlock.chunkName) + " */" : "") +
					asComment(depBlock.chunkReason) + ", ",
					")"
				];
			} else if(chunks.length > 0) {
				return [
					"(function(" + asComment(name) + ") {" +
					"var __WEBPACK_REMAINING_CHUNKS__ = " + chunks.length + ";" +
					"var __WEBPACK_CALLBACK__ = function() {" +
					"if(--__WEBPACK_REMAINING_CHUNKS__ < 1) (",

					"(__webpack_require__));" +
					"};" +
					chunks.map(function(chunk) {
						return "__webpack_require__.e(" + chunk.id + ", __WEBPACK_CALLBACK__);";
					}).join("") +
					"}())"
				];
			}
		}
	};

	function asComment(str) {
		if(!str) return "";
		return "/* " + str + " */";
	}


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function AMDRequireItemDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = AMDRequireItemDependency;

	AMDRequireItemDependency.prototype = Object.create(ModuleDependency.prototype);
	AMDRequireItemDependency.prototype.constructor = AMDRequireItemDependency;
	AMDRequireItemDependency.prototype.type = "amd require";

	AMDRequireItemDependency.Template = __webpack_require__(191);


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleDependencyTemplateAsRequireId() {}
	module.exports = ModuleDependencyTemplateAsRequireId;

	ModuleDependencyTemplateAsRequireId.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		if(!dep.range) return;
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module)
			var content = "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")";
		else
			var content = __webpack_require__(172).module(dep.request);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	};

	ModuleDependencyTemplateAsRequireId.prototype.applyAsTemplateArgument = function(name, dep, source) {
		if(!dep.range) return;
		source.replace(dep.range[0], dep.range[1] - 1, "(__webpack_require__(" + name + "))");
	};


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(85);

	function AMDRequireArrayDependency(depsArray, range) {
		Dependency.call(this);
		this.depsArray = depsArray;
		this.range = range;
	}
	module.exports = AMDRequireArrayDependency;

	AMDRequireArrayDependency.prototype = Object.create(Dependency.prototype);
	AMDRequireArrayDependency.prototype.constructor = AMDRequireArrayDependency;
	AMDRequireArrayDependency.prototype.type = "amd require array";

	AMDRequireArrayDependency.Template = function AMDRequireArrayDependencyTemplate() {};

	AMDRequireArrayDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var content = "[" + dep.depsArray.map(function(dep) {
			if(typeof dep === "string") {
				return dep;
			} else {
				var comment = "";
				if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
				if(dep.module)
					return "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")";
				else
					return __webpack_require__(172).module(dep.request);
			}
		}).join(", ") + "]";
		source.replace(dep.range[0], dep.range[1] - 1, content);
	};


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(174);

	function AMDRequireContextDependency(request, recursive, regExp, range, valueRange) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
		this.valueRange = valueRange;
	}
	module.exports = AMDRequireContextDependency;

	AMDRequireContextDependency.prototype = Object.create(ContextDependency.prototype);
	AMDRequireContextDependency.prototype.constructor = AMDRequireContextDependency;
	AMDRequireContextDependency.prototype.type = "amd require context";

	AMDRequireContextDependency.Template = __webpack_require__(175);


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);

	function AMDDefineDependency(range, arrayRange, functionRange, objectRange) {
		NullDependency.call(this);
		this.range = range;
		this.arrayRange = arrayRange;
		this.functionRange = functionRange;
		this.objectRange = objectRange;
	}
	module.exports = AMDDefineDependency;

	AMDDefineDependency.prototype = Object.create(NullDependency.prototype);
	AMDDefineDependency.prototype.constructor = AMDDefineDependency;
	AMDDefineDependency.prototype.type = "amd define";

	AMDDefineDependency.Template = function AMDRequireDependencyTemplate() {};

	AMDDefineDependency.Template.prototype.apply = function(dep, source) {
		var localModuleVar = dep.localModule && dep.localModule.used && dep.localModule.variableName();

		function replace(def, text) {
			if(localModuleVar) text = text.replace(/XXX/g, localModuleVar.replace(/\$/g, "$$$$"));
			if(localModuleVar) def = def.replace(/XXX/g, localModuleVar.replace(/\$/g, "$$$$"));
			var texts = text.split("#");
			if(def)
				source.insert(0, def);
			var current = dep.range[0];
			if(dep.arrayRange) {
				source.replace(current, dep.arrayRange[0] - 1, texts.shift());
				current = dep.arrayRange[1];
			}
			if(dep.objectRange) {
				source.replace(current, dep.objectRange[0] - 1, texts.shift());
				current = dep.objectRange[1];
			} else if(dep.functionRange) {
				source.replace(current, dep.functionRange[0] - 1, texts.shift());
				current = dep.functionRange[1];
			}
			source.replace(current, dep.range[1] - 1, texts.shift());
			if(texts.length > 0)
				throw new Error("Implementation error");
		}
		var branch = (localModuleVar ? "l" : "") + (dep.arrayRange ? "a" : "") + (dep.objectRange ? "o" : "") + (dep.functionRange ? "f" : "");
		var defs = {
			f: ["var __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_RESULT__ = #.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			o: ["", "!(module.exports = #)"],
			of: ["var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_FACTORY__ = (#), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			af: ["var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_RESULT__ = #.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			ao: ["", "!(#, module.exports = #)"],
			aof: ["var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			lf: ["var XXX;", "!(XXX = #.call(exports, __webpack_require__, exports, module))"],
			lo: ["var XXX;", "!(XXX = #)"],
			lof: ["var __WEBPACK_AMD_DEFINE_FACTORY__, XXX;", "!(__WEBPACK_AMD_DEFINE_FACTORY__ = (#), XXX = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__))"],
			laf: ["var __WEBPACK_AMD_DEFINE_ARRAY__, XXX;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, XXX = (#.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))"],
			lao: ["var XXX;", "!(#, XXX = #)"],
			laof: ["var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, XXX;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#), XXX = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__))"]
		};
		replace.apply(null, defs[branch]);
	};


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AMDRequireItemDependency = __webpack_require__(190);
	var AMDRequireArrayDependency = __webpack_require__(192);
	var AMDRequireContextDependency = __webpack_require__(193);
	var AMDRequireDependenciesBlock = __webpack_require__(196);
	var LocalModuleDependency = __webpack_require__(184);
	var ContextDependencyHelpers = __webpack_require__(182);
	var LocalModulesHelpers = __webpack_require__(185);
	var ConstDependency = __webpack_require__(152);

	function AMDRequireDependenciesBlockParserPlugin(options) {
		this.options = options;
	}

	module.exports = AMDRequireDependenciesBlockParserPlugin;

	AMDRequireDependenciesBlockParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("call require", function(expr) {
			switch(expr.arguments.length) {
				case 1:
					var param = this.evaluateExpression(expr.arguments[0]);
					var result;
					var dep = new AMDRequireDependenciesBlock(expr, param.range, null, this.state.module, expr.loc);
					var old = this.state.current;
					this.state.current = dep;
					this.inScope([], function() {
						result = this.applyPluginsBailResult("call require:amd:array", expr, param);
					}.bind(this));
					this.state.current = old;
					if(!result) return;
					this.state.current.addBlock(dep);
					return true;
				case 2:
					var param = this.evaluateExpression(expr.arguments[0]);
					var dep = new AMDRequireDependenciesBlock(expr, param.range, expr.arguments[1].range, this.state.module, expr.loc);
					dep.loc = expr.loc;
					var old = this.state.current;
					this.state.current = dep;
					try {
						var result;
						this.inScope([], function() {
							result = this.applyPluginsBailResult("call require:amd:array", expr, param);
						}.bind(this));
						if(!result) return;
						if(expr.arguments[1].type === "FunctionExpression") {
							this.inScope(expr.arguments[1].params.filter(function(i) {
								return ["require", "module", "exports"].indexOf(i.name) < 0;
							}), function() {
								if(expr.arguments[1].body.type === "BlockStatement")
									this.walkStatement(expr.arguments[1].body);
								else
									this.walkExpression(expr.arguments[1].body);
							}.bind(this));
						}
					} finally {
						this.state.current = old;
						this.state.current.addBlock(dep);
					}
					return true;
			}
		});
		parser.plugin("call require:amd:array", function(expr, param) {
			if(param.isArray()) {
				param.items.forEach(function(param) {
					var result = this.applyPluginsBailResult("call require:amd:item", expr, param);
					if(result === undefined) {
						this.applyPluginsBailResult("call require:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isConstArray()) {
				var deps = [];
				param.array.forEach(function(request) {
					var dep, localModule;
					if(request === "require") {
						dep = "__webpack_require__";
					} else if(["exports", "module"].indexOf(request) >= 0) {
						dep = request;
					} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, request)) { // eslint-disable-line no-cond-assign
						dep = new LocalModuleDependency(localModule);
						dep.loc = expr.loc;
						this.state.current.addDependency(dep);
					} else {
						dep = new AMDRequireItemDependency(request);
						dep.loc = expr.loc;
						dep.optional = !!this.scope.inTry;
						this.state.current.addDependency(dep);
					}
					deps.push(dep);
				}, this);
				var dep = new AMDRequireArrayDependency(deps, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require:amd:item", function(expr, param) {
			if(param.isConditional()) {
				param.options.forEach(function(param) {
					var result = this.applyPluginsBailResult("call require:amd:item", expr, param);
					if(result === undefined) {
						this.applyPluginsBailResult("call require:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isString()) {
				var dep, localModule;
				if(param.string === "require") {
					dep = new ConstDependency("__webpack_require__", param.string);
				} else if(["exports", "module"].indexOf(param.string) >= 0) {
					dep = new ConstDependency(param.string, param.range);
				} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, param.string)) { // eslint-disable-line no-cond-assign
					dep = new LocalModuleDependency(localModule, param.range);
				} else {
					dep = new AMDRequireItemDependency(param.string, param.range);
				}
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require:amd:context", function(expr, param) {
			var dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AsyncDependenciesBlock = __webpack_require__(123);
	var AMDRequireDependency = __webpack_require__(188);

	function AMDRequireDependenciesBlock(expr, arrayRange, functionRange, module, loc) {
		AsyncDependenciesBlock.call(this, null, module, loc);
		this.expr = expr;
		this.outerRange = expr.range;
		this.arrayRange = arrayRange;
		this.functionRange = functionRange;
		this.range = arrayRange && functionRange ? [arrayRange[0], functionRange[1]] :
			arrayRange ? arrayRange :
			functionRange ? functionRange :
			expr.range;
		var dep = new AMDRequireDependency(this);
		dep.loc = loc;
		this.addDependency(dep);
	}
	module.exports = AMDRequireDependenciesBlock;

	AMDRequireDependenciesBlock.prototype = Object.create(AsyncDependenciesBlock.prototype);


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AMDRequireItemDependency = __webpack_require__(190);
	var AMDRequireContextDependency = __webpack_require__(193);
	var ConstDependency = __webpack_require__(152);
	var AMDDefineDependency = __webpack_require__(194);
	var AMDRequireArrayDependency = __webpack_require__(192);
	var LocalModuleDependency = __webpack_require__(184);
	var ContextDependencyHelpers = __webpack_require__(182);
	var LocalModulesHelpers = __webpack_require__(185);

	function isBoundFunctionExpression(expr) {
		if(expr.type !== "CallExpression") return false;
		if(expr.callee.type !== "MemberExpression") return false;
		if(expr.callee.computed) return false;
		if(expr.callee.object.type !== "FunctionExpression") return false;
		if(expr.callee.property.type !== "Identifier") return false;
		if(expr.callee.property.name !== "bind") return false;
		return true;
	}

	function AMDDefineDependencyParserPlugin(options) {
		this.options = options;
	}

	module.exports = AMDDefineDependencyParserPlugin;
	AMDDefineDependencyParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("call define", function(expr) {
			var array, fn, obj, namedModule;
			switch(expr.arguments.length) {
				case 1:
					if(expr.arguments[0].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[0])) {
						// define(f() {...})
						fn = expr.arguments[0];
					} else if(expr.arguments[0].type === "ObjectExpression") {
						// define({...})
						obj = expr.arguments[0];
					} else {
						// define(expr)
						// unclear if function or object
						obj = fn = expr.arguments[0];
					}
					break;
				case 2:
					if(expr.arguments[0].type === "Literal") {
						namedModule = expr.arguments[0].value;
						// define("...", ...)
						if(expr.arguments[1].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[1])) {
							// define("...", f() {...})
							fn = expr.arguments[1];
						} else if(expr.arguments[1].type === "ObjectExpression") {
							// define("...", {...})
							obj = expr.arguments[1];
						} else {
							// define("...", expr)
							// unclear if function or object
							obj = fn = expr.arguments[1];
						}
					} else {
						array = expr.arguments[0];
						if(expr.arguments[1].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[1])) {
							// define([...], f() {})
							fn = expr.arguments[1];
						} else if(expr.arguments[1].type === "ObjectExpression") {
							// define([...], {...})
							obj = expr.arguments[1];
						} else {
							// define([...], expr)
							// unclear if function or object
							obj = fn = expr.arguments[1];
						}
					}
					break;
				case 3:
					// define("...", [...], f() {...})
					namedModule = expr.arguments[0].value;
					array = expr.arguments[1];
					if(expr.arguments[2].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[2])) {
						// define("...", [...], f() {})
						fn = expr.arguments[2];
					} else if(expr.arguments[2].type === "ObjectExpression") {
						// define("...", [...], {...})
						obj = expr.arguments[2];
					} else {
						// define("...", [...], expr)
						// unclear if function or object
						obj = fn = expr.arguments[2];
					}
					break;
				default:
					return;
			}
			var fnParams = null;
			var fnParamsOffset = 0;
			if(fn) {
				if(fn.type === "FunctionExpression") fnParams = fn.params;
				else if(isBoundFunctionExpression(fn)) {
					fnParams = fn.callee.object.params;
					fnParamsOffset = fn.arguments.length - 1;
					if(fnParamsOffset < 0) fnParamsOffset = 0;
				}
			}
			var fnRenames = Object.create(this.scope.renames);
			var identifiers;
			if(array) {
				identifiers = {};
				var param = this.evaluateExpression(array);
				var result = this.applyPluginsBailResult("call define:amd:array", expr, param, identifiers, namedModule);
				if(!result) return;
				if(fnParams) fnParams = fnParams.slice(fnParamsOffset).filter(function(param, idx) {
					if(identifiers[idx]) {
						fnRenames["$" + param.name] = identifiers[idx];
						return false;
					}
					return true;
				});
			} else {
				identifiers = ["require", "exports", "module"];
				if(fnParams) fnParams = fnParams.slice(fnParamsOffset).filter(function(param, idx) {
					if(identifiers[idx]) {
						fnRenames["$" + param.name] = identifiers[idx];
						return false;
					}
					return true;
				});
			}
			var inTry;
			if(fn && fn.type === "FunctionExpression") {
				inTry = this.scope.inTry;
				this.inScope(fnParams, function() {
					this.scope.renames = fnRenames;
					this.scope.inTry = inTry;
					if(fn.body.type === "BlockStatement")
						this.walkStatement(fn.body);
					else
						this.walkExpression(fn.body);
				}.bind(this));
			} else if(fn && isBoundFunctionExpression(fn)) {
				inTry = this.scope.inTry;
				this.inScope(fn.callee.object.params.filter(function(i) {
					return ["require", "module", "exports"].indexOf(i.name) < 0;
				}), function() {
					this.scope.renames = fnRenames;
					this.scope.inTry = inTry;
					if(fn.callee.object.body.type === "BlockStatement")
						this.walkStatement(fn.callee.object.body);
					else
						this.walkExpression(fn.callee.object.body);
				}.bind(this));
				if(fn.arguments)
					this.walkExpressions(fn.arguments);
			} else if(fn || obj) {
				this.walkExpression(fn || obj);
			}
			var dep = new AMDDefineDependency(expr.range, array ? array.range : null, fn ? fn.range : null, obj ? obj.range : null);
			dep.loc = expr.loc;
			if(namedModule) {
				dep.localModule = LocalModulesHelpers.addLocalModule(this.state, namedModule);
			}
			this.state.current.addDependency(dep);
			return true;
		});
		parser.plugin("call define:amd:array", function(expr, param, identifiers, namedModule) {
			if(param.isArray()) {
				param.items.forEach(function(param, idx) {
					if(param.isString() && ["require", "module", "exports"].indexOf(param.string) >= 0)
						identifiers[idx] = param.string;
					var result = this.applyPluginsBailResult("call define:amd:item", expr, param, namedModule);
					if(result === undefined) {
						this.applyPluginsBailResult("call define:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isConstArray()) {
				var deps = [];
				param.array.forEach(function(request, idx) {
					var dep, localModule;
					if(request === "require") {
						identifiers[idx] = request;
						dep = "__webpack_require__";
					} else if(["exports", "module"].indexOf(request) >= 0) {
						identifiers[idx] = request;
						dep = request;
					} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, request)) { // eslint-disable-line no-cond-assign
						dep = new LocalModuleDependency(localModule);
						dep.loc = expr.loc;
						this.state.current.addDependency(dep);
					} else {
						dep = new AMDRequireItemDependency(request);
						dep.loc = expr.loc;
						dep.optional = !!this.scope.inTry;
						this.state.current.addDependency(dep);
					}
					deps.push(dep);
				}, this);
				var dep = new AMDRequireArrayDependency(deps, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call define:amd:item", function(expr, param, namedModule) {
			if(param.isConditional()) {
				param.options.forEach(function(param) {
					var result = this.applyPluginsBailResult("call define:amd:item", expr, param);
					if(result === undefined) {
						this.applyPluginsBailResult("call define:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isString()) {
				var dep, localModule;
				if(param.string === "require") {
					dep = new ConstDependency("__webpack_require__", param.range);
				} else if(["require", "exports", "module"].indexOf(param.string) >= 0) {
					dep = new ConstDependency(param.string, param.range);
				} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, param.string, namedModule)) { // eslint-disable-line no-cond-assign
					dep = new LocalModuleDependency(localModule, param.range);
				} else {
					dep = new AMDRequireItemDependency(param.string, param.range);
				}
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call define:amd:context", function(expr, param) {
			var dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireContextDependency = __webpack_require__(199);
	var ContextElementDependency = __webpack_require__(128);

	var RequireContextDependencyParserPlugin = __webpack_require__(200);

	function RequireContextPlugin(modulesDirectories, extensions) {
		this.modulesDirectories = modulesDirectories;
		this.extensions = extensions;
	}
	module.exports = RequireContextPlugin;

	RequireContextPlugin.prototype.apply = function(compiler) {
		var modulesDirectories = this.modulesDirectories;
		var extensions = this.extensions;
		compiler.plugin("compilation", function(compilation, params) {
			var contextModuleFactory = params.contextModuleFactory;
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(RequireContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(RequireContextDependency, new RequireContextDependency.Template());

			compilation.dependencyFactories.set(ContextElementDependency, normalModuleFactory);
		});
		compiler.plugin("context-module-factory", function(cmf) {
			cmf.plugin("alternatives", function(items, callback) {
				if(items.length === 0) return callback(null, items);

				callback(null, items.map(function(obj) {
					return extensions.filter(function(ext) {
						var l = obj.request.length;
						return l > ext.length && obj.request.substr(l - ext.length, l) === ext;
					}).map(function(ext) {
						var l = obj.request.length;
						return {
							context: obj.context,
							request: obj.request.substr(0, l - ext.length)
						};
					});
				}).reduce(function(a, b) {
					return a.concat(b);
				}, []));
			});
			cmf.plugin("alternatives", function(items, callback) {
				if(items.length === 0) return callback(null, items);

				callback(null, items.map(function(obj) {
					for(var i = 0; i < modulesDirectories.length; i++) {
						var dir = modulesDirectories[i];
						var idx = obj.request.indexOf("./" + dir + "/");
						if(idx === 0) {
							obj.request = obj.request.slice(dir.length + 3);
							break;
						}
					}
					return obj;
				}));
			});
		});
		new RequireContextDependencyParserPlugin().apply(compiler.parser);
	};


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(174);

	function RequireContextDependency(request, recursive, regExp, range) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
	}
	module.exports = RequireContextDependency;

	RequireContextDependency.prototype = Object.create(ContextDependency.prototype);
	RequireContextDependency.prototype.constructor = RequireContextDependency;
	RequireContextDependency.prototype.type = "require.context";

	RequireContextDependency.Template = __webpack_require__(191);


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AbstractPlugin = __webpack_require__(201);
	var RequireContextDependency = __webpack_require__(199);

	module.exports = AbstractPlugin.create({
		"call require.context": function(expr) {
			var regExp = /^\.\/.*$/;
			var recursive = true;
			switch(expr.arguments.length) {
				case 3:
					var regExpExpr = this.evaluateExpression(expr.arguments[2]);
					if(!regExpExpr.isRegExp()) return;
					regExp = regExpExpr.regExp;
					// falls through
				case 2:
					var recursiveExpr = this.evaluateExpression(expr.arguments[1]);
					if(!recursiveExpr.isBoolean()) return;
					recursive = recursiveExpr.bool;
					// falls through
				case 1:
					var requestExpr = this.evaluateExpression(expr.arguments[0]);
					if(!requestExpr.isString()) return;
					var dep = new RequireContextDependency(requestExpr.string, recursive, regExp, expr.range);
					dep.loc = expr.loc;
					dep.optional = this.scope.inTry;
					this.state.current.addDependency(dep);
					return true;
			}
		}
	});


/***/ },
/* 201 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function AbstractPlugin(plugins) {
		this._plugins = plugins || {};
	}
	module.exports = AbstractPlugin;

	AbstractPlugin.create = function(plugins) {
		function Plugin() {
			AbstractPlugin.call(this, plugins);
		}
		Plugin.prototype = Object.create(AbstractPlugin.prototype);
		return Plugin;
	};

	AbstractPlugin.prototype.apply = function(object) {
		for(var name in this._plugins) {
			object.plugin(name, this._plugins[name]);
		}
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireEnsureItemDependency = __webpack_require__(203);
	var RequireEnsureDependency = __webpack_require__(205);
	var ConstDependency = __webpack_require__(152);

	var NullFactory = __webpack_require__(154);

	var RequireEnsureDependenciesBlockParserPlugin = __webpack_require__(206);

	var BasicEvaluatedExpression = __webpack_require__(108);

	function RequireEnsurePlugin() {}
	module.exports = RequireEnsurePlugin;

	RequireEnsurePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(RequireEnsureItemDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(RequireEnsureItemDependency, new RequireEnsureItemDependency.Template());

			compilation.dependencyFactories.set(RequireEnsureDependency, new NullFactory());
			compilation.dependencyTemplates.set(RequireEnsureDependency, new RequireEnsureDependency.Template());
		});
		new RequireEnsureDependenciesBlockParserPlugin().apply(compiler.parser);
		compiler.parser.plugin("evaluate typeof require.ensure", function(expr) {
			return new BasicEvaluatedExpression().setString("function").setRange(expr.range);
		});
		compiler.parser.plugin("typeof require.ensure", function(expr) {
			var dep = new ConstDependency("'function'", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function RequireEnsureItemDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = RequireEnsureItemDependency;

	RequireEnsureItemDependency.prototype = Object.create(ModuleDependency.prototype);
	RequireEnsureItemDependency.prototype.constructor = RequireEnsureItemDependency;
	RequireEnsureItemDependency.prototype.type = "require.ensure item";

	RequireEnsureItemDependency.Template = __webpack_require__(204);


/***/ },
/* 204 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function NullDependencyTemplate() {}
	module.exports = NullDependencyTemplate;

	NullDependencyTemplate.prototype.apply = function() {};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(153);
	var DepBlockHelpers = __webpack_require__(189);

	function RequireEnsureDependency(block) {
		NullDependency.call(this);
		this.block = block;
	}
	module.exports = RequireEnsureDependency;

	RequireEnsureDependency.prototype = Object.create(NullDependency.prototype);
	RequireEnsureDependency.prototype.constructor = RequireEnsureDependency;
	RequireEnsureDependency.prototype.type = "require.ensure";

	RequireEnsureDependency.Template = function RequireEnsureDependencyTemplate() {};

	RequireEnsureDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var depBlock = dep.block;
		var wrapper = DepBlockHelpers.getLoadDepBlockWrapper(depBlock, outputOptions, requestShortener, /*require.e*/ "nsure");
		if(!wrapper) wrapper = [
			"!/* require.ensure */(",
			"(__webpack_require__))"
		];
		source.replace(depBlock.expr.range[0], depBlock.expr.arguments[1].range[0] - 1, wrapper[0]);
		source.replace(depBlock.expr.arguments[1].range[1], depBlock.expr.range[1] - 1, wrapper[1]);
	};


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AbstractPlugin = __webpack_require__(201);
	var RequireEnsureDependenciesBlock = __webpack_require__(207);
	var RequireEnsureItemDependency = __webpack_require__(203);
	var getFunctionExpression = __webpack_require__(208);

	module.exports = AbstractPlugin.create({
		"call require.ensure": function(expr) {
			var chunkName = null,
				chunkNameRange = null;
			switch(expr.arguments.length) {
				case 3:
					var chunkNameExpr = this.evaluateExpression(expr.arguments[2]);
					if(!chunkNameExpr.isString()) return;
					chunkNameRange = chunkNameExpr.range;
					chunkName = chunkNameExpr.string;
					// falls through
				case 2:
					var dependenciesExpr = this.evaluateExpression(expr.arguments[0]);
					var dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];
					var fnExpressionArg = expr.arguments[1];
					var fnExpression = getFunctionExpression(fnExpressionArg);

					if(fnExpression) {
						this.walkExpressions(fnExpression.expressions);
					}

					var dep = new RequireEnsureDependenciesBlock(expr, fnExpression ? fnExpression.fn : fnExpressionArg, chunkName, chunkNameRange, this.state.module, expr.loc);
					var old = this.state.current;
					this.state.current = dep;
					try {
						var failed = false;
						this.inScope([], function() {
							dependenciesItems.forEach(function(ee) {
								if(ee.isString()) {
									var edep = new RequireEnsureItemDependency(ee.string, ee.range);
									edep.loc = dep.loc;
									dep.addDependency(edep);
								} else {
									failed = true;
								}
							});
						});
						if(failed) {
							return;
						}
						if(fnExpression) {
							if(fnExpression.fn.body.type === "BlockStatement")
								this.walkStatement(fnExpression.fn.body);
							else
								this.walkExpression(fnExpression.fn.body);
						}
						old.addBlock(dep);
					} finally {
						this.state.current = old;
					}
					if(!fnExpression) {
						this.walkExpression(fnExpressionArg);
					}
					return true;
			}
		}
	});


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AsyncDependenciesBlock = __webpack_require__(123);
	var RequireEnsureDependency = __webpack_require__(205);

	function RequireEnsureDependenciesBlock(expr, fnExpression, chunkName, chunkNameRange, module, loc) {
		AsyncDependenciesBlock.call(this, chunkName, module, loc);
		this.expr = expr;
		var bodyRange = fnExpression && fnExpression.body && fnExpression.body.range;
		this.range = bodyRange && [bodyRange[0] + 1, bodyRange[1] - 1] || null;
		this.chunkNameRange = chunkNameRange;
		var dep = new RequireEnsureDependency(this);
		dep.loc = loc;
		this.addDependency(dep);
	}
	module.exports = RequireEnsureDependenciesBlock;

	RequireEnsureDependenciesBlock.prototype = Object.create(AsyncDependenciesBlock.prototype);


/***/ },
/* 208 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(expr) {
		// <FunctionExpression>
		if(expr.type === "FunctionExpression") {
			return {
				fn: expr,
				expressions: []
			};
		}
		// <FunctionExpression>.bind(<Expression>)
		if(expr.type === "CallExpression" &&
			expr.callee.type === "MemberExpression" &&
			expr.callee.object.type === "FunctionExpression" &&
			expr.callee.property.type === "Identifier" &&
			expr.callee.property.name === "bind" &&
			expr.arguments.length === 1) {
			return {
				fn: expr.callee.object,
				expressions: [expr.arguments[0]]
			};
		}
		// (function(_this) {return <FunctionExpression>})(this) (Coffeescript)
		if(expr.type === "CallExpression" &&
			expr.callee.type === "FunctionExpression" &&
			expr.callee.body.type === "BlockStatement" &&
			expr.arguments.length === 1 &&
			expr.arguments[0].type === "ThisExpression" &&
			expr.callee.body.body &&
			expr.callee.body.body.length === 1 &&
			expr.callee.body.body[0].type === "ReturnStatement" &&
			expr.callee.body.body[0].argument &&
			expr.callee.body.body[0].argument.type === "FunctionExpression") {
			return {
				fn: expr.callee.body.body[0].argument,
				expressions: []
			};
		}
	};


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireIncludeDependency = __webpack_require__(210);
	var RequireIncludeDependencyParserPlugin = __webpack_require__(211);
	var ConstDependency = __webpack_require__(152);

	var BasicEvaluatedExpression = __webpack_require__(108);

	function RequireIncludePlugin() {}
	module.exports = RequireIncludePlugin;

	RequireIncludePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(RequireIncludeDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(RequireIncludeDependency, new RequireIncludeDependency.Template());
		});
		new RequireIncludeDependencyParserPlugin().apply(compiler.parser);
		compiler.parser.plugin("evaluate typeof require.include", function(expr) {
			return new BasicEvaluatedExpression().setString("function").setRange(expr.range);
		});
		compiler.parser.plugin("typeof require.include", function(expr) {
			var dep = new ConstDependency("'function'", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function RequireIncludeDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = RequireIncludeDependency;

	RequireIncludeDependency.prototype = Object.create(ModuleDependency.prototype);
	RequireIncludeDependency.prototype.constructor = RequireIncludeDependency;
	RequireIncludeDependency.prototype.type = "require.include";

	RequireIncludeDependency.Template = function RequireIncludeDependencyTemplate() {};

	RequireIncludeDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var comment = "";
		if(outputOptions.pathinfo && dep.module)
			comment = "/*! require.include " + requestShortener.shorten(dep.request) + " */";
		source.replace(dep.range[0], dep.range[1] - 1,
			"undefined" + comment);
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AbstractPlugin = __webpack_require__(201);
	var RequireIncludeDependency = __webpack_require__(210);

	module.exports = AbstractPlugin.create({
		"call require.include": function(expr) {
			if(expr.arguments.length !== 1) return;
			var param = this.evaluateExpression(expr.arguments[0]);
			if(!param.isString()) return;
			var dep = new RequireIncludeDependency(param.string, expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		}
	});


/***/ },
/* 212 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function hasModule(chunk, module, checkedChunks) {
		if(chunk.modules.indexOf(module) >= 0) return [chunk];
		if(chunk.entry) return false;
		return allHaveModule(chunk.parents.filter(function(c) {
			return checkedChunks.indexOf(c) < 0;
		}), module, checkedChunks);
	}

	function allHaveModule(someChunks, module, checkedChunks) {
		if(!checkedChunks) checkedChunks = [];
		var chunks = [];
		for(var i = 0; i < someChunks.length; i++) {
			checkedChunks.push(someChunks[i]);
			var subChunks = hasModule(someChunks[i], module, checkedChunks);
			if(!subChunks) return false;
			addToSet(chunks, subChunks);
		}
		return chunks;
	}

	function addToSet(set, items) {
		items.forEach(function(item) {
			if(set.indexOf(item) < 0)
				set.push(item);
		});
	}

	function RemoveParentModulesPlugin() {}
	module.exports = RemoveParentModulesPlugin;

	RemoveParentModulesPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin(["optimize-chunks", "optimize-extracted-chunks"], function(chunks) {
				chunks.forEach(function(chunk) {
					chunk.modules.slice().forEach(function(module) {
						if(chunk.entry) return;
						var parentChunksWithModule = allHaveModule(chunk.parents, module);
						if(parentChunksWithModule) {
							module.rewriteChunkInReasons(chunk, parentChunksWithModule);
							chunk.removeModule(module);
						}
					});
				});
			});
		});
	};


/***/ },
/* 213 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function RemoveEmptyChunksPlugin() {}
	module.exports = RemoveEmptyChunksPlugin;

	RemoveEmptyChunksPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin(["optimize-chunks", "optimize-extracted-chunks"], function(chunks) {
				chunks.filter(function(chunk) {
					return chunk.isEmpty() && !chunk.initial;
				}).forEach(function(chunk) {
					chunk.remove("empty");
					chunks.splice(chunks.indexOf(chunk), 1);
				});
			});
		});
	};


/***/ },
/* 214 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MergeDuplicateChunksPlugin() {}
	module.exports = MergeDuplicateChunksPlugin;

	function getChunkIdentifier(chunk) {
		return chunk.modules.map(function(m) {
			return m.identifier();
		}).sort().join(", ");
	}

	MergeDuplicateChunksPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunks", function(chunks) {
				var map = {};
				chunks.slice().forEach(function(chunk) {
					if(chunk.initial) return;
					var ident = getChunkIdentifier(chunk);
					if(map[ident]) {
						if(map[ident].integrate(chunk, "duplicate"))
							chunks.splice(chunks.indexOf(chunk), 1);
						return;
					}
					map[ident] = chunk;
				});
			});
		});
	};


/***/ },
/* 215 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function FlagIncludedChunksPlugin() {}
	module.exports = FlagIncludedChunksPlugin;

	FlagIncludedChunksPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunk-ids", function(chunks) {
				chunks.forEach(function(chunkA) {
					chunks.forEach(function(chunkB) {
						if(chunkA === chunkB) return;
						// is chunkB in chunkA?
						if(chunkA.modules.length < chunkB.modules.length) return;
						for(var i = 0; i < chunkB.modules.length; i++) {
							if(chunkA.modules.indexOf(chunkB.modules[i]) < 0) return;
						}
						chunkA.ids.push(chunkB.id);
					});
				});
			});
		});
	};


/***/ },
/* 216 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function UnsafeCachePlugin(regExps, cache) {
		this.regExps = regExps || [/./];
		if(this.regExps === true) this.regExps = [/./];
		else if(!Array.isArray(this.regExps)) this.regExps = [this.regExps];
		this.cache = cache || {};
	}
	module.exports = UnsafeCachePlugin;

	UnsafeCachePlugin.prototype.apply = function(resolver) {
		var oldResolve = resolver.resolve;
		var regExps = this.regExps;
		var cache = this.cache;
		resolver.resolve = function resolve(context, request, callback) {
			var id = context + "->" + request;
			if(cache[id]) {
				// From cache
				return callback(null, cache[id]);
			}
			oldResolve.call(resolver, context, request, function(err, result) {
				if(err) return callback(err);
				var doCache = regExps.some(function(regExp) {
					return regExp.test(result.path);
				});
				if(!doCache) return callback(null, result);
				callback(null, cache[id] = result);
			});
		};
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);
	var popPathSeqment = __webpack_require__(218);

	function ModulesInDirectoriesPlugin(moduleType, directories) {
		this.moduleType = moduleType;
		this.directories = directories;
	}
	module.exports = ModulesInDirectoriesPlugin;

	ModulesInDirectoriesPlugin.prototype.apply = function(resolver) {
		var moduleType = this.moduleType;
		var directories = this.directories;
		resolver.plugin("module", function(request, callback) {
			var fs = this.fileSystem;
			var paths = [request.path];
			var addr = [request.path];
			var pathSeqment = popPathSeqment(addr);
			var topLevelCallback = callback;
			while(pathSeqment) {
				paths.push(addr[0]);
				pathSeqment = popPathSeqment(addr);
			}
			var addrs = paths.map(function(p) {
				return directories.map(function(d) {
					return this.join(p, d);
				}, this);
			}, this).reduce(function(array, p) {
				array.push.apply(array, p);
				return array;
			}, []);
			this.forEachBail(addrs, function(addr, callback) {
				fs.stat(addr, function(err, stat) {
					if(!err && stat && stat.isDirectory()) {
						this.applyPluginsParallelBailResult("module-" + moduleType, {
							path: addr,
							request: request.request,
							query: request.query,
							directory: request.directory
						}, createInnerCallback(function(err, result) {
							if(err) return callback(err);
							if(!result) return callback();
							return callback(null, result);
						}, topLevelCallback, "looking for modules in " + addr));
						return;
					}
					return callback();
				}.bind(this));
			}.bind(this), function(err, result) {
				if(err) return callback(err);
				if(!result) return callback();
				return callback(null, result);
			});
		});
	};


/***/ },
/* 218 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function popPathSeqment(pathInArray) {
		var i = pathInArray[0].lastIndexOf("/"),
			j = pathInArray[0].lastIndexOf("\\");
		var p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
		if(p < 0) return null;
		var s = pathInArray[0].substr(p+1);
		pathInArray[0] = pathInArray[0].substr(0, p || 1);
		return s;
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);

	function ModulesInRootPlugin(moduleType, path) {
		this.moduleType = moduleType;
		this.path = path;
	}
	module.exports = ModulesInRootPlugin;

	ModulesInRootPlugin.prototype.apply = function(resolver) {
		var moduleType = this.moduleType;
		var path = this.path;
		resolver.plugin("module", function(request, callback) {
			this.applyPluginsParallelBailResult("module-" + moduleType, {
				path: path,
				request: request.request,
				query: request.query,
				directory: request.directory
			}, createInnerCallback(function innerCallback(err, result) {
				if(err) return callback(err);
				if(!result) return callback();
				return callback(null, result);
			}, callback, "looking for modules in " + path));
		});
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);

	function ModuleTemplatesPlugin(moduleType, templates, targetModuleType) {
		this.moduleType = moduleType;
		this.targetModuleType = targetModuleType;
		this.templates = templates;
	}
	module.exports = ModuleTemplatesPlugin;

	ModuleTemplatesPlugin.prototype.apply = function(resolver) {
		var templates = this.templates;
		var targetModuleType = this.targetModuleType;
		resolver.plugin("module-" + this.moduleType, function(request, callback) {
			var fs = this.fileSystem;
			var topLevelCallback = callback;
			var i = request.request.indexOf("/"),
				j = request.request.indexOf("\\");
			var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
			var moduleName, remainingRequest;
			if(p < 0) {
				moduleName = request.request;
				remainingRequest = "";
			} else {
				moduleName = request.request.substr(0, p);
				remainingRequest = request.request.substr(p);
			}
			this.forEachBail(templates, function(template, callback) {
				var moduleFinalName = template.replace(/\*/g, moduleName);
				this.applyPluginsParallelBailResult("module-" + targetModuleType, {
					path: request.path,
					request: moduleFinalName + remainingRequest,
					query: request.query,
					directory: request.directory
				}, createInnerCallback(function(err, result) {
					if(err) return callback(err);
					if(!result) return callback();
					return callback(null, result);
				}, topLevelCallback, "module variation " + moduleFinalName));
			}.bind(this), callback);
		});
	};


/***/ },
/* 221 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleAsFilePlugin(moduleType) {
		this.moduleType = moduleType;
	}
	module.exports = ModuleAsFilePlugin;

	ModuleAsFilePlugin.prototype.apply = function(resolver) {
		resolver.plugin("module-" + this.moduleType, function(request, callback) {
			var fs = this.fileSystem;
			var i = request.request.indexOf("/"),
				j = request.request.indexOf("\\");
			if(i >= 0 || j >= 0 || request.directory) return callback();
			return this.doResolve("file", request, callback, true);
		});
	};


/***/ },
/* 222 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleAsDirectoryPlugin(moduleType) {
		this.moduleType = moduleType;
	}
	module.exports = ModuleAsDirectoryPlugin;

	ModuleAsDirectoryPlugin.prototype.apply = function(resolver) {
		resolver.plugin("module-" + this.moduleType, function(request, callback) {
			var fs = this.fileSystem;
			var i = request.request.indexOf("/"),
				j = request.request.indexOf("\\");
			var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
			var moduleName, remainingRequest;
			if(p < 0) {
				moduleName = request.request;
				remainingRequest = "";
			} else {
				moduleName = request.request.substr(0, p);
				remainingRequest = request.request.substr(p+1);
			}
			var modulePath = this.join(request.path, moduleName);
			fs.stat(modulePath, function(err, stat) {
				if(err || !stat) {
					if(callback.missing)
						callback.missing.push(modulePath);
					if(callback.log) callback.log(modulePath + " doesn't exist (module as directory)");
					return callback();
				}
				if(stat.isDirectory()) {
					return this.doResolve(request.directory ? "directory" : ["file", "directory"], {
						path: modulePath,
						request: remainingRequest,
						query: request.query
					}, callback, true);
				}
				if(callback.log) callback.log(modulePath + " is not a directory (module as directory)");
				return callback();
			}.bind(this));
		});
	};


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);

	function DirectoryDefaultFilePlugin(files) {
		this.files = files;
	}
	module.exports = DirectoryDefaultFilePlugin;

	DirectoryDefaultFilePlugin.prototype.apply = function(resolver) {
		var files = this.files;
		resolver.plugin("directory", function(request, callback) {
			var fs = this.fileSystem;
			var topLevelCallback = callback;
			var directory = this.join(request.path, request.request);
			fs.stat(directory, function(err, stat) {
				if(err || !stat) {
					if(callback.log) callback.log(directory + " doesn't exist (directory default file)");
					return callback();
				}
				if(!stat.isDirectory()) {
					if(callback.log) callback.log(directory + " is not a directory (directory default file)");
					return callback();
				}
				this.forEachBail(files, function(file, callback) {
					this.doResolve("file", {
						path: directory,
						query: request.query,
						request: file
					}, createInnerCallback(function(err, result) {
						if(!err && result) return callback(result);
						return callback();
					}, topLevelCallback, "directory default file " + file));
				}.bind(this), function(result) {
					if(!result) return callback();
					return callback(null, result);
				});
			}.bind(this));
		});
	};

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);

	function DirectoryDescriptionFilePlugin(filename, fields) {
		this.filename = filename;
		this.fields = fields;
	}
	module.exports = DirectoryDescriptionFilePlugin;

	DirectoryDescriptionFilePlugin.prototype.apply = function(resolver) {
		var filename = this.filename;
		var fields = this.fields;
		resolver.plugin("directory", function(request, callback) {
			var fs = this.fileSystem;
			var directory = this.join(request.path, request.request);
			var descriptionFilePath = this.join(directory, filename);
			fs.readFile(descriptionFilePath, function(err, content) {
				if(err) {
					if(callback.log)
						callback.log(descriptionFilePath + " doesn't exist (directory description file)");
					return callback();
				}
				content = content.toString("utf-8");
				try {
					content = JSON.parse(content);
				} catch(e) {
					if(callback.log)
						callback.log(descriptionFilePath + " (directory description file): " + e);
					else
						e.message = descriptionFilePath + " (directory description file): " + e;
					return callback(e);
				}
				var mainModules = [];
				for(var i = 0; i < fields.length; i++) {
					if(Array.isArray(fields[i])) {
						var current = content;
						for(var j = 0; j < fields[i].length; j++) {
							if(current === null || typeof current !== "object") {
								current = null;
								break;
							}
							var field = fields[i][j];
							current = current[field];
						}
						if(typeof current === "string") {
							mainModules.push(current);
							continue;
						}
					} else {
						var field = fields[i];
						if(typeof content[field] === "string") {
							mainModules.push(content[field]);
							continue;
						}
					}
				}
				(function next() {
					if(mainModules.length == 0) return callback();
					var mainModule = mainModules.shift();
					return this.doResolve(["file", "directory"], {
						path: directory,
						query: request.query,
						request: mainModule
					}, createInnerCallback(function(err, result) {
						if(!err && result) return callback(null, result);
						return next.call(this);
					}.bind(this), callback, "use " + mainModule + " from " + filename));
				}.call(this))
			}.bind(this));
		});
	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(110);

	function DirectoryDescriptionFileFieldAliasPlugin(filename, field) {
		this.filename = filename;
		this.field = field;
	}
	module.exports = DirectoryDescriptionFileFieldAliasPlugin;

	function findDescriptionFileField(resolver, directory, filename, field, callback) {
		(function findDescriptionFile() {
			var descriptionFilePath = resolver.join(directory, filename);
			resolver.fileSystem.readFile(descriptionFilePath, function(err, content) {
				if(err) {
					directory = cdUp(directory);
					if(!directory) {
						return callback();
					} else {
						return findDescriptionFile();
					}
				}
				try {
					content = JSON.parse(content);
				} catch(e) {
					if(callback.log)
						callback.log(descriptionFilePath + " (directory description file): " + e);
					else
						e.message = descriptionFilePath + " (directory description file): " + e;
					return callback(e);
				}
				var fieldData;
				if(Array.isArray(field)) {
					var current = content;
					for(var j = 0; j < field.length; j++) {
						if(current === null || typeof current !== "object") {
							current = null;
							break;
						}
						current = current[field[j]];
					}
					if(typeof current === "object") {
						fieldData = current;
					}
				} else {
					if(typeof content[field] === "object") {
						fieldData = content[field];
					}
				}
				if(!fieldData) return callback();
				callback(null, fieldData, directory);
			});
		}());
	}

	function cdUp(directory) {
		if(directory === "/") return null;
		var i = directory.lastIndexOf("/"),
			j = directory.lastIndexOf("\\");
		var p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
		if(p < 0) return null;
		return directory.substr(0, p || 1);
	}

	DirectoryDescriptionFileFieldAliasPlugin.prototype.apply = function(resolver) {
		var filename = this.filename;
		var field = this.field;
		resolver.plugin("module", function(request, callback) {
			var directory = request.path;
			var moduleName = request.request;
			findDescriptionFileField(this, directory, filename, field, function(err, fieldData, directory) {
				if(err) return callback(err);
				if(!fieldData) return callback();
				var data = fieldData[moduleName];
				if(data === moduleName) return callback();
				if(data === false) return callback(null, {
					path: false,
					resolved: true
				});
				if(!data) return callback();
				var newRequest = this.parse(data);
				var obj = {
					path: directory,
					request: newRequest.path,
					query: newRequest.query,
					directory: newRequest.directory
				};
				var newCallback = createInnerCallback(callback, callback, "aliased from directory description file " + this.join(directory, filename) + " with mapping " + JSON.stringify(moduleName));
				if(newRequest.module) return this.doResolve("module", obj, newCallback);
				if(newRequest.directory) return this.doResolve("directory", obj, newCallback);
				return this.doResolve(["file", "directory"], obj, newCallback);
			}.bind(this));
		});
		resolver.plugin("result", function(request, callback) {
			var directory = cdUp(request.path);
			var requestPath = request.path;
			findDescriptionFileField(this, directory, filename, field, function(err, fieldData, directory) {
				if(err) return callback(err);
				if(!fieldData) return callback();
				var relative = requestPath.substr(directory.length+1).replace(/\\/g, "/");
				if(typeof fieldData[relative] !== "undefined")
					var data = fieldData[relative];
				else if(typeof fieldData["./" + relative] !== "undefined")
					var data = fieldData["./" + relative];
				if(data === relative || data === "./" + relative) return callback();
				if(data === false) return callback(null, {
					path: false,
					resolved: true
				});
				if(!data) return callback();
				var newRequest = this.parse(data);
				var obj = {
					path: directory,
					request: newRequest.path,
					query: newRequest.query,
					directory: newRequest.directory
				};
				var newCallback = createInnerCallback(callback, callback, "aliased from directory description file " + this.join(directory, filename) + " with mapping " + JSON.stringify(relative));
				if(newRequest.module) return this.doResolve("module", obj, newCallback);
				if(newRequest.directory) return this.doResolve("directory", obj, newCallback);
				return this.doResolve(["file", "directory"], obj, newCallback);
			}.bind(this));
		});
	};


/***/ },
/* 226 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function FileAppendPlugin(appendings) {
		this.appendings = appendings;
	}
	module.exports = FileAppendPlugin;

	FileAppendPlugin.prototype.apply = function(resolver) {
		var appendings = this.appendings;
		resolver.plugin("file", function(request, callback) {
			var fs = this.fileSystem;
			var addr = this.join(request.path, request.request);
			var addrs = appendings.map(function(a) { return addr + a });
			var log = callback.log;
			var missing = callback.missing;
			this.forEachBail(addrs, function(addr, callback) {
				fs.stat(addr, function(err, stat) {
					if(!err && stat && stat.isFile())
						return callback(addr);
					if(missing && err)
						missing.push(addr);
					if(log) {
						if(err) log(addr + " doesn't exist");
						else log(addr + " is not a file");
					}
					return callback();
				});
			}, function(validAddr) {
				if(!validAddr) return callback();
				return this.doResolve("result", {
					path: validAddr,
					query: request.query,
					file: true,
					resolved: true
				}, callback);
			}.bind(this));
		});
	};

/***/ },
/* 227 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function DirectoryResultPlugin(files) {
		this.files = files;
	}
	module.exports = DirectoryResultPlugin;

	DirectoryResultPlugin.prototype.apply = function(resolver) {
		var files = this.files;
		resolver.plugin("directory", function(request, callback) {
			var fs = this.fileSystem;
			var directory = this.join(request.path, request.request);
			fs.stat(directory, function(err, stat) {
				if(!err && stat && stat.isDirectory()) {
					return this.doResolve("result", {
						path: directory,
						query: request.query,
						directory: true,
						resolved: true
					}, callback);
				}
				if(callback.log) {
					if(err) callback.log(directory + " doesn't exist");
					else callback.log(directory + " is not a directory");
				}
				return callback();
			}.bind(this));
		});
	};

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var popPathSeqment = __webpack_require__(218);

	function ResultSymlinkPlugin(appendings) {
	}
	module.exports = ResultSymlinkPlugin;

	ResultSymlinkPlugin.prototype.apply = function(resolver) {
		resolver.plugin("result", function pluginMethod(request, callback) {
			var fs = this.fileSystem;
			var paths = [request.path];
			var pathSeqments = [];
			var addr = [request.path];
			var pathSeqment = popPathSeqment(addr);
			while(pathSeqment) {
				pathSeqments.push(pathSeqment);
				paths.push(addr[0]);
				pathSeqment = popPathSeqment(addr);
			}
			pathSeqments.push(paths[paths.length-1]);
			var log = callback.log;
			var missing = callback.missing;
			var containsSymlink = false;
			this.forEachBail(paths.map(function(_, i) { return i; }), function(idx, callback) {
				fs.readlink(paths[idx], function(err, result) {
					if(!err && result) {
						pathSeqments[idx] = result;
						containsSymlink = true;
						// Shortcut when absolute symlink found
						if(/^(\/|[a-zA-z]:($|\\))/.test(result))
							return callback(null, idx);
					}
					callback();
				});
			}, function(err, idx) {
				if(!containsSymlink) return callback();
				var resultSeqments = typeof idx === "number" ? pathSeqments.slice(0, idx+1) : pathSeqments.slice();
				var result = resultSeqments.reverse().reduce(function(a, b) {
					return this.join(a, b);
				}.bind(this));
				log("resolved symlink to " + result);
				request.path = result;
				pluginMethod.call(this, request, callback);
			}.bind(this));
		});
	};

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var JsonpMainTemplatePlugin = __webpack_require__(230);
	var JsonpChunkTemplatePlugin = __webpack_require__(232);
	var JsonpHotUpdateChunkTemplatePlugin = __webpack_require__(233);

	function JsonpTemplatePlugin() {}
	module.exports = JsonpTemplatePlugin;
	JsonpTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			compilation.mainTemplate.apply(new JsonpMainTemplatePlugin());
			compilation.chunkTemplate.apply(new JsonpChunkTemplatePlugin());
			compilation.hotUpdateChunkTemplate.apply(new JsonpHotUpdateChunkTemplatePlugin());
		});
	};


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(81);

	function JsonpMainTemplatePlugin() {}
	module.exports = JsonpMainTemplatePlugin;

	JsonpMainTemplatePlugin.prototype.constructor = JsonpMainTemplatePlugin;
	JsonpMainTemplatePlugin.prototype.apply = function(mainTemplate) {
		mainTemplate.plugin("local-vars", function(source, chunk) {
			if(chunk.chunks.length > 0) {
				return this.asString([
					source,
					"",
					"// object to store loaded and loading chunks",
					"// \"0\" means \"already loaded\"",
					"// Array means \"loading\", array contains callbacks",
					"var installedChunks = {",
					this.indent(
						chunk.ids.map(function(id) {
							return id + ":0";
						}).join(",\n")
					),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			var chunkMaps = chunk.getChunkMaps();
			var crossOriginLoading = this.outputOptions.crossOriginLoading;
			return this.asString([
				"// \"0\" is the signal for \"already loaded\"",
				"if(installedChunks[chunkId] === 0)",
				this.indent("return callback.call(null, " + this.requireFn + ");"),
				"",
				"// an array means \"currently loading\".",
				"if(installedChunks[chunkId] !== undefined) {",
				this.indent("installedChunks[chunkId].push(callback);"),
				"} else {",
				this.indent([
					"// start chunk loading",
					"installedChunks[chunkId] = [callback];",
					"var head = document.getElementsByTagName('head')[0];",
					"var script = document.createElement('script');",
					"script.type = 'text/javascript';",
					"script.charset = 'utf-8';",
					"script.async = true;",
					crossOriginLoading ? "script.crossOrigin = '" + crossOriginLoading + "';" : "",
					"script.src = " + this.requireFn + ".p + " +
					this.applyPluginsWaterfall("asset-path", JSON.stringify(chunkFilename), {
						hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
						hashWithLength: function(length) {
							return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
						}.bind(this),
						chunk: {
							id: "\" + chunkId + \"",
							hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
							hashWithLength: function(length) {
								var shortChunkHashMap = {};
								Object.keys(chunkMaps.hash).forEach(function(chunkId) {
									if(typeof chunkMaps.hash[chunkId] === "string")
										shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
								});
								return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
							},
							name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
						}
					}) + ";",
					"head.appendChild(script);"
				]),
				"}"
			]);
		});
		mainTemplate.plugin("bootstrap", function(source, chunk, hash) {
			if(chunk.chunks.length > 0) {
				var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp" + (this.outputOptions.library || ""));
				return this.asString([
					source,
					"",
					"// install a JSONP callback for chunk loading",
					"var parentJsonpFunction = window[" + JSON.stringify(jsonpFunction) + "];",
					"window[" + JSON.stringify(jsonpFunction) + "] = function webpackJsonpCallback(chunkIds, moreModules) {",
					this.indent([
						"// add \"moreModules\" to the modules object,",
						"// then flag all \"chunkIds\" as loaded and fire callback",
						"var moduleId, chunkId, i = 0, callbacks = [];",
						"for(;i < chunkIds.length; i++) {",
						this.indent([
							"chunkId = chunkIds[i];",
							"if(installedChunks[chunkId])",
							this.indent("callbacks.push.apply(callbacks, installedChunks[chunkId]);"),
							"installedChunks[chunkId] = 0;"
						]),
						"}",
						"for(moduleId in moreModules) {",
						this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
						"}",
						"if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);",
						"while(callbacks.length)",
						this.indent("callbacks.shift().call(null, " + this.requireFn + ");"), (this.entryPointInChildren(chunk) ? [
							"if(moreModules[0]) {",
							this.indent([
								"installedModules[0] = 0;",
								"return " + this.requireFn + "(0);"
							]),
							"}"
						] : "")
					]),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("hot-bootstrap", function(source, chunk, hash) {
			var hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
			var hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
			var hotUpdateFunction = this.outputOptions.hotUpdateFunction || Template.toIdentifier("webpackHotUpdate" + (this.outputOptions.library || ""));
			var currentHotUpdateChunkFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateChunkFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this),
				chunk: {
					id: "\" + chunkId + \""
				}
			});
			var currentHotUpdateMainFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateMainFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this)
			});

			return source + "\n" +
				"var parentHotUpdateCallback = this[" + JSON.stringify(hotUpdateFunction) + "];\n" +
				"this[" + JSON.stringify(hotUpdateFunction) + "] = " + Template.getFunctionContent(__webpack_require__(231))
				.replace(/\$require\$/g, this.requireFn)
				.replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename)
				.replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename)
				.replace(/\$hash\$/g, JSON.stringify(hash));
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("jsonp");
			hash.update("4");
			hash.update(this.outputOptions.filename + "");
			hash.update(this.outputOptions.chunkFilename + "");
			hash.update(this.outputOptions.jsonpFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 231 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals hotAddUpdateChunk parentHotUpdateCallback document XMLHttpRequest $require$ $hotChunkFilename$ $hotMainFilename$ */
	module.exports = function() {
		function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
			hotAddUpdateChunk(chunkId, moreModules);
			if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
		}

		function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
			var head = document.getElementsByTagName("head")[0];
			var script = document.createElement("script");
			script.type = "text/javascript";
			script.charset = "utf-8";
			script.src = $require$.p + $hotChunkFilename$;
			head.appendChild(script);
		}

		function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
			if(typeof XMLHttpRequest === "undefined")
				return callback(new Error("No browser support"));
			try {
				var request = new XMLHttpRequest();
				var requestPath = $require$.p + $hotMainFilename$;
				request.open("GET", requestPath, true);
				request.timeout = 10000;
				request.send(null);
			} catch(err) {
				return callback(err);
			}
			request.onreadystatechange = function() {
				if(request.readyState !== 4) return;
				if(request.status === 0) {
					// timeout
					callback(new Error("Manifest request to " + requestPath + " timed out."));
				} else if(request.status === 404) {
					// no update available
					callback();
				} else if(request.status !== 200 && request.status !== 304) {
					// other failure
					callback(new Error("Manifest request to " + requestPath + " failed."));
				} else {
					// success
					try {
						var update = JSON.parse(request.responseText);
					} catch(e) {
						callback(e);
						return;
					}
					callback(null, update);
				}
			};
		}
	};


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var Template = __webpack_require__(81);

	function JsonpChunkTemplatePlugin() {}
	module.exports = JsonpChunkTemplatePlugin;

	JsonpChunkTemplatePlugin.prototype.apply = function(chunkTemplate) {
		chunkTemplate.plugin("render", function(modules, chunk) {
			var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp" + (this.outputOptions.library || ""));
			var source = new ConcatSource();
			source.add(jsonpFunction + "(" + JSON.stringify(chunk.ids) + ",");
			source.add(modules);
			source.add(")");
			return source;
		});
		chunkTemplate.plugin("hash", function(hash) {
			hash.update("JsonpChunkTemplatePlugin");
			hash.update("3");
			hash.update(this.outputOptions.jsonpFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var Template = __webpack_require__(81);

	function JsonpHotUpdateChunkTemplatePlugin() {}
	module.exports = JsonpHotUpdateChunkTemplatePlugin;

	JsonpHotUpdateChunkTemplatePlugin.prototype.apply = function(hotUpdateChunkTemplate) {
		hotUpdateChunkTemplate.plugin("render", function(modulesSource, modules, hash, id) {
			var jsonpFunction = this.outputOptions.hotUpdateFunction || Template.toIdentifier("webpackHotUpdate" + (this.outputOptions.library || ""));
			var source = new ConcatSource();
			source.add(jsonpFunction + "(" + JSON.stringify(id) + ",");
			source.add(modulesSource);
			source.add(")");
			return source;
		});
		hotUpdateChunkTemplate.plugin("hash", function(hash) {
			hash.update("JsonpHotUpdateChunkTemplatePlugin");
			hash.update("3");
			hash.update(this.outputOptions.hotUpdateFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleAliasPlugin = __webpack_require__(161);
	var ModuleParserHelpers = __webpack_require__(158);
	var nodeLibsBrowser = __webpack_require__(235);

	function NodeSourcePlugin(options) {
		this.options = options;
	}
	module.exports = NodeSourcePlugin;
	NodeSourcePlugin.prototype.apply = function(compiler) {
		function getPathToModule(module, type) {
			if(type === true || (type === undefined && nodeLibsBrowser[module])) {
				if(!nodeLibsBrowser[module]) throw new Error("No browser version for node.js core module '" + module + "' available");
				return nodeLibsBrowser[module];
			} else if(type === "mock") {
				return /*require.resolve*/(__webpack_require__(236).resolve("./" + module));
			} else if(type === "empty") {
				return /*require.resolve*/(240);
			} else return module;
		}
		if(this.options.process) {
			var processType = this.options.process;
			compiler.parser.plugin("expression process", function() {
				return ModuleParserHelpers.addParsedVariable(this, "process", "require(" + JSON.stringify(getPathToModule("process", processType)) + ")");
			});
		}
		if(this.options.global) {
			compiler.parser.plugin("expression global", function() {
				this.state.module.addVariable("global", "(function() { return this; }())");
				return true;
			});
		}
		if(this.options.console) {
			var consoleType = this.options.console;
			compiler.parser.plugin("expression console", function() {
				return ModuleParserHelpers.addParsedVariable(this, "console", "require(" + JSON.stringify(getPathToModule("console", consoleType)) + ")");
			});
		}
		var bufferType = this.options.Buffer;
		if(typeof bufferType === "undefined") {
			bufferType = this.options.buffer;
			if(typeof bufferType === "undefined")
				bufferType = true;
		}
		if(bufferType) {
			compiler.parser.plugin("expression Buffer", function() {
				return ModuleParserHelpers.addParsedVariable(this, "Buffer", "require(" + JSON.stringify(getPathToModule("buffer", bufferType)) + ").Buffer");
			});
		}
		if(this.options.setImmediate) {
			var setImmediateType = this.options.setImmediate;
			compiler.parser.plugin("expression setImmediate", function() {
				return ModuleParserHelpers.addParsedVariable(this, "setImmediate", "require(" + JSON.stringify(getPathToModule("timers", setImmediateType)) + ").setImmediate");
			});
			compiler.parser.plugin("expression clearImmediate", function() {
				return ModuleParserHelpers.addParsedVariable(this, "clearImmediate", "require(" + JSON.stringify(getPathToModule("timers", setImmediateType)) + ").clearImmediate");
			});
		}
		var options = this.options;
		compiler.plugin("after-resolvers", function(compiler) {
			var alias = {};
			Object.keys(nodeLibsBrowser).forEach(function(lib) {
				if(options[lib] !== false)
					alias[lib + "$"] = getPathToModule(lib, options[lib]);
			});
			if(Object.keys(alias).length > 0) {
				compiler.resolvers.normal.apply(
					new ModuleAliasPlugin(alias)
				);
			}
		});
	};


/***/ },
/* 235 */
/***/ function(module, exports) {

	

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./buffer": 237,
		"./buffer.js": 237,
		"./console": 238,
		"./console.js": 238,
		"./dns": 239,
		"./dns.js": 239,
		"./empty": 240,
		"./empty.js": 240,
		"./net": 241,
		"./net.js": 241,
		"./process": 242,
		"./process.js": 242,
		"./punycode": 243,
		"./punycode.js": 243,
		"./tls": 244,
		"./tls.js": 244,
		"./tty": 245,
		"./tty.js": 245
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 236;


/***/ },
/* 237 */
/***/ function(module, exports) {

	function Buffer() {
		throw new Error("Buffer is not included.");
	}
	Buffer.isBuffer = function() {
	  return false;
	};

	exports.INSPECT_MAX_BYTES = 50;
	exports.SlowBuffer = Buffer;
	exports.Buffer = Buffer;


/***/ },
/* 238 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var console;
	if (typeof global !== "undefined" && global.console) {
	    console = global.console
	} else if (typeof window !== "undefined" && window.console) {
	    console = window.console
	} else {
	    console = window.console = {}
	}
	module.exports = console;
	for(var name in {log:1, info:1, error:1, warn:1, dir:1, trace:1, assert:1, time:1, timeEnd: 1})
		if(!console[name])
			console[name] = function() {};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 239 */
/***/ function(module, exports) {

	exports.lookup = exports.resolve4 =
	exports.resolve6 = exports.resolveCname =
	exports.resolveMx = exports.resolveNs =
	exports.resolveTxt = exports.resolveSrv =
	exports.resolveNaptr = exports.reverse =
	exports.resolve =
	function () {
	  if (!arguments.length) return;

	  var callback = arguments[arguments.length - 1];
	  if (callback && typeof callback === 'function') {
	    callback(null, '0.0.0.0')
	  }
	}



/***/ },
/* 240 */
/***/ function(module, exports) {

	

/***/ },
/* 241 */
/***/ function(module, exports) {

	exports.createServer =
	exports.createConnection =
	exports.connect =
	function () {};

	exports.isIP =
	exports.isIPv4 =
	exports.isIPv6 =
	function () { return true };



/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	exports.nextTick = function nextTick(fn) {
		setTimeout(fn, 0);
	};

	exports.platform = exports.arch = 
	exports.execPath = exports.title = 'browser';
	exports.pid = 1;
	exports.browser = true;
	exports.env = {};
	exports.argv = [];

	exports.binding = function (name) {
		throw new Error('No such module. (Possibly not yet loaded)')
	};

	(function () {
	    var cwd = '/';
	    var path;
	    exports.cwd = function () { return cwd };
	    exports.chdir = function (dir) {
	        if (!path) path = __webpack_require__(36);
	        cwd = path.resolve(dir, cwd);
	    };
	})();

	exports.exit = exports.kill = 
	exports.umask = exports.dlopen = 
	exports.uptime = exports.memoryUsage = 
	exports.uvCounters = function() {};
	exports.features = {};


/***/ },
/* 243 */
/***/ function(module, exports) {

	exports.ucs2 = {};
	exports.encode = exports.decode =
	exports.ucs2.encode = exports.ucs2.decode =
	exports.toUnicode = exports.toASCII =
	function (s) { return s };
	exports.version = "0.0.0";

/***/ },
/* 244 */
/***/ function(module, exports) {

	// todo


/***/ },
/* 245 */
/***/ function(module, exports) {

	exports.isatty = function () {};
	exports.setRawMode = function () {};


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var WebWorkerMainTemplatePlugin = __webpack_require__(247);
	var WebWorkerChunkTemplatePlugin = __webpack_require__(248);

	function WebWorkerTemplatePlugin() {}
	module.exports = WebWorkerTemplatePlugin;
	WebWorkerTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			compilation.mainTemplate.apply(new WebWorkerMainTemplatePlugin());
			compilation.chunkTemplate.apply(new WebWorkerChunkTemplatePlugin());
		});
	};


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(81);

	function WebWorkerMainTemplatePlugin() {}
	module.exports = WebWorkerMainTemplatePlugin;

	WebWorkerMainTemplatePlugin.prototype.apply = function(mainTemplate) {
		mainTemplate.plugin("local-vars", function(source, chunk) {
			if(chunk.chunks.length > 0) {
				return this.asString([
					source,
					"",
					"// object to store loaded chunks",
					"// \"1\" means \"already loaded\"",
					"var installedChunks = {",
					this.indent(
						chunk.ids.map(function(id) {
							return id + ":1";
						}).join(",\n")
					),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			return this.asString([
				"// \"1\" is the signal for \"already loaded\"",
				"if(!installedChunks[chunkId]) {",
				this.indent([
					"importScripts(" +
					this.applyPluginsWaterfall("asset-path", JSON.stringify(chunkFilename), {
						hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
						hashWithLength: function(length) {
							return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
						}.bind(this),
						chunk: {
							id: "\" + chunkId + \""
						}
					}) + ");"
				]),
				"}",
				"callback.call(null, " + this.requireFn + ");"
			]);
		});
		mainTemplate.plugin("bootstrap", function(source, chunk, hash) {
			if(chunk.chunks.length > 0) {
				var chunkCallbackName = this.outputOptions.chunkCallbackName || Template.toIdentifier("webpackChunk" + (this.outputOptions.library || ""));
				return this.asString([
					source,
					"this[" + JSON.stringify(chunkCallbackName) + "] = function webpackChunkCallback(chunkIds, moreModules) {",
					this.indent([
						"for(var moduleId in moreModules) {",
						this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
						"}",
						"while(chunkIds.length)",
						this.indent("installedChunks[chunkIds.pop()] = 1;")
					]),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("webworker");
			hash.update("3");
			hash.update(this.outputOptions.publicPath + "");
			hash.update(this.outputOptions.filename + "");
			hash.update(this.outputOptions.chunkFilename + "");
			hash.update(this.outputOptions.chunkCallbackName + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var Template = __webpack_require__(81);

	function WebWorkerChunkTemplatePlugin() {}
	module.exports = WebWorkerChunkTemplatePlugin;

	WebWorkerChunkTemplatePlugin.prototype.apply = function(chunkTemplate) {
		chunkTemplate.plugin("render", function(modules, chunk) {
			var chunkCallbackName = this.outputOptions.chunkCallbackName || Template.toIdentifier("webpackChunk" + (this.outputOptions.library || ""));
			var source = new ConcatSource();
			source.add(chunkCallbackName + "(" + JSON.stringify(chunk.ids) + ",");
			source.add(modules);
			source.add(")");
			return source;
		});
		chunkTemplate.plugin("hash", function(hash) {
			hash.update("webworker");
			hash.update("3");
			hash.update(this.outputOptions.chunkCallbackName + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NodeMainTemplatePlugin = __webpack_require__(250);
	var NodeChunkTemplatePlugin = __webpack_require__(256);
	var NodeHotUpdateChunkTemplatePlugin = __webpack_require__(360);

	function NodeTemplatePlugin(options, asyncChunkLoading) {
		// TODO remove options parameter
		this.options = options;
		this.asyncChunkLoading = asyncChunkLoading;
	}
	module.exports = NodeTemplatePlugin;
	NodeTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			compilation.mainTemplate.apply(new NodeMainTemplatePlugin(this.asyncChunkLoading));
			compilation.chunkTemplate.apply(new NodeChunkTemplatePlugin());
			compilation.hotUpdateChunkTemplate.apply(new NodeHotUpdateChunkTemplatePlugin());
		}.bind(this));
	};


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(81);

	function NodeMainTemplatePlugin(asyncChunkLoading) {
		this.asyncChunkLoading = asyncChunkLoading;
	}
	module.exports = NodeMainTemplatePlugin;
	NodeMainTemplatePlugin.prototype.apply = function(mainTemplate) {
		var self = this;
		mainTemplate.plugin("local-vars", function(source, chunk) {
			if(chunk.chunks.length > 0) {
				return this.asString([
					source,
					"",
					"// object to store loaded chunks",
					"// \"1\" means \"already loaded\"",
					"var installedChunks = {",
					this.indent(
						chunk.ids.map(function(id) {
							return id + ":1";
						}).join(",\n")
					),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			var chunkMaps = chunk.getChunkMaps();
			var insertMoreModules = [
				"var moreModules = chunk.modules, chunkIds = chunk.ids;",
				"for(var moduleId in moreModules) {",
				this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
				"}"
			];
			if(self.asyncChunkLoading) {
				return this.asString([
					"if(installedChunks[chunkId] === 1) callback.call(null, " + this.requireFn + ");",
					"else if(!installedChunks[chunkId]) {",
					this.indent([
						"installedChunks[chunkId] = [callback];",
						"var filename = __dirname + " + this.applyPluginsWaterfall("asset-path", JSON.stringify("/" + chunkFilename), {
							hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
							hashWithLength: function(length) {
								return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
							}.bind(this),
							chunk: {
								id: "\" + chunkId + \"",
								hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
								hashWithLength: function(length) {
									var shortChunkHashMap = {};
									Object.keys(chunkMaps.hash).forEach(function(chunkId) {
										if(typeof chunkMaps.hash[chunkId] === "string")
											shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
									});
									return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
								},
								name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
							}
						}) + ";",
						"require('fs').readFile(filename, 'utf-8',  function(err, content) {",
						this.indent([
							"if(err) { if(" + this.requireFn + ".onError) return " + this.requireFn + ".onError(err); else throw err; }",
							"var chunk = {};",
							"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\n})', filename)" +
							"(chunk, require, require('path').dirname(filename), filename);"
						].concat(insertMoreModules).concat([
							"var callbacks = [];",
							"for(var i = 0; i < chunkIds.length; i++) {",
							this.indent([
								"if(Array.isArray(installedChunks[chunkIds[i]]))",
								this.indent([
									"callbacks = callbacks.concat(installedChunks[chunkIds[i]]);"
								]),
								"installedChunks[chunkIds[i]] = 1;"
							]),
							"}",
							"for(i = 0; i < callbacks.length; i++)",
							this.indent("callbacks[i].call(null, " + this.requireFn + ");")
						])),
						"});"
					]),
					"} else installedChunks[chunkId].push(callback);"
				]);
			} else {
				var request = this.applyPluginsWaterfall("asset-path", JSON.stringify("./" + chunkFilename), {
					hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
					hashWithLength: function(length) {
						return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
					}.bind(this),
					chunk: {
						id: "\" + chunkId + \"",
						hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
						hashWithLength: function(length) {
							var shortChunkHashMap = {};
							Object.keys(chunkMaps.hash).forEach(function(chunkId) {
								if(typeof chunkMaps.hash[chunkId] === "string")
									shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
							});
							return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
						},
						name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
					}
				});
				return this.asString([
					"// \"1\" is the signal for \"already loaded\"",
					"if(!installedChunks[chunkId]) {",
					this.indent([
						"var chunk = require(" + request + ");"
					].concat(insertMoreModules).concat([
						"for(var i = 0; i < chunkIds.length; i++)",
						this.indent("installedChunks[chunkIds[i]] = 1;")
					])),
					"}",
					"callback.call(null, " + this.requireFn + ");"
				]);
			}
		});
		mainTemplate.plugin("hot-bootstrap", function(source, chunk, hash) {
			var hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
			var hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
			var chunkMaps = chunk.getChunkMaps();
			var currentHotUpdateChunkFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateChunkFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this),
				chunk: {
					id: "\" + chunkId + \"",
					hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
					hashWithLength: function(length) {
						var shortChunkHashMap = {};
						Object.keys(chunkMaps.hash).forEach(function(chunkId) {
							if(typeof chunkMaps.hash[chunkId] === "string")
								shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
						});
						return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
					},
					name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
				}
			});
			var currentHotUpdateMainFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateMainFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this)
			});
			return Template.getFunctionContent(self.asyncChunkLoading ? __webpack_require__(251) : __webpack_require__(254))
				.replace(/\$require\$/g, this.requireFn)
				.replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename)
				.replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename);
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("node");
			hash.update("3");
			hash.update(this.outputOptions.filename + "");
			hash.update(this.outputOptions.chunkFilename + "");
		});
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*global $hotChunkFilename$ $require$ hotAddUpdateChunk $hotMainFilename$ */
	module.exports = function() {
		function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
			var filename = __webpack_require__(36).join(__dirname, $hotChunkFilename$);
			__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).readFile(filename, "utf-8", function(err, content) {
				if(err) {
					if($require$.onError)
						return $require$.onError(err);
					else
						throw err;
				}
				var chunk = {};
				__webpack_require__(252).runInThisContext("(function(exports) {" + content + "\n})", filename)(chunk);
				hotAddUpdateChunk(chunk.id, chunk.modules);
			});
		}

		function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
			var filename = __webpack_require__(36).join(__dirname, $hotMainFilename$);
			__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).readFile(filename, "utf-8", function(err, content) {
				if(err) return callback();
				try {
					var update = JSON.parse(content);
				} catch(e) {
					return callback(e);
				}
				callback(null, update);
			});
		}
	};

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(253);

	var Object_keys = function (obj) {
	    if (Object.keys) return Object.keys(obj)
	    else {
	        var res = [];
	        for (var key in obj) res.push(key)
	        return res;
	    }
	};

	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};

	var defineProp = (function() {
	    try {
	        Object.defineProperty({}, '_', {});
	        return function(obj, name, value) {
	            Object.defineProperty(obj, name, {
	                writable: true,
	                enumerable: false,
	                configurable: true,
	                value: value
	            })
	        };
	    } catch(e) {
	        return function(obj, name, value) {
	            obj[name] = value;
	        };
	    }
	}());

	var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
	'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
	'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
	'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
	'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

	function Context() {}
	Context.prototype = {};

	var Script = exports.Script = function NodeScript (code) {
	    if (!(this instanceof Script)) return new Script(code);
	    this.code = code;
	};

	Script.prototype.runInContext = function (context) {
	    if (!(context instanceof Context)) {
	        throw new TypeError("needs a 'context' argument.");
	    }
	    
	    var iframe = document.createElement('iframe');
	    if (!iframe.style) iframe.style = {};
	    iframe.style.display = 'none';
	    
	    document.body.appendChild(iframe);
	    
	    var win = iframe.contentWindow;
	    var wEval = win.eval, wExecScript = win.execScript;

	    if (!wEval && wExecScript) {
	        // win.eval() magically appears when this is called in IE:
	        wExecScript.call(win, 'null');
	        wEval = win.eval;
	    }
	    
	    forEach(Object_keys(context), function (key) {
	        win[key] = context[key];
	    });
	    forEach(globals, function (key) {
	        if (context[key]) {
	            win[key] = context[key];
	        }
	    });
	    
	    var winKeys = Object_keys(win);

	    var res = wEval.call(win, this.code);
	    
	    forEach(Object_keys(win), function (key) {
	        // Avoid copying circular objects like `top` and `window` by only
	        // updating existing context properties or new properties in the `win`
	        // that was only introduced after the eval.
	        if (key in context || indexOf(winKeys, key) === -1) {
	            context[key] = win[key];
	        }
	    });

	    forEach(globals, function (key) {
	        if (!(key in context)) {
	            defineProp(context, key, win[key]);
	        }
	    });
	    
	    document.body.removeChild(iframe);
	    
	    return res;
	};

	Script.prototype.runInThisContext = function () {
	    return eval(this.code); // maybe...
	};

	Script.prototype.runInNewContext = function (context) {
	    var ctx = Script.createContext(context);
	    var res = this.runInContext(ctx);

	    forEach(Object_keys(ctx), function (key) {
	        context[key] = ctx[key];
	    });

	    return res;
	};

	forEach(Object_keys(Script.prototype), function (name) {
	    exports[name] = Script[name] = function (code) {
	        var s = Script(code);
	        return s[name].apply(s, [].slice.call(arguments, 1));
	    };
	});

	exports.createScript = function (code) {
	    return exports.Script(code);
	};

	exports.createContext = Script.createContext = function (context) {
	    var copy = new Context();
	    if(typeof context === 'object') {
	        forEach(Object_keys(context), function (key) {
	            copy[key] = context[key];
	        });
	    }
	    return copy;
	};


/***/ },
/* 253 */
/***/ function(module, exports) {

	
	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*global $hotChunkFilename$ hotAddUpdateChunk $hotMainFilename$ */
	module.exports = function() {
		function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
			var chunk = __webpack_require__(255)("./" + $hotChunkFilename$);
			hotAddUpdateChunk(chunk.id, chunk.modules);
		}

		function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
			try {
				var update = __webpack_require__(255)("./" + $hotMainFilename$);
			} catch(e) {
				return callback();
			}
			callback(null, update);
		}
	};


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./NodeChunkTemplatePlugin": 256,
		"./NodeChunkTemplatePlugin.js": 256,
		"./NodeEnvironmentPlugin": 257,
		"./NodeEnvironmentPlugin.js": 257,
		"./NodeHotUpdateChunkTemplatePlugin": 360,
		"./NodeHotUpdateChunkTemplatePlugin.js": 360,
		"./NodeMainTemplate.runtime": 254,
		"./NodeMainTemplate.runtime.js": 254,
		"./NodeMainTemplateAsync.runtime": 251,
		"./NodeMainTemplateAsync.runtime.js": 251,
		"./NodeMainTemplatePlugin": 250,
		"./NodeMainTemplatePlugin.js": 250,
		"./NodeOutputFileSystem": 356,
		"./NodeOutputFileSystem.js": 356,
		"./NodeSourcePlugin": 234,
		"./NodeSourcePlugin.js": 234,
		"./NodeTargetPlugin": 361,
		"./NodeTargetPlugin.js": 361,
		"./NodeTemplatePlugin": 249,
		"./NodeTemplatePlugin.js": 249,
		"./NodeWatchFileSystem": 258,
		"./NodeWatchFileSystem.js": 258,
		"./OldNodeWatchFileSystem": 365,
		"./OldNodeWatchFileSystem.js": 365
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 255;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);

	function NodeChunkTemplatePlugin() {}
	module.exports = NodeChunkTemplatePlugin;

	NodeChunkTemplatePlugin.prototype.apply = function(chunkTemplate) {
		chunkTemplate.plugin("render", function(modules, chunk) {
			var source = new ConcatSource();
			source.add("exports.ids = " + JSON.stringify(chunk.ids) + ";\nexports.modules = ");
			source.add(modules);
			source.add(";");
			return source;
		});
		chunkTemplate.plugin("hash", function(hash) {
			hash.update("node");
			hash.update("3");
		});
	};


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NodeWatchFileSystem = __webpack_require__(258);
	var NodeOutputFileSystem = __webpack_require__(356);
	var NodeJsInputFileSystem = __webpack_require__(358);
	var CachedInputFileSystem = __webpack_require__(359);

	function NodeEnvironmentPlugin() {}
	module.exports = NodeEnvironmentPlugin;
	NodeEnvironmentPlugin.prototype.apply = function(compiler) {
		compiler.inputFileSystem = new NodeJsInputFileSystem();
		var inputFileSystem = compiler.inputFileSystem = new CachedInputFileSystem(compiler.inputFileSystem, 60000);
		compiler.resolvers.normal.fileSystem = compiler.inputFileSystem;
		compiler.resolvers.context.fileSystem = compiler.inputFileSystem;
		compiler.resolvers.loader.fileSystem = compiler.inputFileSystem;
		compiler.outputFileSystem = new NodeOutputFileSystem();
		compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);
		compiler.plugin("run", function(compiler, callback) {
			if(compiler.inputFileSystem === inputFileSystem)
				inputFileSystem.purge();
			callback();
		});
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Watchpack = __webpack_require__(259);

	function NodeWatchFileSystem(inputFileSystem) {
		this.inputFileSystem = inputFileSystem;
		this.watcherOptions = {
			aggregateTimeout: 0
		};
		this.watcher = new Watchpack(this.watcherOptions);
	}

	module.exports = NodeWatchFileSystem;

	NodeWatchFileSystem.prototype.watch = function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {
		if(!Array.isArray(files))
			throw new Error("Invalid arguments: 'files'");
		if(!Array.isArray(dirs))
			throw new Error("Invalid arguments: 'dirs'");
		if(!Array.isArray(missing))
			throw new Error("Invalid arguments: 'missing'");
		if(typeof callback !== "function")
			throw new Error("Invalid arguments: 'callback'");
		if(typeof startTime !== "number" && startTime)
			throw new Error("Invalid arguments: 'startTime'");
		if(typeof options !== "object")
			throw new Error("Invalid arguments: 'options'");
		if(typeof callbackUndelayed !== "function" && callbackUndelayed)
			throw new Error("Invalid arguments: 'callbackUndelayed'");
		var oldWatcher = this.watcher;
		this.watcher = new Watchpack(options);

		if(callbackUndelayed)
			this.watcher.once("change", callbackUndelayed);

		this.watcher.once("aggregated", function(changes) {
			if(this.inputFileSystem && this.inputFileSystem.purge) {
				this.inputFileSystem.purge(changes);
			}
			var times = this.watcher.getTimes();
			callback(null, changes.filter(function(file) {
				return files.indexOf(file) >= 0;
			}).sort(), changes.filter(function(file) {
				return dirs.indexOf(file) >= 0;
			}).sort(), changes.filter(function(file) {
				return missing.indexOf(file) >= 0;
			}).sort(), times, times);
		}.bind(this));

		this.watcher.watch(files.concat(missing), dirs, startTime);

		if(oldWatcher) {
			oldWatcher.close();
		}
		return {
			close: function() {
				this.watcher.close();
			}.bind(this),
			pause: function() {
				this.watcher.pause();
			}.bind(this)
		};
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var watcherManager = __webpack_require__(260);
	var EventEmitter = __webpack_require__(262).EventEmitter;

	function Watchpack(options) {
		EventEmitter.call(this);
		if(!options) options = {};
		if(!options.aggregateTimeout) options.aggregateTimeout = 200;
		this.options = options;
		this.watcherOptions = {
			poll: options.poll
		};
		this.fileWatchers = [];
		this.dirWatchers = [];
		this.mtimes = {};
		this.paused = false;
		this.aggregatedChanges = [];
		this.aggregateTimeout = 0;
		this._onTimeout = this._onTimeout.bind(this);
	}

	module.exports = Watchpack;

	Watchpack.prototype = Object.create(EventEmitter.prototype);

	Watchpack.prototype.watch = function watch(files, directories, startTime) {
		this.paused = false;
		var oldFileWatchers = this.fileWatchers;
		var oldDirWatchers = this.dirWatchers;
		this.fileWatchers = files.map(function(file) {
			return this._fileWatcher(file, watcherManager.watchFile(file, this.watcherOptions, startTime));
		}, this);
		this.dirWatchers = directories.map(function(dir) {
			return this._dirWatcher(dir, watcherManager.watchDirectory(dir, this.watcherOptions, startTime));
		}, this);
		oldFileWatchers.forEach(function(w) {
			w.close();
		}, this);
		oldDirWatchers.forEach(function(w) {
			w.close();
		}, this);
	};

	Watchpack.prototype.close = function resume() {
		this.paused = true;
		if(this.aggregateTimeout)
			clearTimeout(this.aggregateTimeout);
		this.fileWatchers.forEach(function(w) {
			w.close();
		}, this);
		this.dirWatchers.forEach(function(w) {
			w.close();
		}, this);
		this.fileWatchers.length = 0;
		this.dirWatchers.length = 0;
	};

	Watchpack.prototype.pause = function pause() {
		this.paused = true;
		if(this.aggregateTimeout)
			clearTimeout(this.aggregateTimeout);
	};

	function addWatchersToArray(watchers, array) {
		watchers.forEach(function(w) {
			if(array.indexOf(w.directoryWatcher) < 0) {
				array.push(w.directoryWatcher);
				addWatchersToArray(Object.keys(w.directoryWatcher.directories).reduce(function(a, dir) {
					if(w.directoryWatcher.directories[dir] !== true)
						a.push(w.directoryWatcher.directories[dir]);
					return a;
				}, []), array);
			}
		});
	}

	Watchpack.prototype.getTimes = function() {
		var directoryWatchers = [];
		addWatchersToArray(this.fileWatchers.concat(this.dirWatchers), directoryWatchers);
		var obj = {};
		directoryWatchers.forEach(function(w) {
			var times = w.getTimes();
			Object.keys(times).forEach(function(file) {
				obj[file] = times[file];
			});
		});
		return obj;
	};

	Watchpack.prototype._fileWatcher = function _fileWatcher(file, watcher) {
		watcher.on("change", this._onChange.bind(this, file));
		return watcher;
	};

	Watchpack.prototype._dirWatcher = function _dirWatcher(item, watcher) {
		watcher.on("change", function(file, mtime) {
			this._onChange(item, mtime, file);
		}.bind(this));
		return watcher;
	};

	Watchpack.prototype._onChange = function _onChange(item, mtime, file) {
		file = file || item;
		this.mtimes[file] = mtime;
		if(this.paused) return;
		this.emit("change", file, mtime);
		if(this.aggregateTimeout)
			clearTimeout(this.aggregateTimeout);
		if(this.aggregatedChanges.indexOf(item) < 0)
			this.aggregatedChanges.push(item);
		this.aggregateTimeout = setTimeout(this._onTimeout, this.options.aggregateTimeout);
	};

	Watchpack.prototype._onTimeout = function _onTimeout() {
		this.aggregateTimeout = 0;
		var changes = this.aggregatedChanges;
		this.aggregatedChanges = [];
		this.emit("aggregated", changes);
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(36);

	function WatcherManager() {
		this.directoryWatchers = {};
	}

	WatcherManager.prototype.getDirectoryWatcher = function(directory, options) {
		var DirectoryWatcher = __webpack_require__(261);
		options = options || {};
		var key = directory + " " + JSON.stringify(options);
		if(!this.directoryWatchers[key]) {
			this.directoryWatchers[key] = new DirectoryWatcher(directory, options);
			this.directoryWatchers[key].on("closed", function() {
				delete this.directoryWatchers[key];
			}.bind(this));
		}
		return this.directoryWatchers[key];
	};

	WatcherManager.prototype.watchFile = function watchFile(p, options, startTime) {
		var directory = path.dirname(p);
		return this.getDirectoryWatcher(directory, options).watch(p, startTime);
	};

	WatcherManager.prototype.watchDirectory = function watchDirectory(directory, options, startTime) {
		return this.getDirectoryWatcher(directory, options).watch(directory, startTime);
	};

	module.exports = new WatcherManager();


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var EventEmitter = __webpack_require__(262).EventEmitter;
	var async = __webpack_require__(263);
	var chokidar = __webpack_require__(264);
	var fs = __webpack_require__(312);
	var path = __webpack_require__(36);

	var watcherManager = __webpack_require__(260);

	var FS_ACCURENCY = 10000;


	function withoutCase(str) {
		return str.toLowerCase();
	}


	function Watcher(directoryWatcher, filePath, startTime) {
		EventEmitter.call(this);
		this.directoryWatcher = directoryWatcher;
		this.path = filePath;
		this.startTime = startTime && +startTime;
		this.data = 0;
	}

	Watcher.prototype = Object.create(EventEmitter.prototype);
	Watcher.prototype.constructor = Watcher;

	Watcher.prototype.checkStartTime = function checkStartTime(mtime, initial) {
		if(typeof this.startTime !== "number") return !initial;
		var startTime = this.startTime && Math.floor(this.startTime / FS_ACCURENCY) * FS_ACCURENCY;
		return startTime <= mtime;
	};

	Watcher.prototype.close = function close() {
		this.emit("closed");
	};


	function DirectoryWatcher(directoryPath, options) {
		EventEmitter.call(this);
		this.path = directoryPath;
		this.files = {};
		this.directories = {};
		this.watcher = chokidar.watch(directoryPath, {
			ignoreInitial: true,
			persistent: true,
			followSymlinks: false,
			depth: 0,
			atomic: false,
			alwaysStat: true,
			ignorePermissionErrors: true,
			usePolling: options.poll ? true : undefined,
			interval: typeof options.poll === "number" ? options.poll : undefined
		});
		this.watcher.on("add", this.onFileAdded.bind(this));
		this.watcher.on("addDir", this.onDirectoryAdded.bind(this));
		this.watcher.on("change", this.onChange.bind(this));
		this.watcher.on("unlink", this.onFileUnlinked.bind(this));
		this.watcher.on("unlinkDir", this.onDirectoryUnlinked.bind(this));
		this.watcher.on("error", this.onWatcherError.bind(this));
		this.initialScan = true;
		this.nestedWatching = false;
		this.initialScanRemoved = [];
		this.doInitialScan();
		this.watchers = {};
		this.refs = 0;
	}
	module.exports = DirectoryWatcher;

	DirectoryWatcher.prototype = Object.create(EventEmitter.prototype);
	DirectoryWatcher.prototype.constructor = DirectoryWatcher;

	DirectoryWatcher.prototype.setFileTime = function setFileTime(filePath, mtime, initial, type) {
		var now = Date.now();
		var old = this.files[filePath];
		this.files[filePath] = [initial ? Math.min(now, mtime) : now, mtime];
		if(!old) {
			if(mtime) {
				if(this.watchers[withoutCase(filePath)]) {
					this.watchers[withoutCase(filePath)].forEach(function(w) {
						if(!initial || w.checkStartTime(mtime, initial)) {
							w.emit("change", mtime);
						}
					});
				}
			}
		} else if(!initial && mtime && type !== "add") {
			if(this.watchers[withoutCase(filePath)]) {
				this.watchers[withoutCase(filePath)].forEach(function(w) {
					w.emit("change", mtime);
				});
			}
		} else if(!initial && !mtime) {
			if(this.watchers[withoutCase(filePath)]) {
				this.watchers[withoutCase(filePath)].forEach(function(w) {
					w.emit("remove");
				});
			}
		}
		if(this.watchers[withoutCase(this.path)]) {
			this.watchers[withoutCase(this.path)].forEach(function(w) {
				if(!initial || w.checkStartTime(mtime, initial)) {
					w.emit("change", filePath, mtime);
				}
			});
		}
	};

	DirectoryWatcher.prototype.setDirectory = function setDirectory(directoryPath, exist, initial) {
		var old = this.directories[directoryPath];
		if(!old) {
			if(exist) {
				if(this.nestedWatching) {
					this.createNestedWatcher(directoryPath);
				} else {
					this.directories[directoryPath] = true;
				}
			}
		} else {
			if(!exist) {
				if(this.nestedWatching)
					this.directories[directoryPath].close();
				delete this.directories[directoryPath];
				if(!initial && this.watchers[withoutCase(this.path)]) {
					this.watchers[withoutCase(this.path)].forEach(function(w) {
						w.emit("change", directoryPath, w.data);
					});
				}
			}
		}
	};

	DirectoryWatcher.prototype.createNestedWatcher = function(directoryPath) {
		this.directories[directoryPath] = watcherManager.watchDirectory(directoryPath, this.options, 1);
		this.directories[directoryPath].on("change", function(filePath, mtime) {
			if(this.watchers[withoutCase(this.path)]) {
				this.watchers[withoutCase(this.path)].forEach(function(w) {
					if(w.checkStartTime(mtime, false)) {
						w.emit("change", filePath, mtime);
					}
				});
			}
		}.bind(this));
	};

	DirectoryWatcher.prototype.setNestedWatching = function(flag) {
		if(this.nestedWatching !== !!flag) {
			this.nestedWatching = !!flag;
			if(this.nestedWatching) {
				Object.keys(this.directories).forEach(function(directory) {
					this.createNestedWatcher(directory);
				}, this);
			} else {
				Object.keys(this.directories).forEach(function(directory) {
					this.directories[directory].close();
					this.directories[directory] = true;
				}, this);
			}
		}
	};

	DirectoryWatcher.prototype.watch = function watch(filePath, startTime) {
		this.watchers[withoutCase(filePath)] = this.watchers[withoutCase(filePath)] || [];
		this.refs++;
		var watcher = new Watcher(this, filePath, startTime);
		watcher.on("closed", function() {
			var idx = this.watchers[withoutCase(filePath)].indexOf(watcher);
			this.watchers[withoutCase(filePath)].splice(idx, 1);
			if(this.watchers[withoutCase(filePath)].length === 0) {
				delete this.watchers[withoutCase(filePath)];
				if(this.path === filePath)
					this.setNestedWatching(false);
			}
			if(--this.refs <= 0)
				this.close();
		}.bind(this));
		this.watchers[withoutCase(filePath)].push(watcher);
		var data;
		if(filePath === this.path) {
			this.setNestedWatching(true);
			data = false;
			Object.keys(this.files).forEach(function(file) {
				var d = this.files[file];
				if(!data)
					data = d;
				else
					data = [Math.max(data[0], d[0]), Math.max(data[1], d[1])];
			}, this);
		} else {
			data = this.files[filePath];
		}
		process.nextTick(function() {
			if(data) {
				if(data[0] > startTime)
					watcher.emit("change", data[1]);
			} else if(this.initialScan && this.initialScanRemoved.indexOf(filePath) >= 0) {
				watcher.emit("remove");
			}
		}.bind(this));
		return watcher;
	};

	DirectoryWatcher.prototype.onFileAdded = function onFileAdded(filePath, stat) {
		if(filePath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(filePath.substr(this.path.length + 1))) return;

		this.setFileTime(filePath, +stat.mtime, false, "add");
	};

	DirectoryWatcher.prototype.onDirectoryAdded = function onDirectoryAdded(directoryPath /*, stat */) {
		if(directoryPath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(directoryPath.substr(this.path.length + 1))) return;
		this.setDirectory(directoryPath, true, false);
	};

	DirectoryWatcher.prototype.onChange = function onChange(filePath, stat) {
		if(filePath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(filePath.substr(this.path.length + 1))) return;
		var mtime = +stat.mtime;
		if(FS_ACCURENCY > 1 && mtime % 1 !== 0)
			FS_ACCURENCY = 1;
		else if(FS_ACCURENCY > 10 && mtime % 10 !== 0)
			FS_ACCURENCY = 10;
		else if(FS_ACCURENCY > 100 && mtime % 100 !== 0)
			FS_ACCURENCY = 100;
		else if(FS_ACCURENCY > 1000 && mtime % 1000 !== 0)
			FS_ACCURENCY = 1000;
		else if(FS_ACCURENCY > 2000 && mtime % 2000 !== 0)
			FS_ACCURENCY = 2000;
		this.setFileTime(filePath, mtime, false, "change");
	};

	DirectoryWatcher.prototype.onFileUnlinked = function onFileUnlinked(filePath) {
		if(filePath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(filePath.substr(this.path.length + 1))) return;
		this.setFileTime(filePath, null, false, "unlink");
		if(this.initialScan) {
			this.initialScanRemoved.push(filePath);
		}
	};

	DirectoryWatcher.prototype.onDirectoryUnlinked = function onDirectoryUnlinked(directoryPath) {
		if(directoryPath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(directoryPath.substr(this.path.length + 1))) return;
		this.setDirectory(directoryPath, false, false);
		if(this.initialScan) {
			this.initialScanRemoved.push(directoryPath);
		}
	};

	DirectoryWatcher.prototype.onWatcherError = function onWatcherError(/* err */) {
	};

	DirectoryWatcher.prototype.doInitialScan = function doInitialScan() {
		fs.readdir(this.path, function(err, items) {
			if(err) {
				this.initialScan = false;
				return;
			}
			async.forEach(items, function(item, callback) {
				var itemPath = path.join(this.path, item);
				fs.stat(itemPath, function(err2, stat) {
					if(!this.initialScan) return;
					if(err2) {
						callback();
						return;
					}
					if(stat.isFile()) {
						if(!this.files[itemPath])
							this.setFileTime(itemPath, +stat.mtime, true);
					} else if(stat.isDirectory()) {
						if(!this.directories[itemPath])
							this.setDirectory(itemPath, true, true);
					}
					callback();
				}.bind(this));
			}.bind(this), function() {
				this.initialScan = false;
				this.initialScanRemoved = null;
			}.bind(this));
		}.bind(this));
	};

	DirectoryWatcher.prototype.getTimes = function() {
		var obj = {};
		var selfTime = 0;
		Object.keys(this.files).forEach(function(file) {
			var data = this.files[file];
			if(data[1]) {
				var time = Math.max(data[0], data[1]);
				obj[file] = time;
				if(time > selfTime)
					selfTime = time;
			}
		}, this);
		if(this.nestedWatching) {
			Object.keys(this.directories).forEach(function(dir) {
				var w = this.directories[dir];
				var times = w.directoryWatcher.getTimes();
				Object.keys(times).forEach(function(file) {
					var time = times[file];
					obj[file] = time;
					if(time > selfTime)
						selfTime = time;
				});
			}, this);
			obj[this.path] = selfTime;
		}
		return obj;
	};

	DirectoryWatcher.prototype.close = function() {
		this.initialScan = false;
		this.watcher.close();
		if(this.nestedWatching) {
			Object.keys(this.directories).forEach(function(dir) {
				this.directories[dir].close();
			}, this);
		}
		this.emit("closed");
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 262 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	/*jshint onevar: false, indent:4 */
	/*global setImmediate: false, setTimeout: false, console: false */
	(function () {

	    var async = {};

	    // global on the server, window in the browser
	    var root, previous_async;

	    root = this;
	    if (root != null) {
	      previous_async = root.async;
	    }

	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };

	    function only_once(fn) {
	        var called = false;
	        return function() {
	            if (called) throw new Error("Callback was already called.");
	            called = true;
	            fn.apply(root, arguments);
	        }
	    }

	    //// cross-browser compatiblity functions ////

	    var _toString = Object.prototype.toString;

	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };

	    var _each = function (arr, iterator) {
	        for (var i = 0; i < arr.length; i += 1) {
	            iterator(arr[i], i, arr);
	        }
	    };

	    var _map = function (arr, iterator) {
	        if (arr.map) {
	            return arr.map(iterator);
	        }
	        var results = [];
	        _each(arr, function (x, i, a) {
	            results.push(iterator(x, i, a));
	        });
	        return results;
	    };

	    var _reduce = function (arr, iterator, memo) {
	        if (arr.reduce) {
	            return arr.reduce(iterator, memo);
	        }
	        _each(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    };

	    var _keys = function (obj) {
	        if (Object.keys) {
	            return Object.keys(obj);
	        }
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };

	    //// exported async module functions ////

	    //// nextTick implementation with browser-compatible fallback ////
	    if (typeof process === 'undefined' || !(process.nextTick)) {
	        if (typeof setImmediate === 'function') {
	            async.nextTick = function (fn) {
	                // not a direct alias for IE10 compatibility
	                setImmediate(fn);
	            };
	            async.setImmediate = async.nextTick;
	        }
	        else {
	            async.nextTick = function (fn) {
	                setTimeout(fn, 0);
	            };
	            async.setImmediate = async.nextTick;
	        }
	    }
	    else {
	        async.nextTick = process.nextTick;
	        if (typeof setImmediate !== 'undefined') {
	            async.setImmediate = function (fn) {
	              // not a direct alias for IE10 compatibility
	              setImmediate(fn);
	            };
	        }
	        else {
	            async.setImmediate = async.nextTick;
	        }
	    }

	    async.each = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        _each(arr, function (x) {
	            iterator(x, only_once(done) );
	        });
	        function done(err) {
	          if (err) {
	              callback(err);
	              callback = function () {};
	          }
	          else {
	              completed += 1;
	              if (completed >= arr.length) {
	                  callback();
	              }
	          }
	        }
	    };
	    async.forEach = async.each;

	    async.eachSeries = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        var iterate = function () {
	            iterator(arr[completed], function (err) {
	                if (err) {
	                    callback(err);
	                    callback = function () {};
	                }
	                else {
	                    completed += 1;
	                    if (completed >= arr.length) {
	                        callback();
	                    }
	                    else {
	                        iterate();
	                    }
	                }
	            });
	        };
	        iterate();
	    };
	    async.forEachSeries = async.eachSeries;

	    async.eachLimit = function (arr, limit, iterator, callback) {
	        var fn = _eachLimit(limit);
	        fn.apply(null, [arr, iterator, callback]);
	    };
	    async.forEachLimit = async.eachLimit;

	    var _eachLimit = function (limit) {

	        return function (arr, iterator, callback) {
	            callback = callback || function () {};
	            if (!arr.length || limit <= 0) {
	                return callback();
	            }
	            var completed = 0;
	            var started = 0;
	            var running = 0;

	            (function replenish () {
	                if (completed >= arr.length) {
	                    return callback();
	                }

	                while (running < limit && started < arr.length) {
	                    started += 1;
	                    running += 1;
	                    iterator(arr[started - 1], function (err) {
	                        if (err) {
	                            callback(err);
	                            callback = function () {};
	                        }
	                        else {
	                            completed += 1;
	                            running -= 1;
	                            if (completed >= arr.length) {
	                                callback();
	                            }
	                            else {
	                                replenish();
	                            }
	                        }
	                    });
	                }
	            })();
	        };
	    };


	    var doParallel = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.each].concat(args));
	        };
	    };
	    var doParallelLimit = function(limit, fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [_eachLimit(limit)].concat(args));
	        };
	    };
	    var doSeries = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.eachSeries].concat(args));
	        };
	    };


	    var _asyncMap = function (eachfn, arr, iterator, callback) {
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        if (!callback) {
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err) {
	                    callback(err);
	                });
	            });
	        } else {
	            var results = [];
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err, v) {
	                    results[x.index] = v;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = function (arr, limit, iterator, callback) {
	        return _mapLimit(limit)(arr, iterator, callback);
	    };

	    var _mapLimit = function(limit) {
	        return doParallelLimit(limit, _asyncMap);
	    };

	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachSeries(arr, function (x, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };
	    // inject alias
	    async.inject = async.reduce;
	    // foldl alias
	    async.foldl = async.reduce;

	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, function (x) {
	            return x;
	        }).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };
	    // foldr alias
	    async.foldr = async.reduceRight;

	    var _filter = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.filter = doParallel(_filter);
	    async.filterSeries = doSeries(_filter);
	    // select alias
	    async.select = async.filter;
	    async.selectSeries = async.filterSeries;

	    var _reject = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (!v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.reject = doParallel(_reject);
	    async.rejectSeries = doSeries(_reject);

	    var _detect = function (eachfn, arr, iterator, main_callback) {
	        eachfn(arr, function (x, callback) {
	            iterator(x, function (result) {
	                if (result) {
	                    main_callback(x);
	                    main_callback = function () {};
	                }
	                else {
	                    callback();
	                }
	            });
	        }, function (err) {
	            main_callback();
	        });
	    };
	    async.detect = doParallel(_detect);
	    async.detectSeries = doSeries(_detect);

	    async.some = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    main_callback(true);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(false);
	        });
	    };
	    // any alias
	    async.any = async.some;

	    async.every = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (!v) {
	                    main_callback(false);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(true);
	        });
	    };
	    // all alias
	    async.all = async.every;

	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                var fn = function (left, right) {
	                    var a = left.criteria, b = right.criteria;
	                    return a < b ? -1 : a > b ? 1 : 0;
	                };
	                callback(null, _map(results.sort(fn), function (x) {
	                    return x.value;
	                }));
	            }
	        });
	    };

	    async.auto = function (tasks, callback) {
	        callback = callback || function () {};
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length
	        if (!remainingTasks) {
	            return callback();
	        }

	        var results = {};

	        var listeners = [];
	        var addListener = function (fn) {
	            listeners.unshift(fn);
	        };
	        var removeListener = function (fn) {
	            for (var i = 0; i < listeners.length; i += 1) {
	                if (listeners[i] === fn) {
	                    listeners.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        var taskComplete = function () {
	            remainingTasks--
	            _each(listeners.slice(0), function (fn) {
	                fn();
	            });
	        };

	        addListener(function () {
	            if (!remainingTasks) {
	                var theCallback = callback;
	                // prevent final callback from calling itself if it errors
	                callback = function () {};

	                theCallback(null, results);
	            }
	        });

	        _each(keys, function (k) {
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _each(_keys(results), function(rkey) {
	                        safeResults[rkey] = results[rkey];
	                    });
	                    safeResults[k] = args;
	                    callback(err, safeResults);
	                    // stop subsequent errors hitting callback multiple times
	                    callback = function () {};
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            };
	            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
	            var ready = function () {
	                return _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            };
	            if (ready()) {
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                var listener = function () {
	                    if (ready()) {
	                        removeListener(listener);
	                        task[task.length - 1](taskCallback, results);
	                    }
	                };
	                addListener(listener);
	            }
	        });
	    };

	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var attempts = [];
	        // Use defaults if times not passed
	        if (typeof times === 'function') {
	            callback = task;
	            task = times;
	            times = DEFAULT_TIMES;
	        }
	        // Make sure times is a number
	        times = parseInt(times, 10) || DEFAULT_TIMES;
	        var wrappedTask = function(wrappedCallback, wrappedResults) {
	            var retryAttempt = function(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            };
	            while (times) {
	                attempts.push(retryAttempt(task, !(times-=1)));
	            }
	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || callback)(data.err, data.result);
	            });
	        }
	        // If a callback is passed, run this as a controll flow
	        return callback ? wrappedTask() : wrappedTask
	    };

	    async.waterfall = function (tasks, callback) {
	        callback = callback || function () {};
	        if (!_isArray(tasks)) {
	          var err = new Error('First argument to waterfall must be an array of functions');
	          return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        var wrapIterator = function (iterator) {
	            return function (err) {
	                if (err) {
	                    callback.apply(null, arguments);
	                    callback = function () {};
	                }
	                else {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    async.setImmediate(function () {
	                        iterator.apply(null, args);
	                    });
	                }
	            };
	        };
	        wrapIterator(async.iterator(tasks))();
	    };

	    var _parallel = function(eachfn, tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            eachfn.map(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            eachfn.each(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };

	    async.parallel = function (tasks, callback) {
	        _parallel({ map: async.map, each: async.each }, tasks, callback);
	    };

	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
	    };

	    async.series = function (tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            async.mapSeries(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            async.eachSeries(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };

	    async.iterator = function (tasks) {
	        var makeCallback = function (index) {
	            var fn = function () {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            };
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        };
	        return makeCallback(0);
	    };

	    async.apply = function (fn) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return function () {
	            return fn.apply(
	                null, args.concat(Array.prototype.slice.call(arguments))
	            );
	        };
	    };

	    var _concat = function (eachfn, arr, fn, callback) {
	        var r = [];
	        eachfn(arr, function (x, cb) {
	            fn(x, function (err, y) {
	                r = r.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, r);
	        });
	    };
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);

	    async.whilst = function (test, iterator, callback) {
	        if (test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.whilst(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };

	    async.doWhilst = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (test.apply(null, args)) {
	                async.doWhilst(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };

	    async.until = function (test, iterator, callback) {
	        if (!test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.until(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };

	    async.doUntil = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (!test.apply(null, args)) {
	                async.doUntil(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };

	    async.queue = function (worker, concurrency) {
	        if (concurrency === undefined) {
	            concurrency = 1;
	        }
	        function _insert(q, data, pos, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  callback: typeof callback === 'function' ? callback : null
	              };

	              if (pos) {
	                q.tasks.unshift(item);
	              } else {
	                q.tasks.push(item);
	              }

	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }

	        var workers = 0;
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            saturated: null,
	            empty: null,
	            drain: null,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	              _insert(q, data, false, callback);
	            },
	            kill: function () {
	              q.drain = null;
	              q.tasks = [];
	            },
	            unshift: function (data, callback) {
	              _insert(q, data, true, callback);
	            },
	            process: function () {
	                if (!q.paused && workers < q.concurrency && q.tasks.length) {
	                    var task = q.tasks.shift();
	                    if (q.empty && q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    var next = function () {
	                        workers -= 1;
	                        if (task.callback) {
	                            task.callback.apply(task, arguments);
	                        }
	                        if (q.drain && q.tasks.length + workers === 0) {
	                            q.drain();
	                        }
	                        q.process();
	                    };
	                    var cb = only_once(next);
	                    worker(task.data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                if (q.paused === true) { return; }
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= q.concurrency; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    };

	    async.priorityQueue = function (worker, concurrency) {

	        function _compareTasks(a, b){
	          return a.priority - b.priority;
	        };

	        function _binarySearch(sequence, item, compare) {
	          var beg = -1,
	              end = sequence.length - 1;
	          while (beg < end) {
	            var mid = beg + ((end - beg + 1) >>> 1);
	            if (compare(item, sequence[mid]) >= 0) {
	              beg = mid;
	            } else {
	              end = mid - 1;
	            }
	          }
	          return beg;
	        }

	        function _insert(q, data, priority, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  priority: priority,
	                  callback: typeof callback === 'function' ? callback : null
	              };

	              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }

	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);

	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	          _insert(q, data, priority, callback);
	        };

	        // Remove unshift function
	        delete q.unshift;

	        return q;
	    };

	    async.cargo = function (worker, payload) {
	        var working     = false,
	            tasks       = [];

	        var cargo = {
	            tasks: tasks,
	            payload: payload,
	            saturated: null,
	            empty: null,
	            drain: null,
	            drained: true,
	            push: function (data, callback) {
	                if (!_isArray(data)) {
	                    data = [data];
	                }
	                _each(data, function(task) {
	                    tasks.push({
	                        data: task,
	                        callback: typeof callback === 'function' ? callback : null
	                    });
	                    cargo.drained = false;
	                    if (cargo.saturated && tasks.length === payload) {
	                        cargo.saturated();
	                    }
	                });
	                async.setImmediate(cargo.process);
	            },
	            process: function process() {
	                if (working) return;
	                if (tasks.length === 0) {
	                    if(cargo.drain && !cargo.drained) cargo.drain();
	                    cargo.drained = true;
	                    return;
	                }

	                var ts = typeof payload === 'number'
	                            ? tasks.splice(0, payload)
	                            : tasks.splice(0, tasks.length);

	                var ds = _map(ts, function (task) {
	                    return task.data;
	                });

	                if(cargo.empty) cargo.empty();
	                working = true;
	                worker(ds, function () {
	                    working = false;

	                    var args = arguments;
	                    _each(ts, function (data) {
	                        if (data.callback) {
	                            data.callback.apply(null, args);
	                        }
	                    });

	                    process();
	                });
	            },
	            length: function () {
	                return tasks.length;
	            },
	            running: function () {
	                return working;
	            }
	        };
	        return cargo;
	    };

	    var _console_fn = function (name) {
	        return function (fn) {
	            var args = Array.prototype.slice.call(arguments, 1);
	            fn.apply(null, args.concat([function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (typeof console !== 'undefined') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _each(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            }]));
	        };
	    };
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/

	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        hasher = hasher || function (x) {
	            return x;
	        };
	        var memoized = function () {
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (key in memo) {
	                async.nextTick(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (key in queues) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([function () {
	                    memo[key] = arguments;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, arguments);
	                    }
	                }]));
	            }
	        };
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };

	    async.unmemoize = function (fn) {
	      return function () {
	        return (fn.unmemoized || fn).apply(null, arguments);
	      };
	    };

	    async.times = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.map(counter, iterator, callback);
	    };

	    async.timesSeries = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.mapSeries(counter, iterator, callback);
	    };

	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([function () {
	                    var err = arguments[0];
	                    var nextargs = Array.prototype.slice.call(arguments, 1);
	                    cb(err, nextargs);
	                }]))
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        };
	    };

	    async.compose = function (/* functions... */) {
	      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };

	    var _applyEach = function (eachfn, fns /*args...*/) {
	        var go = function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat([cb]));
	            },
	            callback);
	        };
	        if (arguments.length > 2) {
	            var args = Array.prototype.slice.call(arguments, 2);
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    };
	    async.applyEach = doParallel(_applyEach);
	    async.applyEachSeries = doSeries(_applyEach);

	    async.forever = function (fn, callback) {
	        function next(err) {
	            if (err) {
	                if (callback) {
	                    return callback(err);
	                }
	                throw err;
	            }
	            fn(next);
	        }
	        next();
	    };

	    // Node.js
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }

	}());

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(40).setImmediate))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var EventEmitter = __webpack_require__(262).EventEmitter;
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var sysPath = __webpack_require__(36);
	var asyncEach = __webpack_require__(265);
	var anymatch = __webpack_require__(266);
	var globParent = __webpack_require__(301);
	var isGlob = __webpack_require__(292);
	var isAbsolute = __webpack_require__(308);
	var inherits = __webpack_require__(309);

	var NodeFsHandler = __webpack_require__(310);
	var FsEventsHandler = __webpack_require__(355);

	var arrify = function(value) {
	  if (value == null) return [];
	  return Array.isArray(value) ? value : [value];
	};

	var flatten = function(list, result) {
	  if (result == null) result = [];
	  list.forEach(function(item) {
	    if (Array.isArray(item)) {
	      flatten(item, result);
	    } else {
	      result.push(item);
	    }
	  });
	  return result;
	};

	// Little isString util for use in Array#every.
	var isString = function(thing) {
	  return typeof thing === 'string';
	};

	// Public: Main class.
	// Watches files & directories for changes.
	//
	// * _opts - object, chokidar options hash
	//
	// Emitted events:
	// `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
	//
	// Examples
	//
	//  var watcher = new FSWatcher()
	//    .add(directories)
	//    .on('add', path => console.log('File', path, 'was added'))
	//    .on('change', path => console.log('File', path, 'was changed'))
	//    .on('unlink', path => console.log('File', path, 'was removed'))
	//    .on('all', (event, path) => console.log(path, ' emitted ', event))
	//
	function FSWatcher(_opts) {
	  EventEmitter.call(this);
	  var opts = {};
	  // in case _opts that is passed in is a frozen object
	  if (_opts) for (var opt in _opts) opts[opt] = _opts[opt];
	  this._watched = Object.create(null);
	  this._closers = Object.create(null);
	  this._ignoredPaths = Object.create(null);
	  Object.defineProperty(this, '_globIgnored', {
	    get: function() { return Object.keys(this._ignoredPaths); }
	  });
	  this.closed = false;
	  this._throttled = Object.create(null);
	  this._symlinkPaths = Object.create(null);

	  function undef(key) {
	    return opts[key] === undefined;
	  }

	  // Set up default options.
	  if (undef('persistent')) opts.persistent = true;
	  if (undef('ignoreInitial')) opts.ignoreInitial = false;
	  if (undef('ignorePermissionErrors')) opts.ignorePermissionErrors = false;
	  if (undef('interval')) opts.interval = 100;
	  if (undef('binaryInterval')) opts.binaryInterval = 300;
	  if (undef('disableGlobbing')) opts.disableGlobbing = false;
	  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;

	  // Enable fsevents on OS X when polling isn't explicitly enabled.
	  if (undef('useFsEvents')) opts.useFsEvents = !opts.usePolling;

	  // If we can't use fsevents, ensure the options reflect it's disabled.
	  if (!FsEventsHandler.canUse()) opts.useFsEvents = false;

	  // Use polling on Mac if not using fsevents.
	  // Other platforms use non-polling fs.watch.
	  if (undef('usePolling') && !opts.useFsEvents) {
	    opts.usePolling = process.platform === 'darwin';
	  }

	  // Global override (useful for end-developers that need to force polling for all
	  // instances of chokidar, regardless of usage/dependency depth)
	  var envPoll = process.env.CHOKIDAR_USEPOLLING;
	  if (envPoll !== undefined) {
	    var envLower = envPoll.toLowerCase();

	    if (envLower === 'false' || envLower === '0') {
	      opts.usePolling = false;
	    } else if (envLower === 'true' || envLower === '1') {
	      opts.usePolling = true;
	    } else {
	      opts.usePolling = !!envLower
	    }
	  }
	  var envInterval = process.env.CHOKIDAR_INTERVAL;
	  if (envInterval) {
	    opts.interval = parseInt(envInterval);
	  }

	  // Editor atomic write normalization enabled by default with fs.watch
	  if (undef('atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;
	  if (opts.atomic) this._pendingUnlinks = Object.create(null);

	  if (undef('followSymlinks')) opts.followSymlinks = true;

	  if (undef('awaitWriteFinish')) opts.awaitWriteFinish = false;
	  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};
	  var awf = opts.awaitWriteFinish;
	  if (awf) {
	    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;
	    if (!awf.pollInterval) awf.pollInterval = 100;

	    this._pendingWrites = Object.create(null);
	  }
	  if (opts.ignored) opts.ignored = arrify(opts.ignored);

	  this._isntIgnored = function(path, stat) {
	    return !this._isIgnored(path, stat);
	  }.bind(this);

	  var readyCalls = 0;
	  this._emitReady = function() {
	    if (++readyCalls >= this._readyCount) {
	      this._emitReady = Function.prototype;
	      this._readyEmitted = true;
	      // use process.nextTick to allow time for listener to be bound
	      process.nextTick(this.emit.bind(this, 'ready'));
	    }
	  }.bind(this);

	  this.options = opts;

	  // You’re frozen when your heart’s not open.
	  Object.freeze(opts);
	}

	inherits(FSWatcher, EventEmitter);

	// Common helpers
	// --------------

	// Private method: Normalize and emit events
	//
	// * event     - string, type of event
	// * path      - string, file or directory path
	// * val[1..3] - arguments to be passed with event
	//
	// Returns the error if defined, otherwise the value of the
	// FSWatcher instance's `closed` flag
	FSWatcher.prototype._emit = function(event, path, val1, val2, val3) {
	  if (this.options.cwd) path = sysPath.relative(this.options.cwd, path);
	  var args = [event, path];
	  if (val3 !== undefined) args.push(val1, val2, val3);
	  else if (val2 !== undefined) args.push(val1, val2);
	  else if (val1 !== undefined) args.push(val1);

	  var awf = this.options.awaitWriteFinish;
	  if (awf && this._pendingWrites[path]) {
	    this._pendingWrites[path].lastChange = new Date();
	    return this;
	  }

	  if (this.options.atomic) {
	    if (event === 'unlink') {
	      this._pendingUnlinks[path] = args;
	      setTimeout(function() {
	        Object.keys(this._pendingUnlinks).forEach(function(path) {
	          this.emit.apply(this, this._pendingUnlinks[path]);
	          this.emit.apply(this, ['all'].concat(this._pendingUnlinks[path]));
	          delete this._pendingUnlinks[path];
	        }.bind(this));
	      }.bind(this), typeof this.options.atomic === "number"
	        ? this.options.atomic
	        : 100);
	      return this;
	    } else if (event === 'add' && this._pendingUnlinks[path]) {
	      event = args[0] = 'change';
	      delete this._pendingUnlinks[path];
	    }
	  }

	  var emitEvent = function() {
	    this.emit.apply(this, args);
	    if (event !== 'error') this.emit.apply(this, ['all'].concat(args));
	  }.bind(this);

	  if (awf && (event === 'add' || event === 'change') && this._readyEmitted) {
	    var awfEmit = function(err, stats) {
	      if (err) {
	        event = args[0] = 'error';
	        args[1] = err;
	        emitEvent();
	      } else if (stats) {
	        // if stats doesn't exist the file must have been deleted
	        if (args.length > 2) {
	          args[2] = stats;
	        } else {
	          args.push(stats);
	        }
	        emitEvent();
	      }
	    };

	    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);
	    return this;
	  }

	  if (event === 'change') {
	    if (!this._throttle('change', path, 50)) return this;
	  }

	  if (
	    this.options.alwaysStat && val1 === undefined &&
	    (event === 'add' || event === 'addDir' || event === 'change')
	  ) {
	    var fullPath = this.options.cwd ? sysPath.join(this.options.cwd, path) : path;
	    fs.stat(fullPath, function(error, stats) {
	      // Suppress event when fs.stat fails, to avoid sending undefined 'stat'
	      if (error || !stats) return;

	      args.push(stats);
	      emitEvent();
	    });
	  } else {
	    emitEvent();
	  }

	  return this;
	};

	// Private method: Common handler for errors
	//
	// * error  - object, Error instance
	//
	// Returns the error if defined, otherwise the value of the
	// FSWatcher instance's `closed` flag
	FSWatcher.prototype._handleError = function(error) {
	  var code = error && error.code;
	  var ipe = this.options.ignorePermissionErrors;
	  if (error &&
	    code !== 'ENOENT' &&
	    code !== 'ENOTDIR' &&
	    (!ipe || (code !== 'EPERM' && code !== 'EACCES'))
	  ) this.emit('error', error);
	  return error || this.closed;
	};

	// Private method: Helper utility for throttling
	//
	// * action  - string, type of action being throttled
	// * path    - string, path being acted upon
	// * timeout - int, duration of time to suppress duplicate actions
	//
	// Returns throttle tracking object or false if action should be suppressed
	FSWatcher.prototype._throttle = function(action, path, timeout) {
	  if (!(action in this._throttled)) {
	    this._throttled[action] = Object.create(null);
	  }
	  var throttled = this._throttled[action];
	  if (path in throttled) return false;
	  function clear() {
	    delete throttled[path];
	    clearTimeout(timeoutObject);
	  }
	  var timeoutObject = setTimeout(clear, timeout);
	  throttled[path] = {timeoutObject: timeoutObject, clear: clear};
	  return throttled[path];
	};

	// Private method: Awaits write operation to finish
	//
	// * path    - string, path being acted upon
	// * threshold - int, time in milliseconds a file size must be fixed before
	//                    acknowledgeing write operation is finished
	// * awfEmit - function, to be called when ready for event to be emitted
	// Polls a newly created file for size variations. When files size does not
	// change for 'threshold' milliseconds calls callback.
	FSWatcher.prototype._awaitWriteFinish = function(path, threshold, event, awfEmit) {
	  var timeoutHandler;

	  var fullPath = path;
	  if (this.options.cwd && !isAbsolute(path)) {
	    fullPath = sysPath.join(this.options.cwd, path);
	  }

	  var now = new Date();

	  var awaitWriteFinish = (function (prevStat) {
	    fs.stat(fullPath, function(err, curStat) {
	      if (err) {
	        if (err.code !== 'ENOENT') awfEmit(err);
	        return;
	      }

	      var now = new Date();

	      if (prevStat && curStat.size != prevStat.size) {
	        this._pendingWrites[path].lastChange = now;
	      }

	      if (now - this._pendingWrites[path].lastChange >= threshold) {
	        delete this._pendingWrites[path];
	        awfEmit(null, curStat);
	      } else {
	        timeoutHandler = setTimeout(
	          awaitWriteFinish.bind(this, curStat),
	          this.options.awaitWriteFinish.pollInterval
	        );
	      }
	    }.bind(this));
	  }.bind(this));

	  if (!(path in this._pendingWrites)) {
	    this._pendingWrites[path] = {
	      lastChange: now,
	      cancelWait: function() {
	        delete this._pendingWrites[path];
	        clearTimeout(timeoutHandler);
	        return event;
	      }.bind(this)
	    };
	    timeoutHandler = setTimeout(
	      awaitWriteFinish.bind(this),
	      this.options.awaitWriteFinish.pollInterval
	    );
	  }
	};

	// Private method: Determines whether user has asked to ignore this path
	//
	// * path  - string, path to file or directory
	// * stats - object, result of fs.stat
	//
	// Returns boolean
	var dotRe = /\..*\.(sw[px])$|\~$|\.subl.*\.tmp/;
	FSWatcher.prototype._isIgnored = function(path, stats) {
	  if (this.options.atomic && dotRe.test(path)) return true;

	  if (!this._userIgnored) {
	    var cwd = this.options.cwd;
	    var ignored = this.options.ignored;
	    if (cwd && ignored) {
	      ignored = ignored.map(function (path) {
	        if (typeof path !== 'string') return path;
	        return isAbsolute(path) ? path : sysPath.join(cwd, path);
	      });
	    }
	    var paths = arrify(ignored)
	      .filter(function(path) {
	        return typeof path === 'string' && !isGlob(path);
	      }).map(function(path) {
	        return path + '/**';
	      });
	    this._userIgnored = anymatch(
	      this._globIgnored.concat(ignored).concat(paths)
	    );
	  }

	  return this._userIgnored([path, stats]);
	};

	// Private method: Provides a set of common helpers and properties relating to
	// symlink and glob handling
	//
	// * path - string, file, directory, or glob pattern being watched
	// * depth - int, at any depth > 0, this isn't a glob
	//
	// Returns object containing helpers for this path
	var replacerRe = /^\.[\/\\]/;
	FSWatcher.prototype._getWatchHelpers = function(path, depth) {
	  path = path.replace(replacerRe, '');
	  var watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);
	  var fullWatchPath = sysPath.resolve(watchPath);
	  var hasGlob = watchPath !== path;
	  var globFilter = hasGlob ? anymatch(path) : false;
	  var follow = this.options.followSymlinks;
	  var globSymlink = hasGlob && follow ? null : false;

	  var checkGlobSymlink = function(entry) {
	    // only need to resolve once
	    // first entry should always have entry.parentDir === ''
	    if (globSymlink == null) {
	      globSymlink = entry.fullParentDir === fullWatchPath ? false : {
	        realPath: entry.fullParentDir,
	        linkPath: fullWatchPath
	      };
	    }

	    if (globSymlink) {
	      return entry.fullPath.replace(globSymlink.realPath, globSymlink.linkPath);
	    }

	    return entry.fullPath;
	  };

	  var entryPath = function(entry) {
	    return sysPath.join(watchPath,
	      sysPath.relative(watchPath, checkGlobSymlink(entry))
	    );
	  };

	  var filterPath = function(entry) {
	    if (entry.stat && entry.stat.isSymbolicLink()) return filterDir(entry);
	    var resolvedPath = entryPath(entry);
	    return (!hasGlob || globFilter(resolvedPath)) &&
	      this._isntIgnored(resolvedPath, entry.stat) &&
	      (this.options.ignorePermissionErrors ||
	        this._hasReadPermissions(entry.stat));
	  }.bind(this);

	  var getDirParts = function(path) {
	    if (!hasGlob) return false;
	    var parts = sysPath.relative(watchPath, path).split(/[\/\\]/);
	    return parts;
	  };

	  var dirParts = getDirParts(path);
	  if (dirParts && dirParts.length > 1) dirParts.pop();
	  var unmatchedGlob;

	  var filterDir = function(entry) {
	    if (hasGlob) {
	      var entryParts = getDirParts(checkGlobSymlink(entry));
	      var globstar = false;
	      unmatchedGlob = !dirParts.every(function(part, i) {
	        if (part === '**') globstar = true;
	        return globstar || !entryParts[i] || anymatch(part, entryParts[i]);
	      });
	    }
	    return !unmatchedGlob && this._isntIgnored(entryPath(entry), entry.stat);
	  }.bind(this);

	  return {
	    followSymlinks: follow,
	    statMethod: follow ? 'stat' : 'lstat',
	    path: path,
	    watchPath: watchPath,
	    entryPath: entryPath,
	    hasGlob: hasGlob,
	    globFilter: globFilter,
	    filterPath: filterPath,
	    filterDir: filterDir
	  };
	};

	// Directory helpers
	// -----------------

	// Private method: Provides directory tracking objects
	//
	// * directory - string, path of the directory
	//
	// Returns the directory's tracking object
	FSWatcher.prototype._getWatchedDir = function(directory) {
	  var dir = sysPath.resolve(directory);
	  var watcherRemove = this._remove.bind(this);
	  if (!(dir in this._watched)) this._watched[dir] = {
	    _items: Object.create(null),
	    add: function(item) {
	      if (item !== '.' && item !== '..') this._items[item] = true;
	    },
	    remove: function(item) {
	      delete this._items[item];
	      if (!this.children().length) {
	        fs.readdir(dir, function(err) {
	          if (err) watcherRemove(sysPath.dirname(dir), sysPath.basename(dir));
	        });
	      }
	    },
	    has: function(item) {return item in this._items;},
	    children: function() {return Object.keys(this._items);}
	  };
	  return this._watched[dir];
	};

	// File helpers
	// ------------

	// Private method: Check for read permissions
	// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
	//
	// * stats - object, result of fs.stat
	//
	// Returns boolean
	FSWatcher.prototype._hasReadPermissions = function(stats) {
	  return Boolean(4 & parseInt(((stats && stats.mode) & 0x1ff).toString(8)[0], 10));
	};

	// Private method: Handles emitting unlink events for
	// files and directories, and via recursion, for
	// files and directories within directories that are unlinked
	//
	// * directory - string, directory within which the following item is located
	// * item      - string, base path of item/directory
	//
	// Returns nothing
	FSWatcher.prototype._remove = function(directory, item) {
	  // if what is being deleted is a directory, get that directory's paths
	  // for recursive deleting and cleaning of watched object
	  // if it is not a directory, nestedDirectoryChildren will be empty array
	  var path = sysPath.join(directory, item);
	  var fullPath = sysPath.resolve(path);
	  var isDirectory = this._watched[path] || this._watched[fullPath];

	  // prevent duplicate handling in case of arriving here nearly simultaneously
	  // via multiple paths (such as _handleFile and _handleDir)
	  if (!this._throttle('remove', path, 100)) return;

	  // if the only watched file is removed, watch for its return
	  var watchedDirs = Object.keys(this._watched);
	  if (!isDirectory && !this.options.useFsEvents && watchedDirs.length === 1) {
	    this.add(directory, item, true);
	  }

	  // This will create a new entry in the watched object in either case
	  // so we got to do the directory check beforehand
	  var nestedDirectoryChildren = this._getWatchedDir(path).children();

	  // Recursively remove children directories / files.
	  nestedDirectoryChildren.forEach(function(nestedItem) {
	    this._remove(path, nestedItem);
	  }, this);

	  // Check if item was on the watched list and remove it
	  var parent = this._getWatchedDir(directory);
	  var wasTracked = parent.has(item);
	  parent.remove(item);

	  // If we wait for this file to be fully written, cancel the wait.
	  var relPath = path;
	  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);
	  if (this.options.awaitWriteFinish && this._pendingWrites[relPath]) {
	    var event = this._pendingWrites[relPath].cancelWait();
	    if (event === 'add') return;
	  }

	  // The Entry will either be a directory that just got removed
	  // or a bogus entry to a file, in either case we have to remove it
	  delete this._watched[path];
	  delete this._watched[fullPath];
	  var eventName = isDirectory ? 'unlinkDir' : 'unlink';
	  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);

	  // Avoid conflicts if we later create another file with the same name
	  if (!this.options.useFsEvents) {
	    this._closePath(path);
	  }
	};

	FSWatcher.prototype._closePath = function(path) {
	  if (!this._closers[path]) return;
	  this._closers[path]();
	  delete this._closers[path];
	  this._getWatchedDir(sysPath.dirname(path)).remove(sysPath.basename(path));
	}

	// Public method: Adds paths to be watched on an existing FSWatcher instance

	// * paths     - string or array of strings, file/directory paths and/or globs
	// * _origAdd  - private boolean, for handling non-existent paths to be watched
	// * _internal - private boolean, indicates a non-user add

	// Returns an instance of FSWatcher for chaining.
	FSWatcher.prototype.add = function(paths, _origAdd, _internal) {
	  var cwd = this.options.cwd;
	  this.closed = false;
	  paths = flatten(arrify(paths));

	  if (!paths.every(isString)) {
	    throw new TypeError('Non-string provided as watch path: ' + paths);
	  }

	  if (cwd) paths = paths.map(function(path) {
	    if (isAbsolute(path)) {
	      return path;
	    } else if (path[0] === '!') {
	      return '!' + sysPath.join(cwd, path.substring(1));
	    } else {
	      return sysPath.join(cwd, path);
	    }
	  });

	  // set aside negated glob strings
	  paths = paths.filter(function(path) {
	    if (path[0] === '!') {
	      this._ignoredPaths[path.substring(1)] = true;
	    } else {
	      // if a path is being added that was previously ignored, stop ignoring it
	      delete this._ignoredPaths[path];
	      delete this._ignoredPaths[path + '/**'];

	      // reset the cached userIgnored anymatch fn
	      // to make ignoredPaths changes effective
	      this._userIgnored = null;

	      return true;
	    }
	  }, this);

	  if (this.options.useFsEvents && FsEventsHandler.canUse()) {
	    if (!this._readyCount) this._readyCount = paths.length;
	    if (this.options.persistent) this._readyCount *= 2;
	    paths.forEach(this._addToFsEvents, this);
	  } else {
	    if (!this._readyCount) this._readyCount = 0;
	    this._readyCount += paths.length;
	    asyncEach(paths, function(path, next) {
	      this._addToNodeFs(path, !_internal, 0, 0, _origAdd, function(err, res) {
	        if (res) this._emitReady();
	        next(err, res);
	      }.bind(this));
	    }.bind(this), function(error, results) {
	      results.forEach(function(item) {
	        if (!item || this.closed) return;
	        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
	      }, this);
	    }.bind(this));
	  }

	  return this;
	};

	// Public method: Close watchers or start ignoring events from specified paths.

	// * paths     - string or array of strings, file/directory paths and/or globs

	// Returns instance of FSWatcher for chaining.
	FSWatcher.prototype.unwatch = function(paths) {
	  if (this.closed) return this;
	  paths = flatten(arrify(paths));

	  paths.forEach(function(path) {
	    // convert to absolute path unless relative path already matches
	    if (!isAbsolute(path) && !this._closers[path]) {
	      if (this.options.cwd) path = sysPath.join(this.options.cwd, path);
	      path = sysPath.resolve(path);
	    }

	    this._closePath(path);

	    this._ignoredPaths[path] = true;
	    if (path in this._watched) {
	      this._ignoredPaths[path + '/**'] = true;
	    }

	    // reset the cached userIgnored anymatch fn
	    // to make ignoredPaths changes effective
	    this._userIgnored = null;
	  }, this);

	  return this;
	};

	// Public method: Close watchers and remove all listeners from watched paths.

	// Returns instance of FSWatcher for chaining.
	FSWatcher.prototype.close = function() {
	  if (this.closed) return this;

	  this.closed = true;
	  Object.keys(this._closers).forEach(function(watchPath) {
	    this._closers[watchPath]();
	    delete this._closers[watchPath];
	  }, this);
	  this._watched = Object.create(null);

	  this.removeAllListeners();
	  return this;
	};

	// Public method: Expose list of watched paths

	// Returns object w/ dir paths as keys and arrays of contained paths as values.
	FSWatcher.prototype.getWatched = function() {
	  var watchList = {};
	  Object.keys(this._watched).forEach(function(dir) {
	    var key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
	    watchList[key || '.'] = Object.keys(this._watched[dir]._items).sort();
	  }.bind(this));
	  return watchList;
	};

	// Attach watch handler prototype methods
	function importHandler(handler) {
	  Object.keys(handler.prototype).forEach(function(method) {
	    FSWatcher.prototype[method] = handler.prototype[method];
	  });
	}
	importHandler(NodeFsHandler);
	if (FsEventsHandler.canUse()) importHandler(FsEventsHandler);

	// Export FSWatcher class
	exports.FSWatcher = FSWatcher;

	// Public function: Instantiates watcher with paths to be tracked.

	// * paths     - string or array of strings, file/directory paths and/or globs
	// * options   - object, chokidar options

	// Returns an instance of FSWatcher for chaining.
	exports.watch = function(paths, options) {
	  return new FSWatcher(options).add(paths);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// async-each MIT license (by Paul Miller from http://paulmillr.com).
	(function(globals) {
	  'use strict';
	  var each = function(items, next, callback) {
	    if (!Array.isArray(items)) throw new TypeError('each() expects array as first argument');
	    if (typeof next !== 'function') throw new TypeError('each() expects function as second argument');
	    if (typeof callback !== 'function') callback = Function.prototype; // no-op

	    if (items.length === 0) return callback(undefined, items);

	    var transformed = new Array(items.length);
	    var count = 0;
	    var returned = false;

	    items.forEach(function(item, index) {
	      next(item, function(error, transformedItem) {
	        if (returned) return;
	        if (error) {
	          returned = true;
	          return callback(error);
	        }
	        transformed[index] = transformedItem;
	        count += 1;
	        if (count === items.length) return callback(undefined, transformed);
	      });
	    });
	  };

	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return each;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // RequireJS
	  } else if (typeof module !== 'undefined' && module.exports) {
	    module.exports = each; // CommonJS
	  } else {
	    globals.asyncEach = each; // <script>
	  }
	})(this);


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var micromatch = __webpack_require__(267);
	var normalize = __webpack_require__(293);
	var path = __webpack_require__(36); // required for tests.
	var arrify = function(a) { return a == null ? [] : (Array.isArray(a) ? a : [a]); };

	var anymatch = function(criteria, value, returnIndex, startIndex, endIndex) {
	  criteria = arrify(criteria);
	  value = arrify(value);
	  if (arguments.length === 1) {
	    return anymatch.bind(null, criteria.map(function(criterion) {
	      return typeof criterion === 'string' && criterion[0] !== '!' ?
	        micromatch.matcher(criterion) : criterion;
	    }));
	  }
	  startIndex = startIndex || 0;
	  var string = value[0];
	  var altString, altValue;
	  var matched = false;
	  var matchIndex = -1;
	  function testCriteria(criterion, index) {
	    var result;
	    switch (Object.prototype.toString.call(criterion)) {
	    case '[object String]':
	      result = string === criterion || altString && altString === criterion;
	      result = result || micromatch.isMatch(string, criterion);
	      break;
	    case '[object RegExp]':
	      result = criterion.test(string) || altString && criterion.test(altString);
	      break;
	    case '[object Function]':
	      result = criterion.apply(null, value);
	      result = result || altValue && criterion.apply(null, altValue);
	      break;
	    default:
	      result = false;
	    }
	    if (result) {
	      matchIndex = index + startIndex;
	    }
	    return result;
	  }
	  var crit = criteria;
	  var negGlobs = crit.reduce(function(arr, criterion, index) {
	    if (typeof criterion === 'string' && criterion[0] === '!') {
	      if (crit === criteria) {
	        // make a copy before modifying
	        crit = crit.slice();
	      }
	      crit[index] = null;
	      arr.push(criterion.substr(1));
	    }
	    return arr;
	  }, []);
	  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {
	    if (path.sep === '\\' && typeof string === 'string') {
	      altString = normalize(string);
	      altString = altString === string ? null : altString;
	      if (altString) altValue = [altString].concat(value.slice(1));
	    }
	    matched = crit.slice(startIndex, endIndex).some(testCriteria);
	  }
	  return returnIndex === true ? matchIndex : matched;
	};

	module.exports = anymatch;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * micromatch <https://github.com/jonschlinkert/micromatch>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var expand = __webpack_require__(268);
	var utils = __webpack_require__(269);

	/**
	 * The main function. Pass an array of filepaths,
	 * and a string or array of glob patterns
	 *
	 * @param  {Array|String} `files`
	 * @param  {Array|String} `patterns`
	 * @param  {Object} `opts`
	 * @return {Array} Array of matches
	 */

	function micromatch(files, patterns, opts) {
	  if (!files || !patterns) return [];
	  opts = opts || {};

	  if (typeof opts.cache === 'undefined') {
	    opts.cache = true;
	  }

	  if (!Array.isArray(patterns)) {
	    return match(files, patterns, opts);
	  }

	  var len = patterns.length, i = 0;
	  var omit = [], keep = [];

	  while (len--) {
	    var glob = patterns[i++];
	    if (typeof glob === 'string' && glob.charCodeAt(0) === 33 /* ! */) {
	      omit.push.apply(omit, match(files, glob.slice(1), opts));
	    } else {
	      keep.push.apply(keep, match(files, glob, opts));
	    }
	  }
	  return utils.diff(keep, omit);
	}

	/**
	 * Return an array of files that match the given glob pattern.
	 *
	 * This function is called by the main `micromatch` function If you only
	 * need to pass a single pattern you might get very minor speed improvements
	 * using this function.
	 *
	 * @param  {Array} `files`
	 * @param  {String} `pattern`
	 * @param  {Object} `options`
	 * @return {Array}
	 */

	function match(files, pattern, opts) {
	  if (utils.typeOf(files) !== 'string' && !Array.isArray(files)) {
	    throw new Error(msg('match', 'files', 'a string or array'));
	  }

	  files = utils.arrayify(files);
	  opts = opts || {};

	  var negate = opts.negate || false;
	  var orig = pattern;

	  if (typeof pattern === 'string') {
	    negate = pattern.charAt(0) === '!';
	    if (negate) {
	      pattern = pattern.slice(1);
	    }

	    // we need to remove the character regardless,
	    // so the above logic is still needed
	    if (opts.nonegate === true) {
	      negate = false;
	    }
	  }

	  var _isMatch = matcher(pattern, opts);
	  var len = files.length, i = 0;
	  var res = [];

	  while (i < len) {
	    var file = files[i++];
	    var fp = utils.unixify(file, opts);

	    if (!_isMatch(fp)) { continue; }
	    res.push(fp);
	  }

	  if (res.length === 0) {
	    if (opts.failglob === true) {
	      throw new Error('micromatch.match() found no matches for: "' + orig + '".');
	    }

	    if (opts.nonull || opts.nullglob) {
	      res.push(utils.unescapeGlob(orig));
	    }
	  }

	  // if `negate` was defined, diff negated files
	  if (negate) { res = utils.diff(files, res); }

	  // if `ignore` was defined, diff ignored filed
	  if (opts.ignore && opts.ignore.length) {
	    pattern = opts.ignore;
	    opts = utils.omit(opts, ['ignore']);
	    res = utils.diff(res, micromatch(res, pattern, opts));
	  }

	  if (opts.nodupes) {
	    return utils.unique(res);
	  }
	  return res;
	}

	/**
	 * Returns a function that takes a glob pattern or array of glob patterns
	 * to be used with `Array#filter()`. (Internally this function generates
	 * the matching function using the [matcher] method).
	 *
	 * ```js
	 * var fn = mm.filter('[a-c]');
	 * ['a', 'b', 'c', 'd', 'e'].filter(fn);
	 * //=> ['a', 'b', 'c']
	 * ```
	 * @param  {String|Array} `patterns` Can be a glob or array of globs.
	 * @param  {Options} `opts` Options to pass to the [matcher] method.
	 * @return {Function} Filter function to be passed to `Array#filter()`.
	 */

	function filter(patterns, opts) {
	  if (!Array.isArray(patterns) && typeof patterns !== 'string') {
	    throw new TypeError(msg('filter', 'patterns', 'a string or array'));
	  }

	  patterns = utils.arrayify(patterns);
	  var len = patterns.length, i = 0;
	  var patternMatchers = Array(len);
	  while (i < len) {
	    patternMatchers[i] = matcher(patterns[i++], opts);
	  }

	  return function(fp) {
	    if (fp == null) return [];
	    var len = patternMatchers.length, i = 0;
	    var res = true;

	    fp = utils.unixify(fp, opts);
	    while (i < len) {
	      var fn = patternMatchers[i++];
	      if (!fn(fp)) {
	        res = false;
	        break;
	      }
	    }
	    return res;
	  };
	}

	/**
	 * Returns true if the filepath contains the given
	 * pattern. Can also return a function for matching.
	 *
	 * ```js
	 * isMatch('foo.md', '*.md', {});
	 * //=> true
	 *
	 * isMatch('*.md', {})('foo.md')
	 * //=> true
	 * ```
	 * @param  {String} `fp`
	 * @param  {String} `pattern`
	 * @param  {Object} `opts`
	 * @return {Boolean}
	 */

	function isMatch(fp, pattern, opts) {
	  if (typeof fp !== 'string') {
	    throw new TypeError(msg('isMatch', 'filepath', 'a string'));
	  }

	  fp = utils.unixify(fp, opts);
	  if (utils.typeOf(pattern) === 'object') {
	    return matcher(fp, pattern);
	  }
	  return matcher(pattern, opts)(fp);
	}

	/**
	 * Returns true if the filepath matches the
	 * given pattern.
	 */

	function contains(fp, pattern, opts) {
	  if (typeof fp !== 'string') {
	    throw new TypeError(msg('contains', 'pattern', 'a string'));
	  }

	  opts = opts || {};
	  opts.contains = (pattern !== '');
	  fp = utils.unixify(fp, opts);

	  if (opts.contains && !utils.isGlob(pattern)) {
	    return fp.indexOf(pattern) !== -1;
	  }
	  return matcher(pattern, opts)(fp);
	}

	/**
	 * Returns true if a file path matches any of the
	 * given patterns.
	 *
	 * @param  {String} `fp` The filepath to test.
	 * @param  {String|Array} `patterns` Glob patterns to use.
	 * @param  {Object} `opts` Options to pass to the `matcher()` function.
	 * @return {String}
	 */

	function any(fp, patterns, opts) {
	  if (!Array.isArray(patterns) && typeof patterns !== 'string') {
	    throw new TypeError(msg('any', 'patterns', 'a string or array'));
	  }

	  patterns = utils.arrayify(patterns);
	  var len = patterns.length;

	  fp = utils.unixify(fp, opts);
	  while (len--) {
	    var isMatch = matcher(patterns[len], opts);
	    if (isMatch(fp)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Filter the keys of an object with the given `glob` pattern
	 * and `options`
	 *
	 * @param  {Object} `object`
	 * @param  {Pattern} `object`
	 * @return {Array}
	 */

	function matchKeys(obj, glob, options) {
	  if (utils.typeOf(obj) !== 'object') {
	    throw new TypeError(msg('matchKeys', 'first argument', 'an object'));
	  }

	  var fn = matcher(glob, options);
	  var res = {};

	  for (var key in obj) {
	    if (obj.hasOwnProperty(key) && fn(key)) {
	      res[key] = obj[key];
	    }
	  }
	  return res;
	}

	/**
	 * Return a function for matching based on the
	 * given `pattern` and `options`.
	 *
	 * @param  {String} `pattern`
	 * @param  {Object} `options`
	 * @return {Function}
	 */

	function matcher(pattern, opts) {
	  // pattern is a function
	  if (typeof pattern === 'function') {
	    return pattern;
	  }
	  // pattern is a regex
	  if (pattern instanceof RegExp) {
	    return function(fp) {
	      return pattern.test(fp);
	    };
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError(msg('matcher', 'pattern', 'a string, regex, or function'));
	  }

	  // strings, all the way down...
	  pattern = utils.unixify(pattern, opts);

	  // pattern is a non-glob string
	  if (!utils.isGlob(pattern)) {
	    return utils.matchPath(pattern, opts);
	  }
	  // pattern is a glob string
	  var re = makeRe(pattern, opts);

	  // `matchBase` is defined
	  if (opts && opts.matchBase) {
	    return utils.hasFilename(re, opts);
	  }
	  // `matchBase` is not defined
	  return function(fp) {
	    fp = utils.unixify(fp, opts);
	    return re.test(fp);
	  };
	}

	/**
	 * Create and cache a regular expression for matching
	 * file paths.
	 *
	 * If the leading character in the `glob` is `!`, a negation
	 * regex is returned.
	 *
	 * @param  {String} `glob`
	 * @param  {Object} `options`
	 * @return {RegExp}
	 */

	function toRegex(glob, options) {
	  // clone options to prevent  mutating the original object
	  var opts = Object.create(options || {});
	  var flags = opts.flags || '';
	  if (opts.nocase && flags.indexOf('i') === -1) {
	    flags += 'i';
	  }

	  var parsed = expand(glob, opts);

	  // pass in tokens to avoid parsing more than once
	  opts.negated = opts.negated || parsed.negated;
	  opts.negate = opts.negated;
	  glob = wrapGlob(parsed.pattern, opts);
	  var re;

	  try {
	    re = new RegExp(glob, flags);
	    return re;
	  } catch (err) {
	    err.reason = 'micromatch invalid regex: (' + re + ')';
	    if (opts.strict) throw new SyntaxError(err);
	  }

	  // we're only here if a bad pattern was used and the user
	  // passed `options.silent`, so match nothing
	  return /$^/;
	}

	/**
	 * Create the regex to do the matching. If the leading
	 * character in the `glob` is `!` a negation regex is returned.
	 *
	 * @param {String} `glob`
	 * @param {Boolean} `negate`
	 */

	function wrapGlob(glob, opts) {
	  var prefix = (opts && !opts.contains) ? '^' : '';
	  var after = (opts && !opts.contains) ? '$' : '';
	  glob = ('(?:' + glob + ')' + after);
	  if (opts && opts.negate) {
	    return prefix + ('(?!^' + glob + ').*$');
	  }
	  return prefix + glob;
	}

	/**
	 * Create and cache a regular expression for matching file paths.
	 * If the leading character in the `glob` is `!`, a negation
	 * regex is returned.
	 *
	 * @param  {String} `glob`
	 * @param  {Object} `options`
	 * @return {RegExp}
	 */

	function makeRe(glob, opts) {
	  if (utils.typeOf(glob) !== 'string') {
	    throw new Error(msg('makeRe', 'glob', 'a string'));
	  }
	  return utils.cache(toRegex, glob, opts);
	}

	/**
	 * Make error messages consistent. Follows this format:
	 *
	 * ```js
	 * msg(methodName, argNumber, nativeType);
	 * // example:
	 * msg('matchKeys', 'first', 'an object');
	 * ```
	 *
	 * @param  {String} `method`
	 * @param  {String} `num`
	 * @param  {String} `type`
	 * @return {String}
	 */

	function msg(method, what, type) {
	  return 'micromatch.' + method + '(): ' + what + ' should be ' + type + '.';
	}

	/**
	 * Public methods
	 */

	/* eslint no-multi-spaces: 0 */
	micromatch.any       = any;
	micromatch.braces    = micromatch.braceExpand = utils.braces;
	micromatch.contains  = contains;
	micromatch.expand    = expand;
	micromatch.filter    = filter;
	micromatch.isMatch   = isMatch;
	micromatch.makeRe    = makeRe;
	micromatch.match     = match;
	micromatch.matcher   = matcher;
	micromatch.matchKeys = matchKeys;

	/**
	 * Expose `micromatch`
	 */

	module.exports = micromatch;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * micromatch <https://github.com/jonschlinkert/micromatch>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var utils = __webpack_require__(269);
	var Glob = __webpack_require__(306);

	/**
	 * Expose `expand`
	 */

	module.exports = expand;

	/**
	 * Expand a glob pattern to resolve braces and
	 * similar patterns before converting to regex.
	 *
	 * @param  {String|Array} `pattern`
	 * @param  {Array} `files`
	 * @param  {Options} `opts`
	 * @return {Array}
	 */

	function expand(pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('micromatch.expand(): argument should be a string.');
	  }

	  var glob = new Glob(pattern, options || {});
	  var opts = glob.options;

	  if (!utils.isGlob(pattern)) {
	    glob.pattern = glob.pattern.replace(/([\/.])/g, '\\$1');
	    return glob;
	  }

	  glob.pattern = glob.pattern.replace(/(\+)(?!\()/g, '\\$1');
	  glob.pattern = glob.pattern.split('$').join('\\$');

	  if (typeof opts.braces !== 'boolean' && typeof opts.nobraces !== 'boolean') {
	    opts.braces = true;
	  }

	  if (glob.pattern === '.*') {
	    return {
	      pattern: '\\.' + star,
	      tokens: tok,
	      options: opts
	    };
	  }

	  if (glob.pattern === '*') {
	    return {
	      pattern: oneStar(opts.dot),
	      tokens: tok,
	      options: opts
	    };
	  }

	  // parse the glob pattern into tokens
	  glob.parse();
	  var tok = glob.tokens;
	  tok.is.negated = opts.negated;

	  // dotfile handling
	  if ((opts.dotfiles === true || tok.is.dotfile) && opts.dot !== false) {
	    opts.dotfiles = true;
	    opts.dot = true;
	  }

	  if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {
	    opts.dotdirs = true;
	    opts.dot = true;
	  }

	  // check for braces with a dotfile pattern
	  if (/[{,]\./.test(glob.pattern)) {
	    opts.makeRe = false;
	    opts.dot = true;
	  }

	  if (opts.nonegate !== true) {
	    opts.negated = glob.negated;
	  }

	  // if the leading character is a dot or a slash, escape it
	  if (glob.pattern.charAt(0) === '.' && glob.pattern.charAt(1) !== '/') {
	    glob.pattern = '\\' + glob.pattern;
	  }

	  /**
	   * Extended globs
	   */

	  // expand braces, e.g `{1..5}`
	  glob.track('before braces');
	  if (tok.is.braces) {
	    glob.braces();
	  }
	  glob.track('after braces');

	  // expand extglobs, e.g `foo/!(a|b)`
	  glob.track('before extglob');
	  if (tok.is.extglob) {
	    glob.extglob();
	  }
	  glob.track('after extglob');

	  // expand brackets, e.g `[[:alpha:]]`
	  glob.track('before brackets');
	  if (tok.is.brackets) {
	    glob.brackets();
	  }
	  glob.track('after brackets');

	  // special patterns
	  glob._replace('[!', '[^');
	  glob._replace('(?', '(%~');
	  glob._replace(/\[\]/, '\\[\\]');
	  glob._replace('/[', '/' + (opts.dot ? dotfiles : nodot) + '[', true);
	  glob._replace('/?', '/' + (opts.dot ? dotfiles : nodot) + '[^/]', true);
	  glob._replace('/.', '/(?=.)\\.', true);

	  // windows drives
	  glob._replace(/^(\w):([\\\/]+?)/gi, '(?=.)$1:$2', true);

	  // negate slashes in exclusion ranges
	  if (glob.pattern.indexOf('[^') !== -1) {
	    glob.pattern = negateSlash(glob.pattern);
	  }

	  if (opts.globstar !== false && glob.pattern === '**') {
	    glob.pattern = globstar(opts.dot);

	  } else {
	    glob.pattern = balance(glob.pattern, '[', ']');
	    glob.escape(glob.pattern);

	    // if the pattern has `**`
	    if (tok.is.globstar) {
	      glob.pattern = collapse(glob.pattern, '/**');
	      glob.pattern = collapse(glob.pattern, '**/');
	      glob._replace('/**/', '(?:/' + globstar(opts.dot) + '/|/)', true);
	      glob._replace(/\*{2,}/g, '**');

	      // 'foo/*'
	      glob._replace(/(\w+)\*(?!\/)/g, '$1[^/]*?', true);
	      glob._replace(/\*\*\/\*(\w)/g, globstar(opts.dot) + '\\/' + (opts.dot ? dotfiles : nodot) + '[^/]*?$1', true);

	      if (opts.dot !== true) {
	        glob._replace(/\*\*\/(.)/g, '(?:**\\/|)$1');
	      }

	      // 'foo/**' or '{**,*}', but not 'foo**'
	      if (tok.path.dirname !== '' || /,\*\*|\*\*,/.test(glob.orig)) {
	        glob._replace('**', globstar(opts.dot), true);
	      }
	    }

	    // ends with /*
	    glob._replace(/\/\*$/, '\\/' + oneStar(opts.dot), true);
	    // ends with *, no slashes
	    glob._replace(/(?!\/)\*$/, star, true);
	    // has 'n*.' (partial wildcard w/ file extension)
	    glob._replace(/([^\/]+)\*/, '$1' + oneStar(true), true);
	    // has '*'
	    glob._replace('*', oneStar(opts.dot), true);
	    glob._replace('?.', '?\\.', true);
	    glob._replace('?:', '?:', true);

	    glob._replace(/\?+/g, function(match) {
	      var len = match.length;
	      if (len === 1) {
	        return qmark;
	      }
	      return qmark + '{' + len + '}';
	    });

	    // escape '.abc' => '\\.abc'
	    glob._replace(/\.([*\w]+)/g, '\\.$1');
	    // fix '[^\\\\/]'
	    glob._replace(/\[\^[\\\/]+\]/g, qmark);
	    // '///' => '\/'
	    glob._replace(/\/+/g, '\\/');
	    // '\\\\\\' => '\\'
	    glob._replace(/\\{2,}/g, '\\');
	  }

	  // unescape previously escaped patterns
	  glob.unescape(glob.pattern);
	  glob._replace('__UNESC_STAR__', '*');

	  // escape dots that follow qmarks
	  glob._replace('?.', '?\\.');

	  // remove unnecessary slashes in character classes
	  glob._replace('[^\\/]', qmark);

	  if (glob.pattern.length > 1) {
	    if (/^[\[?*]/.test(glob.pattern)) {
	      // only prepend the string if we don't want to match dotfiles
	      glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;
	    }
	  }

	  return glob;
	}

	/**
	 * Collapse repeated character sequences.
	 *
	 * ```js
	 * collapse('a/../../../b', '../');
	 * //=> 'a/../b'
	 * ```
	 *
	 * @param  {String} `str`
	 * @param  {String} `ch` Character sequence to collapse
	 * @return {String}
	 */

	function collapse(str, ch) {
	  var res = str.split(ch);
	  var isFirst = res[0] === '';
	  var isLast = res[res.length - 1] === '';
	  res = res.filter(Boolean);
	  if (isFirst) res.unshift('');
	  if (isLast) res.push('');
	  return res.join(ch);
	}

	/**
	 * Negate slashes in exclusion ranges, per glob spec:
	 *
	 * ```js
	 * negateSlash('[^foo]');
	 * //=> '[^\\/foo]'
	 * ```
	 *
	 * @param  {String} `str` glob pattern
	 * @return {String}
	 */

	function negateSlash(str) {
	  return str.replace(/\[\^([^\]]*?)\]/g, function(match, inner) {
	    if (inner.indexOf('/') === -1) {
	      inner = '\\/' + inner;
	    }
	    return '[^' + inner + ']';
	  });
	}

	/**
	 * Escape imbalanced braces/bracket. This is a very
	 * basic, naive implementation that only does enough
	 * to serve the purpose.
	 */

	function balance(str, a, b) {
	  var aarr = str.split(a);
	  var alen = aarr.join('').length;
	  var blen = str.split(b).join('').length;

	  if (alen !== blen) {
	    str = aarr.join('\\' + a);
	    return str.split(b).join('\\' + b);
	  }
	  return str;
	}

	/**
	 * Special patterns to be converted to regex.
	 * Heuristics are used to simplify patterns
	 * and speed up processing.
	 */

	/* eslint no-multi-spaces: 0 */
	var qmark       = '[^/]';
	var star        = qmark + '*?';
	var nodot       = '(?!\\.)(?=.)';
	var dotfileGlob = '(?:\\/|^)\\.{1,2}($|\\/)';
	var dotfiles    = '(?!' + dotfileGlob + ')(?=.)';
	var twoStarDot  = '(?:(?!' + dotfileGlob + ').)*?';

	/**
	 * Create a regex for `*`.
	 *
	 * If `dot` is true, or the pattern does not begin with
	 * a leading star, then return the simpler regex.
	 */

	function oneStar(dotfile) {
	  return dotfile ? '(?!' + dotfileGlob + ')(?=.)' + star : (nodot + star);
	}

	function globstar(dotfile) {
	  if (dotfile) { return twoStarDot; }
	  return '(?:(?!(?:\\/|^)\\.).)*?';
	}


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var win32 = process && process.platform === 'win32';
	var path = __webpack_require__(36);
	var fileRe = __webpack_require__(270);
	var utils = module.exports;

	/**
	 * Module dependencies
	 */

	utils.diff = __webpack_require__(271);
	utils.unique = __webpack_require__(273);
	utils.braces = __webpack_require__(274);
	utils.brackets = __webpack_require__(288);
	utils.extglob = __webpack_require__(290);
	utils.isExtglob = __webpack_require__(291);
	utils.isGlob = __webpack_require__(292);
	utils.typeOf = __webpack_require__(279);
	utils.normalize = __webpack_require__(293);
	utils.omit = __webpack_require__(295);
	utils.parseGlob = __webpack_require__(299);
	utils.cache = __webpack_require__(303);

	/**
	 * Get the filename of a filepath
	 *
	 * @param {String} `string`
	 * @return {String}
	 */

	utils.filename = function filename(fp) {
	  var seg = fp.match(fileRe());
	  return seg && seg[0];
	};

	/**
	 * Returns a function that returns true if the given
	 * pattern is the same as a given `filepath`
	 *
	 * @param {String} `pattern`
	 * @return {Function}
	 */

	utils.isPath = function isPath(pattern, opts) {
	  opts = opts || {};
	  return function(fp) {
	    var unixified = utils.unixify(fp, opts);
	    if(opts.nocase){
	      return pattern.toLowerCase() === unixified.toLowerCase();
	    }
	    return pattern === unixified;
	  };
	};

	/**
	 * Returns a function that returns true if the given
	 * pattern contains a `filepath`
	 *
	 * @param {String} `pattern`
	 * @return {Function}
	 */

	utils.hasPath = function hasPath(pattern, opts) {
	  return function(fp) {
	    return utils.unixify(pattern, opts).indexOf(fp) !== -1;
	  };
	};

	/**
	 * Returns a function that returns true if the given
	 * pattern matches or contains a `filepath`
	 *
	 * @param {String} `pattern`
	 * @return {Function}
	 */

	utils.matchPath = function matchPath(pattern, opts) {
	  var fn = (opts && opts.contains)
	    ? utils.hasPath(pattern, opts)
	    : utils.isPath(pattern, opts);
	  return fn;
	};

	/**
	 * Returns a function that returns true if the given
	 * regex matches the `filename` of a file path.
	 *
	 * @param {RegExp} `re`
	 * @return {Boolean}
	 */

	utils.hasFilename = function hasFilename(re) {
	  return function(fp) {
	    var name = utils.filename(fp);
	    return name && re.test(name);
	  };
	};

	/**
	 * Coerce `val` to an array
	 *
	 * @param  {*} val
	 * @return {Array}
	 */

	utils.arrayify = function arrayify(val) {
	  return !Array.isArray(val)
	    ? [val]
	    : val;
	};

	/**
	 * Normalize all slashes in a file path or glob pattern to
	 * forward slashes.
	 */

	utils.unixify = function unixify(fp, opts) {
	  if (opts && opts.unixify === false) return fp;
	  if (opts && opts.unixify === true || win32 || path.sep === '\\') {
	    return utils.normalize(fp, false);
	  }
	  if (opts && opts.unescape === true) {
	    return fp ? fp.toString().replace(/\\(\w)/g, '$1') : '';
	  }
	  return fp;
	};

	/**
	 * Escape/unescape utils
	 */

	utils.escapePath = function escapePath(fp) {
	  return fp.replace(/[\\.]/g, '\\$&');
	};

	utils.unescapeGlob = function unescapeGlob(fp) {
	  return fp.replace(/[\\"']/g, '');
	};

	utils.escapeRe = function escapeRe(str) {
	  return str.replace(/[-[\\$*+?.#^\s{}(|)\]]/g, '\\$&');
	};

	/**
	 * Expose `utils`
	 */

	module.exports = utils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 270 */
/***/ function(module, exports) {

	/*!
	 * filename-regex <https://github.com/regexps/filename-regex>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert
	 * Licensed under the MIT license.
	 */

	module.exports = function filenameRegex() {
	  return /([^\\\/]+)$/;
	};


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * arr-diff <https://github.com/jonschlinkert/arr-diff>
	 *
	 * Copyright (c) 2014 Jon Schlinkert, contributors.
	 * Licensed under the MIT License
	 */

	'use strict';

	var flatten = __webpack_require__(272);
	var slice = [].slice;

	/**
	 * Return the difference between the first array and
	 * additional arrays.
	 *
	 * ```js
	 * var diff = require('{%= name %}');
	 *
	 * var a = ['a', 'b', 'c', 'd'];
	 * var b = ['b', 'c'];
	 *
	 * console.log(diff(a, b))
	 * //=> ['a', 'd']
	 * ```
	 *
	 * @param  {Array} `a`
	 * @param  {Array} `b`
	 * @return {Array}
	 * @api public
	 */

	function diff(arr, arrays) {
	  var argsLen = arguments.length;
	  var len = arr.length, i = -1;
	  var res = [], arrays;

	  if (argsLen === 1) {
	    return arr;
	  }

	  if (argsLen > 2) {
	    arrays = flatten(slice.call(arguments, 1));
	  }

	  while (++i < len) {
	    if (!~arrays.indexOf(arr[i])) {
	      res.push(arr[i]);
	    }
	  }
	  return res;
	}

	/**
	 * Expose `diff`
	 */

	module.exports = diff;


/***/ },
/* 272 */
/***/ function(module, exports) {

	/*!
	 * arr-flatten <https://github.com/jonschlinkert/arr-flatten>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	'use strict';

	module.exports = function (arr) {
	  return flat(arr, []);
	};

	function flat(arr, res) {
	  var i = 0, cur;
	  var len = arr.length;
	  for (; i < len; i++) {
	    cur = arr[i];
	    Array.isArray(cur) ? flat(cur, res) : res.push(cur);
	  }
	  return res;
	}


/***/ },
/* 273 */
/***/ function(module, exports) {

	/*!
	 * array-unique <https://github.com/jonschlinkert/array-unique>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	module.exports = function unique(arr) {
	  if (!Array.isArray(arr)) {
	    throw new TypeError('array-unique expects an array.');
	  }

	  var len = arr.length;
	  var i = -1;

	  while (i++ < len) {
	    var j = i + 1;

	    for (; j < arr.length; ++j) {
	      if (arr[i] === arr[j]) {
	        arr.splice(j--, 1);
	      }
	    }
	  }
	  return arr;
	};


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * braces <https://github.com/jonschlinkert/braces>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT license.
	 */

	'use strict';

	/**
	 * Module dependencies
	 */

	var expand = __webpack_require__(275);
	var repeat = __webpack_require__(286);
	var tokens = __webpack_require__(287);

	/**
	 * Expose `braces`
	 */

	module.exports = function(str, options) {
	  if (typeof str !== 'string') {
	    throw new Error('braces expects a string');
	  }
	  return braces(str, options);
	};

	/**
	 * Expand `{foo,bar}` or `{1..5}` braces in the
	 * given `string`.
	 *
	 * @param  {String} `str`
	 * @param  {Array} `arr`
	 * @param  {Object} `options`
	 * @return {Array}
	 */

	function braces(str, arr, options) {
	  if (str === '') {
	    return [];
	  }

	  if (!Array.isArray(arr)) {
	    options = arr;
	    arr = [];
	  }

	  var opts = options || {};
	  arr = arr || [];

	  if (typeof opts.nodupes === 'undefined') {
	    opts.nodupes = true;
	  }

	  var fn = opts.fn;
	  var es6;

	  if (typeof opts === 'function') {
	    fn = opts;
	    opts = {};
	  }

	  if (!(patternRe instanceof RegExp)) {
	    patternRe = patternRegex();
	  }

	  var matches = str.match(patternRe) || [];
	  var m = matches[0];

	  switch(m) {
	    case '\\,':
	      return escapeCommas(str, arr, opts);
	    case '\\.':
	      return escapeDots(str, arr, opts);
	    case '\/.':
	      return escapePaths(str, arr, opts);
	    case ' ':
	      return splitWhitespace(str);
	    case '{,}':
	      return exponential(str, opts, braces);
	    case '{}':
	      return emptyBraces(str, arr, opts);
	    case '\\{':
	    case '\\}':
	      return escapeBraces(str, arr, opts);
	    case '${':
	      if (!/\{[^{]+\{/.test(str)) {
	        return arr.concat(str);
	      } else {
	        es6 = true;
	        str = tokens.before(str, es6Regex());
	      }
	  }

	  if (!(braceRe instanceof RegExp)) {
	    braceRe = braceRegex();
	  }

	  var match = braceRe.exec(str);
	  if (match == null) {
	    return [str];
	  }

	  var outter = match[1];
	  var inner = match[2];
	  if (inner === '') { return [str]; }

	  var segs, segsLength;

	  if (inner.indexOf('..') !== -1) {
	    segs = expand(inner, opts, fn) || inner.split(',');
	    segsLength = segs.length;

	  } else if (inner[0] === '"' || inner[0] === '\'') {
	    return arr.concat(str.split(/['"]/).join(''));

	  } else {
	    segs = inner.split(',');
	    if (opts.makeRe) {
	      return braces(str.replace(outter, wrap(segs, '|')), opts);
	    }

	    segsLength = segs.length;
	    if (segsLength === 1 && opts.bash) {
	      segs[0] = wrap(segs[0], '\\');
	    }
	  }

	  var len = segs.length;
	  var i = 0, val;

	  while (len--) {
	    var path = segs[i++];

	    if (/(\.[^.\/])/.test(path)) {
	      if (segsLength > 1) {
	        return segs;
	      } else {
	        return [str];
	      }
	    }

	    val = splice(str, outter, path);

	    if (/\{[^{}]+?\}/.test(val)) {
	      arr = braces(val, arr, opts);
	    } else if (val !== '') {
	      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }
	      arr.push(es6 ? tokens.after(val) : val);
	    }
	  }

	  if (opts.strict) { return filter(arr, filterEmpty); }
	  return arr;
	}

	/**
	 * Expand exponential ranges
	 *
	 *   `a{,}{,}` => ['a', 'a', 'a', 'a']
	 */

	function exponential(str, options, fn) {
	  if (typeof options === 'function') {
	    fn = options;
	    options = null;
	  }

	  var opts = options || {};
	  var esc = '__ESC_EXP__';
	  var exp = 0;
	  var res;

	  var parts = str.split('{,}');
	  if (opts.nodupes) {
	    return fn(parts.join(''), opts);
	  }

	  exp = parts.length - 1;
	  res = fn(parts.join(esc), opts);
	  var len = res.length;
	  var arr = [];
	  var i = 0;

	  while (len--) {
	    var ele = res[i++];
	    var idx = ele.indexOf(esc);

	    if (idx === -1) {
	      arr.push(ele);

	    } else {
	      ele = ele.split('__ESC_EXP__').join('');
	      if (!!ele && opts.nodupes !== false) {
	        arr.push(ele);

	      } else {
	        var num = Math.pow(2, exp);
	        arr.push.apply(arr, repeat(ele, num));
	      }
	    }
	  }
	  return arr;
	}

	/**
	 * Wrap a value with parens, brackets or braces,
	 * based on the given character/separator.
	 *
	 * @param  {String|Array} `val`
	 * @param  {String} `ch`
	 * @return {String}
	 */

	function wrap(val, ch) {
	  if (ch === '|') {
	    return '(' + val.join(ch) + ')';
	  }
	  if (ch === ',') {
	    return '{' + val.join(ch) + '}';
	  }
	  if (ch === '-') {
	    return '[' + val.join(ch) + ']';
	  }
	  if (ch === '\\') {
	    return '\\{' + val + '\\}';
	  }
	}

	/**
	 * Handle empty braces: `{}`
	 */

	function emptyBraces(str, arr, opts) {
	  return braces(str.split('{}').join('\\{\\}'), arr, opts);
	}

	/**
	 * Filter out empty-ish values
	 */

	function filterEmpty(ele) {
	  return !!ele && ele !== '\\';
	}

	/**
	 * Handle patterns with whitespace
	 */

	function splitWhitespace(str) {
	  var segs = str.split(' ');
	  var len = segs.length;
	  var res = [];
	  var i = 0;

	  while (len--) {
	    res.push.apply(res, braces(segs[i++]));
	  }
	  return res;
	}

	/**
	 * Handle escaped braces: `\\{foo,bar}`
	 */

	function escapeBraces(str, arr, opts) {
	  if (!/\{[^{]+\{/.test(str)) {
	    return arr.concat(str.split('\\').join(''));
	  } else {
	    str = str.split('\\{').join('__LT_BRACE__');
	    str = str.split('\\}').join('__RT_BRACE__');
	    return map(braces(str, arr, opts), function(ele) {
	      ele = ele.split('__LT_BRACE__').join('{');
	      return ele.split('__RT_BRACE__').join('}');
	    });
	  }
	}

	/**
	 * Handle escaped dots: `{1\\.2}`
	 */

	function escapeDots(str, arr, opts) {
	  if (!/[^\\]\..+\\\./.test(str)) {
	    return arr.concat(str.split('\\').join(''));
	  } else {
	    str = str.split('\\.').join('__ESC_DOT__');
	    return map(braces(str, arr, opts), function(ele) {
	      return ele.split('__ESC_DOT__').join('.');
	    });
	  }
	}

	/**
	 * Handle escaped dots: `{1\\.2}`
	 */

	function escapePaths(str, arr, opts) {
	  str = str.split('\/.').join('__ESC_PATH__');
	  return map(braces(str, arr, opts), function(ele) {
	    return ele.split('__ESC_PATH__').join('\/.');
	  });
	}

	/**
	 * Handle escaped commas: `{a\\,b}`
	 */

	function escapeCommas(str, arr, opts) {
	  if (!/\w,/.test(str)) {
	    return arr.concat(str.split('\\').join(''));
	  } else {
	    str = str.split('\\,').join('__ESC_COMMA__');
	    return map(braces(str, arr, opts), function(ele) {
	      return ele.split('__ESC_COMMA__').join(',');
	    });
	  }
	}

	/**
	 * Regex for common patterns
	 */

	function patternRegex() {
	  return /\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\,(?=.*[{}])|\/\.(?=.*[{}])|\\\.(?={)|\\{|\\}/;
	}

	/**
	 * Braces regex.
	 */

	function braceRegex() {
	  return /.*(\\?\{([^}]+)\})/;
	}

	/**
	 * es6 delimiter regex.
	 */

	function es6Regex() {
	  return /\$\{([^}]+)\}/;
	}

	var braceRe;
	var patternRe;

	/**
	 * Faster alternative to `String.replace()` when the
	 * index of the token to be replaces can't be supplied
	 */

	function splice(str, token, replacement) {
	  var i = str.indexOf(token);
	  return str.substr(0, i) + replacement
	    + str.substr(i + token.length);
	}

	/**
	 * Fast array map
	 */

	function map(arr, fn) {
	  if (arr == null) {
	    return [];
	  }

	  var len = arr.length;
	  var res = new Array(len);
	  var i = -1;

	  while (++i < len) {
	    res[i] = fn(arr[i], i, arr);
	  }

	  return res;
	}

	/**
	 * Fast array filter
	 */

	function filter(arr, cb) {
	  if (arr == null) return [];
	  if (typeof cb !== 'function') {
	    throw new TypeError('braces: filter expects a callback function.');
	  }

	  var len = arr.length;
	  var res = arr.slice();
	  var i = 0;

	  while (len--) {
	    if (!cb(arr[len], i++)) {
	      res.splice(len, 1);
	    }
	  }
	  return res;
	}


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * expand-range <https://github.com/jonschlinkert/expand-range>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT license.
	 */

	'use strict';

	var fill = __webpack_require__(276);

	module.exports = function expandRange(str, options, fn) {
	  if (typeof str !== 'string') {
	    throw new TypeError('expand-range expects a string.');
	  }

	  if (typeof options === 'function') {
	    fn = options;
	    options = {};
	  }

	  if (typeof options === 'boolean') {
	    options = {};
	    options.makeRe = true;
	  }

	  // create arguments to pass to fill-range
	  var opts = options || {};
	  var args = str.split('..');
	  var len = args.length;
	  if (len > 3) { return str; }

	  // if only one argument, it can't expand so return it
	  if (len === 1) { return args; }

	  // if `true`, tell fill-range to regexify the string
	  if (typeof fn === 'boolean' && fn === true) {
	    opts.makeRe = true;
	  }

	  args.push(opts);
	  return fill.apply(null, args.concat(fn));
	};


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * fill-range <https://github.com/jonschlinkert/fill-range>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var isObject = __webpack_require__(277);
	var isNumber = __webpack_require__(278);
	var randomize = __webpack_require__(281);
	var repeatStr = __webpack_require__(285);
	var repeat = __webpack_require__(286);

	/**
	 * Expose `fillRange`
	 */

	module.exports = fillRange;

	/**
	 * Return a range of numbers or letters.
	 *
	 * @param  {String} `a` Start of the range
	 * @param  {String} `b` End of the range
	 * @param  {String} `step` Increment or decrement to use.
	 * @param  {Function} `fn` Custom function to modify each element in the range.
	 * @return {Array}
	 */

	function fillRange(a, b, step, options, fn) {
	  if (a == null || b == null) {
	    throw new Error('fill-range expects the first and second args to be strings.');
	  }

	  if (typeof step === 'function') {
	    fn = step; options = {}; step = null;
	  }

	  if (typeof options === 'function') {
	    fn = options; options = {};
	  }

	  if (isObject(step)) {
	    options = step; step = '';
	  }

	  var expand, regex = false, sep = '';
	  var opts = options || {};

	  if (typeof opts.silent === 'undefined') {
	    opts.silent = true;
	  }

	  step = step || opts.step;

	  // store a ref to unmodified arg
	  var origA = a, origB = b;

	  b = (b.toString() === '-0') ? 0 : b;

	  if (opts.optimize || opts.makeRe) {
	    step = step ? (step += '~') : step;
	    expand = true;
	    regex = true;
	    sep = '~';
	  }

	  // handle special step characters
	  if (typeof step === 'string') {
	    var match = stepRe().exec(step);

	    if (match) {
	      var i = match.index;
	      var m = match[0];

	      // repeat string
	      if (m === '+') {
	        return repeat(a, b);

	      // randomize a, `b` times
	      } else if (m === '?') {
	        return [randomize(a, b)];

	      // expand right, no regex reduction
	      } else if (m === '>') {
	        step = step.substr(0, i) + step.substr(i + 1);
	        expand = true;

	      // expand to an array, or if valid create a reduced
	      // string for a regex logic `or`
	      } else if (m === '|') {
	        step = step.substr(0, i) + step.substr(i + 1);
	        expand = true;
	        regex = true;
	        sep = m;

	      // expand to an array, or if valid create a reduced
	      // string for a regex range
	      } else if (m === '~') {
	        step = step.substr(0, i) + step.substr(i + 1);
	        expand = true;
	        regex = true;
	        sep = m;
	      }
	    } else if (!isNumber(step)) {
	      if (!opts.silent) {
	        throw new TypeError('fill-range: invalid step.');
	      }
	      return null;
	    }
	  }

	  if (/[.&*()[\]^%$#@!]/.test(a) || /[.&*()[\]^%$#@!]/.test(b)) {
	    if (!opts.silent) {
	      throw new RangeError('fill-range: invalid range arguments.');
	    }
	    return null;
	  }

	  // has neither a letter nor number, or has both letters and numbers
	  // this needs to be after the step logic
	  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {
	    if (!opts.silent) {
	      throw new RangeError('fill-range: invalid range arguments.');
	    }
	    return null;
	  }

	  // validate arguments
	  var isNumA = isNumber(zeros(a));
	  var isNumB = isNumber(zeros(b));

	  if ((!isNumA && isNumB) || (isNumA && !isNumB)) {
	    if (!opts.silent) {
	      throw new TypeError('fill-range: first range argument is incompatible with second.');
	    }
	    return null;
	  }

	  // by this point both are the same, so we
	  // can use A to check going forward.
	  var isNum = isNumA;
	  var num = formatStep(step);

	  // is the range alphabetical? or numeric?
	  if (isNum) {
	    // if numeric, coerce to an integer
	    a = +a; b = +b;
	  } else {
	    // otherwise, get the charCode to expand alpha ranges
	    a = a.charCodeAt(0);
	    b = b.charCodeAt(0);
	  }

	  // is the pattern descending?
	  var isDescending = a > b;

	  // don't create a character class if the args are < 0
	  if (a < 0 || b < 0) {
	    expand = false;
	    regex = false;
	  }

	  // detect padding
	  var padding = isPadded(origA, origB);
	  var res, pad, arr = [];
	  var ii = 0;

	  // character classes, ranges and logical `or`
	  if (regex) {
	    if (shouldExpand(a, b, num, isNum, padding, opts)) {
	      // make sure the correct separator is used
	      if (sep === '|' || sep === '~') {
	        sep = detectSeparator(a, b, num, isNum, isDescending);
	      }
	      return wrap([origA, origB], sep, opts);
	    }
	  }

	  while (isDescending ? (a >= b) : (a <= b)) {
	    if (padding && isNum) {
	      pad = padding(a);
	    }

	    // custom function
	    if (typeof fn === 'function') {
	      res = fn(a, isNum, pad, ii++);

	    // letters
	    } else if (!isNum) {
	      if (regex && isInvalidChar(a)) {
	        res = null;
	      } else {
	        res = String.fromCharCode(a);
	      }

	    // numbers
	    } else {
	      res = formatPadding(a, pad);
	    }

	    // add result to the array, filtering any nulled values
	    if (res !== null) arr.push(res);

	    // increment or decrement
	    if (isDescending) {
	      a -= num;
	    } else {
	      a += num;
	    }
	  }

	  // now that the array is expanded, we need to handle regex
	  // character classes, ranges or logical `or` that wasn't
	  // already handled before the loop
	  if ((regex || expand) && !opts.noexpand) {
	    // make sure the correct separator is used
	    if (sep === '|' || sep === '~') {
	      sep = detectSeparator(a, b, num, isNum, isDescending);
	    }
	    if (arr.length === 1 || a < 0 || b < 0) { return arr; }
	    return wrap(arr, sep, opts);
	  }

	  return arr;
	}

	/**
	 * Wrap the string with the correct regex
	 * syntax.
	 */

	function wrap(arr, sep, opts) {
	  if (sep === '~') { sep = '-'; }
	  var str = arr.join(sep);
	  var pre = opts && opts.regexPrefix;

	  // regex logical `or`
	  if (sep === '|') {
	    str = pre ? pre + str : str;
	    str = '(' + str + ')';
	  }

	  // regex character class
	  if (sep === '-') {
	    str = (pre && pre === '^')
	      ? pre + str
	      : str;
	    str = '[' + str + ']';
	  }
	  return [str];
	}

	/**
	 * Check for invalid characters
	 */

	function isCharClass(a, b, step, isNum, isDescending) {
	  if (isDescending) { return false; }
	  if (isNum) { return a <= 9 && b <= 9; }
	  if (a < b) { return step === 1; }
	  return false;
	}

	/**
	 * Detect the correct separator to use
	 */

	function shouldExpand(a, b, num, isNum, padding, opts) {
	  if (isNum && (a > 9 || b > 9)) { return false; }
	  return !padding && num === 1 && a < b;
	}

	/**
	 * Detect the correct separator to use
	 */

	function detectSeparator(a, b, step, isNum, isDescending) {
	  var isChar = isCharClass(a, b, step, isNum, isDescending);
	  if (!isChar) {
	    return '|';
	  }
	  return '~';
	}

	/**
	 * Correctly format the step based on type
	 */

	function formatStep(step) {
	  return Math.abs(step >> 0) || 1;
	}

	/**
	 * Format padding, taking leading `-` into account
	 */

	function formatPadding(ch, pad) {
	  var res = pad ? pad + ch : ch;
	  if (pad && ch.toString().charAt(0) === '-') {
	    res = '-' + pad + ch.toString().substr(1);
	  }
	  return res.toString();
	}

	/**
	 * Check for invalid characters
	 */

	function isInvalidChar(str) {
	  var ch = toStr(str);
	  return ch === '\\'
	    || ch === '['
	    || ch === ']'
	    || ch === '^'
	    || ch === '('
	    || ch === ')'
	    || ch === '`';
	}

	/**
	 * Convert to a string from a charCode
	 */

	function toStr(ch) {
	  return String.fromCharCode(ch);
	}


	/**
	 * Step regex
	 */

	function stepRe() {
	  return /\?|>|\||\+|\~/g;
	}

	/**
	 * Return true if `val` has either a letter
	 * or a number
	 */

	function noAlphaNum(val) {
	  return /[a-z0-9]/i.test(val);
	}

	/**
	 * Return true if `val` has both a letter and
	 * a number (invalid)
	 */

	function hasBoth(val) {
	  return /[a-z][0-9]|[0-9][a-z]/i.test(val);
	}

	/**
	 * Normalize zeros for checks
	 */

	function zeros(val) {
	  if (/^-*0+$/.test(val.toString())) {
	    return '0';
	  }
	  return val;
	}

	/**
	 * Return true if `val` has leading zeros,
	 * or a similar valid pattern.
	 */

	function hasZeros(val) {
	  return /[^.]\.|^-*0+[0-9]/.test(val);
	}

	/**
	 * If the string is padded, returns a curried function with
	 * the a cached padding string, or `false` if no padding.
	 *
	 * @param  {*} `origA` String or number.
	 * @return {String|Boolean}
	 */

	function isPadded(origA, origB) {
	  if (hasZeros(origA) || hasZeros(origB)) {
	    var alen = length(origA);
	    var blen = length(origB);

	    var len = alen >= blen
	      ? alen
	      : blen;

	    return function (a) {
	      return repeatStr('0', len - length(a));
	    };
	  }
	  return false;
	}

	/**
	 * Get the string length of `val`
	 */

	function length(val) {
	  return val.toString().length;
	}


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * isobject <https://github.com/jonschlinkert/isobject>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var isArray = __webpack_require__(35);

	module.exports = function isObject(val) {
	  return val != null && typeof val === 'object' && isArray(val) === false;
	};


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-number <https://github.com/jonschlinkert/is-number>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var typeOf = __webpack_require__(279);

	module.exports = function isNumber(num) {
	  var type = typeOf(num);
	  if (type !== 'number' && type !== 'string') {
	    return false;
	  }
	  var n = +num;
	  return (n - n + 1) >= 0 && num !== '';
	};


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var isBuffer = __webpack_require__(280);
	var toString = Object.prototype.toString;

	/**
	 * Get the native `typeof` a value.
	 *
	 * @param  {*} `val`
	 * @return {*} Native javascript type
	 */

	module.exports = function kindOf(val) {
	  // primitivies
	  if (typeof val === 'undefined') {
	    return 'undefined';
	  }
	  if (val === null) {
	    return 'null';
	  }
	  if (val === true || val === false || val instanceof Boolean) {
	    return 'boolean';
	  }
	  if (typeof val === 'string' || val instanceof String) {
	    return 'string';
	  }
	  if (typeof val === 'number' || val instanceof Number) {
	    return 'number';
	  }

	  // functions
	  if (typeof val === 'function' || val instanceof Function) {
	    return 'function';
	  }

	  // array
	  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
	    return 'array';
	  }

	  // check for instances of RegExp and Date before calling `toString`
	  if (val instanceof RegExp) {
	    return 'regexp';
	  }
	  if (val instanceof Date) {
	    return 'date';
	  }

	  // other objects
	  var type = toString.call(val);

	  if (type === '[object RegExp]') {
	    return 'regexp';
	  }
	  if (type === '[object Date]') {
	    return 'date';
	  }
	  if (type === '[object Arguments]') {
	    return 'arguments';
	  }
	  if (type === '[object Error]') {
	    return 'error';
	  }

	  // buffer
	  if (isBuffer(val)) {
	    return 'buffer';
	  }

	  // es6: Map, WeakMap, Set, WeakSet
	  if (type === '[object Set]') {
	    return 'set';
	  }
	  if (type === '[object WeakSet]') {
	    return 'weakset';
	  }
	  if (type === '[object Map]') {
	    return 'map';
	  }
	  if (type === '[object WeakMap]') {
	    return 'weakmap';
	  }
	  if (type === '[object Symbol]') {
	    return 'symbol';
	  }

	  // typed arrays
	  if (type === '[object Int8Array]') {
	    return 'int8array';
	  }
	  if (type === '[object Uint8Array]') {
	    return 'uint8array';
	  }
	  if (type === '[object Uint8ClampedArray]') {
	    return 'uint8clampedarray';
	  }
	  if (type === '[object Int16Array]') {
	    return 'int16array';
	  }
	  if (type === '[object Uint16Array]') {
	    return 'uint16array';
	  }
	  if (type === '[object Int32Array]') {
	    return 'int32array';
	  }
	  if (type === '[object Uint32Array]') {
	    return 'uint32array';
	  }
	  if (type === '[object Float32Array]') {
	    return 'float32array';
	  }
	  if (type === '[object Float64Array]') {
	    return 'float64array';
	  }

	  // must be a plain object
	  return 'object';
	};


/***/ },
/* 280 */
/***/ function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}

	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * randomatic <https://github.com/jonschlinkert/randomatic>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	'use strict';

	var isNumber = __webpack_require__(282);
	var typeOf = __webpack_require__(284);

	/**
	 * Expose `randomatic`
	 */

	module.exports = randomatic;

	/**
	 * Available mask characters
	 */

	var type = {
	  lower: 'abcdefghijklmnopqrstuvwxyz',
	  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	  number: '0123456789',
	  special: '~!@#$%^&()_+-={}[];\',.'
	};

	type.all = type.lower + type.upper + type.number + type.special;

	/**
	 * Generate random character sequences of a specified `length`,
	 * based on the given `pattern`.
	 *
	 * @param {String} `pattern` The pattern to use for generating the random string.
	 * @param {String} `length` The length of the string to generate.
	 * @param {String} `options`
	 * @return {String}
	 * @api public
	 */

	function randomatic(pattern, length, options) {
	  if (typeof pattern === 'undefined') {
	    throw new Error('randomatic expects a string or number.');
	  }

	  var custom = false;
	  if (arguments.length === 1) {
	    if (typeof pattern === 'string') {
	      length = pattern.length;

	    } else if (isNumber(pattern)) {
	      options = {}; length = pattern; pattern = '*';
	    }
	  }

	  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {
	    options = length;
	    pattern = options.chars;
	    length = pattern.length;
	    custom = true;
	  }

	  var opts = options || {};
	  var mask = '';
	  var res = '';

	  // Characters to be used
	  if (pattern.indexOf('?') !== -1) mask += opts.chars;
	  if (pattern.indexOf('a') !== -1) mask += type.lower;
	  if (pattern.indexOf('A') !== -1) mask += type.upper;
	  if (pattern.indexOf('0') !== -1) mask += type.number;
	  if (pattern.indexOf('!') !== -1) mask += type.special;
	  if (pattern.indexOf('*') !== -1) mask += type.all;
	  if (custom) mask += pattern;

	  while (length--) {
	    res += mask.charAt(parseInt(Math.random() * mask.length, 10));
	  }
	  return res;
	};


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-number <https://github.com/jonschlinkert/is-number>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var typeOf = __webpack_require__(283);

	module.exports = function isNumber(num) {
	  var type = typeOf(num);

	  if (type === 'string') {
	    if (!num.trim()) return false;
	  } else if (type !== 'number') {
	    return false;
	  }

	  return (num - num + 1) >= 0;
	};


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var isBuffer = __webpack_require__(280);
	var toString = Object.prototype.toString;

	/**
	 * Get the native `typeof` a value.
	 *
	 * @param  {*} `val`
	 * @return {*} Native javascript type
	 */

	module.exports = function kindOf(val) {
	  // primitivies
	  if (typeof val === 'undefined') {
	    return 'undefined';
	  }
	  if (val === null) {
	    return 'null';
	  }
	  if (val === true || val === false || val instanceof Boolean) {
	    return 'boolean';
	  }
	  if (typeof val === 'string' || val instanceof String) {
	    return 'string';
	  }
	  if (typeof val === 'number' || val instanceof Number) {
	    return 'number';
	  }

	  // functions
	  if (typeof val === 'function' || val instanceof Function) {
	    return 'function';
	  }

	  // array
	  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
	    return 'array';
	  }

	  // check for instances of RegExp and Date before calling `toString`
	  if (val instanceof RegExp) {
	    return 'regexp';
	  }
	  if (val instanceof Date) {
	    return 'date';
	  }

	  // other objects
	  var type = toString.call(val);

	  if (type === '[object RegExp]') {
	    return 'regexp';
	  }
	  if (type === '[object Date]') {
	    return 'date';
	  }
	  if (type === '[object Arguments]') {
	    return 'arguments';
	  }
	  if (type === '[object Error]') {
	    return 'error';
	  }

	  // buffer
	  if (isBuffer(val)) {
	    return 'buffer';
	  }

	  // es6: Map, WeakMap, Set, WeakSet
	  if (type === '[object Set]') {
	    return 'set';
	  }
	  if (type === '[object WeakSet]') {
	    return 'weakset';
	  }
	  if (type === '[object Map]') {
	    return 'map';
	  }
	  if (type === '[object WeakMap]') {
	    return 'weakmap';
	  }
	  if (type === '[object Symbol]') {
	    return 'symbol';
	  }

	  // typed arrays
	  if (type === '[object Int8Array]') {
	    return 'int8array';
	  }
	  if (type === '[object Uint8Array]') {
	    return 'uint8array';
	  }
	  if (type === '[object Uint8ClampedArray]') {
	    return 'uint8clampedarray';
	  }
	  if (type === '[object Int16Array]') {
	    return 'int16array';
	  }
	  if (type === '[object Uint16Array]') {
	    return 'uint16array';
	  }
	  if (type === '[object Int32Array]') {
	    return 'int32array';
	  }
	  if (type === '[object Uint32Array]') {
	    return 'uint32array';
	  }
	  if (type === '[object Float32Array]') {
	    return 'float32array';
	  }
	  if (type === '[object Float64Array]') {
	    return 'float64array';
	  }

	  // must be a plain object
	  return 'object';
	};


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	var isBuffer = __webpack_require__(280);
	var toString = Object.prototype.toString;

	/**
	 * Get the native `typeof` a value.
	 *
	 * @param  {*} `val`
	 * @return {*} Native javascript type
	 */

	module.exports = function kindOf(val) {
	  // primitivies
	  if (typeof val === 'undefined') {
	    return 'undefined';
	  }
	  if (val === null) {
	    return 'null';
	  }
	  if (val === true || val === false || val instanceof Boolean) {
	    return 'boolean';
	  }
	  if (typeof val === 'string' || val instanceof String) {
	    return 'string';
	  }
	  if (typeof val === 'number' || val instanceof Number) {
	    return 'number';
	  }

	  // functions
	  if (typeof val === 'function' || val instanceof Function) {
	    return 'function';
	  }

	  // array
	  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
	    return 'array';
	  }

	  // check for instances of RegExp and Date before calling `toString`
	  if (val instanceof RegExp) {
	    return 'regexp';
	  }
	  if (val instanceof Date) {
	    return 'date';
	  }

	  // other objects
	  var type = toString.call(val);

	  if (type === '[object RegExp]') {
	    return 'regexp';
	  }
	  if (type === '[object Date]') {
	    return 'date';
	  }
	  if (type === '[object Arguments]') {
	    return 'arguments';
	  }
	  if (type === '[object Error]') {
	    return 'error';
	  }
	  if (type === '[object Promise]') {
	    return 'promise';
	  }

	  // buffer
	  if (isBuffer(val)) {
	    return 'buffer';
	  }

	  // es6: Map, WeakMap, Set, WeakSet
	  if (type === '[object Set]') {
	    return 'set';
	  }
	  if (type === '[object WeakSet]') {
	    return 'weakset';
	  }
	  if (type === '[object Map]') {
	    return 'map';
	  }
	  if (type === '[object WeakMap]') {
	    return 'weakmap';
	  }
	  if (type === '[object Symbol]') {
	    return 'symbol';
	  }

	  // typed arrays
	  if (type === '[object Int8Array]') {
	    return 'int8array';
	  }
	  if (type === '[object Uint8Array]') {
	    return 'uint8array';
	  }
	  if (type === '[object Uint8ClampedArray]') {
	    return 'uint8clampedarray';
	  }
	  if (type === '[object Int16Array]') {
	    return 'int16array';
	  }
	  if (type === '[object Uint16Array]') {
	    return 'uint16array';
	  }
	  if (type === '[object Int32Array]') {
	    return 'int32array';
	  }
	  if (type === '[object Uint32Array]') {
	    return 'uint32array';
	  }
	  if (type === '[object Float32Array]') {
	    return 'float32array';
	  }
	  if (type === '[object Float64Array]') {
	    return 'float64array';
	  }

	  // must be a plain object
	  return 'object';
	};


/***/ },
/* 285 */
/***/ function(module, exports) {

	/*!
	 * repeat-string <https://github.com/jonschlinkert/repeat-string>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	/**
	 * Results cache
	 */

	var res = '';
	var cache;

	/**
	 * Expose `repeat`
	 */

	module.exports = repeat;

	/**
	 * Repeat the given `string` the specified `number`
	 * of times.
	 *
	 * **Example:**
	 *
	 * ```js
	 * var repeat = require('repeat-string');
	 * repeat('A', 5);
	 * //=> AAAAA
	 * ```
	 *
	 * @param {String} `string` The string to repeat
	 * @param {Number} `number` The number of times to repeat the string
	 * @return {String} Repeated string
	 * @api public
	 */

	function repeat(str, num) {
	  if (typeof str !== 'string') {
	    throw new TypeError('expected a string');
	  }

	  // cover common, quick use cases
	  if (num === 1) return str;
	  if (num === 2) return str + str;

	  var max = str.length * num;
	  if (cache !== str || typeof cache === 'undefined') {
	    cache = str;
	    res = '';
	  } else if (res.length >= max) {
	    return res.substr(0, max);
	  }

	  while (max > res.length && num > 1) {
	    if (num & 1) {
	      res += str;
	    }

	    num >>= 1;
	    str += str;
	  }

	  res += str;
	  res = res.substr(0, max);
	  return res;
	}


/***/ },
/* 286 */
/***/ function(module, exports) {

	/*!
	 * repeat-element <https://github.com/jonschlinkert/repeat-element>
	 *
	 * Copyright (c) 2015 Jon Schlinkert.
	 * Licensed under the MIT license.
	 */

	'use strict';

	module.exports = function repeat(ele, num) {
	  var arr = new Array(num);

	  for (var i = 0; i < num; i++) {
	    arr[i] = ele;
	  }

	  return arr;
	};


/***/ },
/* 287 */
/***/ function(module, exports) {

	/*!
	 * preserve <https://github.com/jonschlinkert/preserve>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT license.
	 */

	'use strict';

	/**
	 * Replace tokens in `str` with a temporary, heuristic placeholder.
	 *
	 * ```js
	 * tokens.before('{a\\,b}');
	 * //=> '{__ID1__}'
	 * ```
	 *
	 * @param  {String} `str`
	 * @return {String} String with placeholders.
	 * @api public
	 */

	exports.before = function before(str, re) {
	  return str.replace(re, function (match) {
	    var id = randomize();
	    cache[id] = match;
	    return '__ID' + id + '__';
	  });
	};

	/**
	 * Replace placeholders in `str` with original tokens.
	 *
	 * ```js
	 * tokens.after('{__ID1__}');
	 * //=> '{a\\,b}'
	 * ```
	 *
	 * @param  {String} `str` String with placeholders
	 * @return {String} `str` String with original tokens.
	 * @api public
	 */

	exports.after = function after(str) {
	  return str.replace(/__ID(.{5})__/g, function (_, id) {
	    return cache[id];
	  });
	};

	function randomize() {
	  return Math.random().toString().slice(2, 7);
	}

	var cache = {};

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * expand-brackets <https://github.com/jonschlinkert/expand-brackets>
	 *
	 * Copyright (c) 2015 Jon Schlinkert.
	 * Licensed under the MIT license.
	 */

	'use strict';

	var isPosixBracket = __webpack_require__(289);

	/**
	 * POSIX character classes
	 */

	var POSIX = {
	  alnum: 'a-zA-Z0-9',
	  alpha: 'a-zA-Z',
	  blank: ' \\t',
	  cntrl: '\\x00-\\x1F\\x7F',
	  digit: '0-9',
	  graph: '\\x21-\\x7E',
	  lower: 'a-z',
	  print: '\\x20-\\x7E',
	  punct: '-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
	  space: ' \\t\\r\\n\\v\\f',
	  upper: 'A-Z',
	  word:  'A-Za-z0-9_',
	  xdigit: 'A-Fa-f0-9',
	};

	/**
	 * Expose `brackets`
	 */

	module.exports = brackets;

	function brackets(str) {
	  if (!isPosixBracket(str)) {
	    return str;
	  }

	  var negated = false;
	  if (str.indexOf('[^') !== -1) {
	    negated = true;
	    str = str.split('[^').join('[');
	  }
	  if (str.indexOf('[!') !== -1) {
	    negated = true;
	    str = str.split('[!').join('[');
	  }

	  var a = str.split('[');
	  var b = str.split(']');
	  var imbalanced = a.length !== b.length;

	  var parts = str.split(/(?::\]\[:|\[?\[:|:\]\]?)/);
	  var len = parts.length, i = 0;
	  var end = '', beg = '';
	  var res = [];

	  // start at the end (innermost) first
	  while (len--) {
	    var inner = parts[i++];
	    if (inner === '^[!' || inner === '[!') {
	      inner = '';
	      negated = true;
	    }

	    var prefix = negated ? '^' : '';
	    var ch = POSIX[inner];

	    if (ch) {
	      res.push('[' + prefix + ch + ']');
	    } else if (inner) {
	      if (/^\[?\w-\w\]?$/.test(inner)) {
	        if (i === parts.length) {
	          res.push('[' + prefix + inner);
	        } else if (i === 1) {
	          res.push(prefix + inner + ']');
	        } else {
	          res.push(prefix + inner);
	        }
	      } else {
	        if (i === 1) {
	          beg += inner;
	        } else if (i === parts.length) {
	          end += inner;
	        } else {
	          res.push('[' + prefix + inner + ']');
	        }
	      }
	    }
	  }

	  var result = res.join('|');
	  var rlen = res.length || 1;
	  if (rlen > 1) {
	    result = '(?:' + result + ')';
	    rlen = 1;
	  }
	  if (beg) {
	    rlen++;
	    if (beg.charAt(0) === '[') {
	      if (imbalanced) {
	        beg = '\\[' + beg.slice(1);
	      } else {
	        beg += ']';
	      }
	    }
	    result = beg + result;
	  }
	  if (end) {
	    rlen++;
	    if (end.slice(-1) === ']') {
	      if (imbalanced) {
	        end = end.slice(0, end.length - 1) + '\\]';
	      } else {
	        end = '[' + end;
	      }
	    }
	    result += end;
	  }

	  if (rlen > 1) {
	    result = result.split('][').join(']|[');
	    if (result.indexOf('|') !== -1 && !/\(\?/.test(result)) {
	      result = '(?:' + result + ')';
	    }
	  }

	  result = result.replace(/\[+=|=\]+/g, '\\b');
	  return result;
	}

	brackets.makeRe = function(pattern) {
	  try {
	    return new RegExp(brackets(pattern));
	  } catch (err) {}
	};

	brackets.isMatch = function(str, pattern) {
	  try {
	    return brackets.makeRe(pattern).test(str);
	  } catch (err) {
	    return false;
	  }
	};

	brackets.match = function(arr, pattern) {
	  var len = arr.length, i = 0;
	  var res = arr.slice();

	  var re = brackets.makeRe(pattern);
	  while (i < len) {
	    var ele = arr[i++];
	    if (!re.test(ele)) {
	      continue;
	    }
	    res.splice(i, 1);
	  }
	  return res;
	};


/***/ },
/* 289 */
/***/ function(module, exports) {

	/*!
	 * is-posix-bracket <https://github.com/jonschlinkert/is-posix-bracket>
	 *
	 * Copyright (c) 2015-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	module.exports = function isPosixBracket(str) {
	  return typeof str === 'string' && /\[([:.=+])(?:[^\[\]]|)+\1\]/.test(str);
	};


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * extglob <https://github.com/jonschlinkert/extglob>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	/**
	 * Module dependencies
	 */

	var isExtglob = __webpack_require__(291);
	var re, cache = {};

	/**
	 * Expose `extglob`
	 */

	module.exports = extglob;

	/**
	 * Convert the given extglob `string` to a regex-compatible
	 * string.
	 *
	 * ```js
	 * var extglob = require('extglob');
	 * extglob('!(a?(b))');
	 * //=> '(?!a(?:b)?)[^/]*?'
	 * ```
	 *
	 * @param {String} `str` The string to convert.
	 * @param {Object} `options`
	 *   @option {Boolean} [options] `esc` If `false` special characters will not be escaped. Defaults to `true`.
	 *   @option {Boolean} [options] `regex` If `true` a regular expression is returned instead of a string.
	 * @return {String}
	 * @api public
	 */


	function extglob(str, opts) {
	  opts = opts || {};
	  var o = {}, i = 0;

	  // fix common character reversals
	  // '*!(.js)' => '*.!(js)'
	  str = str.replace(/!\(([^\w*()])/g, '$1!(');

	  // support file extension negation
	  str = str.replace(/([*\/])\.!\([*]\)/g, function (m, ch) {
	    if (ch === '/') {
	      return escape('\\/[^.]+');
	    }
	    return escape('[^.]+');
	  });

	  // create a unique key for caching by
	  // combining the string and options
	  var key = str
	    + String(!!opts.regex)
	    + String(!!opts.contains)
	    + String(!!opts.escape);

	  if (cache.hasOwnProperty(key)) {
	    return cache[key];
	  }

	  if (!(re instanceof RegExp)) {
	    re = regex();
	  }

	  opts.negate = false;
	  var m;

	  while (m = re.exec(str)) {
	    var prefix = m[1];
	    var inner = m[3];
	    if (prefix === '!') {
	      opts.negate = true;
	    }

	    var id = '__EXTGLOB_' + (i++) + '__';
	    // use the prefix of the _last_ (outtermost) pattern
	    o[id] = wrap(inner, prefix, opts.escape);
	    str = str.split(m[0]).join(id);
	  }

	  var keys = Object.keys(o);
	  var len = keys.length;

	  // we have to loop again to allow us to convert
	  // patterns in reverse order (starting with the
	  // innermost/last pattern first)
	  while (len--) {
	    var prop = keys[len];
	    str = str.split(prop).join(o[prop]);
	  }

	  var result = opts.regex
	    ? toRegex(str, opts.contains, opts.negate)
	    : str;

	  result = result.split('.').join('\\.');

	  // cache the result and return it
	  return (cache[key] = result);
	}

	/**
	 * Convert `string` to a regex string.
	 *
	 * @param  {String} `str`
	 * @param  {String} `prefix` Character that determines how to wrap the string.
	 * @param  {Boolean} `esc` If `false` special characters will not be escaped. Defaults to `true`.
	 * @return {String}
	 */

	function wrap(inner, prefix, esc) {
	  if (esc) inner = escape(inner);

	  switch (prefix) {
	    case '!':
	      return '(?!' + inner + ')[^/]' + (esc ? '%%%~' : '*?');
	    case '@':
	      return '(?:' + inner + ')';
	    case '+':
	      return '(?:' + inner + ')+';
	    case '*':
	      return '(?:' + inner + ')' + (esc ? '%%' : '*')
	    case '?':
	      return '(?:' + inner + '|)';
	    default:
	      return inner;
	  }
	}

	function escape(str) {
	  str = str.split('*').join('[^/]%%%~');
	  str = str.split('.').join('\\.');
	  return str;
	}

	/**
	 * extglob regex.
	 */

	function regex() {
	  return /(\\?[@?!+*$]\\?)(\(([^()]*?)\))/;
	}

	/**
	 * Negation regex
	 */

	function negate(str) {
	  return '(?!^' + str + ').*$';
	}

	/**
	 * Create the regex to do the matching. If
	 * the leading character in the `pattern` is `!`
	 * a negation regex is returned.
	 *
	 * @param {String} `pattern`
	 * @param {Boolean} `contains` Allow loose matching.
	 * @param {Boolean} `isNegated` True if the pattern is a negation pattern.
	 */

	function toRegex(pattern, contains, isNegated) {
	  var prefix = contains ? '^' : '';
	  var after = contains ? '$' : '';
	  pattern = ('(?:' + pattern + ')' + after);
	  if (isNegated) {
	    pattern = prefix + negate(pattern);
	  }
	  return new RegExp(prefix + pattern);
	}


/***/ },
/* 291 */
/***/ function(module, exports) {

	/*!
	 * is-extglob <https://github.com/jonschlinkert/is-extglob>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	module.exports = function isExtglob(str) {
	  return typeof str === 'string'
	    && /[@?!+*]\(/.test(str);
	};


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-glob <https://github.com/jonschlinkert/is-glob>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	var isExtglob = __webpack_require__(291);

	module.exports = function isGlob(str) {
	  return typeof str === 'string'
	    && (/[*!?{}(|)[\]]/.test(str)
	     || isExtglob(str));
	};

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * normalize-path <https://github.com/jonschlinkert/normalize-path>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	var removeTrailingSeparator = __webpack_require__(294);

	module.exports = function normalizePath(str, stripTrailing) {
	  if (typeof str !== 'string') {
	    throw new TypeError('expected a string');
	  }
	  str = str.replace(/[\\\/]+/g, '/');
	  if (stripTrailing !== false) {
	    str = removeTrailingSeparator(str);
	  }
	  return str;
	};


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var isWin = process.platform === 'win32';

	module.exports = function (str) {
		var i = str.length - 1;
		if (i < 2) {
			return str;
		}
		while (isSeparator(str, i)) {
			i--;
		}
		return str.substr(0, i + 1);
	};

	function isSeparator(str, i) {
		var char = str[i];
		return i > 0 && (char === '/' || (isWin && char === '\\'));
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * object.omit <https://github.com/jonschlinkert/object.omit>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var isObject = __webpack_require__(296);
	var forOwn = __webpack_require__(297);

	module.exports = function omit(obj, keys) {
	  if (!isObject(obj)) return {};

	  keys = [].concat.apply([], [].slice.call(arguments, 1));
	  var last = keys[keys.length - 1];
	  var res = {}, fn;

	  if (typeof last === 'function') {
	    fn = keys.pop();
	  }

	  var isFunction = typeof fn === 'function';
	  if (!keys.length && !isFunction) {
	    return obj;
	  }

	  forOwn(obj, function(value, key) {
	    if (keys.indexOf(key) === -1) {

	      if (!isFunction) {
	        res[key] = value;
	      } else if (fn(value, key, obj)) {
	        res[key] = value;
	      }
	    }
	  });
	  return res;
	};


/***/ },
/* 296 */
/***/ function(module, exports) {

	/*!
	 * is-extendable <https://github.com/jonschlinkert/is-extendable>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	module.exports = function isExtendable(val) {
	  return typeof val !== 'undefined' && val !== null
	    && (typeof val === 'object' || typeof val === 'function');
	};


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * for-own <https://github.com/jonschlinkert/for-own>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	'use strict';

	var forIn = __webpack_require__(298);
	var hasOwn = Object.prototype.hasOwnProperty;

	module.exports = function forOwn(obj, fn, thisArg) {
	  forIn(obj, function(val, key) {
	    if (hasOwn.call(obj, key)) {
	      return fn.call(thisArg, obj[key], key, obj);
	    }
	  });
	};


/***/ },
/* 298 */
/***/ function(module, exports) {

	/*!
	 * for-in <https://github.com/jonschlinkert/for-in>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	'use strict';

	module.exports = function forIn(obj, fn, thisArg) {
	  for (var key in obj) {
	    if (fn.call(thisArg, obj[key], key, obj) === false) {
	      break;
	    }
	  }
	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * parse-glob <https://github.com/jonschlinkert/parse-glob>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var isGlob = __webpack_require__(292);
	var findBase = __webpack_require__(300);
	var extglob = __webpack_require__(291);
	var dotfile = __webpack_require__(302);

	/**
	 * Expose `cache`
	 */

	var cache = module.exports.cache = {};

	/**
	 * Parse a glob pattern into tokens.
	 *
	 * When no paths or '**' are in the glob, we use a
	 * different strategy for parsing the filename, since
	 * file names can contain braces and other difficult
	 * patterns. such as:
	 *
	 *  - `*.{a,b}`
	 *  - `(**|*.js)`
	 */

	module.exports = function parseGlob(glob) {
	  if (cache.hasOwnProperty(glob)) {
	    return cache[glob];
	  }

	  var tok = {};
	  tok.orig = glob;
	  tok.is = {};

	  // unescape dots and slashes in braces/brackets
	  glob = escape(glob);

	  var parsed = findBase(glob);
	  tok.is.glob = parsed.isGlob;

	  tok.glob = parsed.glob;
	  tok.base = parsed.base;
	  var segs = /([^\/]*)$/.exec(glob);

	  tok.path = {};
	  tok.path.dirname = '';
	  tok.path.basename = segs[1] || '';
	  tok.path.dirname = glob.split(tok.path.basename).join('') || '';
	  var basename = (tok.path.basename || '').split('.') || '';
	  tok.path.filename = basename[0] || '';
	  tok.path.extname = basename.slice(1).join('.') || '';
	  tok.path.ext = '';

	  if (isGlob(tok.path.dirname) && !tok.path.basename) {
	    if (!/\/$/.test(tok.glob)) {
	      tok.path.basename = tok.glob;
	    }
	    tok.path.dirname = tok.base;
	  }

	  if (glob.indexOf('/') === -1 && !tok.is.globstar) {
	    tok.path.dirname = '';
	    tok.path.basename = tok.orig;
	  }

	  var dot = tok.path.basename.indexOf('.');
	  if (dot !== -1) {
	    tok.path.filename = tok.path.basename.slice(0, dot);
	    tok.path.extname = tok.path.basename.slice(dot);
	  }

	  if (tok.path.extname.charAt(0) === '.') {
	    var exts = tok.path.extname.split('.');
	    tok.path.ext = exts[exts.length - 1];
	  }

	  // unescape dots and slashes in braces/brackets
	  tok.glob = unescape(tok.glob);
	  tok.path.dirname = unescape(tok.path.dirname);
	  tok.path.basename = unescape(tok.path.basename);
	  tok.path.filename = unescape(tok.path.filename);
	  tok.path.extname = unescape(tok.path.extname);

	  // Booleans
	  var is = (glob && tok.is.glob);
	  tok.is.negated  = glob && glob.charAt(0) === '!';
	  tok.is.extglob  = glob && extglob(glob);
	  tok.is.braces   = has(is, glob, '{');
	  tok.is.brackets = has(is, glob, '[:');
	  tok.is.globstar = has(is, glob, '**');
	  tok.is.dotfile  = dotfile(tok.path.basename) || dotfile(tok.path.filename);
	  tok.is.dotdir   = dotdir(tok.path.dirname);
	  return (cache[glob] = tok);
	}

	/**
	 * Returns true if the glob matches dot-directories.
	 *
	 * @param  {Object} `tok` The tokens object
	 * @param  {Object} `path` The path object
	 * @return {Object}
	 */

	function dotdir(base) {
	  if (base.indexOf('/.') !== -1) {
	    return true;
	  }
	  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {
	    return true;
	  }
	  return false;
	}

	/**
	 * Returns true if the pattern has the given `ch`aracter(s)
	 *
	 * @param  {Object} `glob` The glob pattern.
	 * @param  {Object} `ch` The character to test for
	 * @return {Object}
	 */

	function has(is, glob, ch) {
	  return is && glob.indexOf(ch) !== -1;
	}

	/**
	 * Escape/unescape utils
	 */

	function escape(str) {
	  var re = /\{([^{}]*?)}|\(([^()]*?)\)|\[([^\[\]]*?)\]/g;
	  return str.replace(re, function (outter, braces, parens, brackets) {
	    var inner = braces || parens || brackets;
	    if (!inner) { return outter; }
	    return outter.split(inner).join(esc(inner));
	  });
	}

	function esc(str) {
	  str = str.split('/').join('__SLASH__');
	  str = str.split('.').join('__DOT__');
	  return str;
	}

	function unescape(str) {
	  str = str.split('__SLASH__').join('/');
	  str = str.split('__DOT__').join('.');
	  return str;
	}


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * glob-base <https://github.com/jonschlinkert/glob-base>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var path = __webpack_require__(36);
	var parent = __webpack_require__(301);
	var isGlob = __webpack_require__(292);

	module.exports = function globBase(pattern) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob-base expects a string.');
	  }

	  var res = {};
	  res.base = parent(pattern);
	  res.isGlob = isGlob(pattern);

	  if (res.base !== '.') {
	    res.glob = pattern.substr(res.base.length);
	    if (res.glob.charAt(0) === '/') {
	      res.glob = res.glob.substr(1);
	    }
	  } else {
	    res.glob = pattern;
	  }

	  if (!res.isGlob) {
	    res.base = dirname(pattern);
	    res.glob = res.base !== '.'
	      ? pattern.substr(res.base.length)
	      : pattern;
	  }

	  if (res.glob.substr(0, 2) === './') {
	    res.glob = res.glob.substr(2);
	  }
	  if (res.glob.charAt(0) === '/') {
	    res.glob = res.glob.substr(1);
	  }
	  return res;
	};

	function dirname(glob) {
	  if (glob.slice(-1) === '/') return glob;
	  return path.dirname(glob);
	}


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var path = __webpack_require__(36);
	var isglob = __webpack_require__(292);

	module.exports = function globParent(str) {
		str += 'a'; // preserves full path in case of trailing path separator
		do {str = path.dirname(str)} while (isglob(str));
		return str;
	};


/***/ },
/* 302 */
/***/ function(module, exports) {

	/*!
	 * is-dotfile <https://github.com/jonschlinkert/is-dotfile>
	 *
	 * Copyright (c) 2015-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	module.exports = function(str) {
	  if (str.charCodeAt(0) === 46 /* . */ && str.indexOf('/', 1) === -1) {
	    return true;
	  }
	  var slash = str.lastIndexOf('/');
	  return slash !== -1 ? str.charCodeAt(slash + 1) === 46  /* . */ : false;
	};


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * regex-cache <https://github.com/jonschlinkert/regex-cache>
	 *
	 * Copyright (c) 2015-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	'use strict';

	var equal = __webpack_require__(304);
	var basic = {};
	var cache = {};

	/**
	 * Expose `regexCache`
	 */

	module.exports = regexCache;

	/**
	 * Memoize the results of a call to the new RegExp constructor.
	 *
	 * @param  {Function} fn [description]
	 * @param  {String} str [description]
	 * @param  {Options} options [description]
	 * @param  {Boolean} nocompare [description]
	 * @return {RegExp}
	 */

	function regexCache(fn, str, opts) {
	  var key = '_default_', regex, cached;

	  if (!str && !opts) {
	    if (typeof fn !== 'function') {
	      return fn;
	    }
	    return basic[key] || (basic[key] = fn(str));
	  }

	  var isString = typeof str === 'string';
	  if (isString) {
	    if (!opts) {
	      return basic[str] || (basic[str] = fn(str));
	    }
	    key = str;
	  } else {
	    opts = str;
	  }

	  cached = cache[key];
	  if (cached && equal(cached.opts, opts)) {
	    return cached.regex;
	  }

	  memo(key, opts, (regex = fn(str, opts)));
	  return regex;
	}

	function memo(key, opts, regex) {
	  cache[key] = {regex: regex, opts: opts};
	}

	/**
	 * Expose `cache`
	 */

	module.exports.cache = cache;
	module.exports.basic = basic;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-equal-shallow <https://github.com/jonschlinkert/is-equal-shallow>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	var isPrimitive = __webpack_require__(305);

	module.exports = function isEqual(a, b) {
	  if (!a && !b) { return true; }
	  if (!a && b || a && !b) { return false; }

	  var numKeysA = 0, numKeysB = 0, key;
	  for (key in b) {
	    numKeysB++;
	    if (!isPrimitive(b[key]) || !a.hasOwnProperty(key) || (a[key] !== b[key])) {
	      return false;
	    }
	  }
	  for (key in a) {
	    numKeysA++;
	  }
	  return numKeysA === numKeysB;
	};


/***/ },
/* 305 */
/***/ function(module, exports) {

	/*!
	 * is-primitive <https://github.com/jonschlinkert/is-primitive>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */

	'use strict';

	// see http://jsperf.com/testing-value-is-primitive/7
	module.exports = function isPrimitive(value) {
	  return value == null || (typeof value !== 'function' && typeof value !== 'object');
	};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var chars = __webpack_require__(307);
	var utils = __webpack_require__(269);

	/**
	 * Expose `Glob`
	 */

	var Glob = module.exports = function Glob(pattern, options) {
	  if (!(this instanceof Glob)) {
	    return new Glob(pattern, options);
	  }
	  this.options = options || {};
	  this.pattern = pattern;
	  this.history = [];
	  this.tokens = {};
	  this.init(pattern);
	};

	/**
	 * Initialize defaults
	 */

	Glob.prototype.init = function(pattern) {
	  this.orig = pattern;
	  this.negated = this.isNegated();
	  this.options.track = this.options.track || false;
	  this.options.makeRe = true;
	};

	/**
	 * Push a change into `glob.history`. Useful
	 * for debugging.
	 */

	Glob.prototype.track = function(msg) {
	  if (this.options.track) {
	    this.history.push({msg: msg, pattern: this.pattern});
	  }
	};

	/**
	 * Return true if `glob.pattern` was negated
	 * with `!`, also remove the `!` from the pattern.
	 *
	 * @return {Boolean}
	 */

	Glob.prototype.isNegated = function() {
	  if (this.pattern.charCodeAt(0) === 33 /* '!' */) {
	    this.pattern = this.pattern.slice(1);
	    return true;
	  }
	  return false;
	};

	/**
	 * Expand braces in the given glob pattern.
	 *
	 * We only need to use the [braces] lib when
	 * patterns are nested.
	 */

	Glob.prototype.braces = function() {
	  if (this.options.nobraces !== true && this.options.nobrace !== true) {
	    // naive/fast check for imbalanced characters
	    var a = this.pattern.match(/[\{\(\[]/g);
	    var b = this.pattern.match(/[\}\)\]]/g);

	    // if imbalanced, don't optimize the pattern
	    if (a && b && (a.length !== b.length)) {
	      this.options.makeRe = false;
	    }

	    // expand brace patterns and join the resulting array
	    var expanded = utils.braces(this.pattern, this.options);
	    this.pattern = expanded.join('|');
	  }
	};

	/**
	 * Expand bracket expressions in `glob.pattern`
	 */

	Glob.prototype.brackets = function() {
	  if (this.options.nobrackets !== true) {
	    this.pattern = utils.brackets(this.pattern);
	  }
	};

	/**
	 * Expand bracket expressions in `glob.pattern`
	 */

	Glob.prototype.extglob = function() {
	  if (this.options.noextglob === true) return;

	  if (utils.isExtglob(this.pattern)) {
	    this.pattern = utils.extglob(this.pattern, {escape: true});
	  }
	};

	/**
	 * Parse the given pattern
	 */

	Glob.prototype.parse = function(pattern) {
	  this.tokens = utils.parseGlob(pattern || this.pattern, true);
	  return this.tokens;
	};

	/**
	 * Replace `a` with `b`. Also tracks the change before and
	 * after each replacement. This is disabled by default, but
	 * can be enabled by setting `options.track` to true.
	 *
	 * Also, when the pattern is a string, `.split()` is used,
	 * because it's much faster than replace.
	 *
	 * @param  {RegExp|String} `a`
	 * @param  {String} `b`
	 * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.
	 * @return {String}
	 */

	Glob.prototype._replace = function(a, b, escape) {
	  this.track('before (find): "' + a + '" (replace with): "' + b + '"');
	  if (escape) b = esc(b);
	  if (a && b && typeof a === 'string') {
	    this.pattern = this.pattern.split(a).join(b);
	  } else {
	    this.pattern = this.pattern.replace(a, b);
	  }
	  this.track('after');
	};

	/**
	 * Escape special characters in the given string.
	 *
	 * @param  {String} `str` Glob pattern
	 * @return {String}
	 */

	Glob.prototype.escape = function(str) {
	  this.track('before escape: ');
	  var re = /["\\](['"]?[^"'\\]['"]?)/g;

	  this.pattern = str.replace(re, function($0, $1) {
	    var o = chars.ESC;
	    var ch = o && o[$1];
	    if (ch) {
	      return ch;
	    }
	    if (/[a-z]/i.test($0)) {
	      return $0.split('\\').join('');
	    }
	    return $0;
	  });

	  this.track('after escape: ');
	};

	/**
	 * Unescape special characters in the given string.
	 *
	 * @param  {String} `str`
	 * @return {String}
	 */

	Glob.prototype.unescape = function(str) {
	  var re = /__([A-Z]+)_([A-Z]+)__/g;
	  this.pattern = str.replace(re, function($0, $1) {
	    return chars[$1][$0];
	  });
	  this.pattern = unesc(this.pattern);
	};

	/**
	 * Escape/unescape utils
	 */

	function esc(str) {
	  str = str.split('?').join('%~');
	  str = str.split('*').join('%%');
	  return str;
	}

	function unesc(str) {
	  str = str.split('%~').join('?');
	  str = str.split('%%').join('*');
	  return str;
	}


/***/ },
/* 307 */
/***/ function(module, exports) {

	'use strict';

	var chars = {}, unesc, temp;

	function reverse(object, prepender) {
	  return Object.keys(object).reduce(function(reversed, key) {
	    var newKey = prepender ? prepender + key : key; // Optionally prepend a string to key.
	    reversed[object[key]] = newKey; // Swap key and value.
	    return reversed; // Return the result.
	  }, {});
	}

	/**
	 * Regex for common characters
	 */

	chars.escapeRegex = {
	  '?': /\?/g,
	  '@': /\@/g,
	  '!': /\!/g,
	  '+': /\+/g,
	  '*': /\*/g,
	  '(': /\(/g,
	  ')': /\)/g,
	  '[': /\[/g,
	  ']': /\]/g
	};

	/**
	 * Escape characters
	 */

	chars.ESC = {
	  '?': '__UNESC_QMRK__',
	  '@': '__UNESC_AMPE__',
	  '!': '__UNESC_EXCL__',
	  '+': '__UNESC_PLUS__',
	  '*': '__UNESC_STAR__',
	  ',': '__UNESC_COMMA__',
	  '(': '__UNESC_LTPAREN__',
	  ')': '__UNESC_RTPAREN__',
	  '[': '__UNESC_LTBRACK__',
	  ']': '__UNESC_RTBRACK__'
	};

	/**
	 * Unescape characters
	 */

	chars.UNESC = unesc || (unesc = reverse(chars.ESC, '\\'));

	chars.ESC_TEMP = {
	  '?': '__TEMP_QMRK__',
	  '@': '__TEMP_AMPE__',
	  '!': '__TEMP_EXCL__',
	  '*': '__TEMP_STAR__',
	  '+': '__TEMP_PLUS__',
	  ',': '__TEMP_COMMA__',
	  '(': '__TEMP_LTPAREN__',
	  ')': '__TEMP_RTPAREN__',
	  '[': '__TEMP_LTBRACK__',
	  ']': '__TEMP_RTBRACK__'
	};

	chars.TEMP = temp || (temp = reverse(chars.ESC_TEMP));

	module.exports = chars;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	function posix(path) {
		return path.charAt(0) === '/';
	}

	function win32(path) {
		// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = Boolean(device && device.charAt(1) !== ':');

		// UNC paths are always absolute
		return Boolean(result[2] || isUnc);
	}

	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 309 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var sysPath = __webpack_require__(36);
	var readdirp = __webpack_require__(311);
	var isBinaryPath = __webpack_require__(353);

	// fs.watch helpers

	// object to hold per-process fs.watch instances
	// (may be shared across chokidar FSWatcher instances)
	var FsWatchInstances = Object.create(null);

	// Private function: Instantiates the fs.watch interface

	// * path       - string, path to be watched
	// * options    - object, options to be passed to fs.watch
	// * listener   - function, main event handler
	// * errHandler - function, handler which emits info about errors
	// * emitRaw    - function, handler which emits raw event data

	// Returns new fsevents instance
	function createFsWatchInstance(path, options, listener, errHandler, emitRaw) {
	  var handleEvent = function(rawEvent, evPath) {
	    listener(path);
	    emitRaw(rawEvent, evPath, {watchedPath: path});

	    // emit based on events occuring for files from a directory's watcher in
	    // case the file's watcher misses it (and rely on throttling to de-dupe)
	    if (evPath && path !== evPath) {
	      fsWatchBroadcast(
	        sysPath.resolve(path, evPath), 'listeners', sysPath.join(path, evPath)
	      );
	    }
	  };
	  try {
	    return fs.watch(path, options, handleEvent);
	  } catch (error) {
	    errHandler(error);
	  }
	}

	// Private function: Helper for passing fs.watch event data to a
	// collection of listeners

	// * fullPath   - string, absolute path bound to the fs.watch instance
	// * type       - string, listener type
	// * val[1..3]  - arguments to be passed to listeners

	// Returns nothing
	function fsWatchBroadcast(fullPath, type, val1, val2, val3) {
	  if (!FsWatchInstances[fullPath]) return;
	  FsWatchInstances[fullPath][type].forEach(function(listener) {
	    listener(val1, val2, val3);
	  });
	}

	// Private function: Instantiates the fs.watch interface or binds listeners
	// to an existing one covering the same file system entry

	// * path       - string, path to be watched
	// * fullPath   - string, absolute path
	// * options    - object, options to be passed to fs.watch
	// * handlers   - object, container for event listener functions

	// Returns close function
	function setFsWatchListener(path, fullPath, options, handlers) {
	  var listener = handlers.listener;
	  var errHandler = handlers.errHandler;
	  var rawEmitter = handlers.rawEmitter;
	  var container = FsWatchInstances[fullPath];
	  var watcher;
	  if (!options.persistent) {
	    watcher = createFsWatchInstance(
	      path, options, listener, errHandler, rawEmitter
	    );
	    return watcher.close.bind(watcher);
	  }
	  if (!container) {
	    watcher = createFsWatchInstance(
	      path,
	      options,
	      fsWatchBroadcast.bind(null, fullPath, 'listeners'),
	      errHandler, // no need to use broadcast here
	      fsWatchBroadcast.bind(null, fullPath, 'rawEmitters')
	    );
	    if (!watcher) return;
	    var broadcastErr = fsWatchBroadcast.bind(null, fullPath, 'errHandlers');
	    watcher.on('error', function(error) {
	      // Workaround for https://github.com/joyent/node/issues/4337
	      if (process.platform === 'win32' && error.code === 'EPERM') {
	        fs.open(path, 'r', function(err, fd) {
	          if (fd) fs.close(fd);
	          if (!err) broadcastErr(error);
	        });
	      } else {
	        broadcastErr(error);
	      }
	    });
	    container = FsWatchInstances[fullPath] = {
	      listeners: [listener],
	      errHandlers: [errHandler],
	      rawEmitters: [rawEmitter],
	      watcher: watcher
	    };
	  } else {
	    container.listeners.push(listener);
	    container.errHandlers.push(errHandler);
	    container.rawEmitters.push(rawEmitter);
	  }
	  var listenerIndex = container.listeners.length - 1;

	  // removes this instance's listeners and closes the underlying fs.watch
	  // instance if there are no more listeners left
	  return function close() {
	    delete container.listeners[listenerIndex];
	    delete container.errHandlers[listenerIndex];
	    delete container.rawEmitters[listenerIndex];
	    if (!Object.keys(container.listeners).length) {
	      container.watcher.close();
	      delete FsWatchInstances[fullPath];
	    }
	  };
	}

	// fs.watchFile helpers

	// object to hold per-process fs.watchFile instances
	// (may be shared across chokidar FSWatcher instances)
	var FsWatchFileInstances = Object.create(null);

	// Private function: Instantiates the fs.watchFile interface or binds listeners
	// to an existing one covering the same file system entry

	// * path       - string, path to be watched
	// * fullPath   - string, absolute path
	// * options    - object, options to be passed to fs.watchFile
	// * handlers   - object, container for event listener functions

	// Returns close function
	function setFsWatchFileListener(path, fullPath, options, handlers) {
	  var listener = handlers.listener;
	  var rawEmitter = handlers.rawEmitter;
	  var container = FsWatchFileInstances[fullPath];
	  var listeners = [];
	  var rawEmitters = [];
	  if (
	    container && (
	      container.options.persistent < options.persistent ||
	      container.options.interval > options.interval
	    )
	  ) {
	    // "Upgrade" the watcher to persistence or a quicker interval.
	    // This creates some unlikely edge case issues if the user mixes
	    // settings in a very weird way, but solving for those cases
	    // doesn't seem worthwhile for the added complexity.
	    listeners = container.listeners;
	    rawEmitters = container.rawEmitters;
	    fs.unwatchFile(fullPath);
	    container = false;
	  }
	  if (!container) {
	    listeners.push(listener);
	    rawEmitters.push(rawEmitter);
	    container = FsWatchFileInstances[fullPath] = {
	      listeners: listeners,
	      rawEmitters: rawEmitters,
	      options: options,
	      watcher: fs.watchFile(fullPath, options, function(curr, prev) {
	        container.rawEmitters.forEach(function(rawEmitter) {
	          rawEmitter('change', fullPath, {curr: curr, prev: prev});
	        });
	        var currmtime = curr.mtime.getTime();
	        if (curr.size !== prev.size || currmtime > prev.mtime.getTime() || currmtime === 0) {
	          container.listeners.forEach(function(listener) {
	            listener(path, curr);
	          });
	        }
	      })
	    };
	  } else {
	    container.listeners.push(listener);
	    container.rawEmitters.push(rawEmitter);
	  }
	  var listenerIndex = container.listeners.length - 1;

	  // removes this instance's listeners and closes the underlying fs.watchFile
	  // instance if there are no more listeners left
	  return function close() {
	    delete container.listeners[listenerIndex];
	    delete container.rawEmitters[listenerIndex];
	    if (!Object.keys(container.listeners).length) {
	      fs.unwatchFile(fullPath);
	      delete FsWatchFileInstances[fullPath];
	    }
	  };
	}

	// fake constructor for attaching nodefs-specific prototype methods that
	// will be copied to FSWatcher's prototype
	function NodeFsHandler() {}

	// Private method: Watch file for changes with fs.watchFile or fs.watch.

	// * path     - string, path to file or directory.
	// * listener - function, to be executed on fs change.

	// Returns close function for the watcher instance
	NodeFsHandler.prototype._watchWithNodeFs =
	function(path, listener) {
	  var directory = sysPath.dirname(path);
	  var basename = sysPath.basename(path);
	  var parent = this._getWatchedDir(directory);
	  parent.add(basename);
	  var absolutePath = sysPath.resolve(path);
	  var options = {persistent: this.options.persistent};
	  if (!listener) listener = Function.prototype; // empty function

	  var closer;
	  if (this.options.usePolling) {
	    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ?
	      this.options.binaryInterval : this.options.interval;
	    closer = setFsWatchFileListener(path, absolutePath, options, {
	      listener: listener,
	      rawEmitter: this.emit.bind(this, 'raw')
	    });
	  } else {
	    closer = setFsWatchListener(path, absolutePath, options, {
	      listener: listener,
	      errHandler: this._handleError.bind(this),
	      rawEmitter: this.emit.bind(this, 'raw')
	    });
	  }
	  return closer;
	};

	// Private method: Watch a file and emit add event if warranted

	// * file       - string, the file's path
	// * stats      - object, result of fs.stat
	// * initialAdd - boolean, was the file added at watch instantiation?
	// * callback   - function, called when done processing as a newly seen file

	// Returns close function for the watcher instance
	NodeFsHandler.prototype._handleFile =
	function(file, stats, initialAdd, callback) {
	  var dirname = sysPath.dirname(file);
	  var basename = sysPath.basename(file);
	  var parent = this._getWatchedDir(dirname);

	  // if the file is already being watched, do nothing
	  if (parent.has(basename)) return callback();

	  // kick off the watcher
	  var closer = this._watchWithNodeFs(file, function(path, newStats) {
	    if (!this._throttle('watch', file, 5)) return;
	    if (!newStats || newStats && newStats.mtime.getTime() === 0) {
	      fs.stat(file, function(error, newStats) {
	        // Fix issues where mtime is null but file is still present
	        if (error) {
	          this._remove(dirname, basename);
	        } else {
	          this._emit('change', file, newStats);
	        }
	      }.bind(this));
	    // add is about to be emitted if file not already tracked in parent
	    } else if (parent.has(basename)) {
	      this._emit('change', file, newStats);
	    }
	  }.bind(this));

	  // emit an add event if we're supposed to
	  if (!(initialAdd && this.options.ignoreInitial)) {
	    if (!this._throttle('add', file, 0)) return;
	    this._emit('add', file, stats);
	  }

	  if (callback) callback();
	  return closer;
	};

	// Private method: Handle symlinks encountered while reading a dir

	// * entry      - object, entry object returned by readdirp
	// * directory  - string, path of the directory being read
	// * path       - string, path of this item
	// * item       - string, basename of this item

	// Returns true if no more processing is needed for this entry.
	NodeFsHandler.prototype._handleSymlink =
	function(entry, directory, path, item) {
	  var full = entry.fullPath;
	  var dir = this._getWatchedDir(directory);

	  if (!this.options.followSymlinks) {
	    // watch symlink directly (don't follow) and detect changes
	    this._readyCount++;
	    fs.realpath(path, function(error, linkPath) {
	      if (dir.has(item)) {
	        if (this._symlinkPaths[full] !== linkPath) {
	          this._symlinkPaths[full] = linkPath;
	          this._emit('change', path, entry.stat);
	        }
	      } else {
	        dir.add(item);
	        this._symlinkPaths[full] = linkPath;
	        this._emit('add', path, entry.stat);
	      }
	      this._emitReady();
	    }.bind(this));
	    return true;
	  }

	  // don't follow the same symlink more than once
	  if (this._symlinkPaths[full]) return true;
	  else this._symlinkPaths[full] = true;
	};

	// Private method: Read directory to add / remove files from `@watched` list
	// and re-read it on change.

	// * dir        - string, fs path.
	// * stats      - object, result of fs.stat
	// * initialAdd - boolean, was the file added at watch instantiation?
	// * depth      - int, depth relative to user-supplied path
	// * target     - string, child path actually targeted for watch
	// * wh         - object, common watch helpers for this path
	// * callback   - function, called when dir scan is complete

	// Returns close function for the watcher instance
	NodeFsHandler.prototype._handleDir =
	function(dir, stats, initialAdd, depth, target, wh, callback) {
	  var parentDir = this._getWatchedDir(sysPath.dirname(dir));
	  var tracked = parentDir.has(sysPath.basename(dir));
	  if (!(initialAdd && this.options.ignoreInitial) && !target && !tracked) {
	    if (!wh.hasGlob || wh.globFilter(dir)) this._emit('addDir', dir, stats);
	  }

	  // ensure dir is tracked (harmless if redundant)
	  parentDir.add(sysPath.basename(dir));
	  this._getWatchedDir(dir);

	  var read = function(directory, initialAdd, done) {
	    // Normalize the directory name on Windows
	    directory = sysPath.join(directory, '');

	    if (!wh.hasGlob) {
	      var throttler = this._throttle('readdir', directory, 1000);
	      if (!throttler) return;
	    }

	    var previous = this._getWatchedDir(wh.path);
	    var current = [];

	    readdirp({
	      root: directory,
	      entryType: 'all',
	      fileFilter: wh.filterPath,
	      directoryFilter: wh.filterDir,
	      depth: 0,
	      lstat: true
	    }).on('data', function(entry) {
	      var item = entry.path;
	      var path = sysPath.join(directory, item);
	      current.push(item);

	      if (entry.stat.isSymbolicLink() &&
	        this._handleSymlink(entry, directory, path, item)) return;

	      // Files that present in current directory snapshot
	      // but absent in previous are added to watch list and
	      // emit `add` event.
	      if (item === target || !target && !previous.has(item)) {
	        this._readyCount++;

	        // ensure relativeness of path is preserved in case of watcher reuse
	        path = sysPath.join(dir, sysPath.relative(dir, path));

	        this._addToNodeFs(path, initialAdd, wh, depth + 1);
	      }
	    }.bind(this)).on('end', function() {
	      if (throttler) throttler.clear();
	      if (done) done();

	      // Files that absent in current directory snapshot
	      // but present in previous emit `remove` event
	      // and are removed from @watched[directory].
	      previous.children().filter(function(item) {
	        return item !== directory &&
	          current.indexOf(item) === -1 &&
	          // in case of intersecting globs;
	          // a path may have been filtered out of this readdir, but
	          // shouldn't be removed because it matches a different glob
	          (!wh.hasGlob || wh.filterPath({
	            fullPath: sysPath.resolve(directory, item)
	          }));
	      }).forEach(function(item) {
	        this._remove(directory, item);
	      }, this);
	    }.bind(this)).on('error', this._handleError.bind(this));
	  }.bind(this);

	  var closer;

	  if (this.options.depth == null || depth <= this.options.depth) {
	    if (!target) read(dir, initialAdd, callback);
	    closer = this._watchWithNodeFs(dir, function(dirPath, stats) {
	      // if current directory is removed, do nothing
	      if (stats && stats.mtime.getTime() === 0) return;

	      read(dirPath, false);
	    });
	  } else {
	    callback();
	  }
	  return closer;
	};

	// Private method: Handle added file, directory, or glob pattern.
	// Delegates call to _handleFile / _handleDir after checks.

	// * path       - string, path to file or directory.
	// * initialAdd - boolean, was the file added at watch instantiation?
	// * depth      - int, depth relative to user-supplied path
	// * target     - string, child path actually targeted for watch
	// * callback   - function, indicates whether the path was found or not

	// Returns nothing
	NodeFsHandler.prototype._addToNodeFs =
	function(path, initialAdd, priorWh, depth, target, callback) {
	  if (!callback) callback = Function.prototype;
	  var ready = this._emitReady;
	  if (this._isIgnored(path) || this.closed) {
	    ready();
	    return callback(null, false);
	  }

	  var wh = this._getWatchHelpers(path, depth);
	  if (!wh.hasGlob && priorWh) {
	    wh.hasGlob = priorWh.hasGlob;
	    wh.globFilter = priorWh.globFilter;
	    wh.filterPath = priorWh.filterPath;
	    wh.filterDir = priorWh.filterDir;
	  }

	  // evaluate what is at the path we're being asked to watch
	  fs[wh.statMethod](wh.watchPath, function(error, stats) {
	    if (this._handleError(error)) return callback(null, path);
	    if (this._isIgnored(wh.watchPath, stats)) {
	      ready();
	      return callback(null, false);
	    }

	    var initDir = function(dir, target) {
	      return this._handleDir(dir, stats, initialAdd, depth, target, wh, ready);
	    }.bind(this);

	    var closer;
	    if (stats.isDirectory()) {
	      closer = initDir(wh.watchPath, target);
	    } else if (stats.isSymbolicLink()) {
	      var parent = sysPath.dirname(wh.watchPath);
	      this._getWatchedDir(parent).add(wh.watchPath);
	      this._emit('add', wh.watchPath, stats);
	      closer = initDir(parent, path);

	      // preserve this symlink's target path
	      fs.realpath(path, function(error, targetPath) {
	        this._symlinkPaths[sysPath.resolve(path)] = targetPath;
	        ready();
	      }.bind(this));
	    } else {
	      closer = this._handleFile(wh.watchPath, stats, initialAdd, ready);
	    }

	    if (closer) this._closers[path] = closer;
	    callback(null, false);
	  }.bind(this));
	};

	module.exports = NodeFsHandler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var fs        =  __webpack_require__(312)
	  , path      =  __webpack_require__(36)
	  , minimatch =  __webpack_require__(333)
	  , toString  =  Object.prototype.toString
	  , si        =  __webpack_require__(337)
	  ;


	// Standard helpers
	function isFunction (obj) {
	  return toString.call(obj) === '[object Function]';
	}

	function isString (obj) {
	  return toString.call(obj) === '[object String]';
	}

	function isRegExp (obj) {
	  return toString.call(obj) === '[object RegExp]';
	}

	function isUndefined (obj) {
	  return obj === void 0;
	}

	/** 
	 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
	 * @param { Object }   opts     Options to specify root (start directory), filters and recursion depth
	 * @param { function } callback1  When callback2 is given calls back for each processed file - function (fileInfo) { ... },
	 *                                when callback2 is not given, it behaves like explained in callback2
	 * @param { function } callback2  Calls back once all files have been processed with an array of errors and file infos
	 *                                function (err, fileInfos) { ... }
	 */
	function readdir(opts, callback1, callback2) {
	  var stream
	    , handleError
	    , handleFatalError
	    , pending = 0
	    , errors = []
	    , readdirResult = {
	        directories: []
	      , files: []
	    }
	    , fileProcessed
	    , allProcessed
	    , realRoot
	    , aborted = false
	    , paused = false
	    ;

	  // If no callbacks were given we will use a streaming interface
	  if (isUndefined(callback1)) {
	    var api          =  __webpack_require__(338)();
	    stream           =  api.stream;
	    callback1        =  api.processEntry;
	    callback2        =  api.done;
	    handleError      =  api.handleError;
	    handleFatalError =  api.handleFatalError;

	    stream.on('close', function () { aborted = true; });
	    stream.on('pause', function () { paused = true; });
	    stream.on('resume', function () { paused = false; });
	  } else {
	    handleError      =  function (err) { errors.push(err); };
	    handleFatalError =  function (err) {
	      handleError(err);
	      allProcessed(errors, null);
	    };
	  }

	  if (isUndefined(opts)){
	    handleFatalError(new Error (
	      'Need to pass at least one argument: opts! \n' +
	      'https://github.com/thlorenz/readdirp#options'
	      )
	    );
	    return stream;
	  }

	  opts.root            =  opts.root            || '.';
	  opts.fileFilter      =  opts.fileFilter      || function() { return true; };
	  opts.directoryFilter =  opts.directoryFilter || function() { return true; };
	  opts.depth           =  typeof opts.depth === 'undefined' ? 999999999 : opts.depth;
	  opts.entryType       =  opts.entryType       || 'files';

	  var statfn = opts.lstat === true ? fs.lstat.bind(fs) : fs.stat.bind(fs);

	  if (isUndefined(callback2)) {
	    fileProcessed = function() { };
	    allProcessed = callback1;
	  } else {
	    fileProcessed = callback1;
	    allProcessed = callback2;
	  }

	  function normalizeFilter (filter) {

	    if (isUndefined(filter)) return undefined;

	    function isNegated (filters) {

	      function negated(f) { 
	        return f.indexOf('!') === 0; 
	      }

	      var some = filters.some(negated);
	      if (!some) {
	        return false;
	      } else {
	        if (filters.every(negated)) {
	          return true;
	        } else {
	          // if we detect illegal filters, bail out immediately
	          throw new Error(
	            'Cannot mix negated with non negated glob filters: ' + filters + '\n' +
	            'https://github.com/thlorenz/readdirp#filters'
	          );
	        }
	      }
	    }

	    // Turn all filters into a function
	    if (isFunction(filter)) {

	      return filter;

	    } else if (isString(filter)) {

	      return function (entryInfo) {
	        return minimatch(entryInfo.name, filter.trim());
	      };

	    } else if (filter && Array.isArray(filter)) {

	      if (filter) filter = filter.map(function (f) {
	        return f.trim();
	      });

	      return isNegated(filter) ?
	        // use AND to concat multiple negated filters
	        function (entryInfo) {
	          return filter.every(function (f) {
	            return minimatch(entryInfo.name, f);
	          });
	        }
	        :
	        // use OR to concat multiple inclusive filters
	        function (entryInfo) {
	          return filter.some(function (f) {
	            return minimatch(entryInfo.name, f);
	          });
	        };
	    }
	  }

	  function processDir(currentDir, entries, callProcessed) {
	    if (aborted) return;
	    var total = entries.length
	      , processed = 0
	      , entryInfos = []
	      ;

	    fs.realpath(currentDir, function(err, realCurrentDir) {
	      if (aborted) return;
	      if (err) {
	        handleError(err);
	        callProcessed(entryInfos);
	        return;
	      }

	      var relDir = path.relative(realRoot, realCurrentDir);

	      if (entries.length === 0) {
	        callProcessed([]);
	      } else {
	        entries.forEach(function (entry) { 

	          var fullPath = path.join(realCurrentDir, entry)
	            , relPath  = path.join(relDir, entry);

	          statfn(fullPath, function (err, stat) {
	            if (err) {
	              handleError(err);
	            } else {
	              entryInfos.push({
	                  name          :  entry
	                , path          :  relPath   // relative to root
	                , fullPath      :  fullPath

	                , parentDir     :  relDir    // relative to root
	                , fullParentDir :  realCurrentDir

	                , stat          :  stat
	              });
	            }
	            processed++;
	            if (processed === total) callProcessed(entryInfos);
	          });
	        });
	      }
	    });
	  }

	  function readdirRec(currentDir, depth, callCurrentDirProcessed) {
	    var args = arguments;
	    if (aborted) return;
	    if (paused) {
	      si(function () {
	        readdirRec.apply(null, args);
	      })
	      return;
	    } 

	    fs.readdir(currentDir, function (err, entries) {
	      if (err) {
	        handleError(err);
	        callCurrentDirProcessed();
	        return;
	      }

	      processDir(currentDir, entries, function(entryInfos) {

	        var subdirs = entryInfos
	          .filter(function (ei) { return ei.stat.isDirectory() && opts.directoryFilter(ei); });

	        subdirs.forEach(function (di) {
	          if(opts.entryType === 'directories' || opts.entryType === 'both' || opts.entryType === 'all') {
	            fileProcessed(di);
	          }
	          readdirResult.directories.push(di); 
	        });

	        entryInfos
	          .filter(function(ei) {
	            var isCorrectType = opts.entryType === 'all' ?
	              !ei.stat.isDirectory() : ei.stat.isFile() || ei.stat.isSymbolicLink();
	            return isCorrectType && opts.fileFilter(ei);
	          })
	          .forEach(function (fi) {
	            if(opts.entryType === 'files' || opts.entryType === 'both' || opts.entryType === 'all') {
	              fileProcessed(fi);
	            }
	            readdirResult.files.push(fi); 
	          });

	        var pendingSubdirs = subdirs.length;

	        // Be done if no more subfolders exist or we reached the maximum desired depth
	        if(pendingSubdirs === 0 || depth === opts.depth) {
	          callCurrentDirProcessed();
	        } else {
	          // recurse into subdirs, keeping track of which ones are done 
	          // and call back once all are processed
	          subdirs.forEach(function (subdir) {
	            readdirRec(subdir.fullPath, depth + 1, function () {
	              pendingSubdirs = pendingSubdirs - 1;
	              if(pendingSubdirs === 0) { 
	                callCurrentDirProcessed();
	              }
	            });
	          });
	        }
	      });
	    });
	  }

	  // Validate and normalize filters
	  try {
	    opts.fileFilter = normalizeFilter(opts.fileFilter);
	    opts.directoryFilter = normalizeFilter(opts.directoryFilter);
	  } catch (err) {
	    // if we detect illegal filters, bail out immediately
	    handleFatalError(err);
	    return stream;
	  }

	  // If filters were valid get on with the show
	  fs.realpath(opts.root, function(err, res) {
	    if (err) {
	      handleFatalError(err);
	      return stream;
	    }

	    realRoot = res;
	    readdirRec(opts.root, 0, function () { 
	      // All errors are collected into the errors array
	      if (errors.length > 0) {
	        allProcessed(errors, readdirResult); 
	      } else {
	        allProcessed(null, readdirResult);
	      }
	    });
	  });

	  return stream;
	}

	module.exports = readdir;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var polyfills = __webpack_require__(313)
	var legacy = __webpack_require__(316)
	var queue = []

	var util = __webpack_require__(95)

	function noop () {}

	var debug = noop
	if (util.debuglog)
	  debug = util.debuglog('gfs4')
	else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
	  debug = function() {
	    var m = util.format.apply(util, arguments)
	    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
	    console.error(m)
	  }

	if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
	  process.on('exit', function() {
	    debug(queue)
	    __webpack_require__(332).equal(queue.length, 0)
	  })
	}

	module.exports = patch(__webpack_require__(314))
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
	  module.exports = patch(fs)
	}

	// Always patch fs.close/closeSync, because we want to
	// retry() whenever a close happens *anywhere* in the program.
	// This is essential when multiple graceful-fs instances are
	// in play at the same time.
	module.exports.close =
	fs.close = (function (fs$close) { return function (fd, cb) {
	  return fs$close.call(fs, fd, function (err) {
	    if (!err)
	      retry()

	    if (typeof cb === 'function')
	      cb.apply(this, arguments)
	  })
	}})(fs.close)

	module.exports.closeSync =
	fs.closeSync = (function (fs$closeSync) { return function (fd) {
	  // Note that graceful-fs also retries when fs.closeSync() fails.
	  // Looks like a bug to me, although it's probably a harmless one.
	  var rval = fs$closeSync.apply(fs, arguments)
	  retry()
	  return rval
	}})(fs.closeSync)

	function patch (fs) {
	  // Everything that references the open() function needs to be in here
	  polyfills(fs)
	  fs.gracefulify = patch
	  fs.FileReadStream = ReadStream;  // Legacy name.
	  fs.FileWriteStream = WriteStream;  // Legacy name.
	  fs.createReadStream = createReadStream
	  fs.createWriteStream = createWriteStream
	  var fs$readFile = fs.readFile
	  fs.readFile = readFile
	  function readFile (path, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null

	    return go$readFile(path, options, cb)

	    function go$readFile (path, options, cb) {
	      return fs$readFile(path, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$readFile, [path, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  var fs$writeFile = fs.writeFile
	  fs.writeFile = writeFile
	  function writeFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null

	    return go$writeFile(path, data, options, cb)

	    function go$writeFile (path, data, options, cb) {
	      return fs$writeFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$writeFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  var fs$appendFile = fs.appendFile
	  if (fs$appendFile)
	    fs.appendFile = appendFile
	  function appendFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null

	    return go$appendFile(path, data, options, cb)

	    function go$appendFile (path, data, options, cb) {
	      return fs$appendFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$appendFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  var fs$readdir = fs.readdir
	  fs.readdir = readdir
	  function readdir (path, options, cb) {
	    var args = [path]
	    if (typeof options !== 'function') {
	      args.push(options)
	    } else {
	      cb = options
	    }
	    args.push(go$readdir$cb)

	    return go$readdir(args)

	    function go$readdir$cb (err, files) {
	      if (files && files.sort)
	        files.sort()

	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	        enqueue([go$readdir, [args]])
	      else {
	        if (typeof cb === 'function')
	          cb.apply(this, arguments)
	        retry()
	      }
	    }
	  }

	  function go$readdir (args) {
	    return fs$readdir.apply(fs, args)
	  }

	  if (process.version.substr(0, 4) === 'v0.8') {
	    var legStreams = legacy(fs)
	    ReadStream = legStreams.ReadStream
	    WriteStream = legStreams.WriteStream
	  }

	  var fs$ReadStream = fs.ReadStream
	  ReadStream.prototype = Object.create(fs$ReadStream.prototype)
	  ReadStream.prototype.open = ReadStream$open

	  var fs$WriteStream = fs.WriteStream
	  WriteStream.prototype = Object.create(fs$WriteStream.prototype)
	  WriteStream.prototype.open = WriteStream$open

	  fs.ReadStream = ReadStream
	  fs.WriteStream = WriteStream

	  function ReadStream (path, options) {
	    if (this instanceof ReadStream)
	      return fs$ReadStream.apply(this, arguments), this
	    else
	      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
	  }

	  function ReadStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        if (that.autoClose)
	          that.destroy()

	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	        that.read()
	      }
	    })
	  }

	  function WriteStream (path, options) {
	    if (this instanceof WriteStream)
	      return fs$WriteStream.apply(this, arguments), this
	    else
	      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
	  }

	  function WriteStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        that.destroy()
	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	      }
	    })
	  }

	  function createReadStream (path, options) {
	    return new ReadStream(path, options)
	  }

	  function createWriteStream (path, options) {
	    return new WriteStream(path, options)
	  }

	  var fs$open = fs.open
	  fs.open = open
	  function open (path, flags, mode, cb) {
	    if (typeof mode === 'function')
	      cb = mode, mode = null

	    return go$open(path, flags, mode, cb)

	    function go$open (path, flags, mode, cb) {
	      return fs$open(path, flags, mode, function (err, fd) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$open, [path, flags, mode, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }

	  return fs
	}

	function enqueue (elem) {
	  debug('ENQUEUE', elem[0].name, elem[1])
	  queue.push(elem)
	}

	function retry () {
	  var elem = queue.shift()
	  if (elem) {
	    debug('RETRY', elem[0].name, elem[1])
	    elem[0].apply(null, elem[1])
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var fs = __webpack_require__(314)
	var constants = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"constants\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))

	var origCwd = process.cwd
	var cwd = null

	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

	process.cwd = function() {
	  if (!cwd)
	    cwd = origCwd.call(process)
	  return cwd
	}
	try {
	  process.cwd()
	} catch (er) {}

	var chdir = process.chdir
	process.chdir = function(d) {
	  cwd = null
	  chdir.call(process, d)
	}

	module.exports = patch

	function patch (fs) {
	  // (re-)implement some things that are known busted or missing.

	  // lchmod, broken prior to 0.6.2
	  // back-port the fix here.
	  if (constants.hasOwnProperty('O_SYMLINK') &&
	      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
	    patchLchmod(fs)
	  }

	  // lutimes implementation, or no-op
	  if (!fs.lutimes) {
	    patchLutimes(fs)
	  }

	  // https://github.com/isaacs/node-graceful-fs/issues/4
	  // Chown should not fail on einval or eperm if non-root.
	  // It should not fail on enosys ever, as this just indicates
	  // that a fs doesn't support the intended operation.

	  fs.chown = chownFix(fs.chown)
	  fs.fchown = chownFix(fs.fchown)
	  fs.lchown = chownFix(fs.lchown)

	  fs.chmod = chmodFix(fs.chmod)
	  fs.fchmod = chmodFix(fs.fchmod)
	  fs.lchmod = chmodFix(fs.lchmod)

	  fs.chownSync = chownFixSync(fs.chownSync)
	  fs.fchownSync = chownFixSync(fs.fchownSync)
	  fs.lchownSync = chownFixSync(fs.lchownSync)

	  fs.chmodSync = chmodFixSync(fs.chmodSync)
	  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
	  fs.lchmodSync = chmodFixSync(fs.lchmodSync)

	  fs.stat = statFix(fs.stat)
	  fs.fstat = statFix(fs.fstat)
	  fs.lstat = statFix(fs.lstat)

	  fs.statSync = statFixSync(fs.statSync)
	  fs.fstatSync = statFixSync(fs.fstatSync)
	  fs.lstatSync = statFixSync(fs.lstatSync)

	  // if lchmod/lchown do not exist, then make them no-ops
	  if (!fs.lchmod) {
	    fs.lchmod = function (path, mode, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchmodSync = function () {}
	  }
	  if (!fs.lchown) {
	    fs.lchown = function (path, uid, gid, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchownSync = function () {}
	  }

	  // on Windows, A/V software can lock the directory, causing this
	  // to fail with an EACCES or EPERM if the directory contains newly
	  // created files.  Try again on failure, for up to 60 seconds.

	  // Set the timeout this long because some Windows Anti-Virus, such as Parity
	  // bit9, may lock files for up to a minute, causing npm package install
	  // failures. Also, take care to yield the scheduler. Windows scheduling gives
	  // CPU to a busy looping process, which can cause the program causing the lock
	  // contention to be starved of CPU by node, so the contention doesn't resolve.
	  if (platform === "win32") {
	    fs.rename = (function (fs$rename) { return function (from, to, cb) {
	      var start = Date.now()
	      var backoff = 0;
	      fs$rename(from, to, function CB (er) {
	        if (er
	            && (er.code === "EACCES" || er.code === "EPERM")
	            && Date.now() - start < 60000) {
	          setTimeout(function() {
	            fs.stat(to, function (stater, st) {
	              if (stater && stater.code === "ENOENT")
	                fs$rename(from, to, CB);
	              else
	                cb(er)
	            })
	          }, backoff)
	          if (backoff < 100)
	            backoff += 10;
	          return;
	        }
	        if (cb) cb(er)
	      })
	    }})(fs.rename)
	  }

	  // if read() returns EAGAIN, then just try it again.
	  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {
	    var callback
	    if (callback_ && typeof callback_ === 'function') {
	      var eagCounter = 0
	      callback = function (er, _, __) {
	        if (er && er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	        }
	        callback_.apply(this, arguments)
	      }
	    }
	    return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	  }})(fs.read)

	  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
	    var eagCounter = 0
	    while (true) {
	      try {
	        return fs$readSync.call(fs, fd, buffer, offset, length, position)
	      } catch (er) {
	        if (er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          continue
	        }
	        throw er
	      }
	    }
	  }})(fs.readSync)
	}

	function patchLchmod (fs) {
	  fs.lchmod = function (path, mode, callback) {
	    fs.open( path
	           , constants.O_WRONLY | constants.O_SYMLINK
	           , mode
	           , function (err, fd) {
	      if (err) {
	        if (callback) callback(err)
	        return
	      }
	      // prefer to return the chmod error, if one occurs,
	      // but still try to close, and report closing errors if they occur.
	      fs.fchmod(fd, mode, function (err) {
	        fs.close(fd, function(err2) {
	          if (callback) callback(err || err2)
	        })
	      })
	    })
	  }

	  fs.lchmodSync = function (path, mode) {
	    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)

	    // prefer to return the chmod error, if one occurs,
	    // but still try to close, and report closing errors if they occur.
	    var threw = true
	    var ret
	    try {
	      ret = fs.fchmodSync(fd, mode)
	      threw = false
	    } finally {
	      if (threw) {
	        try {
	          fs.closeSync(fd)
	        } catch (er) {}
	      } else {
	        fs.closeSync(fd)
	      }
	    }
	    return ret
	  }
	}

	function patchLutimes (fs) {
	  if (constants.hasOwnProperty("O_SYMLINK")) {
	    fs.lutimes = function (path, at, mt, cb) {
	      fs.open(path, constants.O_SYMLINK, function (er, fd) {
	        if (er) {
	          if (cb) cb(er)
	          return
	        }
	        fs.futimes(fd, at, mt, function (er) {
	          fs.close(fd, function (er2) {
	            if (cb) cb(er || er2)
	          })
	        })
	      })
	    }

	    fs.lutimesSync = function (path, at, mt) {
	      var fd = fs.openSync(path, constants.O_SYMLINK)
	      var ret
	      var threw = true
	      try {
	        ret = fs.futimesSync(fd, at, mt)
	        threw = false
	      } finally {
	        if (threw) {
	          try {
	            fs.closeSync(fd)
	          } catch (er) {}
	        } else {
	          fs.closeSync(fd)
	        }
	      }
	      return ret
	    }

	  } else {
	    fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
	    fs.lutimesSync = function () {}
	  }
	}

	function chmodFix (orig) {
	  if (!orig) return orig
	  return function (target, mode, cb) {
	    return orig.call(fs, target, mode, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}

	function chmodFixSync (orig) {
	  if (!orig) return orig
	  return function (target, mode) {
	    try {
	      return orig.call(fs, target, mode)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}


	function chownFix (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid, cb) {
	    return orig.call(fs, target, uid, gid, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}

	function chownFixSync (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid) {
	    try {
	      return orig.call(fs, target, uid, gid)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}


	function statFix (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target, cb) {
	    return orig.call(fs, target, function (er, stats) {
	      if (!stats) return cb.apply(this, arguments)
	      if (stats.uid < 0) stats.uid += 0x100000000
	      if (stats.gid < 0) stats.gid += 0x100000000
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}

	function statFixSync (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target) {
	    var stats = orig.call(fs, target)
	    if (stats.uid < 0) stats.uid += 0x100000000
	    if (stats.gid < 0) stats.gid += 0x100000000
	    return stats;
	  }
	}

	// ENOSYS means that the fs doesn't support the op. Just ignore
	// that, because it doesn't matter.
	//
	// if there's no getuid, or if getuid() is something other
	// than 0, and the error is EINVAL or EPERM, then just ignore
	// it.
	//
	// This specific case is a silent failure in cp, install, tar,
	// and most other unix tools that manage permissions.
	//
	// When running as root, or if other types of errors are
	// encountered, then it's strict.
	function chownErOk (er) {
	  if (!er)
	    return true

	  if (er.code === "ENOSYS")
	    return true

	  var nonroot = !process.getuid || process.getuid() !== 0
	  if (nonroot) {
	    if (er.code === "EINVAL" || er.code === "EPERM")
	      return true
	  }

	  return false
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))

	module.exports = clone(fs)

	function clone (obj) {
	  if (obj === null || typeof obj !== 'object')
	    return obj

	  if (obj instanceof Object)
	    var copy = { __proto__: obj.__proto__ }
	  else
	    var copy = Object.create(null)

	  Object.getOwnPropertyNames(obj).forEach(function (key) {
	    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
	  })

	  return copy
	}


/***/ },
/* 315 */,
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = __webpack_require__(317).Stream

	module.exports = legacy

	function legacy (fs) {
	  return {
	    ReadStream: ReadStream,
	    WriteStream: WriteStream
	  }

	  function ReadStream (path, options) {
	    if (!(this instanceof ReadStream)) return new ReadStream(path, options);

	    Stream.call(this);

	    var self = this;

	    this.path = path;
	    this.fd = null;
	    this.readable = true;
	    this.paused = false;

	    this.flags = 'r';
	    this.mode = 438; /*=0666*/
	    this.bufferSize = 64 * 1024;

	    options = options || {};

	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }

	    if (this.encoding) this.setEncoding(this.encoding);

	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.end === undefined) {
	        this.end = Infinity;
	      } else if ('number' !== typeof this.end) {
	        throw TypeError('end must be a Number');
	      }

	      if (this.start > this.end) {
	        throw new Error('start must be <= end');
	      }

	      this.pos = this.start;
	    }

	    if (this.fd !== null) {
	      process.nextTick(function() {
	        self._read();
	      });
	      return;
	    }

	    fs.open(this.path, this.flags, this.mode, function (err, fd) {
	      if (err) {
	        self.emit('error', err);
	        self.readable = false;
	        return;
	      }

	      self.fd = fd;
	      self.emit('open', fd);
	      self._read();
	    })
	  }

	  function WriteStream (path, options) {
	    if (!(this instanceof WriteStream)) return new WriteStream(path, options);

	    Stream.call(this);

	    this.path = path;
	    this.fd = null;
	    this.writable = true;

	    this.flags = 'w';
	    this.encoding = 'binary';
	    this.mode = 438; /*=0666*/
	    this.bytesWritten = 0;

	    options = options || {};

	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }

	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.start < 0) {
	        throw new Error('start must be >= zero');
	      }

	      this.pos = this.start;
	    }

	    this.busy = false;
	    this._queue = [];

	    if (this.fd === null) {
	      this._open = fs.open;
	      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
	      this.flush();
	    }
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(262).EventEmitter;
	var inherits = __webpack_require__(309);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(318);
	Stream.Writable = __webpack_require__(328);
	Stream.Duplex = __webpack_require__(329);
	Stream.Transform = __webpack_require__(330);
	Stream.PassThrough = __webpack_require__(331);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(319);
	exports.Stream = __webpack_require__(317);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(324);
	exports.Duplex = __webpack_require__(323);
	exports.Transform = __webpack_require__(326);
	exports.PassThrough = __webpack_require__(327);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(317);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(320);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(32).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(262).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(317);

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(322);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(323);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(325).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(323);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(325).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 320 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32).Buffer))

/***/ },
/* 322 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	var Readable = __webpack_require__(319);
	var Writable = __webpack_require__(324);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(32).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	var Stream = __webpack_require__(317);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(323);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(323);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(32).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(323);

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(326);

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(324)


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(323)


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(326)


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(327)


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(95);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = minimatch
	minimatch.Minimatch = Minimatch

	var path = { sep: '/' }
	try {
	  path = __webpack_require__(36)
	} catch (er) {}

	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = __webpack_require__(334)

	var plTypes = {
	  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
	  '?': { open: '(?:', close: ')?' },
	  '+': { open: '(?:', close: ')+' },
	  '*': { open: '(?:', close: ')*' },
	  '@': { open: '(?:', close: ')' }
	}

	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'

	// * => any number of characters
	var star = qmark + '*?'

	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')

	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}

	// normalizes slashes.
	var slashSplit = /\/+/

	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}

	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}

	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch

	  var orig = minimatch

	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }

	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }

	  return m
	}

	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}

	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}

	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }

	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''

	  return new Minimatch(pattern, options).match(p)
	}

	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}
	  pattern = pattern.trim()

	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }

	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false

	  // make the set of regexps etc.
	  this.make()
	}

	Minimatch.prototype.debug = function () {}

	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return

	  var pattern = this.pattern
	  var options = this.options

	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }

	  // step 1: figure out negation, etc.
	  this.parseNegate()

	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()

	  if (options.debug) this.debug = console.error

	  this.debug(this.pattern, set)

	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })

	  this.debug(this.pattern, set)

	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)

	  this.debug(this.pattern, set)

	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })

	  this.debug(this.pattern, set)

	  this.set = set
	}

	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0

	  if (options.nonegate) return

	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }

	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}

	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}

	Minimatch.prototype.braceExpand = braceExpand

	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }

	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern

	  if (typeof pattern === 'undefined') {
	    throw new TypeError('undefined pattern')
	  }

	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }

	  return expand(pattern)
	}

	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  if (pattern.length > 1024 * 64) {
	    throw new TypeError('pattern is too long')
	  }

	  var options = this.options

	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''

	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this

	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }

	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)

	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }

	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false

	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue

	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }

	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue

	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }

	        if (!stateChar) {
	          re += '\\('
	          continue
	        }

	        patternListStack.push({
	          type: stateChar,
	          start: i - 1,
	          reStart: re.length,
	          open: plTypes[stateChar].open,
	          close: plTypes[stateChar].close
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue

	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }

	        clearStateChar()
	        hasMagic = true
	        var pl = patternListStack.pop()
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        re += pl.close
	        if (pl.type === '!') {
	          negativeLists.push(pl)
	        }
	        pl.reEnd = re.length
	      continue

	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }

	        clearStateChar()
	        re += '|'
	      continue

	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()

	        if (inClass) {
	          re += '\\' + c
	          continue
	        }

	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue

	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }

	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }

	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue

	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()

	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }

	        re += c

	    } // switch
	  } // for

	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }

	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + pl.open.length)
	    this.debug('setting tail', re, pl)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }

	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })

	    this.debug('tail=%j\n   %s', tail, tail, pl, re)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type

	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }

	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }

	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }

	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]

	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)

	    nlLast += nlAfter

	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter

	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }

	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }

	  if (addPatternStart) {
	    re = patternStart + re
	  }

	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }

	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }

	  var flags = options.nocase ? 'i' : ''
	  try {
	    var regExp = new RegExp('^' + re + '$', flags)
	  } catch (er) {
	    // If it was an invalid regular expression, then it can't match
	    // anything.  This trick looks for a character after the end of
	    // the string, which is of course impossible, except in multi-line
	    // mode, but it's not a /m regex.
	    return new RegExp('$.')
	  }

	  regExp._glob = pattern
	  regExp._src = re

	  return regExp
	}

	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}

	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp

	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set

	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options

	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''

	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')

	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'

	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'

	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}

	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}

	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''

	  if (f === '/' && partial) return true

	  var options = this.options

	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }

	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)

	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.

	  var set = this.set
	  this.debug(this.pattern, 'set', set)

	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }

	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }

	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}

	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options

	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })

	  this.debug('matchOne', file.length, pattern.length)

	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]

	    this.debug(pattern, p, f)

	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false

	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])

	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }

	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]

	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }

	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }

	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }

	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }

	    if (!hit) return false
	  }

	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*

	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }

	  // should be unreachable.
	  throw new Error('wtf?')
	}

	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}

	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var concatMap = __webpack_require__(335);
	var balanced = __webpack_require__(336);

	module.exports = expandTop;

	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';

	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}

	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}

	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}


	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];

	  var parts = [];
	  var m = balanced('{', '}', str);

	  if (!m)
	    return str.split(',');

	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');

	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }

	  parts.push.apply(parts, p);

	  return parts;
	}

	function expandTop(str) {
	  if (!str)
	    return [];

	  // I don't know why Bash 4.3 does this, but it does.
	  // Anything starting with {} will have the first two bytes preserved
	  // but *only* at the top level, so {},a}b will not expand to anything,
	  // but a{},b}c will be expanded to [a}c,abc].
	  // One could argue that this is a bug in Bash, but since the goal of
	  // this module is to match Bash's rules, we escape a leading {}
	  if (str.substr(0, 2) === '{}') {
	    str = '\\{\\}' + str.substr(2);
	  }

	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}

	function identity(e) {
	  return e;
	}

	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}

	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}

	function expand(str, isTop) {
	  var expansions = [];

	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];

	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = m.body.indexOf(',') >= 0;
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*\}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }

	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }

	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.

	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];

	  var N;

	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);

	    N = [];

	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }

	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }

	  return expansions;
	}



/***/ },
/* 335 */
/***/ function(module, exports) {

	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 336 */
/***/ function(module, exports) {

	'use strict';
	module.exports = balanced;
	function balanced(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch(a, str);
	  if (b instanceof RegExp) b = maybeMatch(b, str);

	  var r = range(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	function maybeMatch(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}

	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';
	module.exports = typeof setImmediate === 'function' ? setImmediate :
		function setImmediate() {
			var args = [].slice.apply(arguments);
			args.splice(1, 0, 0);
			setTimeout.apply(null, args);
		};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(40).setImmediate))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var si =  __webpack_require__(337);
	var stream = __webpack_require__(339);
	var util = __webpack_require__(95);

	var Readable = stream.Readable;

	module.exports = ReaddirpReadable;

	util.inherits(ReaddirpReadable, Readable);

	function ReaddirpReadable (opts) {
	  if (!(this instanceof ReaddirpReadable)) return new ReaddirpReadable(opts);

	  opts = opts || {};

	  opts.objectMode = true;
	  Readable.call(this, opts);

	  // backpressure not implemented at this point
	  this.highWaterMark = Infinity;

	  this._destroyed = false;
	  this._paused = false;
	  this._warnings = [];
	  this._errors = [];

	  this._pauseResumeErrors();
	}

	var proto = ReaddirpReadable.prototype;

	proto._pauseResumeErrors = function () {
	  var self = this;
	  self.on('pause', function () { self._paused = true });
	  self.on('resume', function () {
	    if (self._destroyed) return;
	    self._paused = false;

	    self._warnings.forEach(function (err) { self.emit('warn', err) });
	    self._warnings.length = 0;

	    self._errors.forEach(function (err) { self.emit('error', err) });
	    self._errors.length = 0;
	  })
	}

	// called for each entry
	proto._processEntry = function (entry) {
	  if (this._destroyed) return;
	  this.push(entry);
	}

	proto._read = function () { }

	proto.destroy = function () {
	  // when stream is destroyed it will emit nothing further, not even errors or warnings
	  this.push(null);
	  this.readable = false;
	  this._destroyed = true;
	  this.emit('close');
	}

	proto._done = function () {
	  this.push(null);
	}

	// we emit errors and warnings async since we may handle errors like invalid args
	// within the initial event loop before any event listeners subscribed
	proto._handleError = function (err) {
	  var self = this;
	  si(function () {
	    if (self._paused) return self._warnings.push(err);
	    if (!self._destroyed) self.emit('warn', err);
	  });
	}

	proto._handleFatalError = function (err) {
	  var self = this;
	  si(function () {
	    if (self._paused) return self._errors.push(err);
	    if (!self._destroyed) self.emit('error', err);
	  });
	}

	function createStreamAPI () {
	  var stream = new ReaddirpReadable();

	  return {
	      stream           :  stream
	    , processEntry     :  stream._processEntry.bind(stream)
	    , done             :  stream._done.bind(stream)
	    , handleError      :  stream._handleError.bind(stream)
	    , handleFatalError :  stream._handleFatalError.bind(stream)
	  };
	}

	module.exports = createStreamAPI;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(340);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(348);
	exports.Duplex = __webpack_require__(347);
	exports.Transform = __webpack_require__(351);
	exports.PassThrough = __webpack_require__(352);


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(341);
	/*</replacement>*/

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(35);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(262).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(342);
	/*</replacement>*/

	// TODO(bmeurer): Change this back to const once hole checks are
	// properly optimized away early in Ignition+TurboFan.
	/*<replacement>*/
	var Buffer = __webpack_require__(343).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(344);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(345);
	var destroyImpl = __webpack_require__(346);
	var StringDecoder;

	util.inherits(Readable, Stream);

	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(347);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(350).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(347);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  Stream.call(this);
	}

	Object.defineProperty(Readable.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});

	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  this.push(null);
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};

	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      stream.emit('error', er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        stream.emit('error', new Error('stream.push() after EOF'));
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	    }
	  }

	  return needMoreData(state);
	}

	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    stream.emit('data', chunk);
	    stream.read(0);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}

	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(350).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = { hasUnpiped: false };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, unpipeInfo);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this, unpipeInfo);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(262).EventEmitter;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(32)
	var Buffer = buffer.Buffer

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ },
/* 344 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*<replacement>*/

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Buffer = __webpack_require__(343).Buffer;
	/*</replacement>*/

	function copyBuffer(src, target, offset) {
	  src.copy(target, offset);
	}

	module.exports = function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  BufferList.prototype.push = function push(v) {
	    var entry = { data: v, next: null };
	    if (this.length > 0) this.tail.next = entry;else this.head = entry;
	    this.tail = entry;
	    ++this.length;
	  };

	  BufferList.prototype.unshift = function unshift(v) {
	    var entry = { data: v, next: this.head };
	    if (this.length === 0) this.tail = entry;
	    this.head = entry;
	    ++this.length;
	  };

	  BufferList.prototype.shift = function shift() {
	    if (this.length === 0) return;
	    var ret = this.head.data;
	    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	    --this.length;
	    return ret;
	  };

	  BufferList.prototype.clear = function clear() {
	    this.head = this.tail = null;
	    this.length = 0;
	  };

	  BufferList.prototype.join = function join(s) {
	    if (this.length === 0) return '';
	    var p = this.head;
	    var ret = '' + p.data;
	    while (p = p.next) {
	      ret += s + p.data;
	    }return ret;
	  };

	  BufferList.prototype.concat = function concat(n) {
	    if (this.length === 0) return Buffer.alloc(0);
	    if (this.length === 1) return this.head.data;
	    var ret = Buffer.allocUnsafe(n >>> 0);
	    var p = this.head;
	    var i = 0;
	    while (p) {
	      copyBuffer(p.data, ret, i);
	      i += p.data.length;
	      p = p.next;
	    }
	    return ret;
	  };

	  return BufferList;
	}();

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(341);
	/*</replacement>*/

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
	      processNextTick(emitErrorNT, this, err);
	    }
	    return;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      processNextTick(emitErrorNT, _this, err);
	      if (_this._writableState) {
	        _this._writableState.errorEmitted = true;
	      }
	    } else if (cb) {
	      cb(err);
	    }
	  });
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	module.exports = {
	  destroy: destroy,
	  undestroy: undestroy
	};

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(341);
	/*</replacement>*/

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	var Readable = __webpack_require__(340);
	var Writable = __webpack_require__(348);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});

	Duplex.prototype._destroy = function (err, cb) {
	  this.push(null);
	  this.end();

	  processNextTick(cb, err);
	};

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	/*<replacement>*/

	var processNextTick = __webpack_require__(341);
	/*</replacement>*/

	module.exports = Writable;

	/* <replacement> */
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(349)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(342);
	/*</replacement>*/

	/*<replacement>*/
	var Buffer = __webpack_require__(343).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*</replacement>*/

	var destroyImpl = __webpack_require__(346);

	util.inherits(Writable, Stream);

	function nop() {}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(347);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(347);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;

	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;

	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = _isUint8Array(chunk) && !state.objectMode;

	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    processNextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    processNextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      stream.emit('error', err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function') {
	      state.pendingcb++;
	      state.finalCalled = true;
	      processNextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }
	  if (state.corkedRequestsFree) {
	    state.corkedRequestsFree.next = corkReq;
	  } else {
	    state.corkedRequestsFree = corkReq;
	  }
	}

	Object.defineProperty(Writable.prototype, 'destroyed', {
	  get: function () {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});

	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  this.end();
	  cb(err);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(40).setImmediate, (function() { return this; }())))

/***/ },
/* 349 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(343).Buffer;

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};

	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return -1;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd'.repeat(p);
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd'.repeat(p + 1);
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd'.repeat(p + 2);
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character for each buffered byte of a (partial)
	// character needs to be added to the output.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(347);

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) {
	    return stream.emit('error', new Error('write callback called multiple times'));
	  }

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform.prototype._destroy = function (err, cb) {
	  var _this = this;

	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	    _this.emit('close');
	  });
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data !== null && data !== undefined) stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(351);

	/*<replacement>*/
	var util = __webpack_require__(321);
	util.inherits = __webpack_require__(309);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path = __webpack_require__(36);
	var binaryExtensions = __webpack_require__(354);
	var exts = Object.create(null);

	binaryExtensions.forEach(function (el) {
		exts[el] = true;
	});

	module.exports = function (filepath) {
		return path.extname(filepath).slice(1).toLowerCase() in exts;
	};


/***/ },
/* 354 */
/***/ function(module, exports) {

	[
		"3ds",
		"3g2",
		"3gp",
		"7z",
		"a",
		"aac",
		"adp",
		"ai",
		"aif",
		"aiff",
		"alz",
		"ape",
		"apk",
		"ar",
		"arj",
		"asf",
		"au",
		"avi",
		"bak",
		"baml",
		"bh",
		"bin",
		"bk",
		"bmp",
		"btif",
		"bz2",
		"bzip2",
		"cab",
		"caf",
		"cgm",
		"class",
		"cmx",
		"cpio",
		"cr2",
		"csv",
		"cur",
		"dat",
		"dcm",
		"deb",
		"dex",
		"djvu",
		"dll",
		"dmg",
		"dng",
		"doc",
		"docm",
		"docx",
		"dot",
		"dotm",
		"dra",
		"DS_Store",
		"dsk",
		"dts",
		"dtshd",
		"dvb",
		"dwg",
		"dxf",
		"ecelp4800",
		"ecelp7470",
		"ecelp9600",
		"egg",
		"eol",
		"eot",
		"epub",
		"exe",
		"f4v",
		"fbs",
		"fh",
		"fla",
		"flac",
		"fli",
		"flv",
		"fpx",
		"fst",
		"fvt",
		"g3",
		"gif",
		"graffle",
		"gz",
		"gzip",
		"h261",
		"h263",
		"h264",
		"icns",
		"ico",
		"ief",
		"img",
		"ipa",
		"iso",
		"jar",
		"jpeg",
		"jpg",
		"jpgv",
		"jpm",
		"jxr",
		"key",
		"ktx",
		"lha",
		"lib",
		"lvp",
		"lz",
		"lzh",
		"lzma",
		"lzo",
		"m3u",
		"m4a",
		"m4v",
		"mar",
		"mdi",
		"mht",
		"mid",
		"midi",
		"mj2",
		"mka",
		"mkv",
		"mmr",
		"mng",
		"mobi",
		"mov",
		"movie",
		"mp3",
		"mp4",
		"mp4a",
		"mpeg",
		"mpg",
		"mpga",
		"mxu",
		"nef",
		"npx",
		"numbers",
		"o",
		"oga",
		"ogg",
		"ogv",
		"otf",
		"pages",
		"pbm",
		"pcx",
		"pdb",
		"pdf",
		"pea",
		"pgm",
		"pic",
		"png",
		"pnm",
		"pot",
		"potm",
		"potx",
		"ppa",
		"ppam",
		"ppm",
		"pps",
		"ppsm",
		"ppsx",
		"ppt",
		"pptm",
		"pptx",
		"psd",
		"pya",
		"pyc",
		"pyo",
		"pyv",
		"qt",
		"rar",
		"ras",
		"raw",
		"resources",
		"rgb",
		"rip",
		"rlc",
		"rmf",
		"rmvb",
		"rtf",
		"rz",
		"s3m",
		"s7z",
		"scpt",
		"sgi",
		"shar",
		"sil",
		"sketch",
		"slk",
		"smv",
		"so",
		"sub",
		"swf",
		"tar",
		"tbz",
		"tbz2",
		"tga",
		"tgz",
		"thmx",
		"tif",
		"tiff",
		"tlz",
		"ttc",
		"ttf",
		"txz",
		"udf",
		"uvh",
		"uvi",
		"uvm",
		"uvp",
		"uvs",
		"uvu",
		"viv",
		"vob",
		"war",
		"wav",
		"wax",
		"wbmp",
		"wdp",
		"weba",
		"webm",
		"webp",
		"whl",
		"wim",
		"wm",
		"wma",
		"wmv",
		"wmx",
		"woff",
		"woff2",
		"wvx",
		"xbm",
		"xif",
		"xla",
		"xlam",
		"xls",
		"xlsb",
		"xlsm",
		"xlsx",
		"xlt",
		"xltm",
		"xltx",
		"xm",
		"xmind",
		"xpi",
		"xpm",
		"xwd",
		"xz",
		"z",
		"zip",
		"zipx"
	]


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var sysPath = __webpack_require__(36);
	var readdirp = __webpack_require__(311);
	var fsevents;
	try { fsevents = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fsevents\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())); } catch (error) {}

	// fsevents instance helper functions

	// object to hold per-process fsevents instances
	// (may be shared across chokidar FSWatcher instances)
	var FSEventsWatchers = Object.create(null);

	// Threshold of duplicate path prefixes at which to start
	// consolidating going forward
	var consolidateThreshhold = 10;

	// Private function: Instantiates the fsevents interface

	// * path       - string, path to be watched
	// * callback   - function, called when fsevents is bound and ready

	// Returns new fsevents instance
	function createFSEventsInstance(path, callback) {
	  return (new fsevents(path)).on('fsevent', callback).start();
	}

	// Private function: Instantiates the fsevents interface or binds listeners
	// to an existing one covering the same file tree

	// * path       - string, path to be watched
	// * realPath   - string, real path (in case of symlinks)
	// * listener   - function, called when fsevents emits events
	// * rawEmitter - function, passes data to listeners of the 'raw' event

	// Returns close function
	function setFSEventsListener(path, realPath, listener, rawEmitter) {
	  var watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;
	  var watchContainer;
	  var parentPath = sysPath.dirname(watchPath);

	  // If we've accumulated a substantial number of paths that
	  // could have been consolidated by watching one directory
	  // above the current one, create a watcher on the parent
	  // path instead, so that we do consolidate going forward.
	  if (couldConsolidate(parentPath)) {
	    watchPath = parentPath;
	  }

	  var resolvedPath = sysPath.resolve(path);
	  var hasSymlink = resolvedPath !== realPath;
	  function filteredListener(fullPath, flags, info) {
	    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);
	    if (
	      fullPath === resolvedPath ||
	      !fullPath.indexOf(resolvedPath + sysPath.sep)
	    ) listener(fullPath, flags, info);
	  }

	  // check if there is already a watcher on a parent path
	  // modifies `watchPath` to the parent path when it finds a match
	  function watchedParent() {
	    return Object.keys(FSEventsWatchers).some(function(watchedPath) {
	      // condition is met when indexOf returns 0
	      if (!realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep)) {
	        watchPath = watchedPath;
	        return true;
	      }
	    });
	  }

	  if (watchPath in FSEventsWatchers || watchedParent()) {
	    watchContainer = FSEventsWatchers[watchPath];
	    watchContainer.listeners.push(filteredListener);
	  } else {
	    watchContainer = FSEventsWatchers[watchPath] = {
	      listeners: [filteredListener],
	      rawEmitters: [rawEmitter],
	      watcher: createFSEventsInstance(watchPath, function(fullPath, flags) {
	        var info = fsevents.getInfo(fullPath, flags);
	        watchContainer.listeners.forEach(function(listener) {
	          listener(fullPath, flags, info);
	        });
	        watchContainer.rawEmitters.forEach(function(emitter) {
	          emitter(info.event, fullPath, info);
	        });
	      })
	    };
	  }
	  var listenerIndex = watchContainer.listeners.length - 1;

	  // removes this instance's listeners and closes the underlying fsevents
	  // instance if there are no more listeners left
	  return function close() {
	    delete watchContainer.listeners[listenerIndex];
	    delete watchContainer.rawEmitters[listenerIndex];
	    if (!Object.keys(watchContainer.listeners).length) {
	      watchContainer.watcher.stop();
	      delete FSEventsWatchers[watchPath];
	    }
	  };
	}

	// Decide whether or not we should start a new higher-level
	// parent watcher
	function couldConsolidate(path) {
	  var keys = Object.keys(FSEventsWatchers);
	  var count = 0;

	  for (var i = 0, len = keys.length; i < len; ++i) {
	    var watchPath = keys[i];
	    if (watchPath.indexOf(path) === 0) {
	      count++;
	      if (count >= consolidateThreshhold) {
	        return true;
	      }
	    }
	  }

	  return false;
	}

	// returns boolean indicating whether fsevents can be used
	function canUse() {
	  return fsevents && Object.keys(FSEventsWatchers).length < 128;
	}

	// determines subdirectory traversal levels from root to path
	function depth(path, root) {
	  var i = 0;
	  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;
	  return i;
	}

	// fake constructor for attaching fsevents-specific prototype methods that
	// will be copied to FSWatcher's prototype
	function FsEventsHandler() {}

	// Private method: Handle symlinks encountered during directory scan

	// * watchPath  - string, file/dir path to be watched with fsevents
	// * realPath   - string, real path (in case of symlinks)
	// * transform  - function, path transformer
	// * globFilter - function, path filter in case a glob pattern was provided

	// Returns close function for the watcher instance
	FsEventsHandler.prototype._watchWithFsEvents =
	function(watchPath, realPath, transform, globFilter) {
	  if (this._isIgnored(watchPath)) return;
	  var watchCallback = function(fullPath, flags, info) {
	    if (
	      this.options.depth !== undefined &&
	      depth(fullPath, realPath) > this.options.depth
	    ) return;
	    var path = transform(sysPath.join(
	      watchPath, sysPath.relative(watchPath, fullPath)
	    ));
	    if (globFilter && !globFilter(path)) return;
	    // ensure directories are tracked
	    var parent = sysPath.dirname(path);
	    var item = sysPath.basename(path);
	    var watchedDir = this._getWatchedDir(
	      info.type === 'directory' ? path : parent
	    );
	    var checkIgnored = function(stats) {
	      if (this._isIgnored(path, stats)) {
	        this._ignoredPaths[path] = true;
	        if (stats && stats.isDirectory()) {
	          this._ignoredPaths[path + '/**/*'] = true;
	        }
	        return true;
	      } else {
	        delete this._ignoredPaths[path];
	        delete this._ignoredPaths[path + '/**/*'];
	      }
	    }.bind(this);

	    var handleEvent = function(event) {
	      if (checkIgnored()) return;

	      if (event === 'unlink') {
	        // suppress unlink events on never before seen files
	        if (info.type === 'directory' || watchedDir.has(item)) {
	          this._remove(parent, item);
	        }
	      } else {
	        if (event === 'add') {
	          // track new directories
	          if (info.type === 'directory') this._getWatchedDir(path);

	          if (info.type === 'symlink' && this.options.followSymlinks) {
	            // push symlinks back to the top of the stack to get handled
	            var curDepth = this.options.depth === undefined ?
	              undefined : depth(fullPath, realPath) + 1;
	            return this._addToFsEvents(path, false, true, curDepth);
	          } else {
	            // track new paths
	            // (other than symlinks being followed, which will be tracked soon)
	            this._getWatchedDir(parent).add(item);
	          }
	        }
	        var eventName = info.type === 'directory' ? event + 'Dir' : event;
	        this._emit(eventName, path);
	        if (eventName === 'addDir') this._addToFsEvents(path, false, true);
	      }
	    }.bind(this);

	    function addOrChange() {
	      handleEvent(watchedDir.has(item) ? 'change' : 'add');
	    }
	    function checkFd() {
	      fs.open(path, 'r', function(error, fd) {
	        if (fd) fs.close(fd);
	        error && error.code !== 'EACCES' ?
	          handleEvent('unlink') : addOrChange();
	      });
	    }
	    // correct for wrong events emitted
	    var wrongEventFlags = [
	      69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912
	    ];
	    if (wrongEventFlags.indexOf(flags) !== -1 || info.event === 'unknown') {
	      if (typeof this.options.ignored === 'function') {
	        fs.stat(path, function(error, stats) {
	          if (checkIgnored(stats)) return;
	          stats ? addOrChange() : handleEvent('unlink');
	        });
	      } else {
	        checkFd();
	      }
	    } else {
	      switch (info.event) {
	      case 'created':
	      case 'modified':
	        return addOrChange();
	      case 'deleted':
	      case 'moved':
	        return checkFd();
	      }
	    }
	  }.bind(this);

	  var closer = setFSEventsListener(
	    watchPath,
	    realPath,
	    watchCallback,
	    this.emit.bind(this, 'raw')
	  );

	  this._emitReady();
	  return closer;
	};

	// Private method: Handle symlinks encountered during directory scan

	// * linkPath   - string, path to symlink
	// * fullPath   - string, absolute path to the symlink
	// * transform  - function, pre-existing path transformer
	// * curDepth   - int, level of subdirectories traversed to where symlink is

	// Returns nothing
	FsEventsHandler.prototype._handleFsEventsSymlink =
	function(linkPath, fullPath, transform, curDepth) {
	  // don't follow the same symlink more than once
	  if (this._symlinkPaths[fullPath]) return;
	  else this._symlinkPaths[fullPath] = true;

	  this._readyCount++;

	  fs.realpath(linkPath, function(error, linkTarget) {
	    if (this._handleError(error) || this._isIgnored(linkTarget)) {
	      return this._emitReady();
	    }

	    this._readyCount++;

	    // add the linkTarget for watching with a wrapper for transform
	    // that causes emitted paths to incorporate the link's path
	    this._addToFsEvents(linkTarget || linkPath, function(path) {
	      var dotSlash = '.' + sysPath.sep;
	      var aliasedPath = linkPath;
	      if (linkTarget && linkTarget !== dotSlash) {
	        aliasedPath = path.replace(linkTarget, linkPath);
	      } else if (path !== dotSlash) {
	        aliasedPath = sysPath.join(linkPath, path);
	      }
	      return transform(aliasedPath);
	    }, false, curDepth);
	  }.bind(this));
	};

	// Private method: Handle added path with fsevents

	// * path       - string, file/directory path or glob pattern
	// * transform  - function, converts working path to what the user expects
	// * forceAdd   - boolean, ensure add is emitted
	// * priorDepth - int, level of subdirectories already traversed

	// Returns nothing
	FsEventsHandler.prototype._addToFsEvents =
	function(path, transform, forceAdd, priorDepth) {

	  // applies transform if provided, otherwise returns same value
	  var processPath = typeof transform === 'function' ?
	    transform : function(val) { return val; };

	  var emitAdd = function(newPath, stats) {
	    var pp = processPath(newPath);
	    var isDir = stats.isDirectory();
	    var dirObj = this._getWatchedDir(sysPath.dirname(pp));
	    var base = sysPath.basename(pp);

	    // ensure empty dirs get tracked
	    if (isDir) this._getWatchedDir(pp);

	    if (dirObj.has(base)) return;
	    dirObj.add(base);

	    if (!this.options.ignoreInitial || forceAdd === true) {
	      this._emit(isDir ? 'addDir' : 'add', pp, stats);
	    }
	  }.bind(this);

	  var wh = this._getWatchHelpers(path);

	  // evaluate what is at the path we're being asked to watch
	  fs[wh.statMethod](wh.watchPath, function(error, stats) {
	    if (this._handleError(error) || this._isIgnored(wh.watchPath, stats)) {
	      this._emitReady();
	      return this._emitReady();
	    }

	    if (stats.isDirectory()) {
	      // emit addDir unless this is a glob parent
	      if (!wh.globFilter) emitAdd(processPath(path), stats);

	      // don't recurse further if it would exceed depth setting
	      if (priorDepth && priorDepth > this.options.depth) return;

	      // scan the contents of the dir
	      readdirp({
	        root: wh.watchPath,
	        entryType: 'all',
	        fileFilter: wh.filterPath,
	        directoryFilter: wh.filterDir,
	        lstat: true,
	        depth: this.options.depth - (priorDepth || 0)
	      }).on('data', function(entry) {
	        // need to check filterPath on dirs b/c filterDir is less restrictive
	        if (entry.stat.isDirectory() && !wh.filterPath(entry)) return;

	        var joinedPath = sysPath.join(wh.watchPath, entry.path);
	        var fullPath = entry.fullPath;

	        if (wh.followSymlinks && entry.stat.isSymbolicLink()) {
	          // preserve the current depth here since it can't be derived from
	          // real paths past the symlink
	          var curDepth = this.options.depth === undefined ?
	            undefined : depth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;

	          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);
	        } else {
	          emitAdd(joinedPath, entry.stat);
	        }
	      }.bind(this)).on('error', function() {
	        // Ignore readdirp errors
	      }).on('end', this._emitReady);
	    } else {
	      emitAdd(wh.watchPath, stats);
	      this._emitReady();
	    }
	  }.bind(this));

	  if (this.options.persistent && forceAdd !== true) {
	    var initWatch = function(error, realPath) {
	      if (this.closed) return;
	      var closer = this._watchWithFsEvents(
	        wh.watchPath,
	        sysPath.resolve(realPath || wh.watchPath),
	        processPath,
	        wh.globFilter
	      );
	      if (closer) this._closers[path] = closer;
	    }.bind(this);

	    if (typeof transform === 'function') {
	      // realpath has already been resolved
	      initWatch();
	    } else {
	      fs.realpath(wh.watchPath, initWatch);
	    }
	  }
	};

	module.exports = FsEventsHandler;
	module.exports.canUse = canUse;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(36);
	var mkdirp = __webpack_require__(357);

	function NodeOutputFileSystem() {}
	module.exports = NodeOutputFileSystem;

	NodeOutputFileSystem.prototype.mkdirp = mkdirp;
	NodeOutputFileSystem.prototype.mkdir = fs.mkdir.bind(this);
	NodeOutputFileSystem.prototype.rmdir = fs.rmdir.bind(this);
	NodeOutputFileSystem.prototype.unlink = fs.unlink.bind(this);
	NodeOutputFileSystem.prototype.writeFile = fs.writeFile.bind(fs);
	NodeOutputFileSystem.prototype.join = path.join.bind(path);


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var path = __webpack_require__(36);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var _0777 = parseInt('0777', 8);

	module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;

	function mkdirP (p, opts, f, made) {
	    if (typeof opts === 'function') {
	        f = opts;
	        opts = {};
	    }
	    else if (!opts || typeof opts !== 'object') {
	        opts = { mode: opts };
	    }
	    
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	    
	    if (mode === undefined) {
	        mode = _0777 & (~process.umask());
	    }
	    if (!made) made = null;
	    
	    var cb = f || function () {};
	    p = path.resolve(p);
	    
	    xfs.mkdir(p, mode, function (er) {
	        if (!er) {
	            made = made || p;
	            return cb(null, made);
	        }
	        switch (er.code) {
	            case 'ENOENT':
	                mkdirP(path.dirname(p), opts, function (er, made) {
	                    if (er) cb(er, made);
	                    else mkdirP(p, opts, cb, made);
	                });
	                break;

	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                xfs.stat(p, function (er2, stat) {
	                    // if the stat fails, then that's super weird.
	                    // let the original error be the failure reason.
	                    if (er2 || !stat.isDirectory()) cb(er, made)
	                    else cb(null, made);
	                });
	                break;
	        }
	    });
	}

	mkdirP.sync = function sync (p, opts, made) {
	    if (!opts || typeof opts !== 'object') {
	        opts = { mode: opts };
	    }
	    
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	    
	    if (mode === undefined) {
	        mode = _0777 & (~process.umask());
	    }
	    if (!made) made = null;

	    p = path.resolve(p);

	    try {
	        xfs.mkdirSync(p, mode);
	        made = made || p;
	    }
	    catch (err0) {
	        switch (err0.code) {
	            case 'ENOENT' :
	                made = sync(path.dirname(p), opts, made);
	                sync(p, opts, made);
	                break;

	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                var stat;
	                try {
	                    stat = xfs.statSync(p);
	                }
	                catch (err1) {
	                    throw err0;
	                }
	                if (!stat.isDirectory()) throw err0;
	                break;
	        }
	    }

	    return made;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var fs = __webpack_require__(312);

	function NodeJsInputFileSystem() {}
	module.exports = NodeJsInputFileSystem;

	NodeJsInputFileSystem.prototype.isSync = function() {
		return false;
	};

	NodeJsInputFileSystem.prototype.stat = fs.stat.bind(fs);
	NodeJsInputFileSystem.prototype.readdir = function readdir(path, callback) {
		fs.readdir(path, function (err, files) {
			callback(err, files && files.map(function (file) {
				return file.normalize ? file.normalize("NFC") : file;
			}));
		});
	};
	NodeJsInputFileSystem.prototype.readFile = fs.readFile.bind(fs);
	NodeJsInputFileSystem.prototype.readlink = fs.readlink.bind(fs);

/***/ },
/* 359 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Storage(duration) {
		this.duration = duration;
		this.running = {};
		this.data = {};
		this.levels = [];
		if(duration > 0) {
			this.levels.push([], [], [], [], [], [], [], [], []);
			for(var i = 8000; i < duration; i+=500)
				this.levels.push([]);
		}
		this.count = 0;
		this.interval = null;
		this.needTickCheck = false;
		this.nextTick = null;
		this.passive = true;
	}

	Storage.prototype.ensureTick = function() {
		if(!this.interval && this.duration > 0 && !this.nextTick)
			this.interval = setInterval(this.tick.bind(this), Math.floor(this.duration / this.levels.length));
	};

	Storage.prototype.finished = function(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callbacks = this.running[name];
		delete this.running[name];
		if(this.duration > 0) {
			this.count++;
			this.data[name] = args;
			this.levels[0].push(name);
			this.ensureTick();
		}
		for(var i = 0; i < callbacks.length; i++) {
			callbacks[i].apply(null, args);
		}
	};

	Storage.prototype.provide = function(name, provider, callback) {
		var running = this.running[name];
		if(running) {
			running.push(callback);
			return;
		}
		if(this.duration > 0) {
			this.checkTicks();
			var data = this.data[name];
			if(data) {
				return callback.apply(null, data);
			}
		}
		this.running[name] = running = [callback];
		provider(name, this.finished.bind(this, name));
	};

	Storage.prototype.tick = function() {
		var decay = this.levels.pop();
		for(var i = decay.length - 1; i >= 0; i--) {
			delete this.data[decay[i]];
		}
		this.count -= decay.length;
		decay.length = 0;
		this.levels.unshift(decay);
		if(this.count == 0) {
			clearInterval(this.interval);
			this.interval = null;
			this.nextTick = null;
			return true;
		} else if(this.nextTick) {
			this.nextTick += Math.floor(this.duration / this.levels.length);
			var time = new Date().getTime();
			if(this.nextTick > time) {
				this.nextTick = null;
				this.interval = setInterval(this.tick.bind(this), Math.floor(this.duration / this.levels.length));
				return true;
			}
		} else if(this.passive) {
			clearInterval(this.interval);
			this.interval = null;
			this.nextTick = new Date().getTime() + Math.floor(this.duration / this.levels.length);
		} else {
			this.passive = true;
		}
	};

	Storage.prototype.checkTicks = function() {
		this.passive = false;
		if(this.nextTick) {
			while(!this.tick());
		}
	};

	Storage.prototype.purge = function(what) {
		if(!what) {
			this.count = 0;
			clearInterval(this.interval);
			this.nextTick = null;
			this.data = {};
			this.levels.forEach(function(level) {
				level.length = 0;
			});
		} else if(typeof what === "string") {
			Object.keys(this.data).forEach(function(key) {
				if(key.indexOf(what) === 0)
					delete this.data[key];
			}, this);
		} else {
			for(var i = what.length - 1; i >= 0; i--) {
				this.purge(what[i]);
			}
		}
	};


	function CachedInputFileSystem(fileSystem, duration) {
		this.fileSystem = fileSystem;
		this._statStorage = new Storage(duration);
		this._readdirStorage = new Storage(duration);
		this._readFileStorage = new Storage(duration);
		this._readlinkStorage = new Storage(duration);
	}
	module.exports = CachedInputFileSystem;

	CachedInputFileSystem.prototype.isSync = function() {
		return this.fileSystem.isSync();
	};

	CachedInputFileSystem.prototype.stat = function(path, callback) {
		this._statStorage.provide(path, this.fileSystem.stat.bind(this.fileSystem), callback);
	};

	CachedInputFileSystem.prototype.readdir = function(path, callback) {
		this._readdirStorage.provide(path, this.fileSystem.readdir.bind(this.fileSystem), callback);
	};

	CachedInputFileSystem.prototype.readFile = function(path, callback) {
		this._readFileStorage.provide(path, this.fileSystem.readFile.bind(this.fileSystem), callback);
	};

	CachedInputFileSystem.prototype.readlink = function(path, callback) {
		this._readlinkStorage.provide(path, this.fileSystem.readlink.bind(this.fileSystem), callback);
	};

	CachedInputFileSystem.prototype.purge = function(what) {
		this._statStorage.purge(what);
		this._readdirStorage.purge(what);
		this._readFileStorage.purge(what);
		this._readlinkStorage.purge(what);
	};

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);

	function NodeHotUpdateChunkTemplatePlugin() {}
	module.exports = NodeHotUpdateChunkTemplatePlugin;

	NodeHotUpdateChunkTemplatePlugin.prototype.apply = function(hotUpdateChunkTemplate) {
		hotUpdateChunkTemplate.plugin("render", function(modulesSource, modules, hash, id) {
			var source = new ConcatSource();
			source.add("exports.id = " + JSON.stringify(id) + ";\nexports.modules = ");
			source.add(modulesSource);
			source.add(";");
			return source;
		});
		hotUpdateChunkTemplate.plugin("hash", function(hash) {
			hash.update("NodeHotUpdateChunkTemplatePlugin");
			hash.update("3");
			hash.update(this.outputOptions.hotUpdateFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ExternalsPlugin = __webpack_require__(362);

	function NodeTargetPlugin() {}

	module.exports = NodeTargetPlugin;
	NodeTargetPlugin.prototype.apply = function(compiler) {
		new ExternalsPlugin("commonjs", Object.keys(process.binding("natives"))).apply(compiler);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ExternalModuleFactoryPlugin = __webpack_require__(363);

	function ExternalsPlugin(type, externals) {
		this.type = type;
		this.externals = externals;
	}
	module.exports = ExternalsPlugin;
	ExternalsPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compile", function(params) {
			params.normalModuleFactory.apply(new ExternalModuleFactoryPlugin(this.type, this.externals));
		}.bind(this));
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ExternalModule = __webpack_require__(364);

	function ExternalModuleFactoryPlugin(type, externals) {
		this.type = type;
		this.externals = externals;
	}
	module.exports = ExternalModuleFactoryPlugin;

	ExternalModuleFactoryPlugin.prototype.apply = function(normalModuleFactory) {
		var globalType = this.type;
		normalModuleFactory.plugin("factory", function(factory) {
			return function(data, callback) {
				var context = data.context;
				var dependency = data.dependency;

				function handleExternal(value, type, callback) {
					if(typeof type === "function") {
						callback = type;
						type = undefined;
					}
					if(value === false) return factory(data, callback);
					if(value === true) value = dependency.request;
					if(typeof type === "undefined" && /^[a-z0-9]+ /.test(value)) {
						var idx = value.indexOf(" ");
						type = value.substr(0, idx);
						value = value.substr(idx + 1);
					}
					callback(null, new ExternalModule(value, type || globalType));
					return true;
				}
				(function handleExternals(externals, callback) {
					if(typeof externals === "string") {
						if(externals === dependency.request) {
							return handleExternal(dependency.request, callback);
						}
					} else if(Array.isArray(externals)) {
						var i = 0;
						(function next() {
							do {
								var async = true;
								if(i >= externals.length) return callback();
								handleExternals(externals[i++], function(err, module) {
									if(err) return callback(err);
									if(!module) {
										if(async) {
											async = false;
											return;
										}
										return next();
									}
									callback(null, module);
								});
							} while (!async);
							async = false;
						}());
						return;
					} else if(externals instanceof RegExp) {
						if(externals.test(dependency.request)) {
							return handleExternal(dependency.request, callback);
						}
					} else if(typeof externals === "function") {
						externals.call(null, context, dependency.request, function(err, value, type) {
							if(err) return callback(err);
							if(typeof value !== "undefined") {
								handleExternal(value, type, callback);
							} else {
								callback();
							}
						});
						return;
					} else if(typeof externals === "object" && Object.prototype.hasOwnProperty.call(externals, dependency.request)) {
						return handleExternal(externals[dependency.request], callback);
					}
					callback();
				}(this.externals, function(err, module) {
					if(err) return callback(err);
					if(!module) return handleExternal(false, callback);
					return callback(null, module);
				}));
			}.bind(this);
		}.bind(this));
	};


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(44);
	var OriginalSource = __webpack_require__(79);
	var RawSource = __webpack_require__(69);
	var WebpackMissingModule = __webpack_require__(172);

	function ExternalModule(request, type) {
		Module.call(this);
		this.request = request;
		this.type = type;
		this.built = false;
	}
	module.exports = ExternalModule;

	ExternalModule.prototype = Object.create(Module.prototype);

	ExternalModule.prototype.external = true;

	ExternalModule.prototype.identifier = function() {
		return "external " + JSON.stringify(this.request);
	};

	ExternalModule.prototype.readableIdentifier = function() {
		return "external " + JSON.stringify(this.request);
	};

	ExternalModule.prototype.needRebuild = function() {
		return false;
	};

	ExternalModule.prototype.build = function(options, compilation, resolver, fs, callback) {
		this.builtTime = new Date().getTime();
		callback();
	};

	ExternalModule.prototype.source = function() {
		var str = "throw new Error('Externals not supported');";
		var request = this.request;
		if(typeof request === "object") request = request[this.type];
		switch(this.type) {
			case "this":
			case "window":
			case "global":
				if(Array.isArray(request)) {
					str = "(function() { module.exports = " + this.type + request.map(function(r) {
						return "[" + JSON.stringify(r) + "]";
					}).join("") + "; }());";
				} else
					str = "(function() { module.exports = " + this.type + "[" + JSON.stringify(request) + "]; }());";
				break;
			case "commonjs":
			case "commonjs2":
				if(Array.isArray(request)) {
					str = "module.exports = require(" + JSON.stringify(request[0]) + ")" + request.slice(1).map(function(r) {
						return "[" + JSON.stringify(r) + "]";
					}).join("") + ";";
				} else
					str = "module.exports = require(" + JSON.stringify(request) + ");";
				break;
			case "amd":
			case "umd":
			case "umd2":
				str = "";
				if(this.optional) {
					str += "if(typeof __WEBPACK_EXTERNAL_MODULE_" + this.id + "__ === 'undefined') {" + WebpackMissingModule.moduleCode(request) + "}\n";
				}
				str += "module.exports = __WEBPACK_EXTERNAL_MODULE_" + this.id + "__;";
				break;
			default:
				str = "";
				if(this.optional) {
					str += "if(typeof " + request + " === 'undefined') {" + WebpackMissingModule.moduleCode(request) + "}\n";
				}
				str += "module.exports = " + request + ";";
				break;
		}
		if(this.useSourceMap) {
			return new OriginalSource(str, this.identifier());
		} else {
			return new RawSource(str);
		}
	};

	ExternalModule.prototype.size = function() {
		return 42;
	};


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(36);
	var async = __webpack_require__(39);

	function OldNodeWatchFileSystem(inputFileSystem) {
		this.inputFileSystem = inputFileSystem;
	}
	module.exports = OldNodeWatchFileSystem;

	/**
	 *
	 * @param files {String[]} a sorted array of paths to files
	 * @param dirs {String[]} a sorted array of paths to directories
	 * @param startTime {number} the virtual start time
	 * @param delay {number} in ms, the time to wait to signal after the first change
	 * @param callback {function(err, filesModified: String[], dirsModified: String[], fileTimestamps: Object, dirTimestamps: Object)] called once after change plus delay
	 * @param callbackUndelayed {function()} called once after first change
	 */
	OldNodeWatchFileSystem.prototype.watch = function(files, dirs, missing, startTime, delay, callback, callbackUndelayed) {
		var inputFileSystem = this.inputFileSystem;

		if(!callbackUndelayed) callbackUndelayed = function() {};
		var closed = false;
		var fileTimestamps = {};
		var dirTimestamps = {};
		var filesModified = {};
		var dirsModified = {};

		var lastChangeTime;

		startTime = Math.floor(startTime / 1000) * 1000; // only 1 second accuracy

		var directories = {};
		dirs.forEach(function(dir) {
			directories[dir] = {
				context: dir,
				files: []
			};
		});
		files.forEach(function(file) {
			var dir = path.dirname(file);
			if(!directories[dir]) directories[dir] = {
				files: []
			};
			directories[dir].files.push(file);
		});

		var items = Object.keys(directories).map(function(dir) {
			directories[dir].path = dir;
			return directories[dir];
		});
		items.sort(function(a, b) {
			if(a.path === b.path) return 0;
			return a.path < b.path ? -1 : 1;
		});
		items.forEach(function(item) {
			if(item.files) {
				item.files.sort();
			}
		});

		var initialChange = false;
		var change = function() {
			initialChange = true;
		};

		function readStat(item, callback) {
			if(item.context) {
				fs.readdir(item.path, function(err, files) {
					function onTimestamp(ts) {
						if(!dirTimestamps[item.context] || dirTimestamps[item.context] < ts)
							dirTimestamps[item.context] = ts;
						if(ts >= startTime) {
							dirsModified[item.context] = true;
							change(item.path);
						}
						return callback();
					}
					if(err) return onTimestamp(Infinity);
					async.map(files, function(file, callback) {
						file = path.join(item.path, file);
						var isFile = false;
						if(item.files) {
							if(binarySearch(item.files, function(path) {
									if(path === file) return 0;
									return path < file ? -1 : 1;
								}) >= 0) {
								isFile = true;
							}
						}
						fs.stat(file, function(err, stat) {
							var ts = err ? Infinity : stat.mtime.getTime();
							if(isFile) {
								fileTimestamps[file] = ts;
								if(ts >= startTime) filesModified[file] = true;
							}
							return callback(null, ts);
						});
					}, function(err, timestamps) {
						if(err) return onTimestamp(Infinity);
						var ts = timestamps.reduce(function(max, ts) {
							if(ts > max)
								return ts;
							return max;
						}, 0);
						onTimestamp(ts);
					});
				});
			} else {
				async.forEach(item.files, function(file, callback) {
					fs.stat(file, function(err, stat) {
						var ts = err ? Infinity : stat.mtime.getTime();
						fileTimestamps[file] = ts;
						if(ts >= startTime) {
							filesModified[file] = true;
							change(file);
						}
						return callback(null, ts);
					});
				}, callback);
			}
		}
		async.forEach(items, function processItem(item, callback) {
			var isRunning = false;
			var isScheduled = false;
			item.watcher = fs.watch(item.path, function() {
				if(isRunning) {
					isScheduled = true;
					return;
				}
				isRunning = true;
				readStat(item, done);
			});
			if(item.context) {
				item.children = [];
				fs.readdir(item.path, function(err, files) {
					if(err) {
						change();
						onWatcherApplied();
						return;
					}
					async.forEach(files, function(file, callback) {
						file = path.join(item.path, file);
						fs.stat(file, function(err, stat) {
							if(err) {
								change(file);
								callback();
								return;
							}
							if(!stat.isDirectory()) return callback();
							var subitem = {
								path: file,
								context: item.context
							};
							item.children.push(subitem);
							processItem(subitem, callback);
						});
					}, onWatcherApplied);
				});
			} else onWatcherApplied();

			function onWatcherApplied() {
				readStat(item, function() {
					callback();
					done();
				});
			}

			function done() {
				if(closed) return;
				if(isScheduled) {
					isScheduled = false;
					readStat(item, done);
				} else {
					isRunning = false;
				}
			}
		}, function() {
			var timeout;
			if(initialChange) {

				callbackUndelayed();
				if(delay) {
					lastChangeTime = Date.now();
					change = restartDelay;
					timeout = setTimeout(onTimeout, delay);
				} else onTimeout();

			} else {

				change = function() {

					callbackUndelayed();
					if(delay) {
						lastChangeTime = Date.now();
						change = restartDelay;
						timeout = setTimeout(onTimeout, delay);
					} else {
						change = function() {};
						onTimeout();
					}
				};

			}

			function restartDelay() {
				lastChangeTime = Date.now();
				clearTimeout(timeout);
				timeout = setTimeout(onTimeout, delay);
			}

		});

		// 7.
		function onTimeout() {
			var nextSecond = Math.ceil(lastChangeTime / 1000) * 1000;
			var timeToNextSecond = nextSecond - Date.now();
			if(timeToNextSecond > 0) {
				setTimeout(onTimeout, timeToNextSecond);
				return;
			}
			change = function() {};
			if(closed) return;
			var outdatedFiles = Object.keys(filesModified).sort();
			var outdatedDirs = Object.keys(dirsModified).sort();
			if(inputFileSystem && inputFileSystem.purge) {
				inputFileSystem.purge(outdatedFiles);
				inputFileSystem.purge(outdatedDirs);
			}
			callback(null, outdatedFiles, outdatedDirs, [], fileTimestamps, dirTimestamps);

			close();
		}

		function close() {
			closed = true;
			items.forEach(function closeItem(item) {
				item.watcher.close();
				if(item.children) item.children.forEach(closeItem);
			});
		}

		return {
			close: close,
			pause: close
		};
	};

	function binarySearch(array, comparator) {
		var left = 0;
		var right = array.length - 1;

		while(left <= right) {
			var middle = ((left + right) / 2) | 0;
			var comp = comparator(array[middle]);
			if(comp === 0) return middle;
			if(comp > 0) right = middle - 1;
			if(comp < 0) left = middle + 1;
		}
		return -1;
	}


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SetVarMainTemplatePlugin = __webpack_require__(367);

	function accessorToObjectAccess(accessor) {
		return accessor.map(function(a) {
			return "[" + JSON.stringify(a) + "]";
		}).join("");
	}

	function accessorAccess(base, accessor, joinWith) {
		accessor = [].concat(accessor);
		return accessor.map(function(a, idx) {
			a = base ?
				base + accessorToObjectAccess(accessor.slice(0, idx + 1)) :
				accessor[0] + accessorToObjectAccess(accessor.slice(1, idx + 1));
			if(idx === accessor.length - 1) return a;
			if(idx === 0 && typeof base === "undefined") return a + " = typeof " + a + " === \"object\" ? " + a + " : {}";
			return a + " = " + a + " || {}";
		}).join(joinWith || "; ");
	}

	function LibraryTemplatePlugin(name, target, umdNamedDefine) {
		this.name = name;
		this.target = target;
		this.umdNamedDefine = umdNamedDefine;
	}
	module.exports = LibraryTemplatePlugin;
	LibraryTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			switch(this.target) {
				case "var":
					compilation.apply(new SetVarMainTemplatePlugin("var " + accessorAccess(false, this.name)));
					break;
				case "assign":
					compilation.apply(new SetVarMainTemplatePlugin(accessorAccess(undefined, this.name)));
					break;
				case "this":
				case "window":
				case "global":
					if(this.name)
						compilation.apply(new SetVarMainTemplatePlugin(accessorAccess(this.target, this.name)));
					else
						compilation.apply(new SetVarMainTemplatePlugin(this.target, true));
					break;
				case "commonjs":
					if(this.name)
						compilation.apply(new SetVarMainTemplatePlugin(accessorAccess("exports", this.name)));
					else
						compilation.apply(new SetVarMainTemplatePlugin("exports", true));
					break;
				case "commonjs2":
					compilation.apply(new SetVarMainTemplatePlugin("module.exports"));
					break;
				case "amd":
					var AmdMainTemplatePlugin = __webpack_require__(368);
					compilation.apply(new AmdMainTemplatePlugin(this.name));
					break;
				case "umd":
				case "umd2":
					var UmdMainTemplatePlugin = __webpack_require__(369);
					compilation.apply(new UmdMainTemplatePlugin(this.name, {
						optionalAmdExternalAsGlobal: this.target === "umd2",
						namedDefine: this.umdNamedDefine
					}));
					break;
				case "jsonp":
					var JsonpExportMainTemplatePlugin = __webpack_require__(370);
					compilation.apply(new JsonpExportMainTemplatePlugin(this.name));
					break;
				default:
					throw new Error(this.target + " is not a valid Library target");
			}
		}.bind(this));
	};


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);

	function SetVarMainTemplatePlugin(varExpression, copyObject) {
		this.varExpression = varExpression;
		this.copyObject = copyObject;
	}
	module.exports = SetVarMainTemplatePlugin;
	SetVarMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var varExpression = mainTemplate.applyPluginsWaterfall("asset-path", this.varExpression, {
				hash: hash,
				chunk: chunk
			});
			if(this.copyObject) {
				return new ConcatSource("(function(e, a) { for(var i in a) e[i] = a[i]; }(" +
					varExpression + ", ", source, "))");
			} else {
				var prefix = varExpression + " =\n";
				return new ConcatSource(prefix, source);
			}
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.varExpression) paths.push(this.varExpression);
			return paths;
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("set var");
			hash.update(this.varExpression + "");
			hash.update(this.copyObject + "");
		}.bind(this));
	};


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);

	function AmdMainTemplatePlugin(name) {
		this.name = name;
	}
	module.exports = AmdMainTemplatePlugin;
	AmdMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var externals = chunk.modules.filter(function(m) {
				return m.external;
			});
			var externalsDepsArray = JSON.stringify(externals.map(function(m) {
				return typeof m.request === "object" ? m.request.amd : m.request;
			}));
			var externalsArguments = externals.map(function(m) {
				return "__WEBPACK_EXTERNAL_MODULE_" + m.id + "__";
			}).join(", ");
			if(this.name) {
				var name = mainTemplate.applyPluginsWaterfall("asset-path", this.name, {
					hash: hash,
					chunk: chunk
				});
				return new ConcatSource("define(" + JSON.stringify(name) + ", " + externalsDepsArray + ", function(" + externalsArguments + ") { return ", source, "});");
			} else if(externalsArguments) {
				return new ConcatSource("define(" + externalsDepsArray + ", function(" + externalsArguments + ") { return ", source, "});");
			} else {
				return new ConcatSource("define(function() { return ", source, "});");
			}
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.name) paths.push(this.name);
			return paths;
		}.bind(this));
		mainTemplate.plugin("hash", function(hash) {
			hash.update("exports amd");
			hash.update(this.name + "");
		}.bind(this));
	};


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);
	var OriginalSource = __webpack_require__(79);

	function accessorToObjectAccess(accessor) {
		return accessor.map(function(a) {
			return "[" + JSON.stringify(a) + "]";
		}).join("");
	}

	function accessorAccess(base, accessor) {
		accessor = [].concat(accessor);
		return accessor.map(function(a, idx) {
			a = base + accessorToObjectAccess(accessor.slice(0, idx + 1));
			if(idx === accessor.length - 1) return a;
			return a + " = " + a + " || {}";
		}).join(", ");
	}

	function UmdMainTemplatePlugin(name, options) {
		this.name = name;
		this.optionalAmdExternalAsGlobal = options.optionalAmdExternalAsGlobal;
		this.namedDefine = options.namedDefine;
	}
	module.exports = UmdMainTemplatePlugin;
	UmdMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var externals = chunk.modules.filter(function(m) {
				return m.external;
			});
			var optionalExternals = [],
				requiredExternals = [];
			if(this.optionalAmdExternalAsGlobal) {
				externals.forEach(function(m) {
					if(m.optional) {
						optionalExternals.push(m);
					} else {
						requiredExternals.push(m);
					}
				});
				externals = requiredExternals.concat(optionalExternals);
			} else {
				requiredExternals = externals;
			}

			function replaceKeys(str) {
				return mainTemplate.applyPluginsWaterfall("asset-path", str, {
					hash: hash,
					chunk: chunk
				});
			}

			function externalsDepsArray(modules) {
				return "[" + replaceKeys(modules.map(function(m) {
					return JSON.stringify(typeof m.request === "object" ? m.request.amd : m.request);
				}).join(", ")) + "]";
			}

			function externalsRootArray(modules) {
				return replaceKeys(modules.map(function(m) {
					var request = m.request;
					if(typeof request === "object") request = request.root;
					return "root" + accessorToObjectAccess([].concat(request));
				}).join(", "));
			}

			function externalsRequireArray(type) {
				return replaceKeys(externals.map(function(m) {
					var request = m.request;
					if(typeof request === "object") request = request[type];
					if(Array.isArray(request)) {
						var expr = "require(" + JSON.stringify(request[0]) + ")" + accessorToObjectAccess(request.slice(1));
					} else
						var expr = "require(" + JSON.stringify(request) + ")";
					if(m.optional) {
						expr = "(function webpackLoadOptionalExternalModule() { try { return " + expr + "; } catch(e) {} }())";
					}
					return expr;
				}).join(", "));
			}

			function externalsArguments(modules) {
				return modules.map(function(m) {
					return "__WEBPACK_EXTERNAL_MODULE_" + m.id + "__";
				}).join(", ");
			}

			function libraryName(library) {
				return JSON.stringify(replaceKeys([].concat(library).pop()));
			}

			if(optionalExternals.length > 0) {
				var amdFactory = "function webpackLoadOptionalExternalModuleAmd(" + externalsArguments(requiredExternals) + ") {\n" +
					"			return factory(" + (
						requiredExternals.length > 0 ?
						externalsArguments(requiredExternals) + ", " + externalsRootArray(optionalExternals) :
						externalsRootArray(optionalExternals)
					) + ");\n" +
					"		}";
			} else {
				var amdFactory = "factory";
			}

			return new ConcatSource(new OriginalSource(
				"(function webpackUniversalModuleDefinition(root, factory) {\n" +
				"	if(typeof exports === 'object' && typeof module === 'object')\n" +
				"		module.exports = factory(" + externalsRequireArray("commonjs2") + ");\n" +
				"	else if(typeof define === 'function' && define.amd)\n" +
				(requiredExternals.length > 0 ?
					(this.name && this.namedDefine === true ?
						"		define(" + libraryName(this.name) + ", " + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n" :
						"		define(" + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n"
					) :
					(this.name && this.namedDefine === true ?
						"		define(" + libraryName(this.name) + ", [], " + amdFactory + ");\n" :
						"		define([], " + amdFactory + ");\n"
					)
				) +
				(this.name ?
					"	else if(typeof exports === 'object')\n" +
					"		exports[" + libraryName(this.name) + "] = factory(" + externalsRequireArray("commonjs") + ");\n" +
					"	else\n" +
					"		" + replaceKeys(accessorAccess("root", this.name)) + " = factory(" + externalsRootArray(externals) + ");\n" :
					"	else {\n" +
					(externals.length > 0 ?
						"		var a = typeof exports === 'object' ? factory(" + externalsRequireArray("commonjs") + ") : factory(" + externalsRootArray(externals) + ");\n" :
						"		var a = factory();\n"
					) +
					"		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n" +
					"	}\n"
				) +
				"})(this, function(" + externalsArguments(externals) + ") {\nreturn ", "webpack/universalModuleDefinition"), source, "\n});\n");
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.name) paths = paths.concat(this.name);
			return paths;
		}.bind(this));
		mainTemplate.plugin("hash", function(hash) {
			hash.update("umd");
			hash.update(this.name + "");
		}.bind(this));
	};


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(78);

	function JsonpExportMainTemplatePlugin(name) {
		this.name = name;
	}
	module.exports = JsonpExportMainTemplatePlugin;
	JsonpExportMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var name = mainTemplate.applyPluginsWaterfall("asset-path", this.name || "", {
				hash: hash,
				chunk: chunk
			});
			return new ConcatSource(name + "(", source, ");");
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.name) paths.push(this.name);
			return paths;
		}.bind(this));
		mainTemplate.plugin("hash", function(hash) {
			hash.update("jsonp export");
			hash.update(this.name + "");
		}.bind(this));
	};


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(81);
	var BasicEvaluatedExpression = __webpack_require__(108);
	var ModuleHotAcceptDependency = __webpack_require__(372);
	var ModuleHotDeclineDependency = __webpack_require__(373);
	var RawSource = __webpack_require__(69);
	var ConstDependency = __webpack_require__(152);
	var NullFactory = __webpack_require__(154);

	function HotModuleReplacementPlugin() {}
	module.exports = HotModuleReplacementPlugin;

	HotModuleReplacementPlugin.prototype.apply = function(compiler) {
		var hotUpdateChunkFilename = compiler.options.output.hotUpdateChunkFilename;
		var hotUpdateMainFilename = compiler.options.output.hotUpdateMainFilename;
		compiler.plugin("compilation", function(compilation, params) {
			var hotUpdateChunkTemplate = compilation.hotUpdateChunkTemplate;
			if(!hotUpdateChunkTemplate) return;

			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());

			compilation.dependencyFactories.set(ModuleHotAcceptDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(ModuleHotAcceptDependency, new ModuleHotAcceptDependency.Template());

			compilation.dependencyFactories.set(ModuleHotDeclineDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(ModuleHotDeclineDependency, new ModuleHotDeclineDependency.Template());

			compilation.plugin("record", function(compilation, records) {
				if(records.hash === this.hash) return;
				records.hash = compilation.hash;
				records.moduleHashs = {};
				this.modules.forEach(function(module) {
					var identifier = module.identifier();
					var hash = __webpack_require__(88).createHash("md5");
					module.updateHash(hash);
					records.moduleHashs[identifier] = hash.digest("hex");
				});
				records.chunkHashs = {};
				this.chunks.forEach(function(chunk) {
					records.chunkHashs[chunk.id] = chunk.hash;
				});
				records.chunkModuleIds = {};
				this.chunks.forEach(function(chunk) {
					records.chunkModuleIds[chunk.id] = chunk.modules.map(function(m) {
						return m.id;
					});
				});
			});
			compilation.plugin("after-hash", function() {
				var records = this.records;
				if(!records) return;
				var preHash = records.preHash || "x";
				var prepreHash = records.prepreHash || "x";
				if(preHash === this.hash) {
					this.modifyHash(prepreHash);
					return;
				}
				records.prepreHash = records.hash || "x";
				records.preHash = this.hash;
				this.modifyHash(records.prepreHash);
			});
			compilation.plugin("additional-chunk-assets", function() {
				var records = this.records;
				if(records.hash === this.hash) return;
				if(!records.moduleHashs || !records.chunkHashs || !records.chunkModuleIds) return;
				this.modules.forEach(function(module) {
					var identifier = module.identifier();
					var hash = __webpack_require__(88).createHash("md5");
					module.updateHash(hash);
					hash = hash.digest("hex");
					module.hotUpdate = records.moduleHashs[identifier] !== hash;
				});
				var hotUpdateMainContent = {
					h: this.hash,
					c: []
				};
				Object.keys(records.chunkHashs).forEach(function(chunkId) {
					chunkId = +chunkId;
					var currentChunk = this.chunks.filter(function(chunk) {
						return chunk.id === chunkId;
					})[0];
					if(currentChunk) {
						var newModules = currentChunk.modules.filter(function(module) {
							return module.hotUpdate;
						});
						if(newModules.length > 0) {
							var source = hotUpdateChunkTemplate.render(chunkId, newModules, this.hash, this.moduleTemplate, this.dependencyTemplates);
							var filename = this.getPath(hotUpdateChunkFilename, {
								hash: records.hash,
								chunk: currentChunk
							});
							this.additionalChunkAssets.push(filename);
							this.assets[filename] = source;
							hotUpdateMainContent.c.push(chunkId);
							currentChunk.files.push(filename);
							this.applyPlugins("chunk-asset", currentChunk, filename);
						}
					}
				}, this);
				var source = new RawSource(JSON.stringify(hotUpdateMainContent));
				var filename = this.getPath(hotUpdateMainFilename, {
					hash: records.hash
				});
				this.assets[filename] = source;
			});

			compilation.mainTemplate.plugin("hash", function(hash) {
				hash.update("HotMainTemplateDecorator");
			});

			compilation.mainTemplate.plugin("module-require", function(_, chunk, hash, varModuleId) {
				return "hotCreateRequire(" + varModuleId + ")";
			});

			compilation.mainTemplate.plugin("require-extensions", function(source) {
				var buf = [source];
				buf.push("");
				buf.push("// __webpack_hash__");
				buf.push(this.requireFn + ".h = function() { return hotCurrentHash; };");
				return this.asString(buf);
			});

			compilation.mainTemplate.plugin("bootstrap", function(source, chunk, hash) {
				source = this.applyPluginsWaterfall("hot-bootstrap", source, chunk, hash);
				return this.asString([
					source,
					"",
					hotInitCode
					.replace(/\$require\$/g, this.requireFn)
					.replace(/\$hash\$/g, JSON.stringify(hash))
					.replace(/\/\*foreachInstalledChunks\*\//g, chunk.chunks.length > 0 ? "for(var chunkId in installedChunks)" : "var chunkId = " + chunk.id + ";")
				]);
			});

			compilation.mainTemplate.plugin("global-hash", function() {
				return true;
			});

			compilation.mainTemplate.plugin("current-hash", function(_, length) {
				if(isFinite(length))
					return "hotCurrentHash.substr(0, " + length + ")";
				else
					return "hotCurrentHash";
			});

			compilation.mainTemplate.plugin("module-obj", function(source, chunk, hash, varModuleId) {
				return this.asString([
					source + ",",
					"hot: hotCreateModule(" + varModuleId + "),",
					"parents: hotCurrentParents,",
					"children: []"
				]);
			});

		});
		compiler.parser.plugin("expression __webpack_hash__", function(expr) {
			var dep = new ConstDependency("__webpack_require__.h()", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		compiler.parser.plugin("evaluate typeof __webpack_hash__", function(expr) {
			return new BasicEvaluatedExpression().setString("string").setRange(expr.range);
		});
		compiler.parser.plugin("evaluate Identifier module.hot", function(expr) {
			return new BasicEvaluatedExpression()
				.setBoolean(!!this.state.compilation.hotUpdateChunkTemplate)
				.setRange(expr.range);
		});
		compiler.parser.plugin("call module.hot.accept", function(expr) {
			if(!this.state.compilation.hotUpdateChunkTemplate) return false;
			if(expr.arguments.length > 1) {
				var arg = this.evaluateExpression(expr.arguments[0]);
				var params = [];
				if(arg.isString()) {
					params = [arg];
				} else if(arg.isArray()) {
					params = arg.items.filter(function(param) {
						return param.isString();
					});
				}
				params.forEach(function(param, idx) {
					var dep = new ModuleHotAcceptDependency(param.string, param.range);
					dep.optional = true;
					dep.loc = Object.create(expr.loc);
					dep.loc.index = idx;
					this.state.module.addDependency(dep);
				}.bind(this));
			}
		});
		compiler.parser.plugin("call module.hot.decline", function(expr) {
			if(!this.state.compilation.hotUpdateChunkTemplate) return false;
			if(expr.arguments.length === 1) {
				var arg = this.evaluateExpression(expr.arguments[0]);
				var params = [];
				if(arg.isString()) {
					params = [arg];
				} else if(arg.isArray()) {
					params = arg.items.filter(function(param) {
						return param.isString();
					});
				}
				params.forEach(function(param, idx) {
					var dep = new ModuleHotDeclineDependency(param.string, param.range);
					dep.optional = true;
					dep.loc = Object.create(expr.loc);
					dep.loc.index = idx;
					this.state.module.addDependency(dep);
				}.bind(this));
			}
		});
		compiler.parser.plugin("expression module.hot", function() {
			return true;
		});
	};

	var hotInitCode = Template.getFunctionContent(__webpack_require__(374));


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function ModuleHotAcceptDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
		this.weak = true;
	}
	module.exports = ModuleHotAcceptDependency;

	ModuleHotAcceptDependency.prototype = Object.create(ModuleDependency.prototype);
	ModuleHotAcceptDependency.prototype.constructor = ModuleHotAcceptDependency;
	ModuleHotAcceptDependency.prototype.type = "module.hot.accept";

	ModuleHotAcceptDependency.Template = __webpack_require__(171);


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function ModuleHotDeclineDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
		this.weak = true;
	}
	module.exports = ModuleHotDeclineDependency;

	ModuleHotDeclineDependency.prototype = Object.create(ModuleDependency.prototype);
	ModuleHotDeclineDependency.prototype.constructor = ModuleHotDeclineDependency;
	ModuleHotDeclineDependency.prototype.type = "module.hot.decline";

	ModuleHotDeclineDependency.Template = __webpack_require__(171);


/***/ },
/* 374 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*global $hash$ installedModules $require$ hotDownloadManifest hotDownloadUpdateChunk modules */
	module.exports = function() {

		var hotApplyOnUpdate = true;
		var hotCurrentHash = $hash$; // eslint-disable-line no-unused-vars
		var hotCurrentModuleData = {};
		var hotCurrentParents = []; // eslint-disable-line no-unused-vars

		function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
			var me = installedModules[moduleId];
			if(!me) return $require$;
			var fn = function(request) {
				if(me.hot.active) {
					if(installedModules[request]) {
						if(installedModules[request].parents.indexOf(moduleId) < 0)
							installedModules[request].parents.push(moduleId);
						if(me.children.indexOf(request) < 0)
							me.children.push(request);
					} else hotCurrentParents = [moduleId];
				} else {
					console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
					hotCurrentParents = [];
				}
				return $require$(request);
			};
			for(var name in $require$) {
				if(Object.prototype.hasOwnProperty.call($require$, name)) {
					fn[name] = $require$[name];
				}
			}
			fn.e = function(chunkId, callback) {
				if(hotStatus === "ready")
					hotSetStatus("prepare");
				hotChunksLoading++;
				$require$.e(chunkId, function() {
					try {
						callback.call(null, fn);
					} finally {
						finishChunkLoading();
					}

					function finishChunkLoading() {
						hotChunksLoading--;
						if(hotStatus === "prepare") {
							if(!hotWaitingFilesMap[chunkId]) {
								hotEnsureUpdateChunk(chunkId);
							}
							if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
								hotUpdateDownloaded();
							}
						}
					}
				});
			};
			return fn;
		}

		function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
			var hot = {
				// private stuff
				_acceptedDependencies: {},
				_declinedDependencies: {},
				_selfAccepted: false,
				_selfDeclined: false,
				_disposeHandlers: [],

				// Module API
				active: true,
				accept: function(dep, callback) {
					if(typeof dep === "undefined")
						hot._selfAccepted = true;
					else if(typeof dep === "function")
						hot._selfAccepted = dep;
					else if(typeof dep === "object")
						for(var i = 0; i < dep.length; i++)
							hot._acceptedDependencies[dep[i]] = callback;
					else
						hot._acceptedDependencies[dep] = callback;
				},
				decline: function(dep) {
					if(typeof dep === "undefined")
						hot._selfDeclined = true;
					else if(typeof dep === "number")
						hot._declinedDependencies[dep] = true;
					else
						for(var i = 0; i < dep.length; i++)
							hot._declinedDependencies[dep[i]] = true;
				},
				dispose: function(callback) {
					hot._disposeHandlers.push(callback);
				},
				addDisposeHandler: function(callback) {
					hot._disposeHandlers.push(callback);
				},
				removeDisposeHandler: function(callback) {
					var idx = hot._disposeHandlers.indexOf(callback);
					if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
				},

				// Management API
				check: hotCheck,
				apply: hotApply,
				status: function(l) {
					if(!l) return hotStatus;
					hotStatusHandlers.push(l);
				},
				addStatusHandler: function(l) {
					hotStatusHandlers.push(l);
				},
				removeStatusHandler: function(l) {
					var idx = hotStatusHandlers.indexOf(l);
					if(idx >= 0) hotStatusHandlers.splice(idx, 1);
				},

				//inherit from previous dispose call
				data: hotCurrentModuleData[moduleId]
			};
			return hot;
		}

		var hotStatusHandlers = [];
		var hotStatus = "idle";

		function hotSetStatus(newStatus) {
			hotStatus = newStatus;
			for(var i = 0; i < hotStatusHandlers.length; i++)
				hotStatusHandlers[i].call(null, newStatus);
		}

		// while downloading
		var hotWaitingFiles = 0;
		var hotChunksLoading = 0;
		var hotWaitingFilesMap = {};
		var hotRequestedFilesMap = {};
		var hotAvailibleFilesMap = {};
		var hotCallback;

		// The update info
		var hotUpdate, hotUpdateNewHash;

		function toModuleId(id) {
			var isNumber = (+id) + "" === id;
			return isNumber ? +id : id;
		}

		function hotCheck(apply, callback) {
			if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
			if(typeof apply === "function") {
				hotApplyOnUpdate = false;
				callback = apply;
			} else {
				hotApplyOnUpdate = apply;
				callback = callback || function(err) {
					if(err) throw err;
				};
			}
			hotSetStatus("check");
			hotDownloadManifest(function(err, update) {
				if(err) return callback(err);
				if(!update) {
					hotSetStatus("idle");
					callback(null, null);
					return;
				}

				hotRequestedFilesMap = {};
				hotAvailibleFilesMap = {};
				hotWaitingFilesMap = {};
				for(var i = 0; i < update.c.length; i++)
					hotAvailibleFilesMap[update.c[i]] = true;
				hotUpdateNewHash = update.h;

				hotSetStatus("prepare");
				hotCallback = callback;
				hotUpdate = {};
				/*foreachInstalledChunks*/
				{ // eslint-disable-line no-lone-blocks
					/*globals chunkId */
					hotEnsureUpdateChunk(chunkId);
				}
				if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
					hotUpdateDownloaded();
				}
			});
		}

		function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
			if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
				return;
			hotRequestedFilesMap[chunkId] = false;
			for(var moduleId in moreModules) {
				if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
					hotUpdate[moduleId] = moreModules[moduleId];
				}
			}
			if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
				hotUpdateDownloaded();
			}
		}

		function hotEnsureUpdateChunk(chunkId) {
			if(!hotAvailibleFilesMap[chunkId]) {
				hotWaitingFilesMap[chunkId] = true;
			} else {
				hotRequestedFilesMap[chunkId] = true;
				hotWaitingFiles++;
				hotDownloadUpdateChunk(chunkId);
			}
		}

		function hotUpdateDownloaded() {
			hotSetStatus("ready");
			var callback = hotCallback;
			hotCallback = null;
			if(!callback) return;
			if(hotApplyOnUpdate) {
				hotApply(hotApplyOnUpdate, callback);
			} else {
				var outdatedModules = [];
				for(var id in hotUpdate) {
					if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
						outdatedModules.push(toModuleId(id));
					}
				}
				callback(null, outdatedModules);
			}
		}

		function hotApply(options, callback) {
			if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
			if(typeof options === "function") {
				callback = options;
				options = {};
			} else if(options && typeof options === "object") {
				callback = callback || function(err) {
					if(err) throw err;
				};
			} else {
				options = {};
				callback = callback || function(err) {
					if(err) throw err;
				};
			}

			function getAffectedStuff(module) {
				var outdatedModules = [module];
				var outdatedDependencies = {};

				var queue = outdatedModules.slice();
				while(queue.length > 0) {
					var moduleId = queue.pop();
					var module = installedModules[moduleId];
					if(!module || module.hot._selfAccepted)
						continue;
					if(module.hot._selfDeclined) {
						return new Error("Aborted because of self decline: " + moduleId);
					}
					if(moduleId === 0) {
						return;
					}
					for(var i = 0; i < module.parents.length; i++) {
						var parentId = module.parents[i];
						var parent = installedModules[parentId];
						if(parent.hot._declinedDependencies[moduleId]) {
							return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
						}
						if(outdatedModules.indexOf(parentId) >= 0) continue;
						if(parent.hot._acceptedDependencies[moduleId]) {
							if(!outdatedDependencies[parentId])
								outdatedDependencies[parentId] = [];
							addAllToSet(outdatedDependencies[parentId], [moduleId]);
							continue;
						}
						delete outdatedDependencies[parentId];
						outdatedModules.push(parentId);
						queue.push(parentId);
					}
				}

				return [outdatedModules, outdatedDependencies];
			}

			function addAllToSet(a, b) {
				for(var i = 0; i < b.length; i++) {
					var item = b[i];
					if(a.indexOf(item) < 0)
						a.push(item);
				}
			}

			// at begin all updates modules are outdated
			// the "outdated" status can propagate to parents if they don't accept the children
			var outdatedDependencies = {};
			var outdatedModules = [];
			var appliedUpdate = {};
			for(var id in hotUpdate) {
				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
					var moduleId = toModuleId(id);
					var result = getAffectedStuff(moduleId);
					if(!result) {
						if(options.ignoreUnaccepted)
							continue;
						hotSetStatus("abort");
						return callback(new Error("Aborted because " + moduleId + " is not accepted"));
					}
					if(result instanceof Error) {
						hotSetStatus("abort");
						return callback(result);
					}
					appliedUpdate[moduleId] = hotUpdate[moduleId];
					addAllToSet(outdatedModules, result[0]);
					for(var moduleId in result[1]) {
						if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
							if(!outdatedDependencies[moduleId])
								outdatedDependencies[moduleId] = [];
							addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
						}
					}
				}
			}

			// Store self accepted outdated modules to require them later by the module system
			var outdatedSelfAcceptedModules = [];
			for(var i = 0; i < outdatedModules.length; i++) {
				var moduleId = outdatedModules[i];
				if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
					outdatedSelfAcceptedModules.push({
						module: moduleId,
						errorHandler: installedModules[moduleId].hot._selfAccepted
					});
			}

			// Now in "dispose" phase
			hotSetStatus("dispose");
			var queue = outdatedModules.slice();
			while(queue.length > 0) {
				var moduleId = queue.pop();
				var module = installedModules[moduleId];
				if(!module) continue;

				var data = {};

				// Call dispose handlers
				var disposeHandlers = module.hot._disposeHandlers;
				for(var j = 0; j < disposeHandlers.length; j++) {
					var cb = disposeHandlers[j];
					cb(data);
				}
				hotCurrentModuleData[moduleId] = data;

				// disable module (this disables requires from this module)
				module.hot.active = false;

				// remove module from cache
				delete installedModules[moduleId];

				// remove "parents" references from all children
				for(var j = 0; j < module.children.length; j++) {
					var child = installedModules[module.children[j]];
					if(!child) continue;
					var idx = child.parents.indexOf(moduleId);
					if(idx >= 0) {
						child.parents.splice(idx, 1);
					}
				}
			}

			// remove outdated dependency from module children
			for(var moduleId in outdatedDependencies) {
				if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
					var module = installedModules[moduleId];
					var moduleOutdatedDependencies = outdatedDependencies[moduleId];
					for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
						var dependency = moduleOutdatedDependencies[j];
						var idx = module.children.indexOf(dependency);
						if(idx >= 0) module.children.splice(idx, 1);
					}
				}
			}

			// Not in "apply" phase
			hotSetStatus("apply");

			hotCurrentHash = hotUpdateNewHash;

			// insert new code
			for(var moduleId in appliedUpdate) {
				if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
					modules[moduleId] = appliedUpdate[moduleId];
				}
			}

			// call accept handlers
			var error = null;
			for(var moduleId in outdatedDependencies) {
				if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
					var module = installedModules[moduleId];
					var moduleOutdatedDependencies = outdatedDependencies[moduleId];
					var callbacks = [];
					for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
						var dependency = moduleOutdatedDependencies[i];
						var cb = module.hot._acceptedDependencies[dependency];
						if(callbacks.indexOf(cb) >= 0) continue;
						callbacks.push(cb);
					}
					for(var i = 0; i < callbacks.length; i++) {
						var cb = callbacks[i];
						try {
							cb(outdatedDependencies);
						} catch(err) {
							if(!error)
								error = err;
						}
					}
				}
			}

			// Load self accepted modules
			for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
				var item = outdatedSelfAcceptedModules[i];
				var moduleId = item.module;
				hotCurrentParents = [moduleId];
				try {
					$require$(moduleId);
				} catch(err) {
					if(typeof item.errorHandler === "function") {
						try {
							item.errorHandler(err);
						} catch(err) {
							if(!error)
								error = err;
						}
					} else if(!error)
						error = err;
				}
			}

			// handle errors in accept handlers and self accepted module load
			if(error) {
				hotSetStatus("fail");
				return callback(error);
			}

			hotSetStatus("idle");
			callback(null, outdatedModules);
		}
	};


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var PrefetchDependency = __webpack_require__(376);

	function PrefetchPlugin(context, request) {
		if(!request) {
			this.request = context;
		} else {
			this.context = context;
			this.request = request;
		}
	}
	module.exports = PrefetchPlugin;
	PrefetchPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;

			compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);
		});
		compiler.plugin("make", function(compilation, callback) {
			compilation.prefetch(this.context || compiler.context, new PrefetchDependency(this.request), callback);
		}.bind(this));
	};


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(129);

	function PrefetchDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = PrefetchDependency;

	PrefetchDependency.prototype = Object.create(ModuleDependency.prototype);
	PrefetchDependency.prototype.constructor = PrefetchDependency;
	PrefetchDependency.prototype.type = "prefetch";


/***/ },
/* 377 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OccurrenceOrderPlugin(preferEntry) {
		if(preferEntry !== undefined && typeof preferEntry !== "boolean") {
			throw new Error("Argument should be a boolean.\nFor more info on this plugin, see https://webpack.github.io/docs/list-of-plugins.html");
		}
		this.preferEntry = preferEntry;
	}
	module.exports = OccurrenceOrderPlugin;
	OccurrenceOrderPlugin.prototype.apply = function(compiler) {
		var preferEntry = this.preferEntry;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-module-order", function(modules) {
				function entryChunks(m) {
					return m.chunks.filter(function(c) {
						return c.initial;
					}).length;
				}

				function occursInEntry(m) {
					return m.reasons.map(function(r) {
						if(!r.module) return 0;
						return entryChunks(r.module);
					}).reduce(function(a, b) {
						return a + b;
					}, 0) + entryChunks(m);
				}

				function occurs(m) {
					return m.reasons.map(function(r) {
						if(!r.module) return 0;
						return r.module.chunks.length;
					}).reduce(function(a, b) {
						return a + b;
					}, 0) + m.chunks.length;
				}
				modules.sort(function(a, b) {
					if(preferEntry) {
						var aEntryOccurs = occursInEntry(a);
						var bEntryOccurs = occursInEntry(b);
						if(aEntryOccurs > bEntryOccurs) return -1;
						if(aEntryOccurs < bEntryOccurs) return 1;
					}
					var aOccurs = occurs(a);
					var bOccurs = occurs(b);
					if(aOccurs > bOccurs) return -1;
					if(aOccurs < bOccurs) return 1;
					if(a.identifier() > b.identifier()) return 1;
					if(a.identifier() < b.identifier()) return -1;
					return 0;
				});
			});
			compilation.plugin("optimize-chunk-order", function(chunks) {
				function occursInEntry(c) {
					return c.parents.filter(function(p) {
						return p.initial;
					}).length + (c.entry ? 1 : 0);
				}

				function occurs(c) {
					return c.blocks.length + (c.entry ? 1 : 0);
				}
				chunks.forEach(function(c) {
					c.modules.sort(function(a, b) {
						if(a.identifier() > b.identifier()) return 1;
						if(a.identifier() < b.identifier()) return -1;
						return 0;
					});
				});
				chunks.sort(function(a, b) {
					var aEntryOccurs = occursInEntry(a);
					var bEntryOccurs = occursInEntry(b);
					if(aEntryOccurs > bEntryOccurs) return -1;
					if(aEntryOccurs < bEntryOccurs) return 1;
					var aOccurs = occurs(a);
					var bOccurs = occurs(b);
					if(aOccurs > bOccurs) return -1;
					if(aOccurs < bOccurs) return 1;
					if(a.modules.length > b.modules.length) return -1;
					if(a.modules.length < b.modules.length) return 1;
					for(var i = 0; i < a.modules.length; i++) {
						if(a.modules[i].identifier() > b.modules[i].identifier()) return -1;
						if(a.modules[i].identifier() < b.modules[i].identifier()) return 1;
					}
					return 0;
				});
			});
		});
	};


/***/ },
/* 378 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MinChunkSizePlugin(options) {
		if(typeof options !== "object" || Array.isArray(options)) {
			throw new Error("Argument should be an options object.\nFor more info on options, see https://webpack.github.io/docs/list-of-plugins.html");
		}
		this.options = options;
	}
	module.exports = MinChunkSizePlugin;

	MinChunkSizePlugin.prototype.apply = function(compiler) {
		var options = this.options;
		var minChunkSize = options.minChunkSize;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunks", function(chunks) {

				var combinations = [];
				chunks.forEach(function(a, idx) {
					for(var i = 0; i < idx; i++) {
						var b = chunks[i];
						combinations.push([b, a]);
					}
				});

				var equalOptions = {
					chunkOverhead: 1,
					entryChunkMultiplicator: 1
				};
				combinations = combinations.filter(function(pair) {
					return pair[0].size(equalOptions) < minChunkSize || pair[1].size(equalOptions) < minChunkSize;
				});

				combinations.forEach(function(pair) {
					var a = pair[0].size(options);
					var b = pair[1].size(options);
					var ab = pair[0].integratedSize(pair[1], options);
					pair.unshift(a + b - ab, ab);
				});

				combinations = combinations.filter(function(pair) {
					return pair[1] !== false;
				});

				if(combinations.length === 0) return;

				combinations.sort(function(a, b) {
					var diff = b[0] - a[0];
					if(diff !== 0) return diff;
					return a[1] - b[1];
				});

				var pair = combinations[0];

				pair[2].integrate(pair[3], "min-size");
				chunks.splice(chunks.indexOf(pair[3]), 1);
				this.restartApplyPlugins();
			});
		});
	};


/***/ },
/* 379 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LimitChunkCountPlugin(options) {
		if(options !== undefined && typeof options !== "object" || Array.isArray(options)) {
			throw new Error("Argument should be an options object.\nFor more info on options, see https://webpack.github.io/docs/list-of-plugins.html");
		}
		this.options = options || {};
	}
	module.exports = LimitChunkCountPlugin;

	LimitChunkCountPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunks", function(chunks) {
				var maxChunks = options.maxChunks;
				if(!maxChunks) return;
				if(maxChunks < 1) return;
				if(chunks.length <= maxChunks) return;

				if(chunks.length > maxChunks) {
					var combinations = [];
					chunks.forEach(function(a, idx) {
						for(var i = 0; i < idx; i++) {
							var b = chunks[i];
							combinations.push([b, a]);
						}
					});

					combinations.forEach(function(pair) {
						var a = pair[0].size(options);
						var b = pair[1].size(options);
						var ab = pair[0].integratedSize(pair[1], options);
						pair.unshift(a + b - ab, ab);
					});
					combinations = combinations.filter(function(pair) {
						return pair[1] !== false;
					});
					combinations.sort(function(a, b) {
						var diff = b[0] - a[0];
						if(diff !== 0) return diff;
						return a[1] - b[1];
					});

					var pair = combinations[0];

					if(pair && pair[2].integrate(pair[3], "limit")) {
						chunks.splice(chunks.indexOf(pair[3]), 1);
						this.restartApplyPlugins();
					}
				}
			});
		});
	};


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceMapConsumer = __webpack_require__(381).SourceMapConsumer;
	var SourceMapSource = __webpack_require__(116);
	var RawSource = __webpack_require__(69);
	var RequestShortener = __webpack_require__(75);
	var ModuleFilenameHelpers = __webpack_require__(138);
	var uglify = __webpack_require__(382);

	function UglifyJsPlugin(options) {
		if(typeof options !== "object") options = {};
		if(typeof options.compressor !== "undefined") {
			options.compress = options.compressor;
		}
		this.options = options;
	}
	module.exports = UglifyJsPlugin;

	UglifyJsPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		options.test = options.test || /\.js($|\?)/i;

		var requestShortener = new RequestShortener(compiler.context);
		compiler.plugin("compilation", function(compilation) {
			if(options.sourceMap !== false) {
				compilation.plugin("build-module", function(module) {
					// to get detailed location info about errors
					module.useSourceMap = true;
				});
			}
			compilation.plugin("optimize-chunk-assets", function(chunks, callback) {
				var files = [];
				chunks.forEach(function(chunk) {
					chunk.files.forEach(function(file) {
						files.push(file);
					});
				});
				compilation.additionalChunkAssets.forEach(function(file) {
					files.push(file);
				});
				files = files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options));
				files.forEach(function(file) {
					var oldWarnFunction = uglify.AST_Node.warn_function;
					var warnings = [];
					try {
						var asset = compilation.assets[file];
						if(asset.__UglifyJsPlugin) {
							compilation.assets[file] = asset.__UglifyJsPlugin;
							return;
						}
						if(options.sourceMap !== false) {
							if(asset.sourceAndMap) {
								var sourceAndMap = asset.sourceAndMap();
								var inputSourceMap = sourceAndMap.map;
								var input = sourceAndMap.source;
							} else {
								var inputSourceMap = asset.map();
								var input = asset.source();
							}
							var sourceMap = new SourceMapConsumer(inputSourceMap);
							uglify.AST_Node.warn_function = function(warning) { // eslint-disable-line camelcase
								var match = /\[.+:([0-9]+),([0-9]+)\]/.exec(warning);
								var line = +match[1];
								var column = +match[2];
								var original = sourceMap.originalPositionFor({
									line: line,
									column: column
								});
								if(!original || !original.source || original.source === file) return;
								warnings.push(warning.replace(/\[.+:([0-9]+),([0-9]+)\]/, "") +
									"[" + requestShortener.shorten(original.source) + ":" + original.line + "," + original.column + "]");
							};
						} else {
							var input = asset.source();
							uglify.AST_Node.warn_function = function(warning) { // eslint-disable-line camelcase
								warnings.push(warning);
							};
						}
						uglify.base54.reset();
						var ast = uglify.parse(input, {
							filename: file
						});
						if(options.compress !== false) {
							ast.figure_out_scope();
							var compress = uglify.Compressor(options.compress); // eslint-disable-line new-cap
							ast = ast.transform(compress);
						}
						if(options.mangle !== false) {
							ast.figure_out_scope();
							ast.compute_char_frequency(options.mangle || {});
							ast.mangle_names(options.mangle || {});
						}
						var output = {};
						output.comments = Object.prototype.hasOwnProperty.call(options, "comments") ? options.comments : /^\**!|@preserve|@license/;
						output.beautify = options.beautify;
						for(var k in options.output) {
							output[k] = options.output[k];
						}
						if(options.sourceMap !== false) {
							var map = uglify.SourceMap({ // eslint-disable-line new-cap
								file: file,
								root: ""
							});
							output.source_map = map; // eslint-disable-line camelcase
						}
						var stream = uglify.OutputStream(output); // eslint-disable-line new-cap
						ast.print(stream);
						if(map) map = map + "";
						stream = stream + "";
						asset.__UglifyJsPlugin = compilation.assets[file] = (map ?
							new SourceMapSource(stream, file, JSON.parse(map), input, inputSourceMap) :
							new RawSource(stream));
						if(warnings.length > 0) {
							compilation.warnings.push(new Error(file + " from UglifyJs\n" + warnings.join("\n")));
						}
					} catch(err) {
						if(err.line) {
							var original = sourceMap && sourceMap.originalPositionFor({
								line: err.line,
								column: err.col
							});
							if(original && original.source) {
								compilation.errors.push(new Error(file + " from UglifyJs\n" + err.message + " [" + requestShortener.shorten(original.source) + ":" + original.line + "," + original.column + "]"));
							} else {
								compilation.errors.push(new Error(file + " from UglifyJs\n" + err.message + " [" + file + ":" + err.line + "," + err.col + "]"));
							}
						} else if(err.msg) {
							compilation.errors.push(new Error(file + " from UglifyJs\n" + err.msg));
						} else
							compilation.errors.push(new Error(file + " from UglifyJs\n" + err.stack));
					} finally {
						uglify.AST_Node.warn_function = oldWarnFunction; // eslint-disable-line camelcase
					}
				});
				callback();
			});
			compilation.plugin("normal-module-loader", function(context) {
				context.minimize = true;
			});
		});
	};


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = __webpack_require__(49);

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __filename, global, __dirname) {// workaround for tty output truncation upon process.exit()
	[process.stdout, process.stderr].forEach(function(stream){
	    if (stream._handle && stream._handle.setBlocking)
	        stream._handle.setBlocking(true);
	});

	var path = __webpack_require__(36);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var FILES = exports.FILES = [
	    "../lib/utils.js",
	    "../lib/ast.js",
	    "../lib/parse.js",
	    "../lib/transform.js",
	    "../lib/scope.js",
	    "../lib/output.js",
	    "../lib/compress.js",
	    "../lib/sourcemap.js",
	    "../lib/mozilla-ast.js",
	    "../lib/propmangle.js",
	    "./exports.js",
	].map(function(file){
	    return fs.realpathSync(path.join(path.dirname(__filename), file));
	});

	var UglifyJS = exports;

	new Function("MOZ_SourceMap", "exports", "DEBUG", FILES.map(function(file){
	    return fs.readFileSync(file, "utf8");
	}).join("\n\n"))(
	    __webpack_require__(383),
	    UglifyJS,
	    !!global.UGLIFY_DEBUG
	);

	UglifyJS.AST_Node.warn_function = function(txt) {
	    console.error("WARN: %s", txt);
	};

	exports.minify = function(files, options) {
	    options = UglifyJS.defaults(options, {
	        spidermonkey     : false,
	        outSourceMap     : null,
	        sourceRoot       : null,
	        inSourceMap      : null,
	        fromString       : false,
	        warnings         : false,
	        mangle           : {},
	        mangleProperties : false,
	        nameCache        : null,
	        output           : null,
	        compress         : {},
	        parse            : {}
	    });
	    UglifyJS.base54.reset();

	    // 1. parse
	    var toplevel = null,
	        sourcesContent = {};

	    if (options.spidermonkey) {
	        toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);
	    } else {
	        if (typeof files == "string")
	            files = [ files ];
	        files.forEach(function(file, i){
	            var code = options.fromString
	                ? file
	                : fs.readFileSync(file, "utf8");
	            sourcesContent[file] = code;
	            toplevel = UglifyJS.parse(code, {
	                filename: options.fromString ? i : file,
	                toplevel: toplevel,
	                bare_returns: options.parse ? options.parse.bare_returns : undefined
	            });
	        });
	    }
	    if (options.wrap) {
	      toplevel = toplevel.wrap_commonjs(options.wrap, options.exportAll);
	    }

	    // 2. compress
	    if (options.compress) {
	        var compress = { warnings: options.warnings };
	        UglifyJS.merge(compress, options.compress);
	        toplevel.figure_out_scope();
	        var sq = UglifyJS.Compressor(compress);
	        toplevel = sq.compress(toplevel);
	    }

	    // 3. mangle properties
	    if (options.mangleProperties || options.nameCache) {
	        options.mangleProperties.cache = UglifyJS.readNameCache(options.nameCache, "props");
	        toplevel = UglifyJS.mangle_properties(toplevel, options.mangleProperties);
	        UglifyJS.writeNameCache(options.nameCache, "props", options.mangleProperties.cache);
	    }

	    // 4. mangle
	    if (options.mangle) {
	        toplevel.figure_out_scope(options.mangle);
	        toplevel.compute_char_frequency(options.mangle);
	        toplevel.mangle_names(options.mangle);
	    }

	    // 5. output
	    var inMap = options.inSourceMap;
	    var output = {};
	    if (typeof options.inSourceMap == "string") {
	        inMap = fs.readFileSync(options.inSourceMap, "utf8");
	    }
	    if (options.outSourceMap) {
	        output.source_map = UglifyJS.SourceMap({
	            file: options.outSourceMap,
	            orig: inMap,
	            root: options.sourceRoot
	        });
	        if (options.sourceMapIncludeSources) {
	            for (var file in sourcesContent) {
	                if (sourcesContent.hasOwnProperty(file)) {
	                    output.source_map.get().setSourceContent(file, sourcesContent[file]);
	                }
	            }
	        }

	    }
	    if (options.output) {
	        UglifyJS.merge(output, options.output);
	    }
	    var stream = UglifyJS.OutputStream(output);
	    toplevel.print(stream);

	    if (options.outSourceMap && "string" === typeof options.outSourceMap) {
	        stream += "\n//# sourceMappingURL=" + options.outSourceMap;
	    }

	    var source_map = output.source_map;
	    if (source_map) {
	        source_map = source_map + "";
	    }

	    return {
	        code : stream + "",
	        map  : source_map
	    };
	};

	// exports.describe_ast = function() {
	//     function doitem(ctor) {
	//         var sub = {};
	//         ctor.SUBCLASSES.forEach(function(ctor){
	//             sub[ctor.TYPE] = doitem(ctor);
	//         });
	//         var ret = {};
	//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;
	//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;
	//         return ret;
	//     }
	//     return doitem(UglifyJS.AST_Node).sub;
	// }

	exports.describe_ast = function() {
	    var out = UglifyJS.OutputStream({ beautify: true });
	    function doitem(ctor) {
	        out.print("AST_" + ctor.TYPE);
	        var props = ctor.SELF_PROPS.filter(function(prop){
	            return !/^\$/.test(prop);
	        });
	        if (props.length > 0) {
	            out.space();
	            out.with_parens(function(){
	                props.forEach(function(prop, i){
	                    if (i) out.space();
	                    out.print(prop);
	                });
	            });
	        }
	        if (ctor.documentation) {
	            out.space();
	            out.print_string(ctor.documentation);
	        }
	        if (ctor.SUBCLASSES.length > 0) {
	            out.space();
	            out.with_block(function(){
	                ctor.SUBCLASSES.forEach(function(ctor, i){
	                    out.indent();
	                    doitem(ctor);
	                    out.newline();
	                });
	            });
	        }
	    };
	    doitem(UglifyJS.AST_Node);
	    return out + "";
	};

	function readReservedFile(filename, reserved) {
	    if (!reserved) {
	        reserved = { vars: [], props: [] };
	    }
	    var data = fs.readFileSync(filename, "utf8");
	    data = JSON.parse(data);
	    if (data.vars) {
	        data.vars.forEach(function(name){
	            UglifyJS.push_uniq(reserved.vars, name);
	        });
	    }
	    if (data.props) {
	        data.props.forEach(function(name){
	            UglifyJS.push_uniq(reserved.props, name);
	        });
	    }
	    return reserved;
	}

	exports.readReservedFile = readReservedFile;

	exports.readDefaultReservedFile = function(reserved) {
	    return readReservedFile(path.join(__dirname, "domprops.json"), reserved);
	};

	exports.readNameCache = function(filename, key) {
	    var cache = null;
	    if (filename) {
	        try {
	            var cache = fs.readFileSync(filename, "utf8");
	            cache = JSON.parse(cache)[key];
	            if (!cache) throw "init";
	            cache.props = UglifyJS.Dictionary.fromObject(cache.props);
	        } catch(ex) {
	            cache = {
	                cname: -1,
	                props: new UglifyJS.Dictionary()
	            };
	        }
	    }
	    return cache;
	};

	exports.writeNameCache = function(filename, key, cache) {
	    if (filename) {
	        var data;
	        try {
	            data = fs.readFileSync(filename, "utf8");
	            data = JSON.parse(data);
	        } catch(ex) {
	            data = {};
	        }
	        data[key] = {
	            cname: cache.cname,
	            props: cache.props.toObject()
	        };
	        fs.writeFileSync(filename, JSON.stringify(data, null, 2), "utf8");
	    }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), "/index.js", (function() { return this; }()), "/"))

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(384).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(390).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(393).SourceNode;


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var base64VLQ = __webpack_require__(385);
	var util = __webpack_require__(387);
	var ArraySet = __webpack_require__(388).ArraySet;
	var MappingList = __webpack_require__(389).MappingList;

	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util.getArg(aArgs, 'file', null);
	  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}

	SourceMapGenerator.prototype._version = 3;

	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };

	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util.relative(sourceRoot, newMapping.source);
	        }

	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };

	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }

	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };

	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util.getArg(aArgs, 'generated');
	    var original = util.getArg(aArgs, 'original', null);
	    var source = util.getArg(aArgs, 'source', null);
	    var name = util.getArg(aArgs, 'name', null);

	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }

	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }

	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }

	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };

	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util.relative(this._sourceRoot, source);
	    }

	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };

	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet();
	    var newNames = new ArraySet();

	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util.join(aSourceMapPath, mapping.source)
	          }
	          if (sourceRoot != null) {
	            mapping.source = util.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }

	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }

	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }

	    }, this);
	    this._sources = newSources;
	    this._names = newNames;

	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };

	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    // When aOriginal is truthy but has empty values for .line and .column,
	    // it is most likely a programmer error. In this case we throw a very
	    // specific error message to try to guide them the right way.
	    // For example: https://github.com/Polymer/polymer-bundler/pull/519
	    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
	        throw new Error(
	            'original.line and original.column are not numbers -- you probably meant to omit ' +
	            'the original mapping entirely and only map the generated position. If so, pass ' +
	            'null for the original mapping instead of an object with empty or null values.'
	        );
	    }

	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };

	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;

	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = ''

	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }

	      next += base64VLQ.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;

	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;

	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;

	        next += base64VLQ.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;

	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }

	      result += next;
	    }

	    return result;
	  };

	SourceMapGenerator.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util.relative(aSourceRoot, source);
	      }
	      var key = util.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };

	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }

	    return map;
	  };

	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };

	exports.SourceMapGenerator = SourceMapGenerator;


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var base64 = __webpack_require__(386);

	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011

	var VLQ_BASE_SHIFT = 5;

	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;

	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;

	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}

	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}

	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	exports.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;

	  var vlq = toVLQSigned(aValue);

	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);

	  return encoded;
	};

	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;

	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }

	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }

	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);

	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};


/***/ },
/* 386 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	exports.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};

	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	exports.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'

	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'

	  var zero = 48;     // '0'
	  var nine = 57;     // '9'

	  var plus = 43;     // '+'
	  var slash = 47;    // '/'

	  var littleOffset = 26;
	  var numberOffset = 52;

	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }

	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }

	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }

	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }

	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }

	  // Invalid base64 digit.
	  return -1;
	};


/***/ },
/* 387 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;

	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;

	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;

	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;

	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);

	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');

	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }

	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;

	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }

	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }

	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }

	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }

	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;

	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	};

	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }

	  aRoot = aRoot.replace(/\/$/, '');

	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }

	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }

	    ++level;
	  }

	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;

	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());

	function identity (s) {
	  return s;
	}

	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }

	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;

	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }

	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;

	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }

	  var length = s.length;

	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }

	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }

	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return mappingA.name - mappingB.name;
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;

	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }

	  cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return mappingA.name - mappingB.name;
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }

	  if (aStr1 > aStr2) {
	    return 1;
	  }

	  return -1;
	}

	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }

	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util = __webpack_require__(387);
	var has = Object.prototype.hasOwnProperty;
	var hasNativeMap = typeof Map !== "undefined";

	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet() {
	  this._array = [];
	  this._set = hasNativeMap ? new Map() : Object.create(null);
	}

	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};

	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet.prototype.size = function ArraySet_size() {
	  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
	};

	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
	  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    if (hasNativeMap) {
	      this._set.set(aStr, idx);
	    } else {
	      this._set[sStr] = idx;
	    }
	  }
	};

	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.has = function ArraySet_has(aStr) {
	  if (hasNativeMap) {
	    return this._set.has(aStr);
	  } else {
	    var sStr = util.toSetString(aStr);
	    return has.call(this._set, sStr);
	  }
	};

	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  if (hasNativeMap) {
	    var idx = this._set.get(aStr);
	    if (idx >= 0) {
	        return idx;
	    }
	  } else {
	    var sStr = util.toSetString(aStr);
	    if (has.call(this._set, sStr)) {
	      return this._set[sStr];
	    }
	  }

	  throw new Error('"' + aStr + '" is not in the set.');
	};

	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};

	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};

	exports.ArraySet = ArraySet;


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util = __webpack_require__(387);

	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}

	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}

	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };

	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};

	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};

	exports.MappingList = MappingList;


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var util = __webpack_require__(387);
	var binarySearch = __webpack_require__(391);
	var ArraySet = __webpack_require__(388).ArraySet;
	var base64VLQ = __webpack_require__(385);
	var quickSort = __webpack_require__(392).quickSort;

	function SourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap)
	    : new BasicSourceMapConsumer(sourceMap);
	}

	SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	}

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer.prototype._version = 3;

	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.

	SourceMapConsumer.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__generatedMappings;
	  }
	});

	SourceMapConsumer.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }

	    return this.__originalMappings;
	  }
	});

	SourceMapConsumer.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };

	SourceMapConsumer.GENERATED_ORDER = 1;
	SourceMapConsumer.ORIGINAL_ORDER = 2;

	SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer.LEAST_UPPER_BOUND = 2;

	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	    var mappings;
	    switch (order) {
	    case SourceMapConsumer.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }

	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      if (source != null && sourceRoot != null) {
	        source = util.join(sourceRoot, source);
	      }
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };

	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: Optional. the column number in the original source.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	SourceMapConsumer.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util.getArg(aArgs, 'line');

	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util.getArg(aArgs, 'column', 0)
	    };

	    if (this.sourceRoot != null) {
	      needle.source = util.relative(this.sourceRoot, needle.source);
	    }
	    if (!this._sources.has(needle.source)) {
	      return [];
	    }
	    needle.source = this._sources.indexOf(needle.source);

	    var mappings = [];

	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;

	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[++index];
	        }
	      }
	    }

	    return mappings;
	  };

	exports.SourceMapConsumer = SourceMapConsumer;

	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The only parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  var version = util.getArg(sourceMap, 'version');
	  var sources = util.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util.getArg(sourceMap, 'names', []);
	  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util.getArg(sourceMap, 'mappings');
	  var file = util.getArg(sourceMap, 'file', null);

	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	        ? util.relative(sourceRoot, source)
	        : source;
	    });

	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);

	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this.file = file;
	}

	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);

	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;

	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.

	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];

	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;

	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;

	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }

	        destOriginalMappings.push(destMapping);
	      }

	      destGeneratedMappings.push(destMapping);
	    }

	    quickSort(smc.__originalMappings, util.compareByOriginalPositions);

	    return smc;
	  };

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._sources.toArray().map(function (s) {
	      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	    }, this);
	  }
	});

	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;

	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;

	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);

	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }

	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }

	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }

	          cachedSegments[str] = segment;
	        }

	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];

	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;

	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;

	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }

	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }

	    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;

	    quickSort(originalMappings, util.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };

	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.

	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }

	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };

	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];

	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];

	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }

	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util.compareByGeneratedPositionsDeflated,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];

	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          if (this.sourceRoot != null) {
	            source = util.join(this.sourceRoot, source);
	          }
	        }
	        var name = util.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util.getArg(mapping, 'originalLine', null),
	          column: util.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }

	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }

	    if (this.sourceRoot != null) {
	      aSource = util.relative(this.sourceRoot, aSource);
	    }

	    if (this._sources.has(aSource)) {
	      return this.sourcesContent[this._sources.indexOf(aSource)];
	    }

	    var url;
	    if (this.sourceRoot != null
	        && (url = util.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }

	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + aSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	      }
	    }

	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util.getArg(aArgs, 'source');
	    if (this.sourceRoot != null) {
	      source = util.relative(this.sourceRoot, source);
	    }
	    if (!this._sources.has(source)) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    source = this._sources.indexOf(source);

	    var needle = {
	      source: source,
	      originalLine: util.getArg(aArgs, 'line'),
	      originalColumn: util.getArg(aArgs, 'column')
	    };

	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util.compareByOriginalPositions,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );

	    if (index >= 0) {
	      var mapping = this._originalMappings[index];

	      if (mapping.source === needle.source) {
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }

	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };

	exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The only parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }

	  var version = util.getArg(sourceMap, 'version');
	  var sections = util.getArg(sourceMap, 'sections');

	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }

	  this._sources = new ArraySet();
	  this._names = new ArraySet();

	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util.getArg(s, 'offset');
	    var offsetLine = util.getArg(offset, 'line');
	    var offsetColumn = util.getArg(offset, 'column');

	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;

	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	    }
	  });
	}

	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer.prototype._version = 3;

	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});

	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };

	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }

	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];

	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }

	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };

	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };

	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };

	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];

	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }

	    return {
	      line: null,
	      column: null
	    };
	  };

	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];

	        var source = section.consumer._sources.at(mapping.source);
	        if (section.consumer.sourceRoot !== null) {
	          source = util.join(section.consumer.sourceRoot, source);
	        }
	        this._sources.add(source);
	        source = this._sources.indexOf(source);

	        var name = section.consumer._names.at(mapping.name);
	        this._names.add(name);
	        name = this._names.indexOf(name);

	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };

	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }

	    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util.compareByOriginalPositions);
	  };

	exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ },
/* 391 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;

	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }

	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}

	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }

	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }

	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }

	  return index;
	};


/***/ },
/* 392 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.

	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}

	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}

	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.

	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.

	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;

	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];

	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }

	    swap(ary, i + 1, j);
	    var q = i + 1;

	    // (2) Recurse on each half.

	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}

	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	exports.quickSort = function (ary, comparator) {
	  doQuickSort(ary, comparator, 0, ary.length - 1);
	};


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */

	var SourceMapGenerator = __webpack_require__(384).SourceMapGenerator;
	var util = __webpack_require__(387);

	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE = /(\r?\n)/;

	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE = 10;

	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode = "$$$isSourceNode$$$";

	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}

	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode();

	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are accessed by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var remainingLinesIndex = 0;
	    var shiftNextLine = function() {
	      var lineContents = getNextLine();
	      // The last line of a file might not have a newline.
	      var newLine = getNextLine() || "";
	      return lineContents + newLine;

	      function getNextLine() {
	        return remainingLinesIndex < remainingLines.length ?
	            remainingLines[remainingLinesIndex++] : undefined;
	      }
	    };

	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;

	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[remainingLinesIndex];
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[remainingLinesIndex];
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLinesIndex < remainingLines.length) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.splice(remainingLinesIndex).join(""));
	    }

	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });

	    return node;

	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };

	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};

	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};

	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};

	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};

	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	  };

	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }

	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };

	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};

	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });

	  return { code: generated.code, map: map };
	};

	exports.SourceNode = SourceNode;


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(39);

	function CachePlugin(cache) {
		this.cache = cache || {};
	}
	module.exports = CachePlugin;

	CachePlugin.prototype.apply = function(compiler) {
		if(Array.isArray(compiler.compilers)) {
			compiler.compilers.forEach(function(c, idx) {
				c.apply(new CachePlugin(this.cache[idx] = this.cache[idx] || {}));
			}, this);
		} else {
			compiler.plugin("compilation", function(compilation) {
				compilation.cache = this.cache;
			}.bind(this));
			compiler.plugin("run", function(compiler, callback) {
				if(!compiler._lastCompilationFileDependencies) return callback();
				var fs = compiler.inputFileSystem;
				var fileTs = compiler.fileTimestamps = {};
				async.forEach(compiler._lastCompilationFileDependencies, function(file, callback) {
					fs.stat(file, function(err, stat) {
						if(err) {
							if(err.code === "ENOENT") return callback();
							return callback(err);
						}

						fileTs[file] = stat.mtime || Infinity;
						callback();
					});
				}, callback);
			});
			compiler.plugin("after-compile", function(compilation, callback) {
				compilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;
				compilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;
				callback();
			});
		}
	};


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleParserHelpers = __webpack_require__(158);
	var ConstDependency = __webpack_require__(152);

	var NullFactory = __webpack_require__(154);

	function ProvidePlugin(definitions) {
		this.definitions = definitions;
	}
	module.exports = ProvidePlugin;
	ProvidePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		Object.keys(this.definitions).forEach(function(name) {
			var request = this.definitions[name];
			var splittedName = name.split(".");
			if(splittedName.length > 0) {
				splittedName.slice(1).forEach(function(_, i) {
					var name = splittedName.slice(0, i + 1).join(".");
					compiler.parser.plugin("can-rename " + name, function() {
						return true;
					});
				});
			}
			compiler.parser.plugin("expression " + name, function(expr) {
				var nameIdentifier = name;
				var scopedName = name.indexOf(".") >= 0;
				if(scopedName) {
					nameIdentifier = "__webpack_provided_" + name.replace(/\./g, "_dot_");
				}
				if(!ModuleParserHelpers.addParsedVariable(this, nameIdentifier, "require(" + JSON.stringify(request) + ")")) {
					return false;
				}
				if(scopedName) {
					nameIdentifier = "__webpack_provided_" + name.replace(/\./g, "_dot_");
					var dep = new ConstDependency(nameIdentifier, expr.range);
					dep.loc = expr.loc;
					this.state.current.addDependency(dep);
				}
				return true;
			});
		}, this);
	};


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var OptionsDefaulter = __webpack_require__(397);

	function WebpackOptionsDefaulter() {
		OptionsDefaulter.call(this);
		this.set("debug", false);
		this.set("devtool", false);
		this.set("cache", true);

		this.set("context", process.cwd());
		this.set("target", "web");
		this.set("output", {});
		this.set("node", {});
		this.set("resolve", {});
		this.set("resolveLoader", {});

		this.set("module.unknownContextRequest", ".");
		this.set("module.unknownContextRecursive", true);
		this.set("module.unknownContextRegExp", /^\.\/.*$/);
		this.set("module.unknownContextCritical", true);
		this.set("module.exprContextRequest", ".");
		this.set("module.exprContextRegExp", /^\.\/.*$/);
		this.set("module.exprContextRecursive", true);
		this.set("module.exprContextCritical", true);
		this.set("module.wrappedContextRegExp", /.*/);
		this.set("module.wrappedContextRecursive", true);
		this.set("module.wrappedContextCritical", false);

		this.set("output.libraryTarget", "var");
		this.set("output.path", "");
		this.set("output.sourceMapFilename", "[file].map[query]");
		this.set("output.hotUpdateChunkFilename", "[id].[hash].hot-update.js");
		this.set("output.hotUpdateMainFilename", "[hash].hot-update.json");
		this.set("output.crossOriginLoading", false);
		this.set("output.hashFunction", "md5");
		this.set("output.hashDigest", "hex");
		this.set("output.hashDigestLength", 20);
		this.set("output.sourcePrefix", "\t");
		this.set("output.devtoolLineToLine", false);

		this.set("node.console", false);
		this.set("node.process", true);
		this.set("node.global", true);
		// TODO: add this in next major version
		// this.set("node.Buffer", true);
		this.set("node.setImmediate", true);
		this.set("node.__filename", "mock");
		this.set("node.__dirname", "mock");

		this.set("resolve.fastUnsafe", []);
		this.set("resolveLoader.fastUnsafe", []);

		this.set("resolve.alias", {});
		this.set("resolveLoader.alias", {});

		this.set("optimize.occurenceOrderPreferEntry", true);
	}
	module.exports = WebpackOptionsDefaulter;

	WebpackOptionsDefaulter.prototype = Object.create(OptionsDefaulter.prototype);

	WebpackOptionsDefaulter.prototype.constructor = WebpackOptionsDefaulter;

	WebpackOptionsDefaulter.prototype.process = function(options) {
		OptionsDefaulter.prototype.process.call(this, options);

		if(options.resolve.packageAlias === undefined) {
			if(options.target === "web" || options.target === "webworker")
				options.resolve.packageAlias = "browser";
		}

		function defaultByTarget(value, web, webworker, node, nodeWebkit, def) {
			if(value !== undefined) return value;
			switch(options.target) {
				case "web":
					return web;
				case "webworker":
					return webworker;
				case "node":
				case "async-node":
					return node;
				case "node-webkit":
					return nodeWebkit;
				default:
					return def;
			}
		}

		options.resolve.modulesDirectories = defaultByTarget(options.resolve.modulesDirectories, ["web_modules", "node_modules"], ["webworker_modules", "web_modules", "node_modules"], ["node_modules"], ["node_modules", "web_modules"], ["node_modules"]);

		options.resolveLoader.modulesDirectories = defaultByTarget(options.resolveLoader.modulesDirectories, ["web_loaders", "web_modules", "node_loaders", "node_modules"], ["webworker_loaders", "web_loaders", "web_modules", "node_loaders", "node_modules"], ["node_loaders", "node_modules"], ["node_loaders", "web_loaders", "node_modules", "web_modules"], ["node_modules"]);

		options.resolve.packageMains = defaultByTarget(options.resolve.packageMains, ["webpack", "browser", "web", "browserify", ["jam", "main"], "main"], ["webpackWorker", "webworker", "webpack", "browser", "web", "browserify", ["jam", "main"], "main"], ["webpackNode", "node", "main"], ["webpackNodeWebkit", "webpackNode", "node", "main", "web"], ["main"]);

		options.resolve.packageAlias = defaultByTarget(options.resolve.packageAlias,
			"browser",
			"browser",
			false,
			"node-webkit",
			false);

		options.resolveLoader.packageMains = defaultByTarget(options.resolveLoader.packageMains, ["webpackLoader", "webLoader", "loader", "main"], ["webpackWorkerLoader", "webworkerLoader", "webLoader", "loader", "main"], ["webpackNodeLoader", "nodeLoader", "loader", "main"], ["webpackNodeWebkitLoader", "webpackNodeLoader", "nodeLoader", "loader", "webLoader", "main"], ["loader", "main"]);

		options.resolve.extensions = defaultByTarget(options.resolve.extensions, ["", ".webpack.js", ".web.js", ".js", ".json"], ["", ".webpack-worker.js", ".webworker.js", ".web.js", ".js", ".json"], ["", ".webpack-node.js", ".js", ".json", ".node"], ["", ".webpack-node-webkit.js", ".webpack-node.js", ".js", ".json", ".node", ".web.js"], ["", ".js", ".json"]);

		options.resolveLoader.extensions = defaultByTarget(options.resolveLoader.extensions, ["", ".webpack-loader.js", ".web-loader.js", ".loader.js", ".js"], ["", ".webpack-worker-loader.js", ".webpack-loader.js", ".webworker-loader.js", ".web-loader.js", ".loader.js", ".js"], ["", ".webpack-node-loader.js", ".loader.js", ".js"], ["", ".webpack-node-webkit-loader.js", ".webpack-node-loader.js", ".loader.js", ".web-loader.js", ".js"], ["", ".js"]);

		options.resolveLoader.moduleTemplates = defaultByTarget(options.resolveLoader.moduleTemplates, ["*-webpack-loader", "*-web-loader", "*-loader", "*"], ["*-webpack-worker-loader", "*-webworker-loader", "*-web-loader", "*-loader", "*"], ["*-webpack-node-loader", "*-node-loader", "*-loader", "*"], ["*-webpack-node-webkit-loader", "*-webpack-node-loader", "*-node-loader", "*-loader", "*-web-loader", "*"], ["*-loader", "*"]);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 397 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OptionsDefaulter() {
		this.defaults = {};
		this.config = {};
	}
	module.exports = OptionsDefaulter;

	function getProperty(obj, name) {
		name = name.split(".");
		for(var i = 0; i < name.length - 1; i++) {
			obj = obj[name[i]];
			if(typeof obj != "object" || !obj) return;
		}
		return obj[name.pop()];
	}

	function setProperty(obj, name, value) {
		name = name.split(".");
		for(var i = 0; i < name.length - 1; i++) {
			if(typeof (obj[name[i]]) !== "object" || !obj[name[i]]) obj[name[i]] = {};
			obj = obj[name[i]];
		}
		obj[name.pop()] = value;
	}

	function hasProperty(obj, name, value) {
		name = name.split(".");
		for(var i = 0; i < name.length - 1; i++) {
			obj = obj[name[i]];
			if(typeof obj != "object" || !obj) return false;
		}
		return Object.prototype.hasOwnProperty.call(obj, name.pop());
	}

	OptionsDefaulter.prototype.process = function(options) {
		for(var name in this.defaults) {
			switch(this.config[name]) {
			case undefined:
				if(getProperty(options, name) === undefined)
					setProperty(options, name, this.defaults[name]);
				break;
			case "call":
				setProperty(options, name, this.defaults[name].call(this, getProperty(options, name)), options);
				break;
			case "append":
				var oldValue = getProperty(options, name);
				if(!Array.isArray(oldValue)) oldValue = [];
				this.defaults[name].forEach(function(item) {
					oldValue.push(item);
				});
				setProperty(options, name, oldValue);
				break;
			default:
				throw new Error("OptionsDefaulter cannot process " + this.config[name]);
			}
		}
	};

	OptionsDefaulter.prototype.set = function(name, config, def) {
		if(arguments.length === 3) {
			this.defaults[name] = def;
			this.config[name] = config;
		} else {
			this.defaults[name] = config;
			delete this.config[name];
		}
	}

/***/ }
/******/ ]);